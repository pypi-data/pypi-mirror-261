image: python:3.11

# Change pip's cache directory to be inside the project directory since we can
# only cache local items.
variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache"

# Pip's cache doesn't store the python packages
# https://pip.pypa.io/en/stable/reference/pip_install/#caching
#
# If you want to also cache the installed packages, you have to install
# them in a virtualenv and cache it as well.
cache:
  paths:
    - .cache/pip
    - venv/
    - downloads/
    - eggs/

# Set execution order: first run jobs on 'test' stage on parallel
# then run jobs on 'report' stage
stages:
  - test
  - deploy

before_script:
  - export LC_CTYPE=C.UTF-8
  - export LC_ALL=C.UTF-8
  - export LANG=C.UTF-8
  - python3.11 -m venv venv
  - source venv/bin/activate

black:
  stage: test
  before_script:
    - pip install black
  script:
    - black src/ --check --diff
  only:
    - main
    - branches

flake8:
  stage: test
  before_script:
    - pip install flake8
  script:
    - flake8 src/ setup.py
  only:
    - main
    - branches

pyroma:
  stage: test
  before_script:
    - pip install pyroma
  script:
    - pyroma -n 10 -d .
  only:
    - main
    - branches

zpretty:
 stage: test
 before_script:
   - pip install zpretty
 script:
   - find src -name '*.zcml' | xargs zpretty -i
   - git diff --exit-code

test:
  stage: test
  before_script:
    - apt-get update && apt-get install -y --no-install-recommends wkhtmltopdf
    - pip install -r requirements.txt
    - buildout -N -c buildout.cfg
  script:
    - bin/test-coverage
  only:
    - main
    - branches
  coverage: '/TOTAL.+\s(\d{1}|\d{2}|\d{3})%$/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml

build-package:
  stage: deploy
  before_script:
    - python -m pip install --upgrade twine
    - python -m pip install --upgrade build
    # - sed -i -e "s/v-latest/$CI_COMMIT_TAG/" setup.cfg
    # - cat setup.cfg
  variables:
    TWINE_PASSWORD: ${CI_JOB_TOKEN}
    TWINE_USERNAME: gitlab-ci-token
  script:
    - python -m build
    - python -m twine upload --repository-url ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi dist/*
  only:
    - tags
