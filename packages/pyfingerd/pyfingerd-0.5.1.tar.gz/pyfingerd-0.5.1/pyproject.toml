[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "pyfingerd"
version = "0.5.1"
description = "finger (RFC 1288) server-side daemon"
keywords = ["finger", "fingerd", "rfc742", "rfc1288", "79", "tcp/79"]
readme = "README.rst"
homepage = "https://pyfingerd.org/"
repository = "https://gitlab.com/pyfingerd/pyfingerd"
authors = ["Thomas Touhey <thomas@touhey.fr>"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Intended Audience :: System Administrators",
    "Natural Language :: English",
    "Topic :: Internet :: Finger",
    "Topic :: Utilities",
]

[tool.poetry.dependencies]
python = "^3.11"
click = "^8.1.6"
coloredlogs = "^15.0.1"
croniter = "^1.4.1"
pydantic = "^2.1.1"
pyutmpx = "^0.4.1"
toml = "^0.10.2"

[tool.poetry.group.dev.dependencies]
pre-commit = "^3.3.3"
pytest = "*"
pytest-cov = "^4.0.0"
sphinx-autobuild = "^2021.3.14"
pytest-asyncio = "^0.23.5"

[tool.poetry.group.docs.dependencies]
furo = "^2023.7.26"
sphinx = "^7.1.2"
sphinxcontrib-mermaid = "^0.9.2"
toml = "^0.10.2"

[tool.poetry.scripts]
pyfingerd = "pyfingerd.cli:cli"

[tool.black]
target_version = ['py311']
line-length = 79

[tool.commitizen]
name = "cz_conventional_commits"
tag_format = "$version"
update_changelog_on_bump = true
version = "0.1.4"
version_files = [
    "pyproject.toml:version",
]

[tool.coverage.report]
exclude_lines = [
    "@abstractmethod",
    "@_abstractmethod",
    "pragma: no cover"
]

[tool.flake8]
application-import-names = "pyfingerd"
ignore = [
    "ANN002", # No type annotations for *args
    "ANN003", # No type annotations for **kwargs
    "ANN101", # No type annotations for self in method
    "ANN102", # No type annotations for cls in classmethod
    "ANN204", # No return type for special method
    "ANN401", # We allow typing.Any in certain annoying cases
    "D105",   # No need for docstrings in magic __methods__
    "D107",   # No need for docstrings in __init__
    "E203",   # flake8 and black disagree on this
    "FI58",   # Yes, we use future annotations.
    "S410",   # We use lxml for parsing HTML, so we're fine.
    "S413",   # We use pycryptodome, not pycrypto
    "W503",   # Line breaks are before binary operators, not after
]
exclude = ["try*.py"]
per-file-ignores = [
    # ANN001: We use fixtures for most callables in tests.
    # ANN201: No type annotations for return values for test functions.
    # D400,D205: First sentences in test docstrings can be longer than a line.
    # S101: Yes, we use assert in tests run by pytest, and it's by design.
    "tests/*:ANN001,ANN201,D400,D205,S101"
]
rst-roles = [
    "py:class",
    "py:attr",
    "py:data",
    "py:meth",
    "py:exc",
    "py:mod",
    "ref"
]
rst-directives = ["py:data", "doctest"]

[tool.isort]
add_imports = ["from __future__ import annotations"]
ensure_newline_before_comments = true
force_grid_wrap = 0
force_sort_within_sections = true
group_by_package = true
include_trailing_comma = true
line_length = 79
lines_after_imports = 2
multi_line_output = 3
no_inline_sort = true
profile = "black"
py_version = 311
use_parentheses = true
combine_as_imports = true

[tool.mypy]
ignore_missing_imports = true
mypy_path = "."
warn_unused_ignores = true

[tool.pytest.ini_options]
addopts = """
--cov=pyfingerd --cov-report html --cov-report term --doctest-modules
--ignore=docs --asyncio-mode=auto
"""
