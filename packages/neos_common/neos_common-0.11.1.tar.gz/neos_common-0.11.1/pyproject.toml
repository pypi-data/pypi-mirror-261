[tool.poetry]
name = "neos_common"
version = "0.11.1"
description = "Neos Common Code"
authors = []
license = "closed"
repository="https://github.com/NEOS-Critical/neos-platform-common"
homepage="https://github.com/NEOS-Critical/neos-platform-common"
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.9"

httpx = "^0"
fastapi = "^0.101"
pydantic = "^2"
pydantic-settings = "^2.0.0"
web-error = "^0.6"
python-keycloak = "^2.6.0"
confluent-kafka = "2.0.2" # Currently used Docker image python:3.10-alpine has only 2.0.2 version
multidict = "^6.0.4"

[tool.poetry.group.dev.dependencies]

# Tests
freezegun = "^1.2.1"
pretend = "^1.0.9"
pytest = "~7.1.2"
pytest-asyncio = "^0.18.3"
pytest-benchmark = "^3.4.1"
pytest-cov = "^3.0.0"
pytest-env = "^0.6.2"
pytest-random-order = "^1.0.4"
requests = "^2.28.1"
pytest-httpx = "^0"
yoyo-migrations = "^7.3.2"

# Style
ruff = {version="^0.0", source="pypi"}
pre-commit = {version="^3.0.2", source="pypi"}
black = {version="^22.12.0", source="pypi"}
pyright = {version="^1.1.293", source="pypi"}

# Releases
changelog-gen = {version = "^0.9", extras = ["bump-my-version"]}

[tool.bumpversion]
current_version = "0.11.1"
commit = true
tag = true

[[tool.bumpversion.files]]
filename = "pyproject.toml"
search = 'version = "{current_version}"'
replace = 'version = "{new_version}"'

[[tool.bumpversion.files]]
filename = "README.md"

[[tool.bumpversion.files]]
filename = "neos_common/__init__.py"

[tool.changelog_gen]
release = true
commit = true
reject_empty = true
allowed_branches = [
    "main",
]
date_format = "(released %Y-%m-%d)"
issue_link = "https://neom.atlassian.net/browse/::issue_ref::"
commit_link = "https://github.com/NEOS-Critical/neos-platform-registry/commit/::commit_hash::"

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]
addopts = "--random-order --cov-append"
env = [
]

[tool.coverage.report]
sort = "cover"
fail_under = 98
show_missing = true
skip_covered = true
exclude_lines = [
    "pragma: no cover",
    "if __name__ == '__main__':",
    "if typing.TYPE_CHECKING:",
    "@abc.abstractmethod",
]

[tool.coverage.run]
branch = true
source = ["neos_common"]

[tool.bandit]
exclude_dirs = ["tasks.py"]
skips = ["B101"] # use of asserts

[tool.black]
line-length = 120

[tool.ruff]
target-version = "py39"
line-length = 120
select = ["ALL"]
ignore = [
    "ANN002",  # type annotation on *args
    "ANN003",  # type annotation on **kwargs
    "ANN101",  # annotate self
    "ANN102",  # annotate cls
    "B008",  # typer involves a lot of function calls in function definitions
    "D203",  # No blankline before docstring
    "D213",  # docstring starts on opening line
    # "FBT",  # boolean trap? no documentation
    "G",  # logging(.., extra={}) does not appear to work
    "PLR0913",  # too many arguments to a function call
    "PLR2004",  # magic numbers in tests
    "S",  # bandit is run as a full commit hook
    "TD",  # ignore TODO's for now
    "FIX002",  # ignore TODO's for now
    "FA",
]

[tool.ruff.per-file-ignores]
"neos_common/*"= [
    "D104",  # Ignore public __init__ missing docstring.
    # TODO: Clean up below violations
    "D100",  # Missing docstring in public module
    "D101",  # Missing docstring in public class
    "D102",  # Missing docstring in public method
    "D103",  # Missing docstring in public function
    "D107",  # Missing docstring in __init__
]
"neos_common/error.py" = [
    "D101",  # ignore missing docstrings on exception classes
]
"neos_common/authorization/base.py" = [
    "D102",  # ignore missing docstrings in protocol __call__ definitions
]
"neos_common/schema.py" = [
    "N805",  # first argument should be self, pydantic validators enforce `cls`
    "ARG002",  # unused arguments abound in pydantic validators
    "D101",  # ignore missing public class docstrings in schema
]
"tasks.py" = ["ANN", "E501", "INP001"]
"tests/*" = ["ANN", "D", "SLF"]
"tests/authorization/test_util.py" = ["N806", "S106"]

[tool.ruff.flake8-type-checking]
exempt-modules = ["neos_common", "typing"]

[tool.ruff.flake8-quotes]
docstring-quotes = "double"

[tool.ruff.pydocstyle]
convention = "google"

[tool.pyright]
include = ["neos_common"]
exclude = [
"tests/*",
]

[tool.poetry.plugins.pytest11]
nc_plugin = "neos_common.pytest_plugin"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
