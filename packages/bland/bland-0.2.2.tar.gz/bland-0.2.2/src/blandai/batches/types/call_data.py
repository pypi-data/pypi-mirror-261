# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ...calls.types.answered_by_enum import AnsweredByEnum
from ...core.datetime_utils import serialize_datetime

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class CallData(pydantic.BaseModel):
    created_at: dt.datetime = pydantic.Field()
    """
    The timestamp when the individual call was created.
    """

    to: str = pydantic.Field()
    """
    The phone number the call was made to.
    """

    from_: str = pydantic.Field(alias="from")
    """
    The phone number the call was made from.
    """

    completed: bool = pydantic.Field()
    """
    Indicates if the call was completed.
    """

    call_id: str = pydantic.Field()
    """
    The unique identifier for each individual call.
    """

    call_length: int = pydantic.Field()
    """
    The duration of the call in minutes.
    """

    answered_by: typing.Optional[AnsweredByEnum] = pydantic.Field(default=None)
    """
    Contains a string value if the batch had `answered_by_enabled` set to `true`.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
