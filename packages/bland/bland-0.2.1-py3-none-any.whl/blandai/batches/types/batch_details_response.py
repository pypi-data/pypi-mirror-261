# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ...core.datetime_utils import serialize_datetime
from .analysis_object import AnalysisObject
from .batch_params import BatchParams
from .call_data import CallData

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class BatchDetailsResponse(pydantic.BaseModel):
    batch_params: BatchParams = pydantic.Field()
    """
    An object containing parameters and settings for the batch.
    """

    analysis: AnalysisObject = pydantic.Field()
    """
    An object containing analysis data for the batch.
    """

    call_data: typing.List[CallData] = pydantic.Field()
    """
    An array of objects, each representing individual call data.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
