# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ...core.datetime_utils import serialize_datetime

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class StopActiveBatchResponse(pydantic.BaseModel):
    status: str = pydantic.Field()
    """
    The status of the request. If anything other than 'success', an error has occurred or all calls have already been completed.
    """

    message: str = pydantic.Field()
    """
    A message describing the status of the request.
    """

    num_calls: int = pydantic.Field()
    """
    The number of calls that were cancelled.
    """

    batch_id: str = pydantic.Field()
    """
    The `batch_id` of the cancelled batch.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
