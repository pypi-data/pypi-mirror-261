# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ...core.datetime_utils import serialize_datetime
from .optimize_for import OptimizeFor

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class VoiceSettingsData(pydantic.BaseModel):
    speed: typing.Optional[int] = pydantic.Field(default=None)
    """
    Multiplies the speed of the voice (only `reduce_latency: true` voices).
    """

    interruption_threshold: typing.Optional[int] = pydantic.Field(default=None)
    """
    Delay before responding (in milliseconds).
    """

    stability: typing.Optional[int] = pydantic.Field(default=None)
    """
    Lower for more emotion, higher for more stability.
    """

    similarity: typing.Optional[int] = pydantic.Field(default=None)
    """
    Match cloned voice more closely.
    """

    speech_flexibility: typing.Optional[int] = pydantic.Field(default=None)
    """
    Flexible pronunciation.
    """

    optimize_for: typing.Optional[OptimizeFor] = pydantic.Field(default=None)
    """
    The optimization setting for the voice.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
