# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..commons.types.call_id import CallId
from ..commons.types.status import Status
from ..core.datetime_utils import serialize_datetime

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class SendCallResponse(pydantic.BaseModel):
    """
    from blandai import SendCallResponse

    SendCallResponse(
        status="success",
        message="Call successfully queued.",
        call_id="73c809a9-db35-4edb-8fa6-95a6a942daf8",
    )
    """

    status: Status = pydantic.Field()
    """
    Can be `success` or `error`.
    """

    call_id: CallId = pydantic.Field()
    """
    A unique identifier for the call (present only if status is `success`).
    """

    batch_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    A unique identifier for the batcarrayh of calls (present only if status is `success`).
    
    If no batch is specified, this value will be `null`.
    """

    message: typing.Optional[str] = pydantic.Field(default=None)
    """
    A message describing the status of the call (present only if status is `success`).
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
