# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ...core.datetime_utils import serialize_datetime
from .voice_settings_data import VoiceSettingsData

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class GenerateVoiceSampleRequest(pydantic.BaseModel):
    text: str = pydantic.Field()
    """
    The text content to be spoken in the voice sample.
    
    Character limit: `200` characters.
    """

    voice_settings: typing.Optional[VoiceSettingsData] = pydantic.Field(default=None)
    """
    Alternate `voice_settings` can be passed in to override the preset's default settings.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
