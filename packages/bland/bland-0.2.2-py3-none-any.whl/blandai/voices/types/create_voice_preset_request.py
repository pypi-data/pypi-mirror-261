# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ...core.datetime_utils import serialize_datetime
from .voice_settings_data import VoiceSettingsData

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class CreateVoicePresetRequest(pydantic.BaseModel):
    voice_name: str = pydantic.Field()
    """
    The name for the new voice preset.
    """

    description: typing.Optional[str] = pydantic.Field(default=None)
    """
    A description of the voice preset.
    """

    voice_id: typing.Optional[int] = pydantic.Field(default=None)
    """
    The existing `voice_id` that will be mapped to the new voice preset.
    """

    reduce_latency: typing.Optional[bool] = pydantic.Field(default=None)
    """
    The current `reduce_latency` setting that will be mapped to the new voice preset.
    """

    interruption_threshold: typing.Optional[int] = pydantic.Field(default=None)
    """
    The threshold for voice interruption settings.
    
    If not provided, the default value is `50`.
    """

    language: typing.Optional[str] = pydantic.Field(default=None)
    """
    The language code for the voice preset.
    """

    voice_settings: typing.Optional[VoiceSettingsData] = pydantic.Field(default=None)
    """
    A JSON object containing specific settings for the voice.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
