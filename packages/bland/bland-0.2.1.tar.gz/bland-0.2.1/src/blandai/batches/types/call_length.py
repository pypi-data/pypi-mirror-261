# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ...core.datetime_utils import serialize_datetime
from .call_length_summary import CallLengthSummary

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class CallLength(pydantic.BaseModel):
    average: int = pydantic.Field()
    """
    The average call length in minutes.
    """

    average_nonzero: int = pydantic.Field()
    """
    The average call length in minutes, excluding calls with a length of less than one second.
    """

    summary: CallLengthSummary = pydantic.Field()
    """
    A summary of the call lengths, grouped into ranges.
    """

    all: typing.List[int] = pydantic.Field()
    """
    Contains each call length, in case you want to use a different grouping than the default.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
