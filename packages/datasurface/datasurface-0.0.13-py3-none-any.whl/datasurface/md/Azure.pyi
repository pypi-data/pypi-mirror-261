from .Governance import CloudVendor as CloudVendor, Credential as Credential, DataPlatform as DataPlatform, Ecosystem as Ecosystem, EncryptionSystem as EncryptionSystem, GovernanceZone as GovernanceZone, HostPortSQLDatabase as HostPortSQLDatabase, InfrastructureLocation as InfrastructureLocation, Team as Team
from .Lint import NameHasBadSynthax as NameHasBadSynthax, ValidationTree as ValidationTree
from .utils import is_valid_azure_key_vault_name as is_valid_azure_key_vault_name
from _typeshed import Incomplete
from datasurface.md import Documentation as Documentation
from datasurface.md.Governance import DataContainer as DataContainer
from enum import Enum

class AzureVaultObjectType(Enum):
    HSM_KEYS: int
    SOFTWARE_KEYS: int
    SECRETS: int
    CERTIFICATES: int
    STORAGE_ACCOUNT_KEYS: int

class AzureKeyVaultCredential(Credential):
    keyVaultName: Incomplete
    objectName: Incomplete
    objectType: Incomplete
    def __init__(self, keyVaultName: str, objectName: str) -> None: ...
    def __eq__(self, __value: object) -> bool: ...
    def lint(self, eco: Ecosystem, tree: ValidationTree) -> None: ...
    def getURL(self) -> str: ...

class AzureKeyVault(EncryptionSystem): ...

class AzureDataplatform(DataPlatform):
    platformCredential: Incomplete
    def __init__(self, name: str, doc: Documentation, platformCredential: AzureKeyVaultCredential) -> None: ...
    def __hash__(self) -> int: ...
    def lint(self, eco: Ecosystem, tree: ValidationTree): ...
    def getSupportedVendors(self, eco: Ecosystem) -> set[CloudVendor]: ...
    def __eq__(self, __value: object) -> bool: ...
    def isContainerSupported(self, eco: Ecosystem, dc: DataContainer) -> bool: ...
    def getInternalDataContainers(self) -> set[DataContainer]: ...

class AzureBatchDataPlatform(AzureDataplatform):
    def __init__(self, name: str, doc: Documentation, platformCredential: AzureKeyVaultCredential) -> None: ...

class AzureSQLDatabase(HostPortSQLDatabase):
    def __init__(self, name: str, hostName: str, port: int, databaseName: str, loc: InfrastructureLocation) -> None: ...
    def __hash__(self) -> int: ...
    def lint(self, eco: Ecosystem, gz: GovernanceZone, t: Team, tree: ValidationTree) -> None: ...
    def __eq__(self, o: object) -> bool: ...
