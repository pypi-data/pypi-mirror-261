import abc
from _typeshed import Incomplete
from abc import ABC, abstractmethod
from datasurface.md import Documentation as Documentation
from datasurface.md.Documentation import Documentable as Documentable
from datasurface.md.Governance import DataPlatform as DataPlatform, Ecosystem as Ecosystem
from datasurface.md.Lint import ValidationTree as ValidationTree
from datasurface.md.PipelineGraph import DataTransformerNode as DataTransformerNode, ExportNode as ExportNode, IngestionMultiNode as IngestionMultiNode, IngestionSingleNode as IngestionSingleNode, PipelineNode as PipelineNode, PlatformPipelineGraph as PlatformPipelineGraph, TriggerNode as TriggerNode
from typing import Type

class IaCFragmentManager(ABC, Documentable, metaclass=abc.ABCMeta):
    name: Incomplete
    def __init__(self, name: str, doc: Documentation) -> None: ...
    @abstractmethod
    def addFragment(self, nodeType: Type[PipelineNode], name: str, fragment: str): ...

class CombineToStringFragmentManager(IaCFragmentManager):
    fragments: Incomplete
    def __init__(self, name: str, doc: Documentation) -> None: ...
    def addFragment(self, nodeType: Type[PipelineNode], name: str, fragment: str): ...

class IaCDataPlatform(DataPlatform, metaclass=abc.ABCMeta):
    def __init__(self, name: str, doc: Documentation) -> None: ...
    def __hash__(self) -> int: ...
    def __eq__(self, __value: object) -> bool: ...
    def renderIaC(self, fragments: IaCFragmentManager, graph: PlatformPipelineGraph) -> IaCFragmentManager: ...
    @abstractmethod
    def renderIngestionSingle(self, ingestNode: IngestionSingleNode) -> str: ...
    @abstractmethod
    def renderIngestionMulti(self, ingestNode: IngestionMultiNode) -> str: ...
    @abstractmethod
    def renderExport(self, exportNode: ExportNode) -> str: ...
    @abstractmethod
    def renderTrigger(self, triggerNode: TriggerNode) -> str: ...
    @abstractmethod
    def renderDataTransformer(self, dtNode: DataTransformerNode) -> str: ...
    @abstractmethod
    def lintIngestionSingleNode(self, eco: Ecosystem, node: IngestionSingleNode, tree: ValidationTree) -> None: ...
    @abstractmethod
    def lintIngestionMultiNode(self, eco: Ecosystem, node: IngestionMultiNode, tree: ValidationTree) -> None: ...
    @abstractmethod
    def lintExportNode(self, eco: Ecosystem, node: ExportNode, tree: ValidationTree) -> None: ...
    @abstractmethod
    def lintTriggerNode(self, eco: Ecosystem, node: TriggerNode, tree: ValidationTree) -> None: ...
    @abstractmethod
    def lintDataTransformerNode(self, eco: Ecosystem, node: DataTransformerNode, tree: ValidationTree) -> None: ...
    def lintGraph(self, eco: Ecosystem, graph: PlatformPipelineGraph, tree: ValidationTree): ...
