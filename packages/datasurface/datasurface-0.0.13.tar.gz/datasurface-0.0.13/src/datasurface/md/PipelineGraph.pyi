from _typeshed import Incomplete
from datasurface.md.Governance import DataContainer as DataContainer, DataPlatform as DataPlatform, DataTransformerOutput as DataTransformerOutput, DatasetGroup as DatasetGroup, DatasetSink as DatasetSink, Datastore as Datastore, Ecosystem as Ecosystem, IngestionConsistencyType as IngestionConsistencyType, StepTrigger as StepTrigger, Workspace as Workspace
from typing import Type

class PipelineNode:
    name: Incomplete
    platform: Incomplete
    leftHandNodes: Incomplete
    rightHandNodes: Incomplete
    def __init__(self, name: str, platform: DataPlatform) -> None: ...
    def __eq__(self, o: object) -> bool: ...
    def addRightHandNode(self, rhNode: PipelineNode): ...

class ExportNode(PipelineNode):
    dataContainer: Incomplete
    storeName: Incomplete
    datasetName: Incomplete
    def __init__(self, platform: DataPlatform, dataContainer: DataContainer, storeName: str, datasetName: str) -> None: ...
    def __hash__(self) -> int: ...
    def __eq__(self, o: object) -> bool: ...

class IngestionNode(PipelineNode):
    storeName: Incomplete
    captureTrigger: Incomplete
    def __init__(self, name: str, platform: DataPlatform, storeName: str, captureTrigger: StepTrigger | None) -> None: ...
    def __eq__(self, o: object) -> bool: ...

class IngestionMultiNode(IngestionNode):
    def __init__(self, platform: DataPlatform, storeName: str, captureTrigger: StepTrigger | None) -> None: ...
    def __hash__(self) -> int: ...
    def __eq__(self, o: object) -> bool: ...

class IngestionSingleNode(IngestionNode):
    dataset: Incomplete
    def __init__(self, platform: DataPlatform, storeName: str, dataset: str, captureTrigger: StepTrigger | None) -> None: ...
    def __hash__(self) -> int: ...
    def __eq__(self, o: object) -> bool: ...

class TriggerNode(PipelineNode):
    workspace: Incomplete
    def __init__(self, w: Workspace, platform: DataPlatform) -> None: ...
    def __hash__(self) -> int: ...
    def __eq__(self, o: object) -> bool: ...

class DataTransformerNode(PipelineNode):
    workspace: Incomplete
    def __init__(self, ws: Workspace, platform: DataPlatform) -> None: ...
    def __hash__(self) -> int: ...
    def __eq__(self, o: object) -> bool: ...

class DSGRootNode:
    workspace: Incomplete
    dsg: Incomplete
    def __init__(self, w: Workspace, dsg: DatasetGroup) -> None: ...
    def __hash__(self) -> int: ...
    def __eq__(self, o: object) -> bool: ...

class PlatformPipelineGraph:
    platform: Incomplete
    eco: Incomplete
    workspaces: Incomplete
    roots: Incomplete
    dataContainerExports: Incomplete
    storesToIngest: Incomplete
    nodes: Incomplete
    def __init__(self, eco: Ecosystem, platform: DataPlatform) -> None: ...
    def generateGraph(self) -> None: ...
    def findExistingOrCreateStep(self, step: PipelineNode) -> PipelineNode: ...
    def createIngestionStep(self, storeName: str): ...
    def addExportToPriorIngestion(self, exportStep: ExportNode): ...
    def getLeftSideOfGraph(self) -> set[PipelineNode]: ...
    def getRightSideOfGraph(self) -> set[PipelineNode]: ...
    def checkNextStepsForStepType(self, filterStep: Type[PipelineNode], targetStep: Type[PipelineNode]) -> bool: ...
    def graphToText(self) -> str: ...

class EcosystemPipelineGraph:
    eco: Incomplete
    roots: Incomplete
    def __init__(self, eco: Ecosystem) -> None: ...
