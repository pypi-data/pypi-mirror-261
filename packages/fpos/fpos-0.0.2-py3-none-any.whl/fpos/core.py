# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_core.ipynb.

# %% auto 0
__all__ = ['last', 'fallback', 'filtdict', 'dict1st', 'iter1st', 'flag1st', 'key1st', 'val1st', 'idx1st', 'arg1st']

# %% ../nbs/00_core.ipynb 6
#| export


# %% ../nbs/00_core.ipynb 8
from typing import Any, Union, Iterable, TypeAlias

# %% ../nbs/00_core.ipynb 10
#| export


# %% ../nbs/00_core.ipynb 12
from quac import anyq, intq, listq, boolfunc, P
from chck import isdict, notnone
from atup import pack, argtup

# %% ../nbs/00_core.ipynb 14
#| export


# %% ../nbs/00_core.ipynb 16
#| export


# %% ../nbs/00_core.ipynb 19
def last(*args: P.args): 
    '''Return the last element of the given arguments.'''
    return next(reversed(argtup(args)), None)

def fallback(vals: Iterable, default: anyq = None, uselast: bool = True):
    '''Fallback to the last value of `vals` if `default is None` and `uselast` is `True`'''
    return default if notnone(default) else last(vals) if uselast else None

# %% ../nbs/00_core.ipynb 21
def filtdict(dct: dict, keys: listq = None) -> dict:
    '''Return a dict with only the keys in `keys`'''
    return {k: v for k in (keys or dct.keys()) if (v := dct.get(k))}

# %% ../nbs/00_core.ipynb 24
def dict1st(dct: dict, flag: boolfunc = notnone, keys: list = None) -> tuple[int, str, anyq] | None:
    '''Search the first element in `dct` that satisfies the `flag` function.

    Parameters
    ----------
    dct : dict
        The dictionary to search through.
        
    flag : boolfunc, default: notnone
        A function to test each value in the dictionary.
        
    keys : list, optional
        A list of keys to consider in the search.

    Returns
    -------
    tuple
        A tuple containing the index, key, and value of the first element that 
        satisfies the `flag`, or `None` if not found.

    Examples
    --------
    >>> dct = {'a': None, 'b': 2, 'c': None}
    >>> dict1st(dct)
    (1, 'b', 2)
    
    See Also
    --------
    chck.notnone: TypeGuard against `None`
    '''
    for idx, key in enumerate((keys or dct.keys())):
        if (val := dct.get(key)) and flag(val): return idx, key, val

# %% ../nbs/00_core.ipynb 26
def iter1st(arr: list, flag: boolfunc = notnone) -> tuple[int, anyq] | None:
    '''Search the first element in `arr` that satisfies the `flag` function.

    Parameters
    ----------
    arr : list
        The list to search through.
        
    flag : boolfunc, default: notnone
        A function to test each element in the list.

    Returns
    -------
    tuple
        A tuple containing the index and value of the first element that satisfies the `flag`, or `None` if not found.

    Examples
    --------
    >>> arr = [None, 'text', None]
    >>> iter1st(arr)
    (1, 'text')
    
    See Also
    --------
    chck.notnone: TypeGuard against `None`
    '''
    for idx, val in enumerate(arr):
        if flag(val): return idx, val
   

# %% ../nbs/00_core.ipynb 28
def flag1st(
    itr: Union[list, dict], 
    flag: boolfunc = notnone, 
    keys: listq = None
) -> tuple[int, str, anyq] |  tuple[int, anyq] | None:
    '''Search the first element in `itr` that satisfies the `flag` function.

    Parameters
    ----------
    itr : Union[list, dict]
        The iterable (list or dictionary) to search through.
    flag : boolfunc, default notnone
        A function to test each element (or value in the case of dictionaries) in `itr`.
    keys : list, optional
        A list of keys to consider in the search if `itr` is a dictionary.

    Returns
    -------
    tuple
        A tuple of the first element that satisfies the `flag`, including its index and value (and key if `itr` is a dictionary), or `None` if not found.

    Examples
    --------
    >>> flag1st([None, 2, None])
    (1, 2)
    >>> flag1st({'a': None, 'b': 2, 'c': None})
    (1, 'b', 2)
    '''
    if isdict(itr): return pack(dict1st(itr, flag, keys), n=3)
    else: return pack(iter1st(itr, flag), n=2)


# %% ../nbs/00_core.ipynb 31
def key1st(
    dct: dict, 
    keys: listq = None, 
    flag: boolfunc = notnone, 
    default: anyq = None, 
    uselast: bool = True
) -> str | None:
    '''Find the first key in `dct` that satisfies the `flag` function, or a fallback according to `default` and `uselast`.

    Parameters
    ----------
    dct : dict
        The dictionary to search through.
    keys : list, optional
        A list of keys to consider in the search.
    flag : boolfunc, default notnone
        A function to test each value in the dictionary.
    default : anyq, optional
        The default value to return if no element satisfies the flag.
    uselast : bool, default True
        Determines whether to return the last key from `dct` if no element satisfies the flag and `default` is None.

    Returns
    -------
    Any
        The first key that satisfies the `flag`, or the fallback value.

    Examples
    --------
    >>> dct = {'a': None, 'b': 2, 'c': 3}
    >>> key1st(dct)
    'b'
    >>> key1st(dct, default='d')
    'b'
    >>> key1st({'a': None, 'b': None}, default='d')
    'd'
    '''
    _, key, _ = flag1st(dct := filtdict(dct, keys), flag, keys)
    if notnone(key): return key
    return fallback(dct.keys(), default, uselast)


# %% ../nbs/00_core.ipynb 33
def val1st(
    dct: dict, 
    keys: listq = None, 
    flag: boolfunc = notnone, 
    default: anyq = None, 
    uselast: bool = True
) -> anyq:
    '''Find the first value in `dct` that satisfies the `flag` function, or a fallback according to `default` and `uselast`.

    Parameters
    ----------
    dct : dict
        The dictionary to search through.
    keys : list, optional
        A list of keys to consider in the search.
    flag : boolfunc, default notnone
        A function to test each value in the dictionary.
    default : anyq, optional
        The default value to return if no element satisfies the flag.
    uselast : bool, default True
        Determines whether to return the last value from `dct` if no element satisfies the flag and `default` is None.

    Returns
    -------
    Any
        The first value that satisfies the `flag`, or the fallback value.

    Examples
    --------
    >>> dct = {'a': None, 'b': 2, 'c': 3}
    >>> val1st(dct)
    2
    >>> val1st(dct, default=0)
    2
    >>> val1st({'a': None, 'b': None}, default=0)
    0
    '''
    *_, val = flag1st(dct := filtdict(dct, keys), flag, keys)
    if notnone(val): return val
    return fallback(dct.values(), default, uselast)

# %% ../nbs/00_core.ipynb 35
def idx1st(
    *args: P.args, 
    flag: boolfunc = notnone, 
    default: intq = None, 
    uselast: bool = True
) -> intq:
    '''Find the first index of elements in `args` that satisfies the `flag` function, or a fallback according to `default` and `uselast`.

    Parameters
    ----------
    *args : Any
        Variable length argument list.
    flag : boolfunc, default notnone
        A function to test each element in `args`.
    default : intq, optional
        The default index to return if no element satisfies the flag.
    uselast : bool, default True
        Determines whether to return the last index if no element satisfies the flag and `default` is None.

    Returns
    -------
    int
        The first index that satisfies the `flag`, or the fallback index.

    Examples
    --------
    >>> idx1st(None, 'text', None)
    1
    >>> idx1st(None, None, default=0)
    0
    '''
    idx, *_ = flag1st(args, flag)
    if notnone(idx): return idx    
    return fallback(tuple(range(len(args))), default, uselast)


# %% ../nbs/00_core.ipynb 37
def arg1st(
    *args: P.args, 
    flag: boolfunc = notnone, 
    default: anyq = None, 
    uselast: bool = True
) -> anyq:
    '''Find the first argument in `args` that satisfies the `flag` function, or a fallback according to `default` and `uselast`.

    Parameters
    ----------
    *args : Any
        Variable length argument list.
    flag : boolfunc, default notnone
        A function to test each argument.
    default : anyq, optional
        The default argument to return if no argument satisfies the flag.
    uselast : bool, default True
        Determines whether to return the last argument if no argument satisfies the flag and `default` is None.

    Returns
    -------
    Any
        The first argument that satisfies the `flag`, or the fallback argument.

    Examples
    --------
    >>> arg1st(None, 'text', None)
    'text'
    >>> arg1st(None, None, default='fallback')
    'fallback'
    '''
    *_, val = flag1st(args, flag)
    if notnone(val): return val
    return fallback(args, default, uselast)
