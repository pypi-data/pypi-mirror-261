# coding: utf-8

"""
    Cashfree Payout APIs

    Cashfree's Payout APIs provide developers with a streamlined pathway to integrate advanced payout capabilities into their applications, platforms and websites.

    The version of the OpenAPI document: 2024-01-01
    Contact: developers@cashfree.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr
from cashfree_payout.models.create_transfer_response_beneficiary_details import CreateTransferResponseBeneficiaryDetails

class CreateTransferResponse(BaseModel):
    """
    Standard Transfer V2 Response
    """
    transfer_id: Optional[StrictStr] = Field(None, description="It displays the unique ID you created to identify the transfer.")
    cf_transfer_id: Optional[StrictStr] = Field(None, description="It displays the unique ID created by Cashfree Payments. You receive this ID in the response after initiating the standard transfer request.")
    status: Optional[StrictStr] = Field(None, description="It displays the status of the transfer.")
    beneficiary_details: Optional[CreateTransferResponseBeneficiaryDetails] = None
    transfer_amount: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="It displays the transfer amount initiated in the request.")
    transfer_service_charge: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="It displays the service charge applicable for the successful transfer request.")
    transfer_service_tax: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="It displays the service tax applicable for the successful transfer request.")
    transfer_mode: Optional[StrictStr] = Field(None, description="It displays the mode of the transfer.")
    transfer_utr: Optional[StrictStr] = Field(None, description="It displays the unique number that is generated to recognise any fund transfer that is created by the bank that facilitates the transfer.")
    fundsource_id: Optional[StrictStr] = Field(None, description="It displays the ID of the fund source from where the money was debited for this transfer request.")
    added_on: Optional[StrictStr] = Field(None, description="It displays the time of when the transfer request was added to the system.")
    updated_on: Optional[StrictStr] = Field(None, description="It displays the updated time for the transfer.")
    __properties = ["transfer_id", "cf_transfer_id", "status", "beneficiary_details", "transfer_amount", "transfer_service_charge", "transfer_service_tax", "transfer_mode", "transfer_utr", "fundsource_id", "added_on", "updated_on"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateTransferResponse:
        """Create an instance of CreateTransferResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))
    
    @classmethod
    def from_json_for_one_of(cls, json_str: str) -> CreateTransferResponse:
        """Create an instance of CreateTransferResponse from a JSON string"""
        temp_dict = json.loads(json_str)
        if "transfer_id, cf_transfer_id, status, beneficiary_details, transfer_amount, transfer_service_charge, transfer_service_tax, transfer_mode, transfer_utr, fundsource_id, added_on, updated_on" in temp_dict.keys():
            return cls.from_dict(json.loads(json_str))
        return None

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of beneficiary_details
        if self.beneficiary_details:
            _dict['beneficiary_details'] = self.beneficiary_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateTransferResponse:
        """Create an instance of CreateTransferResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreateTransferResponse.parse_obj(obj)

        _obj = CreateTransferResponse.parse_obj({
            "transfer_id": obj.get("transfer_id"),
            "cf_transfer_id": obj.get("cf_transfer_id"),
            "status": obj.get("status"),
            "beneficiary_details": CreateTransferResponseBeneficiaryDetails.from_dict(obj.get("beneficiary_details")) if obj.get("beneficiary_details") is not None else None,
            "transfer_amount": obj.get("transfer_amount"),
            "transfer_service_charge": obj.get("transfer_service_charge"),
            "transfer_service_tax": obj.get("transfer_service_tax"),
            "transfer_mode": obj.get("transfer_mode"),
            "transfer_utr": obj.get("transfer_utr"),
            "fundsource_id": obj.get("fundsource_id"),
            "added_on": obj.get("added_on"),
            "updated_on": obj.get("updated_on")
        })
        return _obj


