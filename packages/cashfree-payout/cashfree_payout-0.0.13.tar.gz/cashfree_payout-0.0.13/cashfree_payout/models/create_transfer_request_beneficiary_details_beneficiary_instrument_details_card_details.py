# coding: utf-8

"""
    Cashfree Payout APIs

    Cashfree's Payout APIs provide developers with a streamlined pathway to integrate advanced payout capabilities into their applications, platforms and websites.

    The version of the OpenAPI document: 2024-01-01
    Contact: developers@cashfree.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr, validator

class CreateTransferRequestBeneficiaryDetailsBeneficiaryInstrumentDetailsCardDetails(BaseModel):
    """
    It should contain the card details of the beneficiary.
    """
    card_token: Optional[StrictStr] = Field(None, description="It is the tokenised card number or card token for this transfer.")
    card_network_type: Optional[StrictStr] = Field(None, description="It is the network type of the card - VISA/MASTERCARD.")
    card_cryptogram: Optional[StrictStr] = Field(None, description="It is the formatted chip/cryptogram data relating to the token cryptogram. The maximum character limit is 600. It is optional for MASTERCARD and not required for VISA.")
    card_token_expiry: Optional[StrictStr] = Field(None, description="It is applicable only for MASTERCARD. The format for the valid token expiry date should be YYYY-MM. It cannot be null. Provide a valid tokenExpiry if collected from the customers. If unavailable, populate a static value with a forward year and month in the correct format (YYYY-MM). The maximum character limit is 10.")
    card_type: Optional[StrictStr] = Field(None, description="It is the type of the card. DEBIT and CREDIT are the only values allowed. The default value is CREDIT if the parameter does not exist or not specified.")
    card_token_pan_sequence_number: Optional[StrictStr] = Field(None, alias="card_token_PAN_sequence_number", description="A maximum of 3 alphanumeric characters are allowed. It is an optional parameter for MASTERCARD.")
    __properties = ["card_token", "card_network_type", "card_cryptogram", "card_token_expiry", "card_type", "card_token_PAN_sequence_number"]

    @validator('card_network_type')
    def card_network_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('VISA', 'MASTERCARD'):
            raise ValueError("must be one of enum values ('VISA', 'MASTERCARD')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateTransferRequestBeneficiaryDetailsBeneficiaryInstrumentDetailsCardDetails:
        """Create an instance of CreateTransferRequestBeneficiaryDetailsBeneficiaryInstrumentDetailsCardDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))
    
    @classmethod
    def from_json_for_one_of(cls, json_str: str) -> CreateTransferRequestBeneficiaryDetailsBeneficiaryInstrumentDetailsCardDetails:
        """Create an instance of CreateTransferRequestBeneficiaryDetailsBeneficiaryInstrumentDetailsCardDetails from a JSON string"""
        temp_dict = json.loads(json_str)
        if "card_token, card_network_type, card_cryptogram, card_token_expiry, card_type, card_token_PAN_sequence_number" in temp_dict.keys():
            return cls.from_dict(json.loads(json_str))
        return None

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateTransferRequestBeneficiaryDetailsBeneficiaryInstrumentDetailsCardDetails:
        """Create an instance of CreateTransferRequestBeneficiaryDetailsBeneficiaryInstrumentDetailsCardDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreateTransferRequestBeneficiaryDetailsBeneficiaryInstrumentDetailsCardDetails.parse_obj(obj)

        _obj = CreateTransferRequestBeneficiaryDetailsBeneficiaryInstrumentDetailsCardDetails.parse_obj({
            "card_token": obj.get("card_token"),
            "card_network_type": obj.get("card_network_type"),
            "card_cryptogram": obj.get("card_cryptogram"),
            "card_token_expiry": obj.get("card_token_expiry"),
            "card_type": obj.get("card_type"),
            "card_token_pan_sequence_number": obj.get("card_token_PAN_sequence_number")
        })
        return _obj


