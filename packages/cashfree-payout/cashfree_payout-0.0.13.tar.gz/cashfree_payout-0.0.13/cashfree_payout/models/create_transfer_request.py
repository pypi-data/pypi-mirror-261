# coding: utf-8

"""
    Cashfree Payout APIs

    Cashfree's Payout APIs provide developers with a streamlined pathway to integrate advanced payout capabilities into their applications, platforms and websites.

    The version of the OpenAPI document: 2024-01-01
    Contact: developers@cashfree.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, constr, validator
from cashfree_payout.models.create_transfer_request_beneficiary_details import CreateTransferRequestBeneficiaryDetails

class CreateTransferRequest(BaseModel):
    """
    Standard Transfer V2
    """
    transfer_id: constr(strict=True, max_length=40) = Field(..., description="It is the unique ID you create to identify the transfer. You can use a maximum of 40 characters to create a transfer_id.  Alphanumeric and underscore ( _ ) are allowed.")
    transfer_amount: Union[StrictFloat, StrictInt] = Field(..., description="It is the transfer amount. Decimal values are allowed. The minimum value should be equal to or greater than 1.00. (>= 1.00)")
    transfer_currency: Optional[StrictStr] = Field(None, description="It is the currency of the transfer amount. The default value is INR.")
    transfer_mode: Optional[constr(strict=True, max_length=20)] = Field(None, description="It is the mode of transfer. Allowed values are banktransfer, imps, neft, rtgs, upi, paytm, amazonpay, card. The default transfer_mode is banktransfer.")
    beneficiary_details: Optional[CreateTransferRequestBeneficiaryDetails] = None
    transfer_remarks: Optional[constr(strict=True, max_length=70)] = Field(None, description="It can contain any additional remarks for the transfer. Alphanumeric and whitespaces are allowed. The maximum character limit is 70.")
    fundsource_id: Optional[StrictStr] = Field(None, description="It is the ID of the fund source from which the transfer amount will be debited.")
    __properties = ["transfer_id", "transfer_amount", "transfer_currency", "transfer_mode", "beneficiary_details", "transfer_remarks", "fundsource_id"]

    @validator('transfer_mode')
    def transfer_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('banktransfer', 'imps', 'neft', 'rtgs', 'upi', 'paytm', 'amazonpay', 'card', 'cardupi'):
            raise ValueError("must be one of enum values ('banktransfer', 'imps', 'neft', 'rtgs', 'upi', 'paytm', 'amazonpay', 'card', 'cardupi')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateTransferRequest:
        """Create an instance of CreateTransferRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))
    
    @classmethod
    def from_json_for_one_of(cls, json_str: str) -> CreateTransferRequest:
        """Create an instance of CreateTransferRequest from a JSON string"""
        temp_dict = json.loads(json_str)
        if "transfer_id, transfer_amount, transfer_currency, transfer_mode, beneficiary_details, transfer_remarks, fundsource_id" in temp_dict.keys():
            return cls.from_dict(json.loads(json_str))
        return None

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of beneficiary_details
        if self.beneficiary_details:
            _dict['beneficiary_details'] = self.beneficiary_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateTransferRequest:
        """Create an instance of CreateTransferRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreateTransferRequest.parse_obj(obj)

        _obj = CreateTransferRequest.parse_obj({
            "transfer_id": obj.get("transfer_id"),
            "transfer_amount": obj.get("transfer_amount"),
            "transfer_currency": obj.get("transfer_currency"),
            "transfer_mode": obj.get("transfer_mode"),
            "beneficiary_details": CreateTransferRequestBeneficiaryDetails.from_dict(obj.get("beneficiary_details")) if obj.get("beneficiary_details") is not None else None,
            "transfer_remarks": obj.get("transfer_remarks"),
            "fundsource_id": obj.get("fundsource_id")
        })
        return _obj


