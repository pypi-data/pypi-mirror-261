{"version":3,"file":"lib_index_js.e7d8ec9f1176dd3c3964.js","mappings":"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","sources":["webpack://FIS_labextension/./src/index.ts"],"sourcesContent":["import {\n  JupyterFrontEnd,\n  JupyterFrontEndPlugin\n} from '@jupyterlab/application';\n\nimport {\n  ICommandPalette\n} from '@jupyterlab/apputils';\n\nimport {\n  ToolbarButton\n} from '@jupyterlab/apputils';\n\nimport {\n  INotebookTracker\n} from '@jupyterlab/notebook';\n\nimport {\n  showDialog,\n  Dialog\n} from '@jupyterlab/apputils';\n\n/**\n * Initialization data for the FIS_labextension extension.\n */\nconst extension: JupyterFrontEndPlugin<void> = {\n  id: 'FIS_labextension:button',\n  autoStart: true,\n  requires: [ICommandPalette, INotebookTracker],\n  activate: (app: JupyterFrontEnd, palette: ICommandPalette, notebookTracker: INotebookTracker) => {\n    console.log('JupyterLab extension FIS_labextension is activated!');\n\n    // Create a command to execute when the button is clicked\n    const command = 'FIS_labextension:button-clicked';\n    app.commands.addCommand(command, {\n      label: 'FIS_labextension Button',\n      execute: async (args: any) => {\n        console.log('FIS_labextension button clicked!');\n\n        // Check if the required arguments are provided\n        if (args.question && args.file) {\n          // Use the provided question and file content for processing\n\n          // Rest of the code remains unchanged\n          // Get the current notebook\n          const currentWidget = notebookTracker.currentWidget;\n\n          // Check if a notebook is currently active\n          if (currentWidget) {\n            // Use type assertion to tell TypeScript that currentCell is of type Cell<ICellModel>\n            const currentCell = currentWidget.content.activeCell as any;\n\n            // Display a message in the cell while waiting for the response\n            if (currentCell) {\n              try {\n                const requestBody = {\n                  question: args.question,\n                  prompt: ''\n                };\n\n                // Make an HTTP request to your endpoint\n                const response = await fetch('http://127.0.0.1:5001/endpoint', {\n                  method: 'POST',\n                  headers: {\n                    'Content-Type': 'application/json'\n                    // Add any other headers if needed\n                  },\n                  body: JSON.stringify(requestBody)\n                });\n\n                // Check if the request was successful (status code 200)\n                if (response.ok) {\n                  // Parse the response\n                  const responseData = await response.text();\n\n                  // Show a dialog with options\n                  const result = await showDialog({\n                    title: 'API Response',\n                    body: responseData,\n                    buttons: [\n                      Dialog.okButton({ label: 'Replace Cell' }),\n                      Dialog.createButton({ label: 'Cancel' })\n                    ]\n                  });\n\n                  // Handle the user's choice\n                  if (result.button.accept) {\n                    // Replace the cell content with the response\n                    currentCell.model.value.text = responseData;\n\n                    // Clear the cell output area if it exists\n                    if (currentCell.outputArea) {\n                      currentCell.outputArea.clear();\n                    }\n                  }\n                  // Otherwise, do nothing (cancel operation)\n                } else {\n                  // Display an error message in the cell if the request fails\n                  currentCell.outputArea.model.clear();\n                  currentCell.outputArea.model.add({\n                    output_type: 'stream',\n                    name: 'stderr',\n                    text: `Request failed with status ${response.status}\\n`\n                  });\n                }\n              } catch (error) {\n                // Display an error message in the cell if an exception occurs\n                currentCell.outputArea.model.clear();\n                currentCell.outputArea.model.add({\n                  output_type: 'stream',\n                  name: 'stderr',\n                  text: `Error: ${error}\\n`\n                });\n              }\n            }\n          }\n        } else {\n          console.error('Invalid arguments. Please provide both question and file.');\n        }\n      }\n    });\n\n    // Create a toolbar button with text\n    const button = new ToolbarButton({\n      iconClass: 'jp-Icon jp-Icon-16 jp-MaterialIcon my-FIS-labextension-icon',\n      onClick: () => {\n        // Display an error if the command is used without arguments\n        console.error('Usage: myextension \"explain\" code.py');\n      },\n      tooltip: 'FIS_labextension Button',\n      label: 'FIS_LabExtension'\n    });\n\n    // Add the button to the notebook toolbar when a notebook is activated\n    notebookTracker.widgetAdded.connect((sender, nbPanel) => {\n      nbPanel.toolbar.insertItem(11, 'FIS_labextension:button-clicked', button);\n    });\n\n    // Add the button to the command palette\n    palette.addItem({ command, category: 'FIS_labextension' });\n  }\n};\n\nexport default extension;\n\n"],"names":[],"sourceRoot":""}