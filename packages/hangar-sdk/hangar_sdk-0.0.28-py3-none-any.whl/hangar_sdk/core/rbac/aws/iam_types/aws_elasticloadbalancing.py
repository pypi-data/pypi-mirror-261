from typing import Union, Literal, List
from hangar_sdk.core.rbac.aws.base_type import GenericResourceType
from hangar_sdk.resources.terraform import AbstractTerraformResource

aws_elasticloadbalancing_privilege_type = Union[Literal["DescribeListeners"], Literal["RemoveTags"], Literal["GetTrustStoreCaCertificatesBundle"], Literal["DescribeRules"], Literal["DescribeTargetHealth"], Literal["DescribeLoadBalancerPolicies"], Literal["DescribeTargetGroupAttributes"], Literal["DeleteRule"], Literal["DescribeTargetGroups"], Literal["RemoveTrustStoreRevocations"], Literal["ModifyTrustStore"], Literal["DescribeTags"], Literal["DescribeLoadBalancerAttributes"], Literal["DescribeTrustStoreRevocations"], Literal["DeregisterTargets"], Literal["DescribeTrustStoreAssociations"], Literal["GetTrustStoreRevocationContent"], Literal["ModifyRule"], Literal["DescribeAccountLimits"], Literal["DescribeTrustStores"], Literal["AddTrustStoreRevocations"], Literal["CreateAppCookieStickinessPolicy"], Literal["RegisterTargets"], Literal["DescribeInstanceHealth"], Literal["AttachLoadBalancerToSubnets"], Literal["DetachLoadBalancerFromSubnets"], Literal["SetSubnets"], Literal["AddListenerCertificates"], Literal["DeleteLoadBalancer"], Literal["ModifyTargetGroup"], Literal["SetLoadBalancerPoliciesOfListener"], Literal["ConfigureHealthCheck"], Literal["CreateTargetGroup"], Literal["DeleteListener"], Literal["ModifyListener"], Literal["CreateLoadBalancerPolicy"], Literal["DeleteTrustStore"], Literal["SetWebAcl"], Literal["CreateRule"], Literal["RemoveListenerCertificates"], Literal["SetLoadBalancerPoliciesForBackendServer"], Literal["DescribeLoadBalancers"], Literal["SetLoadBalancerListenerSSLCertificate"], Literal["EnableAvailabilityZonesForLoadBalancer"], Literal["DescribeSSLPolicies"], Literal["DeleteLoadBalancerPolicy"], Literal["CreateLoadBalancer"], Literal["DisableAvailabilityZonesForLoadBalancer"], Literal["ModifyLoadBalancerAttributes"], Literal["SetSecurityGroups"], Literal["DeleteLoadBalancerListeners"], Literal["AddTags"], Literal["ModifyTargetGroupAttributes"], Literal["SetRulePriorities"], Literal["ApplySecurityGroupsToLoadBalancer"], Literal["CreateListener"], Literal["CreateLBCookieStickinessPolicy"], Literal["DeregisterInstancesFromLoadBalancer"], Literal["CreateTrustStore"], Literal["SetIpAddressType"], Literal["DescribeLoadBalancerPolicyTypes"], Literal["DescribeListenerCertificates"], Literal["DeleteTargetGroup"], Literal["CreateLoadBalancerListeners"], Literal["RegisterInstancesWithLoadBalancer"]]
aws_elasticloadbalancing_condition_type = Union[Literal["aws:TagKeys"], Literal["aws:ResourceTag/${TagKey}"], Literal["elasticloadbalancing:ResourceTag/${TagKey}"], Literal["aws:RequestTag/${TagKey}"]]

class aws_elasticloadbalancingStatement(GenericResourceType[aws_elasticloadbalancing_privilege_type, aws_elasticloadbalancing_condition_type]):
    def __init__(self, policy=None,  arns: List = [],  resources: List[AbstractTerraformResource] = None):
        super().__init__(policy, arns, resources)
    