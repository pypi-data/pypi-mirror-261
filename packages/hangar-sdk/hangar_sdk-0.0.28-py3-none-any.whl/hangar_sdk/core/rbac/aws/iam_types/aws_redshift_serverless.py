from typing import Union, Literal, List
from hangar_sdk.core.rbac.aws.base_type import GenericResourceType
from hangar_sdk.resources.terraform import AbstractTerraformResource

aws_redshift_serverless_privilege_type = Union[Literal["UpdateUsageLimit"], Literal["ListSnapshotCopyConfigurations"], Literal["CreateNamespace"], Literal["ListWorkgroups"], Literal["CreateWorkgroup"], Literal["UntagResource"], Literal["UpdateEndpointAccess"], Literal["RestoreFromRecoveryPoint"], Literal["GetCustomDomainAssociation"], Literal["GetEndpointAccess"], Literal["ListCustomDomainAssociations"], Literal["UpdateCustomDomainAssociation"], Literal["UpdateWorkgroup"], Literal["DeleteUsageLimit"], Literal["GetScheduledAction"], Literal["DeleteSnapshotCopyConfiguration"], Literal["GetUsageLimit"], Literal["CreateScheduledAction"], Literal["RestoreFromSnapshot"], Literal["CreateCustomDomainAssociation"], Literal["CreateSnapshot"], Literal["GetSnapshot"], Literal["UpdateSnapshot"], Literal["CreateSnapshotCopyConfiguration"], Literal["GetTableRestoreStatus"], Literal["ListScheduledActions"], Literal["ListTableRestoreStatus"], Literal["ConvertRecoveryPointToSnapshot"], Literal["GetWorkgroup"], Literal["ListTagsForResource"], Literal["ListEndpointAccess"], Literal["CreateUsageLimit"], Literal["DeleteScheduledAction"], Literal["DeleteWorkgroup"], Literal["ListSnapshots"], Literal["RestoreTableFromRecoveryPoint"], Literal["UpdateNamespace"], Literal["UpdateScheduledAction"], Literal["DescribeOneTimeCredit"], Literal["GetCredentials"], Literal["PutResourcePolicy"], Literal["DeleteEndpointAccess"], Literal["GetRecoveryPoint"], Literal["DeleteNamespace"], Literal["DeleteCustomDomainAssociation"], Literal["DeleteSnapshot"], Literal["RestoreTableFromSnapshot"], Literal["UpdateSnapshotCopyConfiguration"], Literal["DeleteResourcePolicy"], Literal["ListNamespaces"], Literal["ListRecoveryPoints"], Literal["TagResource"], Literal["GetNamespace"], Literal["ListUsageLimits"], Literal["CreateEndpointAccess"], Literal["GetResourcePolicy"]]
aws_redshift_serverless_condition_type = Union[Literal["aws:TagKeys"], Literal["aws:ResourceTag/${TagKey}"], Literal["aws:RequestTag/${TagKey}"]]

class aws_redshift_serverlessStatement(GenericResourceType[aws_redshift_serverless_privilege_type, aws_redshift_serverless_condition_type]):
    def __init__(self, policy=None,  arns: List = [],  resources: List[AbstractTerraformResource] = None):
        super().__init__(policy, arns, resources)
    