from typing import Union, Literal, List
from hangar_sdk.core.rbac.aws.base_type import GenericResourceType
from hangar_sdk.resources.terraform import AbstractTerraformResource

aws_cloudwatch_privilege_type = Union[Literal["GetInsightRuleReport"], Literal["UntagResource"], Literal["DeleteDashboards"], Literal["DisableAlarmActions"], Literal["GetMetricStream"], Literal["DeleteAnomalyDetector"], Literal["GenerateQuery"], Literal["DeleteServiceLevelObjective"], Literal["Link"], Literal["ListManagedInsightRules"], Literal["PutDashboard"], Literal["PutManagedInsightRules"], Literal["DescribeAnomalyDetectors"], Literal["DescribeAlarmsForMetric"], Literal["BatchGetServiceLevelIndicatorReport"], Literal["GetServiceData"], Literal["ListServiceLevelObjectives"], Literal["ListTagsForResource"], Literal["PutInsightRule"], Literal["PutAnomalyDetector"], Literal["GetService"], Literal["DeleteInsightRules"], Literal["ListMetrics"], Literal["StartMetricStreams"], Literal["UpdateServiceLevelObjective"], Literal["CreateServiceLevelObjective"], Literal["StopMetricStreams"], Literal["DeleteMetricStream"], Literal["EnableInsightRules"], Literal["DescribeAlarmHistory"], Literal["DescribeAlarms"], Literal["PutMetricAlarm"], Literal["PutMetricStream"], Literal["GetTopologyDiscoveryStatus"], Literal["GetMetricData"], Literal["DeleteAlarms"], Literal["PutCompositeAlarm"], Literal["GetServiceLevelObjective"], Literal["PutMetricData"], Literal["SetAlarmState"], Literal["GetTopologyMap"], Literal["DescribeInsightRules"], Literal["BatchGetServiceLevelObjectiveBudgetReport"], Literal["ListMetricStreams"], Literal["ListDashboards"], Literal["ListServices"], Literal["TagResource"], Literal["EnableTopologyDiscovery"], Literal["DisableInsightRules"], Literal["GetMetricStatistics"], Literal["EnableAlarmActions"], Literal["GetMetricWidgetImage"], Literal["GetDashboard"]]
aws_cloudwatch_condition_type = Union[Literal["aws:TagKeys"], Literal["cloudwatch:requestInsightRuleLogGroups"], Literal["cloudwatch:namespace"], Literal["cloudwatch:AlarmActions"], Literal["cloudwatch:requestManagedResourceARNs"], Literal["aws:RequestTag/${TagKey}"]]

class aws_cloudwatchStatement(GenericResourceType[aws_cloudwatch_privilege_type, aws_cloudwatch_condition_type]):
    def __init__(self, policy=None,  arns: List = [],  resources: List[AbstractTerraformResource] = None):
        super().__init__(policy, arns, resources)
    