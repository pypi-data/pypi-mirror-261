from typing import Union, Literal, List
from hangar_sdk.core.rbac.aws.base_type import GenericResourceType
from hangar_sdk.resources.terraform import AbstractTerraformResource

aws_elasticache_privilege_type = Union[Literal["CreateUserGroup"], Literal["ModifyUser"], Literal["DescribeCacheClusters"], Literal["CopySnapshot"], Literal["ModifyCacheCluster"], Literal["RemoveTagsFromResource"], Literal["ListAllowedNodeTypeModifications"], Literal["BatchStopUpdateAction"], Literal["DeleteCacheParameterGroup"], Literal["ModifyGlobalReplicationGroup"], Literal["DescribeServiceUpdates"], Literal["DeleteServerlessCacheSnapshot"], Literal["DeleteReplicationGroup"], Literal["ModifyCacheSubnetGroup"], Literal["DescribeReservedCacheNodesOfferings"], Literal["TestMigration"], Literal["CreateCacheParameterGroup"], Literal["ExportServerlessCacheSnapshot"], Literal["IncreaseReplicaCount"], Literal["CreateGlobalReplicationGroup"], Literal["ModifyServerlessCache"], Literal["DeleteCacheSubnetGroup"], Literal["DescribeServerlessCacheSnapshots"], Literal["CreateCacheCluster"], Literal["ModifyUserGroup"], Literal["StartMigration"], Literal["DescribeEvents"], Literal["InterruptClusterAzPower"], Literal["IncreaseNodeGroupsInGlobalReplicationGroup"], Literal["DeleteSnapshot"], Literal["DescribeCacheSubnetGroups"], Literal["CompleteMigration"], Literal["FailoverGlobalReplicationGroup"], Literal["DeleteUser"], Literal["DisassociateGlobalReplicationGroup"], Literal["BatchApplyUpdateAction"], Literal["CreateServerlessCacheSnapshot"], Literal["RebalanceSlotsInGlobalReplicationGroup"], Literal["CreateUser"], Literal["CreateCacheSecurityGroup"], Literal["CreateServerlessCache"], Literal["DescribeServerlessCaches"], Literal["CreateSnapshot"], Literal["DecreaseReplicaCount"], Literal["PurchaseReservedCacheNodesOffering"], Literal["Connect"], Literal["DeleteServerlessCache"], Literal["DeleteCacheCluster"], Literal["DescribeGlobalReplicationGroups"], Literal["DescribeUpdateActions"], Literal["DescribeSnapshots"], Literal["DescribeUserGroups"], Literal["DescribeReservedCacheNodes"], Literal["DecreaseNodeGroupsInGlobalReplicationGroup"], Literal["DeleteCacheSecurityGroup"], Literal["DescribeReplicationGroups"], Literal["AuthorizeCacheSecurityGroupIngress"], Literal["DescribeEngineDefaultParameters"], Literal["DescribeCacheParameterGroups"], Literal["DescribeCacheEngineVersions"], Literal["ListTagsForResource"], Literal["CreateReplicationGroup"], Literal["RevokeCacheSecurityGroupIngress"], Literal["RebootCacheCluster"], Literal["AddTagsToResource"], Literal["ModifyReplicationGroupShardConfiguration"], Literal["DescribeCacheParameters"], Literal["DeleteGlobalReplicationGroup"], Literal["TestFailover"], Literal["ModifyReplicationGroup"], Literal["ModifyCacheParameterGroup"], Literal["DescribeUsers"], Literal["ResetCacheParameterGroup"], Literal["DeleteUserGroup"], Literal["CopyServerlessCacheSnapshot"], Literal["CreateCacheSubnetGroup"], Literal["DescribeCacheSecurityGroups"]]
aws_elasticache_condition_type = Union[Literal["elasticache:DataStorageUnit"], Literal["elasticache:MultiAZEnabled"], Literal["elasticache:UserAuthenticationMode"], Literal["elasticache:ReplicasPerNodeGroup"], Literal["elasticache:TransitEncryptionEnabled"], Literal["aws:TagKeys"], Literal["elasticache:SnapshotRetentionLimit"], Literal["elasticache:AuthTokenEnabled"], Literal["elasticache:MaximumDataStorage"], Literal["elasticache:AtRestEncryptionEnabled"], Literal["elasticache:EngineType"], Literal["elasticache:NumNodeGroups"], Literal["elasticache:CacheParameterGroupName"], Literal["elasticache:EngineVersion"], Literal["elasticache:KmsKeyId"], Literal["aws:ResourceTag/${TagKey}"], Literal["elasticache:ClusterModeEnabled"], Literal["elasticache:MaximumECPUPerSecond"], Literal["elasticache:AutomaticFailoverEnabled"], Literal["elasticache:CacheNodeType"], Literal["aws:RequestTag/${TagKey}"]]

class aws_elasticacheStatement(GenericResourceType[aws_elasticache_privilege_type, aws_elasticache_condition_type]):
    def __init__(self, policy=None,  arns: List = [],  resources: List[AbstractTerraformResource] = None):
        super().__init__(policy, arns, resources)
    