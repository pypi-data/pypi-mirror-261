# Generated from vbaParser.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,281,3969,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,2,142,
        7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
        2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,
        7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
        2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
        7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,
        2,170,7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,
        7,175,2,176,7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,
        2,181,7,181,2,182,7,182,2,183,7,183,2,184,7,184,2,185,7,185,2,186,
        7,186,2,187,7,187,2,188,7,188,2,189,7,189,2,190,7,190,2,191,7,191,
        2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,2,196,7,196,2,197,
        7,197,2,198,7,198,2,199,7,199,2,200,7,200,2,201,7,201,2,202,7,202,
        2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,2,207,7,207,2,208,
        7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,2,213,7,213,
        2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,7,218,2,219,
        7,219,2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,7,224,
        2,225,7,225,2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,2,230,
        7,230,2,231,7,231,2,232,7,232,2,233,7,233,2,234,7,234,2,235,7,235,
        2,236,7,236,2,237,7,237,2,238,7,238,2,239,7,239,2,240,7,240,2,241,
        7,241,2,242,7,242,2,243,7,243,2,244,7,244,2,245,7,245,2,246,7,246,
        2,247,7,247,2,248,7,248,2,249,7,249,2,250,7,250,2,251,7,251,2,252,
        7,252,2,253,7,253,2,254,7,254,2,255,7,255,2,256,7,256,2,257,7,257,
        2,258,7,258,2,259,7,259,2,260,7,260,2,261,7,261,2,262,7,262,2,263,
        7,263,2,264,7,264,2,265,7,265,2,266,7,266,2,267,7,267,2,268,7,268,
        2,269,7,269,2,270,7,270,2,271,7,271,2,272,7,272,2,273,7,273,2,274,
        7,274,2,275,7,275,2,276,7,276,2,277,7,277,2,278,7,278,2,279,7,279,
        2,280,7,280,2,281,7,281,2,282,7,282,2,283,7,283,2,284,7,284,2,285,
        7,285,2,286,7,286,2,287,7,287,2,288,7,288,2,289,7,289,2,290,7,290,
        2,291,7,291,2,292,7,292,2,293,7,293,2,294,7,294,2,295,7,295,2,296,
        7,296,2,297,7,297,2,298,7,298,2,299,7,299,2,300,7,300,2,301,7,301,
        2,302,7,302,2,303,7,303,2,304,7,304,2,305,7,305,2,306,7,306,2,307,
        7,307,2,308,7,308,2,309,7,309,2,310,7,310,2,311,7,311,2,312,7,312,
        2,313,7,313,2,314,7,314,2,315,7,315,2,316,7,316,2,317,7,317,2,318,
        7,318,2,319,7,319,2,320,7,320,2,321,7,321,2,322,7,322,2,323,7,323,
        2,324,7,324,2,325,7,325,2,326,7,326,2,327,7,327,2,328,7,328,2,329,
        7,329,2,330,7,330,2,331,7,331,2,332,7,332,2,333,7,333,2,334,7,334,
        2,335,7,335,2,336,7,336,2,337,7,337,2,338,7,338,2,339,7,339,2,340,
        7,340,2,341,7,341,2,342,7,342,2,343,7,343,2,344,7,344,1,0,1,0,1,
        0,1,1,5,1,695,8,1,10,1,12,1,698,9,1,1,1,1,1,1,1,1,1,3,1,704,8,1,
        1,1,5,1,707,8,1,10,1,12,1,710,9,1,1,1,3,1,713,8,1,1,2,1,2,1,2,1,
        3,1,3,1,3,1,3,1,3,3,3,723,8,3,1,4,1,4,1,4,1,4,1,4,1,4,3,4,731,8,
        4,1,4,5,4,734,8,4,10,4,12,4,737,9,4,1,4,4,4,740,8,4,11,4,12,4,741,
        1,4,1,4,1,4,1,5,1,5,3,5,749,8,5,1,5,1,5,3,5,753,8,5,1,5,3,5,756,
        8,5,1,5,1,5,1,5,3,5,761,8,5,1,5,5,5,764,8,5,10,5,12,5,767,9,5,1,
        6,1,6,5,6,771,8,6,10,6,12,6,774,9,6,1,6,1,6,1,7,1,7,5,7,780,8,7,
        10,7,12,7,783,9,7,1,7,1,7,1,8,5,8,788,8,8,10,8,12,8,791,9,8,1,8,
        1,8,3,8,795,8,8,1,8,1,8,3,8,799,8,8,1,8,1,8,3,8,803,8,8,1,8,1,8,
        1,9,4,9,808,8,9,11,9,12,9,809,1,9,1,9,4,9,814,8,9,11,9,12,9,815,
        1,9,3,9,819,8,9,1,10,1,10,3,10,823,8,10,1,10,1,10,3,10,827,8,10,
        1,10,1,10,3,10,831,8,10,1,10,1,10,1,10,3,10,836,8,10,1,10,1,10,3,
        10,840,8,10,1,10,1,10,3,10,844,8,10,1,10,1,10,1,10,3,10,849,8,10,
        1,10,1,10,3,10,853,8,10,1,10,1,10,3,10,857,8,10,1,10,1,10,1,10,3,
        10,862,8,10,1,10,1,10,3,10,866,8,10,1,10,1,10,3,10,870,8,10,1,10,
        1,10,1,10,3,10,875,8,10,1,10,1,10,3,10,879,8,10,1,10,1,10,3,10,883,
        8,10,1,10,1,10,1,10,3,10,888,8,10,1,10,1,10,3,10,892,8,10,1,10,1,
        10,3,10,896,8,10,1,10,3,10,899,8,10,1,11,3,11,902,8,11,1,11,5,11,
        905,8,11,10,11,12,11,908,9,11,1,11,1,11,1,12,3,12,913,8,12,1,12,
        1,12,1,13,1,13,3,13,919,8,13,1,14,1,14,1,14,3,14,924,8,14,1,15,1,
        15,3,15,928,8,15,1,16,4,16,931,8,16,11,16,12,16,932,1,16,1,16,4,
        16,937,8,16,11,16,12,16,938,1,16,4,16,942,8,16,11,16,12,16,943,1,
        16,1,16,5,16,948,8,16,10,16,12,16,951,9,16,1,16,4,16,954,8,16,11,
        16,12,16,955,1,16,1,16,1,16,1,16,1,16,5,16,963,8,16,10,16,12,16,
        966,9,16,3,16,968,8,16,1,17,1,17,4,17,972,8,17,11,17,12,17,973,4,
        17,976,8,17,11,17,12,17,977,1,17,1,17,4,17,982,8,17,11,17,12,17,
        983,5,17,986,8,17,10,17,12,17,989,9,17,1,17,1,17,1,17,1,17,4,17,
        995,8,17,11,17,12,17,996,5,17,999,8,17,10,17,12,17,1002,9,17,3,17,
        1004,8,17,1,18,1,18,1,18,3,18,1009,8,18,1,19,1,19,1,19,1,19,1,19,
        1,19,1,19,1,19,3,19,1019,8,19,1,20,1,20,1,20,3,20,1024,8,20,1,21,
        1,21,1,21,1,21,3,21,1030,8,21,1,22,1,22,1,22,1,22,3,22,1036,8,22,
        1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,25,
        1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,
        1,27,1,27,1,27,5,27,1067,8,27,10,27,12,27,1070,9,27,1,28,1,28,1,
        28,3,28,1075,8,28,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,30,1,31,1,
        31,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,33,1,34,1,34,1,35,1,35,1,
        36,1,36,1,37,1,37,1,37,1,37,1,37,1,37,3,37,1107,8,37,1,38,1,38,1,
        38,3,38,1112,8,38,1,39,1,39,1,39,1,39,1,39,1,39,3,39,1120,8,39,1,
        39,1,39,3,39,1124,8,39,1,39,3,39,1127,8,39,1,39,1,39,1,40,1,40,1,
        40,1,40,1,41,1,41,1,41,3,41,1138,8,41,1,41,1,41,1,41,1,42,1,42,1,
        42,1,42,1,42,3,42,1148,8,42,1,42,1,42,1,43,1,43,3,43,1154,8,43,1,
        43,3,43,1157,8,43,1,43,1,43,3,43,1161,8,43,1,43,1,43,3,43,1165,8,
        43,5,43,1167,8,43,10,43,12,43,1170,9,43,1,44,1,44,3,44,1174,8,44,
        1,44,1,44,3,44,1178,8,44,1,44,5,44,1181,8,44,10,44,12,44,1184,9,
        44,1,45,1,45,3,45,1188,8,45,1,46,1,46,3,46,1192,8,46,1,46,3,46,1195,
        8,46,1,47,1,47,3,47,1199,8,47,1,47,1,47,3,47,1203,8,47,1,48,1,48,
        1,48,1,48,3,48,1209,8,48,1,49,1,49,3,49,1213,8,49,1,50,1,50,1,50,
        1,50,1,50,1,50,3,50,1221,8,50,1,50,1,50,1,51,1,51,1,52,1,52,3,52,
        1229,8,52,1,52,3,52,1232,8,52,1,52,3,52,1235,8,52,1,52,1,52,1,53,
        1,53,3,53,1241,8,53,1,53,1,53,3,53,1245,8,53,1,53,5,53,1248,8,53,
        10,53,12,53,1251,9,53,1,54,3,54,1254,8,54,1,54,3,54,1257,8,54,1,
        54,1,54,1,55,1,55,1,55,1,55,1,55,1,56,1,56,1,57,1,57,1,57,1,57,1,
        57,1,57,1,58,1,58,1,58,1,58,1,59,1,59,3,59,1280,8,59,1,60,1,60,1,
        60,1,60,1,60,1,60,1,61,1,61,3,61,1290,8,61,1,62,1,62,1,63,1,63,1,
        63,1,63,1,64,1,64,3,64,1300,8,64,1,64,1,64,1,65,1,65,1,66,1,66,1,
        66,1,66,1,67,1,67,3,67,1312,8,67,1,67,1,67,3,67,1316,8,67,1,67,5,
        67,1319,8,67,10,67,12,67,1322,9,67,1,68,1,68,3,68,1326,8,68,1,69,
        1,69,3,69,1330,8,69,1,69,1,69,3,69,1334,8,69,1,69,1,69,1,70,1,70,
        1,70,1,70,3,70,1342,8,70,1,70,3,70,1345,8,70,1,70,1,70,3,70,1349,
        8,70,1,70,1,70,1,71,1,71,1,71,1,71,1,72,1,72,3,72,1359,8,72,1,72,
        1,72,1,73,1,73,1,73,1,73,1,74,1,74,1,74,1,74,4,74,1371,8,74,11,74,
        12,74,1372,1,74,1,74,4,74,1377,8,74,11,74,12,74,1378,1,74,1,74,1,
        74,1,74,1,75,1,75,1,75,1,75,5,75,1389,8,75,10,75,12,75,1392,9,75,
        1,76,1,76,3,76,1396,8,76,1,77,1,77,3,77,1400,8,77,1,78,1,78,1,78,
        1,79,1,79,1,79,1,79,1,80,3,80,1410,8,80,1,80,1,80,1,80,1,81,1,81,
        1,81,1,81,1,81,1,81,1,81,1,81,3,81,1423,8,81,1,82,1,82,1,82,1,82,
        1,83,1,83,3,83,1431,8,83,1,83,1,83,1,84,1,84,1,84,1,84,1,85,1,85,
        1,85,1,85,4,85,1443,8,85,11,85,12,85,1444,1,85,1,85,4,85,1449,8,
        85,11,85,12,85,1450,1,85,1,85,1,85,1,85,1,86,1,86,1,86,1,86,5,86,
        1461,8,86,10,86,12,86,1464,9,86,1,87,1,87,3,87,1468,8,87,1,88,1,
        88,3,88,1472,8,88,1,88,1,88,3,88,1476,8,88,1,88,3,88,1479,8,88,1,
        89,1,89,3,89,1483,8,89,1,89,1,89,1,90,1,90,1,90,1,90,1,91,1,91,1,
        91,1,91,3,91,1495,8,91,1,91,1,91,3,91,1499,8,91,1,92,1,92,1,92,1,
        92,1,92,1,92,1,92,1,92,3,92,1509,8,92,1,93,1,93,1,93,1,93,1,93,1,
        93,1,93,1,93,3,93,1519,8,93,1,93,1,93,1,93,3,93,1524,8,93,1,94,1,
        94,1,94,1,94,3,94,1530,8,94,1,95,1,95,1,95,1,95,1,96,1,96,1,96,1,
        96,1,97,1,97,1,97,1,97,1,98,3,98,1545,8,98,1,98,1,98,1,98,1,98,1,
        98,3,98,1552,8,98,1,99,1,99,3,99,1556,8,99,1,99,3,99,1559,8,99,1,
        99,3,99,1562,8,99,1,99,1,99,1,100,1,100,5,100,1568,8,100,10,100,
        12,100,1571,9,100,5,100,1573,8,100,10,100,12,100,1576,9,100,1,101,
        1,101,5,101,1580,8,101,10,101,12,101,1583,9,101,5,101,1585,8,101,
        10,101,12,101,1588,9,101,1,102,1,102,1,103,1,103,3,103,1594,8,103,
        1,104,1,104,3,104,1598,8,104,1,105,1,105,1,105,1,105,3,105,1604,
        8,105,1,106,1,106,1,106,3,106,1609,8,106,1,106,1,106,1,106,3,106,
        1614,8,106,1,106,1,106,1,106,1,106,3,106,1620,8,106,1,106,3,106,
        1623,8,106,1,106,1,106,1,106,1,106,3,106,1629,8,106,1,106,3,106,
        1632,8,106,1,106,3,106,1635,8,106,1,106,1,106,3,106,1639,8,106,1,
        106,3,106,1642,8,106,1,106,3,106,1645,8,106,1,106,4,106,1648,8,106,
        11,106,12,106,1649,1,106,1,106,1,106,1,106,3,106,1656,8,106,1,107,
        1,107,1,107,3,107,1661,8,107,1,107,1,107,1,107,3,107,1666,8,107,
        1,107,1,107,1,107,1,107,3,107,1672,8,107,1,107,3,107,1675,8,107,
        1,107,3,107,1678,8,107,1,107,3,107,1681,8,107,1,107,1,107,1,107,
        1,107,3,107,1687,8,107,1,107,3,107,1690,8,107,1,107,3,107,1693,8,
        107,1,107,3,107,1696,8,107,1,107,3,107,1699,8,107,1,107,1,107,3,
        107,1703,8,107,1,107,3,107,1706,8,107,1,107,3,107,1709,8,107,1,107,
        4,107,1712,8,107,11,107,12,107,1713,1,107,1,107,1,107,1,107,3,107,
        1720,8,107,1,108,1,108,1,108,3,108,1725,8,108,1,108,1,108,1,108,
        3,108,1730,8,108,1,108,1,108,1,108,1,108,1,108,1,108,3,108,1738,
        8,108,1,108,3,108,1741,8,108,1,108,3,108,1744,8,108,1,108,3,108,
        1747,8,108,1,108,1,108,1,108,1,108,1,108,1,108,3,108,1755,8,108,
        1,108,3,108,1758,8,108,1,108,3,108,1761,8,108,1,108,3,108,1764,8,
        108,1,108,1,108,3,108,1768,8,108,1,108,3,108,1771,8,108,1,108,3,
        108,1774,8,108,1,108,4,108,1777,8,108,11,108,12,108,1778,1,108,1,
        108,1,108,1,108,3,108,1785,8,108,1,109,1,109,1,109,3,109,1790,8,
        109,1,109,1,109,1,109,3,109,1795,8,109,1,109,1,109,1,109,1,109,1,
        109,1,109,3,109,1803,8,109,1,109,1,109,1,109,1,109,1,109,1,109,1,
        109,1,109,1,109,3,109,1814,8,109,1,109,1,109,3,109,1818,8,109,1,
        109,3,109,1821,8,109,1,109,3,109,1824,8,109,1,109,4,109,1827,8,109,
        11,109,12,109,1828,1,109,1,109,1,109,1,109,3,109,1835,8,109,1,110,
        5,110,1838,8,110,10,110,12,110,1841,9,110,1,110,1,110,1,110,1,111,
        3,111,1847,8,111,1,111,1,111,3,111,1851,8,111,1,111,1,111,3,111,
        1855,8,111,1,111,1,111,3,111,1859,8,111,1,111,3,111,1862,8,111,1,
        112,1,112,1,113,1,113,1,114,1,114,1,115,1,115,3,115,1872,8,115,1,
        116,1,116,1,116,3,116,1877,8,116,1,117,1,117,1,117,3,117,1882,8,
        117,1,118,1,118,1,118,1,118,3,118,1888,8,118,1,118,3,118,1891,8,
        118,1,119,1,119,3,119,1895,8,119,1,119,1,119,1,120,1,120,3,120,1901,
        8,120,1,120,3,120,1904,8,120,1,120,3,120,1907,8,120,1,120,1,120,
        1,121,1,121,3,121,1913,8,121,1,121,1,121,3,121,1917,8,121,1,121,
        1,121,3,121,1921,8,121,3,121,1923,8,121,1,121,1,121,3,121,1927,8,
        121,1,121,1,121,1,122,1,122,3,122,1933,8,122,1,122,1,122,3,122,1937,
        8,122,1,122,1,122,1,122,1,122,3,122,1943,8,122,1,122,1,122,3,122,
        1947,8,122,1,122,3,122,1950,8,122,1,122,1,122,3,122,1954,8,122,1,
        123,1,123,3,123,1958,8,123,1,123,1,123,3,123,1962,8,123,1,123,5,
        123,1965,8,123,10,123,12,123,1968,9,123,1,124,1,124,3,124,1972,8,
        124,1,124,1,124,3,124,1976,8,124,1,124,5,124,1979,8,124,10,124,12,
        124,1982,9,124,1,125,1,125,1,126,1,126,1,126,3,126,1989,8,126,1,
        126,1,126,1,127,1,127,1,127,1,127,3,127,1997,8,127,1,127,3,127,2000,
        8,127,1,128,1,128,1,128,1,128,1,128,3,128,2007,8,128,1,128,1,128,
        1,128,1,128,1,128,1,128,1,128,1,128,3,128,2017,8,128,3,128,2019,
        8,128,1,129,1,129,3,129,2023,8,129,1,130,1,130,3,130,2027,8,130,
        1,131,1,131,3,131,2031,8,131,1,132,1,132,1,132,1,132,3,132,2037,
        8,132,1,132,1,132,1,132,1,132,3,132,2043,8,132,1,133,1,133,1,134,
        3,134,2048,8,134,1,134,1,134,1,134,1,134,1,134,3,134,2055,8,134,
        1,135,1,135,3,135,2059,8,135,1,135,1,135,1,136,1,136,1,137,1,137,
        1,138,1,138,1,139,1,139,1,140,4,140,2072,8,140,11,140,12,140,2073,
        1,141,5,141,2077,8,141,10,141,12,141,2080,9,141,1,141,1,141,1,141,
        1,141,4,141,2086,8,141,11,141,12,141,2087,1,141,1,141,1,141,1,141,
        5,141,2094,8,141,10,141,12,141,2097,9,141,1,141,1,141,1,141,3,141,
        2102,8,141,1,142,1,142,4,142,2106,8,142,11,142,12,142,2107,1,142,
        1,142,1,142,4,142,2113,8,142,11,142,12,142,2114,1,142,1,142,1,142,
        4,142,2120,8,142,11,142,12,142,2121,1,142,1,142,3,142,2126,8,142,
        1,143,1,143,1,143,1,143,1,143,3,143,2133,8,143,3,143,2135,8,143,
        1,144,1,144,3,144,2139,8,144,1,145,1,145,3,145,2143,8,145,1,145,
        1,145,3,145,2147,8,145,1,145,3,145,2150,8,145,1,146,1,146,1,147,
        1,147,1,148,1,148,1,149,5,149,2159,8,149,10,149,12,149,2162,9,149,
        1,149,4,149,2165,8,149,11,149,12,149,2166,1,149,1,149,1,149,4,149,
        2172,8,149,11,149,12,149,2173,1,149,1,149,3,149,2178,8,149,1,150,
        1,150,1,150,1,150,1,150,1,150,1,150,1,150,1,150,1,150,1,150,1,150,
        1,150,1,150,1,150,1,150,1,150,1,150,1,150,1,150,1,150,3,150,2201,
        8,150,1,151,1,151,1,151,1,151,1,151,1,151,3,151,2209,8,151,1,151,
        1,151,1,151,3,151,2214,8,151,1,151,1,151,1,151,3,151,2219,8,151,
        3,151,2221,8,151,1,152,1,152,1,152,1,152,3,152,2227,8,152,1,152,
        4,152,2230,8,152,11,152,12,152,2231,1,152,1,152,1,153,1,153,3,153,
        2238,8,153,1,154,1,154,3,154,2242,8,154,1,154,4,154,2245,8,154,11,
        154,12,154,2246,1,154,1,154,1,155,1,155,3,155,2253,8,155,1,155,4,
        155,2256,8,155,11,155,12,155,2257,1,155,1,155,1,155,3,155,2263,8,
        155,1,155,1,155,3,155,2267,8,155,1,155,1,155,1,155,1,156,1,156,3,
        156,2274,8,156,1,157,1,157,1,157,1,157,3,157,2280,8,157,1,157,1,
        157,3,157,2284,8,157,1,157,1,157,1,157,1,157,1,157,1,157,1,157,1,
        157,3,157,2294,8,157,1,158,1,158,1,159,1,159,1,160,1,160,1,160,1,
        160,1,161,1,161,1,162,1,162,3,162,2308,8,162,1,163,1,163,3,163,2312,
        8,163,1,163,4,163,2315,8,163,11,163,12,163,2316,1,163,1,163,1,164,
        1,164,3,164,2323,8,164,1,164,1,164,1,164,1,164,3,164,2329,8,164,
        1,164,1,164,3,164,2333,8,164,1,164,1,164,1,164,1,165,1,165,1,165,
        1,165,3,165,2342,8,165,1,165,1,165,3,165,2346,8,165,1,165,1,165,
        3,165,2350,8,165,1,165,1,165,1,166,1,166,1,167,1,167,1,167,1,167,
        1,168,1,168,3,168,2362,8,168,1,168,3,168,2365,8,168,1,168,3,168,
        2368,8,168,1,168,4,168,2371,8,168,11,168,12,168,2372,1,168,1,168,
        3,168,2377,8,168,1,168,3,168,2380,8,168,1,169,1,169,3,169,2384,8,
        169,1,170,1,170,3,170,2388,8,170,1,170,1,170,1,171,1,171,3,171,2394,
        8,171,1,171,1,171,1,172,1,172,1,172,1,172,1,173,1,173,3,173,2404,
        8,173,1,173,1,173,3,173,2408,8,173,1,173,1,173,3,173,2412,8,173,
        1,173,5,173,2415,8,173,10,173,12,173,2418,9,173,1,173,3,173,2421,
        8,173,1,173,4,173,2424,8,173,11,173,12,173,2425,1,173,1,173,1,173,
        1,173,1,173,3,173,2433,8,173,1,174,5,174,2436,8,174,10,174,12,174,
        2439,9,174,1,174,1,174,1,174,3,174,2444,8,174,1,174,1,174,3,174,
        2448,8,174,1,174,1,174,3,174,2452,8,174,1,174,3,174,2455,8,174,1,
        174,5,174,2458,8,174,10,174,12,174,2461,9,174,1,174,1,174,3,174,
        2465,8,174,1,174,1,174,3,174,2469,8,174,1,174,1,174,3,174,2473,8,
        174,3,174,2475,8,174,1,175,4,175,2478,8,175,11,175,12,175,2479,1,
        175,1,175,3,175,2484,8,175,1,175,3,175,2487,8,175,1,175,3,175,2490,
        8,175,1,176,1,176,3,176,2494,8,176,1,177,1,177,1,177,1,177,1,177,
        1,177,1,177,1,177,1,177,1,177,3,177,2506,8,177,1,178,1,178,1,178,
        1,178,1,178,1,178,1,178,1,178,1,179,1,179,3,179,2518,8,179,1,179,
        3,179,2521,8,179,1,180,1,180,1,180,3,180,2526,8,180,1,180,3,180,
        2529,8,180,5,180,2531,8,180,10,180,12,180,2534,9,180,1,180,3,180,
        2537,8,180,1,180,1,180,1,180,3,180,2542,8,180,1,180,3,180,2545,8,
        180,5,180,2547,8,180,10,180,12,180,2550,9,180,3,180,2552,8,180,1,
        181,1,181,1,181,1,181,3,181,2558,8,181,1,182,1,182,1,182,1,182,1,
        182,1,182,5,182,2566,8,182,10,182,12,182,2569,9,182,1,182,3,182,
        2572,8,182,1,182,4,182,2575,8,182,11,182,12,182,2576,1,182,1,182,
        1,182,1,182,1,183,4,183,2584,8,183,11,183,12,183,2585,1,183,1,183,
        3,183,2590,8,183,1,183,1,183,3,183,2594,8,183,1,183,1,183,3,183,
        2598,8,183,1,183,5,183,2601,8,183,10,183,12,183,2604,9,183,1,183,
        3,183,2607,8,183,1,184,4,184,2610,8,184,11,184,12,184,2611,1,184,
        1,184,1,184,1,184,3,184,2618,8,184,1,185,1,185,1,185,3,185,2623,
        8,185,1,185,1,185,3,185,2627,8,185,1,185,1,185,1,185,3,185,2632,
        8,185,1,185,1,185,1,185,3,185,2637,8,185,1,185,1,185,3,185,2641,
        8,185,1,186,1,186,1,187,1,187,1,188,1,188,1,189,1,189,1,189,1,189,
        1,189,3,189,2654,8,189,1,189,1,189,1,189,1,190,1,190,3,190,2661,
        8,190,1,190,1,190,1,190,1,190,1,190,1,191,1,191,1,191,1,191,1,191,
        3,191,2673,8,191,1,191,1,191,1,191,1,192,1,192,1,193,1,193,3,193,
        2682,8,193,1,193,1,193,3,193,2686,8,193,1,193,1,193,1,193,1,193,
        1,194,1,194,1,194,1,194,1,195,1,195,1,195,1,195,1,196,1,196,1,196,
        1,196,1,197,1,197,3,197,2706,8,197,1,197,1,197,3,197,2710,8,197,
        1,197,1,197,3,197,2714,8,197,1,197,1,197,3,197,2718,8,197,1,197,
        1,197,3,197,2722,8,197,1,198,1,198,3,198,2726,8,198,1,198,1,198,
        3,198,2730,8,198,1,198,5,198,2733,8,198,10,198,12,198,2736,9,198,
        3,198,2738,8,198,1,199,1,199,1,200,1,200,3,200,2744,8,200,1,200,
        1,200,3,200,2748,8,200,1,200,4,200,2751,8,200,11,200,12,200,2752,
        1,200,1,200,1,200,1,200,1,201,1,201,1,202,1,202,1,202,1,202,1,202,
        1,202,1,202,1,202,1,202,1,202,3,202,2771,8,202,1,203,1,203,3,203,
        2775,8,203,1,203,3,203,2778,8,203,1,203,3,203,2781,8,203,1,203,1,
        203,1,204,1,204,1,204,1,204,1,205,1,205,1,206,1,206,1,206,1,206,
        3,206,2795,8,206,1,206,3,206,2798,8,206,1,206,1,206,1,207,1,207,
        3,207,2804,8,207,1,207,1,207,3,207,2808,8,207,1,207,5,207,2811,8,
        207,10,207,12,207,2814,9,207,1,208,1,208,1,208,1,208,3,208,2820,
        8,208,1,209,1,209,3,209,2824,8,209,1,209,1,209,1,210,1,210,3,210,
        2830,8,210,1,210,1,210,1,211,1,211,3,211,2836,8,211,1,211,1,211,
        1,212,1,212,3,212,2842,8,212,1,212,1,212,1,213,1,213,3,213,2848,
        8,213,1,213,1,213,3,213,2852,8,213,1,213,1,213,1,214,1,214,3,214,
        2858,8,214,1,214,1,214,3,214,2862,8,214,1,214,5,214,2865,8,214,10,
        214,12,214,2868,9,214,1,215,1,215,1,215,3,215,2873,8,215,1,215,1,
        215,1,216,1,216,3,216,2879,8,216,1,216,1,216,1,217,1,217,1,218,1,
        218,3,218,2887,8,218,1,218,3,218,2890,8,218,1,219,1,219,3,219,2894,
        8,219,1,219,1,219,1,220,1,220,3,220,2900,8,220,1,220,1,220,3,220,
        2904,8,220,1,220,5,220,2907,8,220,10,220,12,220,2910,9,220,1,221,
        1,221,1,222,1,222,3,222,2916,8,222,1,222,1,222,3,222,2920,8,222,
        1,222,1,222,3,222,2924,8,222,1,222,1,222,3,222,2928,8,222,1,222,
        1,222,3,222,2932,8,222,1,222,1,222,3,222,2936,8,222,1,222,3,222,
        2939,8,222,1,222,1,222,3,222,2943,8,222,1,222,1,222,3,222,2947,8,
        222,1,222,1,222,1,223,1,223,1,224,1,224,1,225,1,225,1,226,1,226,
        1,227,1,227,3,227,2961,8,227,1,227,1,227,3,227,2965,8,227,1,227,
        1,227,3,227,2969,8,227,1,227,1,227,1,228,1,228,3,228,2975,8,228,
        1,228,1,228,3,228,2979,8,228,1,228,1,228,3,228,2983,8,228,1,228,
        1,228,1,229,1,229,3,229,2989,8,229,1,229,1,229,3,229,2993,8,229,
        1,229,1,229,3,229,2997,8,229,1,229,1,229,1,230,1,230,1,230,1,230,
        3,230,3005,8,230,1,230,1,230,3,230,3009,8,230,1,230,1,230,1,231,
        1,231,1,231,3,231,3016,8,231,1,232,1,232,1,232,1,232,3,232,3022,
        8,232,1,232,1,232,1,233,1,233,1,233,1,233,1,233,1,233,3,233,3032,
        8,233,1,233,3,233,3035,8,233,1,234,1,234,3,234,3039,8,234,1,234,
        1,234,3,234,3043,8,234,1,235,1,235,1,235,1,235,1,236,1,236,1,237,
        1,237,1,237,1,237,1,237,1,237,1,237,1,237,1,237,1,237,1,237,1,237,
        3,237,3063,8,237,1,238,1,238,3,238,3067,8,238,1,238,1,238,3,238,
        3071,8,238,1,238,3,238,3074,8,238,1,238,3,238,3077,8,238,1,238,3,
        238,3080,8,238,1,238,3,238,3083,8,238,1,238,3,238,3086,8,238,1,238,
        3,238,3089,8,238,1,238,1,238,3,238,3093,8,238,1,238,1,238,3,238,
        3097,8,238,1,238,3,238,3100,8,238,1,239,1,239,1,240,1,240,3,240,
        3106,8,240,1,240,1,240,1,241,1,241,1,242,1,242,1,242,1,243,1,243,
        1,243,1,243,1,243,1,243,3,243,3121,8,243,1,244,1,244,1,244,1,244,
        1,244,1,244,1,244,1,244,1,244,1,244,1,244,1,244,1,244,1,244,1,244,
        3,244,3138,8,244,1,245,1,245,1,245,1,245,1,245,1,245,1,246,1,246,
        1,247,1,247,3,247,3150,8,247,1,248,1,248,1,248,1,249,1,249,1,250,
        1,250,1,250,3,250,3160,8,250,1,250,3,250,3163,8,250,3,250,3165,8,
        250,1,251,1,251,3,251,3169,8,251,1,251,1,251,3,251,3173,8,251,1,
        251,5,251,3176,8,251,10,251,12,251,3179,9,251,1,252,1,252,1,252,
        1,252,3,252,3185,8,252,1,252,1,252,3,252,3189,8,252,1,252,1,252,
        1,253,1,253,1,254,1,254,1,254,1,254,3,254,3199,8,254,1,254,1,254,
        3,254,3203,8,254,1,254,1,254,1,255,1,255,3,255,3209,8,255,1,255,
        1,255,1,255,1,255,1,255,3,255,3216,8,255,1,256,1,256,1,257,1,257,
        1,258,1,258,1,258,1,258,3,258,3226,8,258,1,258,1,258,3,258,3230,
        8,258,1,258,3,258,3233,8,258,1,259,1,259,1,259,1,259,1,259,1,259,
        3,259,3241,8,259,1,259,1,259,3,259,3245,8,259,1,259,1,259,1,260,
        1,260,1,261,1,261,1,261,1,261,3,261,3255,8,261,1,261,1,261,3,261,
        3259,8,261,1,261,1,261,1,262,1,262,1,263,1,263,1,263,1,263,3,263,
        3269,8,263,1,263,1,263,3,263,3273,8,263,1,263,3,263,3276,8,263,1,
        264,4,264,3279,8,264,11,264,12,264,3280,1,265,1,265,3,265,3285,8,
        265,1,265,3,265,3288,8,265,1,266,1,266,1,266,3,266,3293,8,266,1,
        267,1,267,1,268,1,268,1,269,1,269,1,269,1,269,3,269,3303,8,269,1,
        269,1,269,3,269,3307,8,269,1,269,1,269,1,270,1,270,1,271,1,271,1,
        271,1,271,3,271,3317,8,271,1,271,1,271,3,271,3321,8,271,1,271,1,
        271,1,272,1,272,1,273,1,273,1,273,1,273,3,273,3331,8,273,1,273,1,
        273,3,273,3335,8,273,1,273,3,273,3338,8,273,1,274,1,274,1,274,1,
        274,3,274,3344,8,274,1,274,1,274,3,274,3348,8,274,1,274,1,274,1,
        275,1,275,3,275,3354,8,275,1,275,1,275,3,275,3358,8,275,1,275,5,
        275,3361,8,275,10,275,12,275,3364,9,275,1,276,1,276,1,277,1,277,
        1,277,1,277,3,277,3372,8,277,1,277,1,277,3,277,3376,8,277,1,277,
        3,277,3379,8,277,1,277,3,277,3382,8,277,1,277,1,277,1,277,1,278,
        1,278,1,279,1,279,1,280,1,280,1,280,1,280,3,280,3395,8,280,1,280,
        1,280,3,280,3399,8,280,1,280,3,280,3402,8,280,1,280,3,280,3405,8,
        280,1,280,1,280,3,280,3409,8,280,1,280,1,280,1,281,1,281,1,282,1,
        282,1,282,1,282,1,282,1,282,3,282,3421,8,282,1,282,1,282,3,282,3425,
        8,282,1,282,1,282,1,282,1,282,1,282,1,282,1,282,1,282,3,282,3435,
        8,282,1,282,1,282,3,282,3439,8,282,1,282,3,282,3442,8,282,1,282,
        1,282,1,282,1,282,1,282,1,282,1,282,1,282,1,282,1,282,1,282,1,282,
        1,282,1,282,3,282,3458,8,282,1,283,1,283,1,284,1,284,1,285,1,285,
        1,285,1,285,1,285,1,285,1,285,1,285,3,285,3472,8,285,1,285,1,285,
        3,285,3476,8,285,1,285,1,285,3,285,3480,8,285,1,285,1,285,1,285,
        3,285,3485,8,285,1,285,1,285,3,285,3489,8,285,1,285,1,285,1,285,
        3,285,3494,8,285,1,285,1,285,3,285,3498,8,285,1,285,1,285,1,285,
        3,285,3503,8,285,1,285,1,285,3,285,3507,8,285,1,285,1,285,1,285,
        3,285,3512,8,285,1,285,1,285,3,285,3516,8,285,1,285,1,285,1,285,
        3,285,3521,8,285,1,285,1,285,3,285,3525,8,285,1,285,1,285,1,285,
        3,285,3530,8,285,1,285,1,285,3,285,3534,8,285,1,285,5,285,3537,8,
        285,10,285,12,285,3540,9,285,1,286,1,286,1,286,1,286,3,286,3546,
        8,286,1,286,1,286,1,286,3,286,3551,8,286,1,286,1,286,1,286,3,286,
        3556,8,286,1,286,1,286,3,286,3560,8,286,1,286,1,286,3,286,3564,8,
        286,1,286,1,286,1,286,3,286,3569,8,286,1,286,1,286,3,286,3573,8,
        286,1,286,1,286,3,286,3577,8,286,1,286,1,286,1,286,1,286,1,286,1,
        286,1,286,3,286,3586,8,286,1,286,1,286,3,286,3590,8,286,1,286,1,
        286,1,286,1,286,3,286,3596,8,286,1,286,1,286,3,286,3600,8,286,1,
        286,1,286,3,286,3604,8,286,1,286,1,286,3,286,3608,8,286,1,286,5,
        286,3611,8,286,10,286,12,286,3614,9,286,1,287,1,287,1,287,1,287,
        1,287,1,287,3,287,3622,8,287,3,287,3624,8,287,1,288,1,288,3,288,
        3628,8,288,1,288,1,288,3,288,3632,8,288,1,288,1,288,1,289,1,289,
        3,289,3638,8,289,1,289,1,289,3,289,3642,8,289,1,289,1,289,3,289,
        3646,8,289,1,289,1,289,1,290,1,290,3,290,3652,8,290,1,290,1,290,
        1,291,1,291,3,291,3658,8,291,1,291,1,291,1,292,1,292,3,292,3664,
        8,292,1,292,1,292,1,293,1,293,1,293,3,293,3671,8,293,1,294,1,294,
        1,295,1,295,1,295,3,295,3678,8,295,1,295,1,295,1,295,1,295,3,295,
        3684,8,295,1,295,1,295,3,295,3688,8,295,1,295,1,295,3,295,3692,8,
        295,1,295,1,295,3,295,3696,8,295,1,296,1,296,3,296,3700,8,296,1,
        296,1,296,3,296,3704,8,296,1,296,1,296,3,296,3708,8,296,1,296,1,
        296,1,297,3,297,3713,8,297,1,298,1,298,3,298,3717,8,298,1,298,1,
        298,3,298,3721,8,298,5,298,3723,8,298,10,298,12,298,3726,9,298,1,
        298,1,298,1,298,3,298,3731,8,298,1,298,1,298,3,298,3735,8,298,5,
        298,3737,8,298,10,298,12,298,3740,9,298,1,298,3,298,3743,8,298,1,
        299,3,299,3746,8,299,1,300,1,300,1,301,1,301,3,301,3752,8,301,1,
        301,1,301,3,301,3756,8,301,1,301,5,301,3759,8,301,10,301,12,301,
        3762,9,301,1,302,1,302,3,302,3766,8,302,1,302,1,302,3,302,3770,8,
        302,1,302,1,302,1,303,1,303,3,303,3776,8,303,1,303,1,303,3,303,3780,
        8,303,1,304,1,304,1,304,1,304,1,304,1,304,3,304,3788,8,304,1,304,
        1,304,3,304,3792,8,304,1,304,1,304,1,304,1,304,1,304,3,304,3799,
        8,304,1,304,1,304,3,304,3803,8,304,1,304,1,304,3,304,3807,8,304,
        1,304,1,304,3,304,3811,8,304,1,304,1,304,3,304,3815,8,304,1,305,
        1,305,3,305,3819,8,305,1,306,1,306,1,306,1,307,1,307,1,307,1,308,
        1,308,1,309,1,309,1,310,1,310,1,311,1,311,1,312,1,312,1,313,1,313,
        1,314,1,314,3,314,3841,8,314,1,315,1,315,3,315,3845,8,315,1,316,
        1,316,1,316,1,316,1,317,1,317,3,317,3853,8,317,1,318,4,318,3856,
        8,318,11,318,12,318,3857,1,319,3,319,3861,8,319,1,319,1,319,1,319,
        3,319,3866,8,319,1,319,3,319,3869,8,319,1,320,3,320,3872,8,320,1,
        320,1,320,1,320,3,320,3877,8,320,1,321,1,321,3,321,3881,8,321,1,
        321,1,321,3,321,3885,8,321,4,321,3887,8,321,11,321,12,321,3888,1,
        322,1,322,3,322,3893,8,322,1,322,4,322,3896,8,322,11,322,12,322,
        3897,1,323,1,323,1,324,1,324,1,324,1,324,1,324,1,324,1,324,1,324,
        1,324,1,324,3,324,3912,8,324,1,325,1,325,3,325,3916,8,325,1,326,
        1,326,1,327,1,327,1,328,1,328,1,329,1,329,1,330,1,330,1,331,1,331,
        1,332,1,332,1,333,1,333,1,334,1,334,1,335,1,335,1,335,3,335,3939,
        8,335,1,336,1,336,1,337,1,337,1,338,1,338,1,339,1,339,1,340,1,340,
        1,341,1,341,1,341,1,341,3,341,3955,8,341,1,342,1,342,1,342,1,342,
        1,342,1,342,3,342,3963,8,342,1,343,1,343,1,344,1,344,1,344,0,2,570,
        572,345,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,
        42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,
        86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,
        122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,
        154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,
        186,188,190,192,194,196,198,200,202,204,206,208,210,212,214,216,
        218,220,222,224,226,228,230,232,234,236,238,240,242,244,246,248,
        250,252,254,256,258,260,262,264,266,268,270,272,274,276,278,280,
        282,284,286,288,290,292,294,296,298,300,302,304,306,308,310,312,
        314,316,318,320,322,324,326,328,330,332,334,336,338,340,342,344,
        346,348,350,352,354,356,358,360,362,364,366,368,370,372,374,376,
        378,380,382,384,386,388,390,392,394,396,398,400,402,404,406,408,
        410,412,414,416,418,420,422,424,426,428,430,432,434,436,438,440,
        442,444,446,448,450,452,454,456,458,460,462,464,466,468,470,472,
        474,476,478,480,482,484,486,488,490,492,494,496,498,500,502,504,
        506,508,510,512,514,516,518,520,522,524,526,528,530,532,534,536,
        538,540,542,544,546,548,550,552,554,556,558,560,562,564,566,568,
        570,572,574,576,578,580,582,584,586,588,590,592,594,596,598,600,
        602,604,606,608,610,612,614,616,618,620,622,624,626,628,630,632,
        634,636,638,640,642,644,646,648,650,652,654,656,658,660,662,664,
        666,668,670,672,674,676,678,680,682,684,686,688,0,33,2,0,13,13,177,
        177,2,0,53,57,59,66,2,0,67,67,146,146,2,0,91,91,150,150,2,0,109,
        109,164,164,4,0,87,87,91,91,146,146,150,150,1,0,16,17,1,0,34,35,
        5,0,131,131,243,243,245,246,248,248,250,250,1,0,124,127,5,0,8,8,
        13,13,99,99,142,142,152,152,2,0,240,240,261,261,4,0,190,190,199,
        199,205,205,207,207,2,0,204,204,209,209,2,0,241,241,253,253,2,0,
        251,251,257,257,7,0,102,102,111,111,243,243,245,246,248,248,250,
        250,254,254,5,0,5,5,79,79,96,96,141,141,219,219,2,0,271,271,278,
        278,33,0,20,21,39,39,41,41,51,51,53,57,59,68,73,74,76,78,80,80,82,
        83,87,91,93,95,97,97,99,99,109,109,114,114,121,122,130,130,137,139,
        145,146,150,151,153,153,155,155,158,160,162,164,170,170,172,172,
        175,175,181,181,184,184,213,214,216,216,218,218,15,0,6,6,10,10,16,
        17,21,21,72,73,98,98,131,131,140,140,143,144,166,166,169,169,176,
        176,178,179,185,185,217,218,11,0,3,3,5,5,79,79,96,96,102,102,111,
        111,128,128,131,132,141,141,182,182,219,219,16,0,1,1,22,27,31,31,
        36,38,42,45,48,48,50,50,69,69,86,86,101,101,107,108,123,123,148,
        148,161,161,165,165,173,173,6,0,9,9,32,32,99,100,106,106,161,161,
        183,183,12,0,14,14,18,18,46,46,48,48,70,70,103,103,115,115,117,117,
        119,119,167,167,173,173,210,210,12,0,15,15,19,19,47,47,49,49,71,
        71,104,104,116,116,118,118,120,120,168,168,174,174,211,211,2,0,48,
        48,173,173,2,0,85,85,180,180,2,0,75,75,134,134,3,0,7,7,113,113,186,
        209,3,0,28,28,52,52,58,58,6,0,237,238,242,242,244,244,247,247,255,
        255,259,259,25,0,2,2,4,4,8,8,11,13,29,30,33,35,40,40,81,81,92,92,
        105,105,110,110,112,112,124,127,129,129,135,135,142,142,147,147,
        152,152,154,154,157,157,171,171,177,177,212,212,215,215,220,236,
        4334,0,690,1,0,0,0,2,696,1,0,0,0,4,714,1,0,0,0,6,717,1,0,0,0,8,724,
        1,0,0,0,10,746,1,0,0,0,12,768,1,0,0,0,14,777,1,0,0,0,16,789,1,0,
        0,0,18,813,1,0,0,0,20,898,1,0,0,0,22,901,1,0,0,0,24,912,1,0,0,0,
        26,918,1,0,0,0,28,923,1,0,0,0,30,927,1,0,0,0,32,967,1,0,0,0,34,1003,
        1,0,0,0,36,1008,1,0,0,0,38,1018,1,0,0,0,40,1023,1,0,0,0,42,1029,
        1,0,0,0,44,1035,1,0,0,0,46,1037,1,0,0,0,48,1043,1,0,0,0,50,1049,
        1,0,0,0,52,1053,1,0,0,0,54,1059,1,0,0,0,56,1074,1,0,0,0,58,1076,
        1,0,0,0,60,1078,1,0,0,0,62,1084,1,0,0,0,64,1086,1,0,0,0,66,1088,
        1,0,0,0,68,1094,1,0,0,0,70,1096,1,0,0,0,72,1098,1,0,0,0,74,1106,
        1,0,0,0,76,1111,1,0,0,0,78,1113,1,0,0,0,80,1130,1,0,0,0,82,1134,
        1,0,0,0,84,1142,1,0,0,0,86,1153,1,0,0,0,88,1171,1,0,0,0,90,1187,
        1,0,0,0,92,1189,1,0,0,0,94,1196,1,0,0,0,96,1204,1,0,0,0,98,1212,
        1,0,0,0,100,1214,1,0,0,0,102,1224,1,0,0,0,104,1226,1,0,0,0,106,1238,
        1,0,0,0,108,1253,1,0,0,0,110,1260,1,0,0,0,112,1265,1,0,0,0,114,1267,
        1,0,0,0,116,1273,1,0,0,0,118,1279,1,0,0,0,120,1281,1,0,0,0,122,1289,
        1,0,0,0,124,1291,1,0,0,0,126,1293,1,0,0,0,128,1299,1,0,0,0,130,1303,
        1,0,0,0,132,1305,1,0,0,0,134,1309,1,0,0,0,136,1325,1,0,0,0,138,1327,
        1,0,0,0,140,1337,1,0,0,0,142,1352,1,0,0,0,144,1358,1,0,0,0,146,1362,
        1,0,0,0,148,1366,1,0,0,0,150,1384,1,0,0,0,152,1395,1,0,0,0,154,1399,
        1,0,0,0,156,1401,1,0,0,0,158,1404,1,0,0,0,160,1409,1,0,0,0,162,1422,
        1,0,0,0,164,1424,1,0,0,0,166,1430,1,0,0,0,168,1434,1,0,0,0,170,1438,
        1,0,0,0,172,1456,1,0,0,0,174,1467,1,0,0,0,176,1469,1,0,0,0,178,1482,
        1,0,0,0,180,1486,1,0,0,0,182,1490,1,0,0,0,184,1500,1,0,0,0,186,1510,
        1,0,0,0,188,1525,1,0,0,0,190,1531,1,0,0,0,192,1535,1,0,0,0,194,1539,
        1,0,0,0,196,1544,1,0,0,0,198,1553,1,0,0,0,200,1574,1,0,0,0,202,1586,
        1,0,0,0,204,1589,1,0,0,0,206,1593,1,0,0,0,208,1597,1,0,0,0,210,1603,
        1,0,0,0,212,1608,1,0,0,0,214,1660,1,0,0,0,216,1724,1,0,0,0,218,1789,
        1,0,0,0,220,1839,1,0,0,0,222,1861,1,0,0,0,224,1863,1,0,0,0,226,1865,
        1,0,0,0,228,1867,1,0,0,0,230,1871,1,0,0,0,232,1876,1,0,0,0,234,1881,
        1,0,0,0,236,1883,1,0,0,0,238,1892,1,0,0,0,240,1898,1,0,0,0,242,1910,
        1,0,0,0,244,1953,1,0,0,0,246,1955,1,0,0,0,248,1969,1,0,0,0,250,1983,
        1,0,0,0,252,1988,1,0,0,0,254,1992,1,0,0,0,256,2001,1,0,0,0,258,2022,
        1,0,0,0,260,2024,1,0,0,0,262,2028,1,0,0,0,264,2042,1,0,0,0,266,2044,
        1,0,0,0,268,2047,1,0,0,0,270,2056,1,0,0,0,272,2062,1,0,0,0,274,2064,
        1,0,0,0,276,2066,1,0,0,0,278,2068,1,0,0,0,280,2071,1,0,0,0,282,2101,
        1,0,0,0,284,2125,1,0,0,0,286,2134,1,0,0,0,288,2138,1,0,0,0,290,2140,
        1,0,0,0,292,2151,1,0,0,0,294,2153,1,0,0,0,296,2155,1,0,0,0,298,2177,
        1,0,0,0,300,2200,1,0,0,0,302,2220,1,0,0,0,304,2222,1,0,0,0,306,2237,
        1,0,0,0,308,2239,1,0,0,0,310,2250,1,0,0,0,312,2273,1,0,0,0,314,2275,
        1,0,0,0,316,2295,1,0,0,0,318,2297,1,0,0,0,320,2299,1,0,0,0,322,2303,
        1,0,0,0,324,2307,1,0,0,0,326,2309,1,0,0,0,328,2320,1,0,0,0,330,2337,
        1,0,0,0,332,2353,1,0,0,0,334,2355,1,0,0,0,336,2359,1,0,0,0,338,2383,
        1,0,0,0,340,2385,1,0,0,0,342,2391,1,0,0,0,344,2397,1,0,0,0,346,2401,
        1,0,0,0,348,2474,1,0,0,0,350,2477,1,0,0,0,352,2493,1,0,0,0,354,2495,
        1,0,0,0,356,2507,1,0,0,0,358,2515,1,0,0,0,360,2551,1,0,0,0,362,2557,
        1,0,0,0,364,2559,1,0,0,0,366,2583,1,0,0,0,368,2609,1,0,0,0,370,2640,
        1,0,0,0,372,2642,1,0,0,0,374,2644,1,0,0,0,376,2646,1,0,0,0,378,2653,
        1,0,0,0,380,2658,1,0,0,0,382,2672,1,0,0,0,384,2677,1,0,0,0,386,2679,
        1,0,0,0,388,2691,1,0,0,0,390,2695,1,0,0,0,392,2699,1,0,0,0,394,2703,
        1,0,0,0,396,2737,1,0,0,0,398,2739,1,0,0,0,400,2741,1,0,0,0,402,2758,
        1,0,0,0,404,2770,1,0,0,0,406,2772,1,0,0,0,408,2784,1,0,0,0,410,2788,
        1,0,0,0,412,2790,1,0,0,0,414,2801,1,0,0,0,416,2819,1,0,0,0,418,2821,
        1,0,0,0,420,2827,1,0,0,0,422,2833,1,0,0,0,424,2839,1,0,0,0,426,2845,
        1,0,0,0,428,2855,1,0,0,0,430,2872,1,0,0,0,432,2876,1,0,0,0,434,2882,
        1,0,0,0,436,2884,1,0,0,0,438,2891,1,0,0,0,440,2897,1,0,0,0,442,2911,
        1,0,0,0,444,2913,1,0,0,0,446,2950,1,0,0,0,448,2952,1,0,0,0,450,2954,
        1,0,0,0,452,2956,1,0,0,0,454,2958,1,0,0,0,456,2972,1,0,0,0,458,2988,
        1,0,0,0,460,3000,1,0,0,0,462,3015,1,0,0,0,464,3017,1,0,0,0,466,3034,
        1,0,0,0,468,3036,1,0,0,0,470,3044,1,0,0,0,472,3048,1,0,0,0,474,3062,
        1,0,0,0,476,3064,1,0,0,0,478,3101,1,0,0,0,480,3103,1,0,0,0,482,3109,
        1,0,0,0,484,3111,1,0,0,0,486,3120,1,0,0,0,488,3137,1,0,0,0,490,3139,
        1,0,0,0,492,3145,1,0,0,0,494,3149,1,0,0,0,496,3151,1,0,0,0,498,3154,
        1,0,0,0,500,3164,1,0,0,0,502,3166,1,0,0,0,504,3180,1,0,0,0,506,3192,
        1,0,0,0,508,3194,1,0,0,0,510,3215,1,0,0,0,512,3217,1,0,0,0,514,3219,
        1,0,0,0,516,3221,1,0,0,0,518,3234,1,0,0,0,520,3248,1,0,0,0,522,3250,
        1,0,0,0,524,3262,1,0,0,0,526,3264,1,0,0,0,528,3278,1,0,0,0,530,3287,
        1,0,0,0,532,3292,1,0,0,0,534,3294,1,0,0,0,536,3296,1,0,0,0,538,3298,
        1,0,0,0,540,3310,1,0,0,0,542,3312,1,0,0,0,544,3324,1,0,0,0,546,3326,
        1,0,0,0,548,3339,1,0,0,0,550,3351,1,0,0,0,552,3365,1,0,0,0,554,3367,
        1,0,0,0,556,3386,1,0,0,0,558,3388,1,0,0,0,560,3390,1,0,0,0,562,3412,
        1,0,0,0,564,3457,1,0,0,0,566,3459,1,0,0,0,568,3461,1,0,0,0,570,3471,
        1,0,0,0,572,3545,1,0,0,0,574,3623,1,0,0,0,576,3625,1,0,0,0,578,3635,
        1,0,0,0,580,3649,1,0,0,0,582,3655,1,0,0,0,584,3661,1,0,0,0,586,3670,
        1,0,0,0,588,3672,1,0,0,0,590,3695,1,0,0,0,592,3697,1,0,0,0,594,3712,
        1,0,0,0,596,3742,1,0,0,0,598,3745,1,0,0,0,600,3747,1,0,0,0,602,3749,
        1,0,0,0,604,3763,1,0,0,0,606,3779,1,0,0,0,608,3814,1,0,0,0,610,3818,
        1,0,0,0,612,3820,1,0,0,0,614,3823,1,0,0,0,616,3826,1,0,0,0,618,3828,
        1,0,0,0,620,3830,1,0,0,0,622,3832,1,0,0,0,624,3834,1,0,0,0,626,3836,
        1,0,0,0,628,3840,1,0,0,0,630,3844,1,0,0,0,632,3846,1,0,0,0,634,3852,
        1,0,0,0,636,3855,1,0,0,0,638,3860,1,0,0,0,640,3871,1,0,0,0,642,3886,
        1,0,0,0,644,3895,1,0,0,0,646,3899,1,0,0,0,648,3911,1,0,0,0,650,3915,
        1,0,0,0,652,3917,1,0,0,0,654,3919,1,0,0,0,656,3921,1,0,0,0,658,3923,
        1,0,0,0,660,3925,1,0,0,0,662,3927,1,0,0,0,664,3929,1,0,0,0,666,3931,
        1,0,0,0,668,3933,1,0,0,0,670,3938,1,0,0,0,672,3940,1,0,0,0,674,3942,
        1,0,0,0,676,3944,1,0,0,0,678,3946,1,0,0,0,680,3948,1,0,0,0,682,3954,
        1,0,0,0,684,3962,1,0,0,0,686,3964,1,0,0,0,688,3966,1,0,0,0,690,691,
        3,2,1,0,691,692,5,0,0,1,692,1,1,0,0,0,693,695,3,640,320,0,694,693,
        1,0,0,0,695,698,1,0,0,0,696,694,1,0,0,0,696,697,1,0,0,0,697,703,
        1,0,0,0,698,696,1,0,0,0,699,704,3,12,6,0,700,701,3,4,2,0,701,702,
        3,14,7,0,702,704,1,0,0,0,703,699,1,0,0,0,703,700,1,0,0,0,704,708,
        1,0,0,0,705,707,3,638,319,0,706,705,1,0,0,0,707,710,1,0,0,0,708,
        706,1,0,0,0,708,709,1,0,0,0,709,712,1,0,0,0,710,708,1,0,0,0,711,
        713,5,278,0,0,712,711,1,0,0,0,712,713,1,0,0,0,713,3,1,0,0,0,714,
        715,3,6,3,0,715,716,3,8,4,0,716,5,1,0,0,0,717,718,5,212,0,0,718,
        719,5,278,0,0,719,722,5,269,0,0,720,721,5,278,0,0,721,723,5,33,0,
        0,722,720,1,0,0,0,722,723,1,0,0,0,723,7,1,0,0,0,724,725,3,638,319,
        0,725,730,5,12,0,0,726,727,5,278,0,0,727,728,5,264,0,0,728,729,5,
        278,0,0,729,731,3,650,325,0,730,726,1,0,0,0,730,731,1,0,0,0,731,
        735,1,0,0,0,732,734,3,638,319,0,733,732,1,0,0,0,734,737,1,0,0,0,
        735,733,1,0,0,0,735,736,1,0,0,0,736,739,1,0,0,0,737,735,1,0,0,0,
        738,740,3,10,5,0,739,738,1,0,0,0,740,741,1,0,0,0,741,739,1,0,0,0,
        741,742,1,0,0,0,742,743,1,0,0,0,743,744,3,638,319,0,744,745,5,77,
        0,0,745,9,1,0,0,0,746,748,3,650,325,0,747,749,5,278,0,0,748,747,
        1,0,0,0,748,749,1,0,0,0,749,750,1,0,0,0,750,752,5,243,0,0,751,753,
        5,278,0,0,752,751,1,0,0,0,752,753,1,0,0,0,753,755,1,0,0,0,754,756,
        5,251,0,0,755,754,1,0,0,0,755,756,1,0,0,0,756,757,1,0,0,0,757,760,
        3,574,287,0,758,759,5,276,0,0,759,761,3,574,287,0,760,758,1,0,0,
        0,760,761,1,0,0,0,761,765,1,0,0,0,762,764,3,638,319,0,763,762,1,
        0,0,0,764,767,1,0,0,0,765,763,1,0,0,0,765,766,1,0,0,0,766,11,1,0,
        0,0,767,765,1,0,0,0,768,772,3,16,8,0,769,771,3,640,320,0,770,769,
        1,0,0,0,771,774,1,0,0,0,772,770,1,0,0,0,772,773,1,0,0,0,773,775,
        1,0,0,0,774,772,1,0,0,0,775,776,3,22,11,0,776,13,1,0,0,0,777,781,
        3,18,9,0,778,780,3,638,319,0,779,778,1,0,0,0,780,783,1,0,0,0,781,
        779,1,0,0,0,781,782,1,0,0,0,782,784,1,0,0,0,783,781,1,0,0,0,784,
        785,3,24,12,0,785,15,1,0,0,0,786,788,3,638,319,0,787,786,1,0,0,0,
        788,791,1,0,0,0,789,787,1,0,0,0,789,790,1,0,0,0,790,792,1,0,0,0,
        791,789,1,0,0,0,792,794,5,7,0,0,793,795,5,278,0,0,794,793,1,0,0,
        0,794,795,1,0,0,0,795,796,1,0,0,0,796,798,5,200,0,0,797,799,5,278,
        0,0,798,797,1,0,0,0,798,799,1,0,0,0,799,800,1,0,0,0,800,802,5,243,
        0,0,801,803,5,278,0,0,802,801,1,0,0,0,802,803,1,0,0,0,803,804,1,
        0,0,0,804,805,5,265,0,0,805,17,1,0,0,0,806,808,3,638,319,0,807,806,
        1,0,0,0,808,809,1,0,0,0,809,807,1,0,0,0,809,810,1,0,0,0,810,811,
        1,0,0,0,811,812,3,20,10,0,812,814,1,0,0,0,813,807,1,0,0,0,814,815,
        1,0,0,0,815,813,1,0,0,0,815,816,1,0,0,0,816,818,1,0,0,0,817,819,
        5,278,0,0,818,817,1,0,0,0,818,819,1,0,0,0,819,19,1,0,0,0,820,822,
        5,7,0,0,821,823,5,278,0,0,822,821,1,0,0,0,822,823,1,0,0,0,823,824,
        1,0,0,0,824,826,5,200,0,0,825,827,5,278,0,0,826,825,1,0,0,0,826,
        827,1,0,0,0,827,828,1,0,0,0,828,830,5,243,0,0,829,831,5,278,0,0,
        830,829,1,0,0,0,830,831,1,0,0,0,831,832,1,0,0,0,832,899,5,265,0,
        0,833,835,5,7,0,0,834,836,5,278,0,0,835,834,1,0,0,0,835,836,1,0,
        0,0,836,837,1,0,0,0,837,839,5,193,0,0,838,840,5,278,0,0,839,838,
        1,0,0,0,839,840,1,0,0,0,840,841,1,0,0,0,841,843,5,243,0,0,842,844,
        5,278,0,0,843,842,1,0,0,0,843,844,1,0,0,0,844,845,1,0,0,0,845,899,
        3,672,336,0,846,848,5,7,0,0,847,849,5,278,0,0,848,847,1,0,0,0,848,
        849,1,0,0,0,849,850,1,0,0,0,850,852,5,188,0,0,851,853,5,278,0,0,
        852,851,1,0,0,0,852,853,1,0,0,0,853,854,1,0,0,0,854,856,5,243,0,
        0,855,857,5,278,0,0,856,855,1,0,0,0,856,857,1,0,0,0,857,858,1,0,
        0,0,858,899,3,672,336,0,859,861,5,7,0,0,860,862,5,278,0,0,861,860,
        1,0,0,0,861,862,1,0,0,0,862,863,1,0,0,0,863,865,5,201,0,0,864,866,
        5,278,0,0,865,864,1,0,0,0,865,866,1,0,0,0,866,867,1,0,0,0,867,869,
        5,243,0,0,868,870,5,278,0,0,869,868,1,0,0,0,869,870,1,0,0,0,870,
        871,1,0,0,0,871,899,3,672,336,0,872,874,5,7,0,0,873,875,5,278,0,
        0,874,873,1,0,0,0,874,875,1,0,0,0,875,876,1,0,0,0,876,878,5,191,
        0,0,877,879,5,278,0,0,878,877,1,0,0,0,878,879,1,0,0,0,879,880,1,
        0,0,0,880,882,5,243,0,0,881,883,5,278,0,0,882,881,1,0,0,0,882,883,
        1,0,0,0,883,884,1,0,0,0,884,899,3,672,336,0,885,887,5,7,0,0,886,
        888,5,278,0,0,887,886,1,0,0,0,887,888,1,0,0,0,888,889,1,0,0,0,889,
        891,5,189,0,0,890,892,5,278,0,0,891,890,1,0,0,0,891,892,1,0,0,0,
        892,893,1,0,0,0,893,895,5,243,0,0,894,896,5,278,0,0,895,894,1,0,
        0,0,895,896,1,0,0,0,896,897,1,0,0,0,897,899,3,672,336,0,898,820,
        1,0,0,0,898,833,1,0,0,0,898,846,1,0,0,0,898,859,1,0,0,0,898,872,
        1,0,0,0,898,885,1,0,0,0,899,21,1,0,0,0,900,902,3,32,16,0,901,900,
        1,0,0,0,901,902,1,0,0,0,902,906,1,0,0,0,903,905,3,638,319,0,904,
        903,1,0,0,0,905,908,1,0,0,0,906,904,1,0,0,0,906,907,1,0,0,0,907,
        909,1,0,0,0,908,906,1,0,0,0,909,910,3,200,100,0,910,23,1,0,0,0,911,
        913,3,34,17,0,912,911,1,0,0,0,912,913,1,0,0,0,913,914,1,0,0,0,914,
        915,3,202,101,0,915,25,1,0,0,0,916,919,3,648,324,0,917,919,3,28,
        14,0,918,916,1,0,0,0,918,917,1,0,0,0,919,27,1,0,0,0,920,924,3,30,
        15,0,921,924,3,684,342,0,922,924,3,496,248,0,923,920,1,0,0,0,923,
        921,1,0,0,0,923,922,1,0,0,0,924,29,1,0,0,0,925,928,3,650,325,0,926,
        928,5,281,0,0,927,925,1,0,0,0,927,926,1,0,0,0,928,31,1,0,0,0,929,
        931,3,638,319,0,930,929,1,0,0,0,931,932,1,0,0,0,932,930,1,0,0,0,
        932,933,1,0,0,0,933,934,1,0,0,0,934,935,3,38,19,0,935,937,1,0,0,
        0,936,930,1,0,0,0,937,938,1,0,0,0,938,936,1,0,0,0,938,939,1,0,0,
        0,939,968,1,0,0,0,940,942,3,638,319,0,941,940,1,0,0,0,942,943,1,
        0,0,0,943,941,1,0,0,0,943,944,1,0,0,0,944,945,1,0,0,0,945,946,3,
        36,18,0,946,948,1,0,0,0,947,941,1,0,0,0,948,951,1,0,0,0,949,947,
        1,0,0,0,949,950,1,0,0,0,950,953,1,0,0,0,951,949,1,0,0,0,952,954,
        3,638,319,0,953,952,1,0,0,0,954,955,1,0,0,0,955,953,1,0,0,0,955,
        956,1,0,0,0,956,957,1,0,0,0,957,958,3,54,27,0,958,964,1,0,0,0,959,
        960,3,38,19,0,960,961,3,640,320,0,961,963,1,0,0,0,962,959,1,0,0,
        0,963,966,1,0,0,0,964,962,1,0,0,0,964,965,1,0,0,0,965,968,1,0,0,
        0,966,964,1,0,0,0,967,936,1,0,0,0,967,949,1,0,0,0,968,33,1,0,0,0,
        969,971,3,42,21,0,970,972,3,638,319,0,971,970,1,0,0,0,972,973,1,
        0,0,0,973,971,1,0,0,0,973,974,1,0,0,0,974,976,1,0,0,0,975,969,1,
        0,0,0,976,977,1,0,0,0,977,975,1,0,0,0,977,978,1,0,0,0,978,1004,1,
        0,0,0,979,981,3,40,20,0,980,982,3,638,319,0,981,980,1,0,0,0,982,
        983,1,0,0,0,983,981,1,0,0,0,983,984,1,0,0,0,984,986,1,0,0,0,985,
        979,1,0,0,0,986,989,1,0,0,0,987,985,1,0,0,0,987,988,1,0,0,0,988,
        990,1,0,0,0,989,987,1,0,0,0,990,991,3,54,27,0,991,1000,1,0,0,0,992,
        994,3,42,21,0,993,995,3,638,319,0,994,993,1,0,0,0,995,996,1,0,0,
        0,996,994,1,0,0,0,996,997,1,0,0,0,997,999,1,0,0,0,998,992,1,0,0,
        0,999,1002,1,0,0,0,1000,998,1,0,0,0,1000,1001,1,0,0,0,1001,1004,
        1,0,0,0,1002,1000,1,0,0,0,1003,975,1,0,0,0,1003,987,1,0,0,0,1004,
        35,1,0,0,0,1005,1009,3,44,22,0,1006,1009,3,52,26,0,1007,1009,3,54,
        27,0,1008,1005,1,0,0,0,1008,1006,1,0,0,0,1008,1007,1,0,0,0,1009,
        37,1,0,0,0,1010,1019,3,74,37,0,1011,1019,3,80,40,0,1012,1019,3,126,
        63,0,1013,1019,3,144,72,0,1014,1019,3,178,89,0,1015,1019,3,164,82,
        0,1016,1019,3,44,22,0,1017,1019,3,52,26,0,1018,1010,1,0,0,0,1018,
        1011,1,0,0,0,1018,1012,1,0,0,0,1018,1013,1,0,0,0,1018,1014,1,0,0,
        0,1018,1015,1,0,0,0,1018,1016,1,0,0,0,1018,1017,1,0,0,0,1019,39,
        1,0,0,0,1020,1024,3,44,22,0,1021,1024,3,54,27,0,1022,1024,3,194,
        97,0,1023,1020,1,0,0,0,1023,1021,1,0,0,0,1023,1022,1,0,0,0,1024,
        41,1,0,0,0,1025,1030,3,74,37,0,1026,1030,3,196,98,0,1027,1030,3,
        44,22,0,1028,1030,3,194,97,0,1029,1025,1,0,0,0,1029,1026,1,0,0,0,
        1029,1027,1,0,0,0,1029,1028,1,0,0,0,1030,43,1,0,0,0,1031,1036,3,
        46,23,0,1032,1036,3,48,24,0,1033,1036,3,50,25,0,1034,1036,3,296,
        148,0,1035,1031,1,0,0,0,1035,1032,1,0,0,0,1035,1033,1,0,0,0,1035,
        1034,1,0,0,0,1036,45,1,0,0,0,1037,1038,5,139,0,0,1038,1039,3,636,
        318,0,1039,1040,5,40,0,0,1040,1041,3,636,318,0,1041,1042,7,0,0,0,
        1042,47,1,0,0,0,1043,1044,5,139,0,0,1044,1045,3,636,318,0,1045,1046,
        5,11,0,0,1046,1047,3,636,318,0,1047,1048,5,268,0,0,1048,49,1,0,0,
        0,1049,1050,5,139,0,0,1050,1051,3,636,318,0,1051,1052,5,84,0,0,1052,
        51,1,0,0,0,1053,1054,5,139,0,0,1054,1055,3,636,318,0,1055,1056,5,
        146,0,0,1056,1057,3,636,318,0,1057,1058,5,129,0,0,1058,53,1,0,0,
        0,1059,1060,3,72,36,0,1060,1061,5,278,0,0,1061,1068,3,56,28,0,1062,
        1063,5,278,0,0,1063,1064,5,240,0,0,1064,1065,5,278,0,0,1065,1067,
        3,56,28,0,1066,1062,1,0,0,0,1067,1070,1,0,0,0,1068,1066,1,0,0,0,
        1068,1069,1,0,0,0,1069,55,1,0,0,0,1070,1068,1,0,0,0,1071,1075,3,
        58,29,0,1072,1075,3,60,30,0,1073,1075,3,66,33,0,1074,1071,1,0,0,
        0,1074,1072,1,0,0,0,1074,1073,1,0,0,0,1075,57,1,0,0,0,1076,1077,
        3,650,325,0,1077,59,1,0,0,0,1078,1079,3,62,31,0,1079,1080,5,278,
        0,0,1080,1081,5,251,0,0,1081,1082,5,278,0,0,1082,1083,3,64,32,0,
        1083,61,1,0,0,0,1084,1085,3,650,325,0,1085,63,1,0,0,0,1086,1087,
        3,650,325,0,1087,65,1,0,0,0,1088,1089,3,68,34,0,1089,1090,5,278,
        0,0,1090,1091,5,251,0,0,1091,1092,5,278,0,0,1092,1093,3,70,35,0,
        1093,67,1,0,0,0,1094,1095,3,650,325,0,1095,69,1,0,0,0,1096,1097,
        3,650,325,0,1097,71,1,0,0,0,1098,1099,7,1,0,0,1099,73,1,0,0,0,1100,
        1107,3,76,38,0,1101,1107,3,128,64,0,1102,1107,3,146,73,0,1103,1107,
        3,168,84,0,1104,1107,3,166,83,0,1105,1107,3,180,90,0,1106,1100,1,
        0,0,0,1106,1101,1,0,0,0,1106,1102,1,0,0,0,1106,1103,1,0,0,0,1106,
        1104,1,0,0,0,1106,1105,1,0,0,0,1107,75,1,0,0,0,1108,1112,3,82,41,
        0,1109,1112,3,84,42,0,1110,1112,3,78,39,0,1111,1108,1,0,0,0,1111,
        1109,1,0,0,0,1111,1110,1,0,0,0,1112,77,1,0,0,0,1113,1114,5,7,0,0,
        1114,1115,5,278,0,0,1115,1116,3,650,325,0,1116,1117,5,256,0,0,1117,
        1119,5,206,0,0,1118,1120,5,278,0,0,1119,1118,1,0,0,0,1119,1120,1,
        0,0,0,1120,1121,1,0,0,0,1121,1123,5,243,0,0,1122,1124,5,278,0,0,
        1123,1122,1,0,0,0,1123,1124,1,0,0,0,1124,1126,1,0,0,0,1125,1127,
        5,251,0,0,1126,1125,1,0,0,0,1126,1127,1,0,0,0,1127,1128,1,0,0,0,
        1128,1129,5,268,0,0,1129,79,1,0,0,0,1130,1131,5,91,0,0,1131,1132,
        5,278,0,0,1132,1133,3,88,44,0,1133,81,1,0,0,0,1134,1137,5,150,0,
        0,1135,1136,5,278,0,0,1136,1138,5,166,0,0,1137,1135,1,0,0,0,1137,
        1138,1,0,0,0,1138,1139,1,0,0,0,1139,1140,5,278,0,0,1140,1141,3,86,
        43,0,1141,83,1,0,0,0,1142,1143,7,2,0,0,1143,1144,3,636,318,0,1144,
        1147,1,0,0,0,1145,1146,5,166,0,0,1146,1148,3,636,318,0,1147,1145,
        1,0,0,0,1147,1148,1,0,0,0,1148,1149,1,0,0,0,1149,1150,3,86,43,0,
        1150,85,1,0,0,0,1151,1154,3,100,50,0,1152,1154,3,90,45,0,1153,1151,
        1,0,0,0,1153,1152,1,0,0,0,1154,1168,1,0,0,0,1155,1157,3,636,318,
        0,1156,1155,1,0,0,0,1156,1157,1,0,0,0,1157,1158,1,0,0,0,1158,1160,
        5,240,0,0,1159,1161,3,636,318,0,1160,1159,1,0,0,0,1160,1161,1,0,
        0,0,1161,1164,1,0,0,0,1162,1165,3,100,50,0,1163,1165,3,90,45,0,1164,
        1162,1,0,0,0,1164,1163,1,0,0,0,1165,1167,1,0,0,0,1166,1156,1,0,0,
        0,1167,1170,1,0,0,0,1168,1166,1,0,0,0,1168,1169,1,0,0,0,1169,87,
        1,0,0,0,1170,1168,1,0,0,0,1171,1182,3,90,45,0,1172,1174,3,636,318,
        0,1173,1172,1,0,0,0,1173,1174,1,0,0,0,1174,1175,1,0,0,0,1175,1177,
        5,240,0,0,1176,1178,3,636,318,0,1177,1176,1,0,0,0,1177,1178,1,0,
        0,0,1178,1179,1,0,0,0,1179,1181,3,90,45,0,1180,1173,1,0,0,0,1181,
        1184,1,0,0,0,1182,1180,1,0,0,0,1182,1183,1,0,0,0,1183,89,1,0,0,0,
        1184,1182,1,0,0,0,1185,1188,3,92,46,0,1186,1188,3,94,47,0,1187,1185,
        1,0,0,0,1187,1186,1,0,0,0,1188,91,1,0,0,0,1189,1191,3,684,342,0,
        1190,1192,3,636,318,0,1191,1190,1,0,0,0,1191,1192,1,0,0,0,1192,1194,
        1,0,0,0,1193,1195,3,104,52,0,1194,1193,1,0,0,0,1194,1195,1,0,0,0,
        1195,93,1,0,0,0,1196,1198,3,650,325,0,1197,1199,3,636,318,0,1198,
        1197,1,0,0,0,1198,1199,1,0,0,0,1199,1202,1,0,0,0,1200,1203,3,96,
        48,0,1201,1203,3,98,49,0,1202,1200,1,0,0,0,1202,1201,1,0,0,0,1202,
        1203,1,0,0,0,1203,95,1,0,0,0,1204,1208,3,104,52,0,1205,1206,3,636,
        318,0,1206,1207,3,98,49,0,1207,1209,1,0,0,0,1208,1205,1,0,0,0,1208,
        1209,1,0,0,0,1209,97,1,0,0,0,1210,1213,3,114,57,0,1211,1213,3,116,
        58,0,1212,1210,1,0,0,0,1212,1211,1,0,0,0,1213,99,1,0,0,0,1214,1215,
        5,217,0,0,1215,1216,3,636,318,0,1216,1217,3,650,325,0,1217,1218,
        3,636,318,0,1218,1220,5,10,0,0,1219,1221,3,636,318,0,1220,1219,1,
        0,0,0,1220,1221,1,0,0,0,1221,1222,1,0,0,0,1222,1223,3,102,51,0,1223,
        101,1,0,0,0,1224,1225,3,630,315,0,1225,103,1,0,0,0,1226,1228,5,249,
        0,0,1227,1229,3,636,318,0,1228,1227,1,0,0,0,1228,1229,1,0,0,0,1229,
        1231,1,0,0,0,1230,1232,3,106,53,0,1231,1230,1,0,0,0,1231,1232,1,
        0,0,0,1232,1234,1,0,0,0,1233,1235,3,636,318,0,1234,1233,1,0,0,0,
        1234,1235,1,0,0,0,1235,1236,1,0,0,0,1236,1237,5,260,0,0,1237,105,
        1,0,0,0,1238,1249,3,108,54,0,1239,1241,3,636,318,0,1240,1239,1,0,
        0,0,1240,1241,1,0,0,0,1241,1242,1,0,0,0,1242,1244,5,240,0,0,1243,
        1245,3,636,318,0,1244,1243,1,0,0,0,1244,1245,1,0,0,0,1245,1246,1,
        0,0,0,1246,1248,3,108,54,0,1247,1240,1,0,0,0,1248,1251,1,0,0,0,1249,
        1247,1,0,0,0,1249,1250,1,0,0,0,1250,107,1,0,0,0,1251,1249,1,0,0,
        0,1252,1254,3,110,55,0,1253,1252,1,0,0,0,1253,1254,1,0,0,0,1254,
        1256,1,0,0,0,1255,1257,3,636,318,0,1256,1255,1,0,0,0,1256,1257,1,
        0,0,0,1257,1258,1,0,0,0,1258,1259,3,112,56,0,1259,109,1,0,0,0,1260,
        1261,3,616,308,0,1261,1262,3,636,318,0,1262,1263,5,179,0,0,1263,
        1264,3,636,318,0,1264,111,1,0,0,0,1265,1266,3,616,308,0,1266,113,
        1,0,0,0,1267,1268,5,10,0,0,1268,1269,5,278,0,0,1269,1270,5,131,0,
        0,1270,1271,5,278,0,0,1271,1272,3,102,51,0,1272,115,1,0,0,0,1273,
        1274,5,10,0,0,1274,1275,5,278,0,0,1275,1276,3,118,59,0,1276,117,
        1,0,0,0,1277,1280,3,120,60,0,1278,1280,3,628,314,0,1279,1277,1,0,
        0,0,1279,1278,1,0,0,0,1280,119,1,0,0,0,1281,1282,5,173,0,0,1282,
        1283,5,278,0,0,1283,1284,5,253,0,0,1284,1285,5,278,0,0,1285,1286,
        3,122,61,0,1286,121,1,0,0,0,1287,1290,5,268,0,0,1288,1290,3,124,
        62,0,1289,1287,1,0,0,0,1289,1288,1,0,0,0,1290,123,1,0,0,0,1291,1292,
        3,586,293,0,1292,125,1,0,0,0,1293,1294,7,3,0,0,1294,1295,3,636,318,
        0,1295,1296,3,130,65,0,1296,127,1,0,0,0,1297,1298,5,146,0,0,1298,
        1300,3,636,318,0,1299,1297,1,0,0,0,1299,1300,1,0,0,0,1300,1301,1,
        0,0,0,1301,1302,3,130,65,0,1302,129,1,0,0,0,1303,1304,3,132,66,0,
        1304,131,1,0,0,0,1305,1306,5,41,0,0,1306,1307,3,636,318,0,1307,1308,
        3,134,67,0,1308,133,1,0,0,0,1309,1320,3,136,68,0,1310,1312,3,636,
        318,0,1311,1310,1,0,0,0,1311,1312,1,0,0,0,1312,1313,1,0,0,0,1313,
        1315,5,240,0,0,1314,1316,3,636,318,0,1315,1314,1,0,0,0,1315,1316,
        1,0,0,0,1316,1317,1,0,0,0,1317,1319,3,136,68,0,1318,1311,1,0,0,0,
        1319,1322,1,0,0,0,1320,1318,1,0,0,0,1320,1321,1,0,0,0,1321,135,1,
        0,0,0,1322,1320,1,0,0,0,1323,1326,3,138,69,0,1324,1326,3,140,70,
        0,1325,1323,1,0,0,0,1325,1324,1,0,0,0,1326,137,1,0,0,0,1327,1329,
        3,684,342,0,1328,1330,3,636,318,0,1329,1328,1,0,0,0,1329,1330,1,
        0,0,0,1330,1331,1,0,0,0,1331,1333,5,243,0,0,1332,1334,3,636,318,
        0,1333,1332,1,0,0,0,1333,1334,1,0,0,0,1334,1335,1,0,0,0,1335,1336,
        3,616,308,0,1336,139,1,0,0,0,1337,1341,3,650,325,0,1338,1339,3,636,
        318,0,1339,1340,3,142,71,0,1340,1342,1,0,0,0,1341,1338,1,0,0,0,1341,
        1342,1,0,0,0,1342,1344,1,0,0,0,1343,1345,3,636,318,0,1344,1343,1,
        0,0,0,1344,1345,1,0,0,0,1345,1346,1,0,0,0,1346,1348,5,243,0,0,1347,
        1349,3,636,318,0,1348,1347,1,0,0,0,1348,1349,1,0,0,0,1349,1350,1,
        0,0,0,1350,1351,3,616,308,0,1351,141,1,0,0,0,1352,1353,5,10,0,0,
        1353,1354,3,636,318,0,1354,1355,3,682,341,0,1355,143,1,0,0,0,1356,
        1357,7,3,0,0,1357,1359,3,636,318,0,1358,1356,1,0,0,0,1358,1359,1,
        0,0,0,1359,1360,1,0,0,0,1360,1361,3,148,74,0,1361,145,1,0,0,0,1362,
        1363,5,146,0,0,1363,1364,3,636,318,0,1364,1365,3,148,74,0,1365,147,
        1,0,0,0,1366,1367,5,181,0,0,1367,1368,3,636,318,0,1368,1370,3,30,
        15,0,1369,1371,3,642,321,0,1370,1369,1,0,0,0,1371,1372,1,0,0,0,1372,
        1370,1,0,0,0,1372,1373,1,0,0,0,1373,1374,1,0,0,0,1374,1376,3,150,
        75,0,1375,1377,3,642,321,0,1376,1375,1,0,0,0,1377,1378,1,0,0,0,1378,
        1376,1,0,0,0,1378,1379,1,0,0,0,1379,1380,1,0,0,0,1380,1381,5,77,
        0,0,1381,1382,3,636,318,0,1382,1383,5,181,0,0,1383,149,1,0,0,0,1384,
        1390,3,152,76,0,1385,1386,3,642,321,0,1386,1387,3,152,76,0,1387,
        1389,1,0,0,0,1388,1385,1,0,0,0,1389,1392,1,0,0,0,1390,1388,1,0,0,
        0,1390,1391,1,0,0,0,1391,151,1,0,0,0,1392,1390,1,0,0,0,1393,1396,
        3,296,148,0,1394,1396,3,154,77,0,1395,1393,1,0,0,0,1395,1394,1,0,
        0,0,1396,153,1,0,0,0,1397,1400,3,158,79,0,1398,1400,3,156,78,0,1399,
        1397,1,0,0,0,1399,1398,1,0,0,0,1400,155,1,0,0,0,1401,1402,3,650,
        325,0,1402,1403,3,160,80,0,1403,157,1,0,0,0,1404,1405,3,162,81,0,
        1405,1406,3,636,318,0,1406,1407,3,98,49,0,1407,159,1,0,0,0,1408,
        1410,3,104,52,0,1409,1408,1,0,0,0,1409,1410,1,0,0,0,1410,1411,1,
        0,0,0,1411,1412,3,636,318,0,1412,1413,3,98,49,0,1413,161,1,0,0,0,
        1414,1423,3,652,326,0,1415,1423,3,656,328,0,1416,1423,3,658,329,
        0,1417,1423,3,662,331,0,1418,1423,3,660,330,0,1419,1423,3,670,335,
        0,1420,1423,3,678,339,0,1421,1423,3,680,340,0,1422,1414,1,0,0,0,
        1422,1415,1,0,0,0,1422,1416,1,0,0,0,1422,1417,1,0,0,0,1422,1418,
        1,0,0,0,1422,1419,1,0,0,0,1422,1420,1,0,0,0,1422,1421,1,0,0,0,1423,
        163,1,0,0,0,1424,1425,5,91,0,0,1425,1426,3,636,318,0,1426,1427,3,
        170,85,0,1427,165,1,0,0,0,1428,1429,5,150,0,0,1429,1431,3,636,318,
        0,1430,1428,1,0,0,0,1430,1431,1,0,0,0,1431,1432,1,0,0,0,1432,1433,
        3,170,85,0,1433,167,1,0,0,0,1434,1435,5,146,0,0,1435,1436,3,636,
        318,0,1436,1437,3,170,85,0,1437,169,1,0,0,0,1438,1439,5,78,0,0,1439,
        1440,3,636,318,0,1440,1442,3,30,15,0,1441,1443,3,642,321,0,1442,
        1441,1,0,0,0,1443,1444,1,0,0,0,1444,1442,1,0,0,0,1444,1445,1,0,0,
        0,1445,1446,1,0,0,0,1446,1448,3,172,86,0,1447,1449,3,642,321,0,1448,
        1447,1,0,0,0,1449,1450,1,0,0,0,1450,1448,1,0,0,0,1450,1451,1,0,0,
        0,1451,1452,1,0,0,0,1452,1453,5,77,0,0,1453,1454,3,636,318,0,1454,
        1455,5,78,0,0,1455,171,1,0,0,0,1456,1462,3,174,87,0,1457,1458,3,
        642,321,0,1458,1459,3,174,87,0,1459,1461,1,0,0,0,1460,1457,1,0,0,
        0,1461,1464,1,0,0,0,1462,1460,1,0,0,0,1462,1463,1,0,0,0,1463,173,
        1,0,0,0,1464,1462,1,0,0,0,1465,1468,3,296,148,0,1466,1468,3,176,
        88,0,1467,1465,1,0,0,0,1467,1466,1,0,0,0,1468,175,1,0,0,0,1469,1478,
        3,30,15,0,1470,1472,3,636,318,0,1471,1470,1,0,0,0,1471,1472,1,0,
        0,0,1472,1473,1,0,0,0,1473,1475,5,243,0,0,1474,1476,3,636,318,0,
        1475,1474,1,0,0,0,1475,1476,1,0,0,0,1476,1477,1,0,0,0,1477,1479,
        3,616,308,0,1478,1471,1,0,0,0,1478,1479,1,0,0,0,1479,177,1,0,0,0,
        1480,1481,5,150,0,0,1481,1483,3,636,318,0,1482,1480,1,0,0,0,1482,
        1483,1,0,0,0,1483,1484,1,0,0,0,1484,1485,3,182,91,0,1485,179,1,0,
        0,0,1486,1487,5,146,0,0,1487,1488,3,636,318,0,1488,1489,3,182,91,
        0,1489,181,1,0,0,0,1490,1491,5,51,0,0,1491,1494,3,636,318,0,1492,
        1493,5,149,0,0,1493,1495,3,636,318,0,1494,1492,1,0,0,0,1494,1495,
        1,0,0,0,1495,1498,1,0,0,0,1496,1499,3,184,92,0,1497,1499,3,186,93,
        0,1498,1496,1,0,0,0,1498,1497,1,0,0,0,1499,183,1,0,0,0,1500,1501,
        5,175,0,0,1501,1502,3,636,318,0,1502,1503,3,230,115,0,1503,1504,
        3,636,318,0,1504,1508,3,188,94,0,1505,1506,3,636,318,0,1506,1507,
        3,240,120,0,1507,1509,1,0,0,0,1508,1505,1,0,0,0,1508,1509,1,0,0,
        0,1509,185,1,0,0,0,1510,1511,5,89,0,0,1511,1512,3,636,318,0,1512,
        1513,3,232,116,0,1513,1514,3,636,318,0,1514,1518,3,188,94,0,1515,
        1516,3,636,318,0,1516,1517,3,240,120,0,1517,1519,1,0,0,0,1518,1515,
        1,0,0,0,1518,1519,1,0,0,0,1519,1523,1,0,0,0,1520,1521,3,636,318,
        0,1521,1522,3,236,118,0,1522,1524,1,0,0,0,1523,1520,1,0,0,0,1523,
        1524,1,0,0,0,1524,187,1,0,0,0,1525,1529,3,190,95,0,1526,1527,3,636,
        318,0,1527,1528,3,192,96,0,1528,1530,1,0,0,0,1529,1526,1,0,0,0,1529,
        1530,1,0,0,0,1530,189,1,0,0,0,1531,1532,5,110,0,0,1532,1533,3,636,
        318,0,1533,1534,5,265,0,0,1534,191,1,0,0,0,1535,1536,5,4,0,0,1536,
        1537,3,636,318,0,1537,1538,5,265,0,0,1538,193,1,0,0,0,1539,1540,
        5,97,0,0,1540,1541,5,278,0,0,1541,1542,3,650,325,0,1542,195,1,0,
        0,0,1543,1545,5,150,0,0,1544,1543,1,0,0,0,1544,1545,1,0,0,0,1545,
        1546,1,0,0,0,1546,1547,3,636,318,0,1547,1548,5,82,0,0,1548,1549,
        3,636,318,0,1549,1551,3,650,325,0,1550,1552,3,198,99,0,1551,1550,
        1,0,0,0,1551,1552,1,0,0,0,1552,197,1,0,0,0,1553,1555,5,249,0,0,1554,
        1556,3,636,318,0,1555,1554,1,0,0,0,1555,1556,1,0,0,0,1556,1558,1,
        0,0,0,1557,1559,3,246,123,0,1558,1557,1,0,0,0,1558,1559,1,0,0,0,
        1559,1561,1,0,0,0,1560,1562,3,636,318,0,1561,1560,1,0,0,0,1561,1562,
        1,0,0,0,1562,1563,1,0,0,0,1563,1564,5,260,0,0,1564,199,1,0,0,0,1565,
        1569,3,204,102,0,1566,1568,3,638,319,0,1567,1566,1,0,0,0,1568,1571,
        1,0,0,0,1569,1567,1,0,0,0,1569,1570,1,0,0,0,1570,1573,1,0,0,0,1571,
        1569,1,0,0,0,1572,1565,1,0,0,0,1573,1576,1,0,0,0,1574,1572,1,0,0,
        0,1574,1575,1,0,0,0,1575,201,1,0,0,0,1576,1574,1,0,0,0,1577,1581,
        3,206,103,0,1578,1580,3,638,319,0,1579,1578,1,0,0,0,1580,1583,1,
        0,0,0,1581,1579,1,0,0,0,1581,1582,1,0,0,0,1582,1585,1,0,0,0,1583,
        1581,1,0,0,0,1584,1577,1,0,0,0,1585,1588,1,0,0,0,1586,1584,1,0,0,
        0,1586,1587,1,0,0,0,1587,203,1,0,0,0,1588,1586,1,0,0,0,1589,1590,
        3,208,104,0,1590,205,1,0,0,0,1591,1594,3,208,104,0,1592,1594,3,194,
        97,0,1593,1591,1,0,0,0,1593,1592,1,0,0,0,1594,207,1,0,0,0,1595,1598,
        3,296,148,0,1596,1598,3,210,105,0,1597,1595,1,0,0,0,1597,1596,1,
        0,0,0,1598,209,1,0,0,0,1599,1604,3,212,106,0,1600,1604,3,214,107,
        0,1601,1604,3,216,108,0,1602,1604,3,218,109,0,1603,1599,1,0,0,0,
        1603,1600,1,0,0,0,1603,1601,1,0,0,0,1603,1602,1,0,0,0,1604,211,1,
        0,0,0,1605,1606,3,224,112,0,1606,1607,3,636,318,0,1607,1609,1,0,
        0,0,1608,1605,1,0,0,0,1608,1609,1,0,0,0,1609,1638,1,0,0,0,1610,1611,
        3,226,113,0,1611,1612,3,636,318,0,1612,1614,1,0,0,0,1613,1610,1,
        0,0,0,1613,1614,1,0,0,0,1614,1615,1,0,0,0,1615,1616,5,175,0,0,1616,
        1617,3,636,318,0,1617,1619,3,230,115,0,1618,1620,3,636,318,0,1619,
        1618,1,0,0,0,1619,1620,1,0,0,0,1620,1622,1,0,0,0,1621,1623,3,240,
        120,0,1622,1621,1,0,0,0,1622,1623,1,0,0,0,1623,1639,1,0,0,0,1624,
        1625,5,175,0,0,1625,1626,3,636,318,0,1626,1631,3,230,115,0,1627,
        1629,3,636,318,0,1628,1627,1,0,0,0,1628,1629,1,0,0,0,1629,1630,1,
        0,0,0,1630,1632,3,240,120,0,1631,1628,1,0,0,0,1631,1632,1,0,0,0,
        1632,1634,1,0,0,0,1633,1635,3,636,318,0,1634,1633,1,0,0,0,1634,1635,
        1,0,0,0,1635,1636,1,0,0,0,1636,1637,3,228,114,0,1637,1639,1,0,0,
        0,1638,1613,1,0,0,0,1638,1624,1,0,0,0,1639,1641,1,0,0,0,1640,1642,
        3,278,139,0,1641,1640,1,0,0,0,1641,1642,1,0,0,0,1642,1644,1,0,0,
        0,1643,1645,3,220,110,0,1644,1643,1,0,0,0,1644,1645,1,0,0,0,1645,
        1647,1,0,0,0,1646,1648,3,642,321,0,1647,1646,1,0,0,0,1648,1649,1,
        0,0,0,1649,1647,1,0,0,0,1649,1650,1,0,0,0,1650,1651,1,0,0,0,1651,
        1652,5,77,0,0,1652,1653,3,636,318,0,1653,1655,5,175,0,0,1654,1656,
        3,222,111,0,1655,1654,1,0,0,0,1655,1656,1,0,0,0,1656,213,1,0,0,0,
        1657,1658,3,224,112,0,1658,1659,3,636,318,0,1659,1661,1,0,0,0,1660,
        1657,1,0,0,0,1660,1661,1,0,0,0,1661,1702,1,0,0,0,1662,1663,3,226,
        113,0,1663,1664,3,636,318,0,1664,1666,1,0,0,0,1665,1662,1,0,0,0,
        1665,1666,1,0,0,0,1666,1667,1,0,0,0,1667,1668,5,89,0,0,1668,1669,
        3,636,318,0,1669,1674,3,232,116,0,1670,1672,3,636,318,0,1671,1670,
        1,0,0,0,1671,1672,1,0,0,0,1672,1673,1,0,0,0,1673,1675,3,240,120,
        0,1674,1671,1,0,0,0,1674,1675,1,0,0,0,1675,1680,1,0,0,0,1676,1678,
        3,636,318,0,1677,1676,1,0,0,0,1677,1678,1,0,0,0,1678,1679,1,0,0,
        0,1679,1681,3,236,118,0,1680,1677,1,0,0,0,1680,1681,1,0,0,0,1681,
        1703,1,0,0,0,1682,1683,5,89,0,0,1683,1684,3,636,318,0,1684,1689,
        3,232,116,0,1685,1687,3,636,318,0,1686,1685,1,0,0,0,1686,1687,1,
        0,0,0,1687,1688,1,0,0,0,1688,1690,3,240,120,0,1689,1686,1,0,0,0,
        1689,1690,1,0,0,0,1690,1695,1,0,0,0,1691,1693,3,636,318,0,1692,1691,
        1,0,0,0,1692,1693,1,0,0,0,1693,1694,1,0,0,0,1694,1696,3,236,118,
        0,1695,1692,1,0,0,0,1695,1696,1,0,0,0,1696,1698,1,0,0,0,1697,1699,
        3,636,318,0,1698,1697,1,0,0,0,1698,1699,1,0,0,0,1699,1700,1,0,0,
        0,1700,1701,3,228,114,0,1701,1703,1,0,0,0,1702,1665,1,0,0,0,1702,
        1682,1,0,0,0,1703,1705,1,0,0,0,1704,1706,3,278,139,0,1705,1704,1,
        0,0,0,1705,1706,1,0,0,0,1706,1708,1,0,0,0,1707,1709,3,220,110,0,
        1708,1707,1,0,0,0,1708,1709,1,0,0,0,1709,1711,1,0,0,0,1710,1712,
        3,642,321,0,1711,1710,1,0,0,0,1712,1713,1,0,0,0,1713,1711,1,0,0,
        0,1713,1714,1,0,0,0,1714,1715,1,0,0,0,1715,1716,5,77,0,0,1716,1717,
        3,636,318,0,1717,1719,5,89,0,0,1718,1720,3,222,111,0,1719,1718,1,
        0,0,0,1719,1720,1,0,0,0,1720,215,1,0,0,0,1721,1722,3,224,112,0,1722,
        1723,3,636,318,0,1723,1725,1,0,0,0,1724,1721,1,0,0,0,1724,1725,1,
        0,0,0,1725,1767,1,0,0,0,1726,1727,3,226,113,0,1727,1728,3,636,318,
        0,1728,1730,1,0,0,0,1729,1726,1,0,0,0,1729,1730,1,0,0,0,1730,1731,
        1,0,0,0,1731,1732,5,147,0,0,1732,1733,3,636,318,0,1733,1734,5,90,
        0,0,1734,1735,3,636,318,0,1735,1740,3,232,116,0,1736,1738,3,636,
        318,0,1737,1736,1,0,0,0,1737,1738,1,0,0,0,1738,1739,1,0,0,0,1739,
        1741,3,240,120,0,1740,1737,1,0,0,0,1740,1741,1,0,0,0,1741,1746,1,
        0,0,0,1742,1744,3,636,318,0,1743,1742,1,0,0,0,1743,1744,1,0,0,0,
        1744,1745,1,0,0,0,1745,1747,3,236,118,0,1746,1743,1,0,0,0,1746,1747,
        1,0,0,0,1747,1768,1,0,0,0,1748,1749,5,147,0,0,1749,1750,3,636,318,
        0,1750,1751,5,90,0,0,1751,1752,3,636,318,0,1752,1754,3,232,116,0,
        1753,1755,3,240,120,0,1754,1753,1,0,0,0,1754,1755,1,0,0,0,1755,1760,
        1,0,0,0,1756,1758,3,636,318,0,1757,1756,1,0,0,0,1757,1758,1,0,0,
        0,1758,1759,1,0,0,0,1759,1761,3,236,118,0,1760,1757,1,0,0,0,1760,
        1761,1,0,0,0,1761,1763,1,0,0,0,1762,1764,3,636,318,0,1763,1762,1,
        0,0,0,1763,1764,1,0,0,0,1764,1765,1,0,0,0,1765,1766,3,228,114,0,
        1766,1768,1,0,0,0,1767,1729,1,0,0,0,1767,1748,1,0,0,0,1768,1770,
        1,0,0,0,1769,1771,3,278,139,0,1770,1769,1,0,0,0,1770,1771,1,0,0,
        0,1771,1773,1,0,0,0,1772,1774,3,220,110,0,1773,1772,1,0,0,0,1773,
        1774,1,0,0,0,1774,1776,1,0,0,0,1775,1777,3,642,321,0,1776,1775,1,
        0,0,0,1777,1778,1,0,0,0,1778,1776,1,0,0,0,1778,1779,1,0,0,0,1779,
        1780,1,0,0,0,1780,1781,5,77,0,0,1781,1782,3,636,318,0,1782,1784,
        5,147,0,0,1783,1785,3,222,111,0,1784,1783,1,0,0,0,1784,1785,1,0,
        0,0,1785,217,1,0,0,0,1786,1787,3,224,112,0,1787,1788,3,636,318,0,
        1788,1790,1,0,0,0,1789,1786,1,0,0,0,1789,1790,1,0,0,0,1790,1817,
        1,0,0,0,1791,1792,3,226,113,0,1792,1793,3,636,318,0,1793,1795,1,
        0,0,0,1794,1791,1,0,0,0,1794,1795,1,0,0,0,1795,1796,1,0,0,0,1796,
        1797,5,147,0,0,1797,1798,3,636,318,0,1798,1799,7,4,0,0,1799,1800,
        3,636,318,0,1800,1802,3,230,115,0,1801,1803,3,636,318,0,1802,1801,
        1,0,0,0,1802,1803,1,0,0,0,1803,1804,1,0,0,0,1804,1805,3,242,121,
        0,1805,1818,1,0,0,0,1806,1807,5,147,0,0,1807,1808,3,636,318,0,1808,
        1809,7,4,0,0,1809,1810,3,636,318,0,1810,1811,3,230,115,0,1811,1813,
        3,242,121,0,1812,1814,3,636,318,0,1813,1812,1,0,0,0,1813,1814,1,
        0,0,0,1814,1815,1,0,0,0,1815,1816,3,228,114,0,1816,1818,1,0,0,0,
        1817,1794,1,0,0,0,1817,1806,1,0,0,0,1818,1820,1,0,0,0,1819,1821,
        3,278,139,0,1820,1819,1,0,0,0,1820,1821,1,0,0,0,1821,1823,1,0,0,
        0,1822,1824,3,220,110,0,1823,1822,1,0,0,0,1823,1824,1,0,0,0,1824,
        1826,1,0,0,0,1825,1827,3,642,321,0,1826,1825,1,0,0,0,1827,1828,1,
        0,0,0,1828,1826,1,0,0,0,1828,1829,1,0,0,0,1829,1830,1,0,0,0,1830,
        1831,5,77,0,0,1831,1832,3,636,318,0,1832,1834,5,147,0,0,1833,1835,
        3,222,111,0,1834,1833,1,0,0,0,1834,1835,1,0,0,0,1835,219,1,0,0,0,
        1836,1838,3,642,321,0,1837,1836,1,0,0,0,1838,1841,1,0,0,0,1839,1837,
        1,0,0,0,1839,1840,1,0,0,0,1840,1842,1,0,0,0,1841,1839,1,0,0,0,1842,
        1843,3,640,320,0,1843,1844,3,286,143,0,1844,221,1,0,0,0,1845,1847,
        3,636,318,0,1846,1845,1,0,0,0,1846,1847,1,0,0,0,1847,1848,1,0,0,
        0,1848,1862,5,272,0,0,1849,1851,3,636,318,0,1850,1849,1,0,0,0,1850,
        1851,1,0,0,0,1851,1852,1,0,0,0,1852,1862,3,646,323,0,1853,1855,5,
        278,0,0,1854,1853,1,0,0,0,1854,1855,1,0,0,0,1855,1856,1,0,0,0,1856,
        1858,5,276,0,0,1857,1859,5,278,0,0,1858,1857,1,0,0,0,1858,1859,1,
        0,0,0,1859,1860,1,0,0,0,1860,1862,3,296,148,0,1861,1846,1,0,0,0,
        1861,1850,1,0,0,0,1861,1854,1,0,0,0,1862,223,1,0,0,0,1863,1864,7,
        5,0,0,1864,225,1,0,0,0,1865,1866,5,170,0,0,1866,227,1,0,0,0,1867,
        1868,5,170,0,0,1868,229,1,0,0,0,1869,1872,3,650,325,0,1870,1872,
        3,234,117,0,1871,1869,1,0,0,0,1871,1870,1,0,0,0,1872,231,1,0,0,0,
        1873,1877,3,684,342,0,1874,1877,3,650,325,0,1875,1877,3,234,117,
        0,1876,1873,1,0,0,0,1876,1874,1,0,0,0,1876,1875,1,0,0,0,1877,233,
        1,0,0,0,1878,1882,3,272,136,0,1879,1882,3,274,137,0,1880,1882,3,
        276,138,0,1881,1878,1,0,0,0,1881,1879,1,0,0,0,1881,1880,1,0,0,0,
        1882,235,1,0,0,0,1883,1884,5,10,0,0,1884,1885,3,636,318,0,1885,1887,
        3,628,314,0,1886,1888,3,636,318,0,1887,1886,1,0,0,0,1887,1888,1,
        0,0,0,1888,1890,1,0,0,0,1889,1891,3,238,119,0,1890,1889,1,0,0,0,
        1890,1891,1,0,0,0,1891,237,1,0,0,0,1892,1894,5,249,0,0,1893,1895,
        3,636,318,0,1894,1893,1,0,0,0,1894,1895,1,0,0,0,1895,1896,1,0,0,
        0,1896,1897,5,260,0,0,1897,239,1,0,0,0,1898,1900,5,249,0,0,1899,
        1901,3,636,318,0,1900,1899,1,0,0,0,1900,1901,1,0,0,0,1901,1903,1,
        0,0,0,1902,1904,3,244,122,0,1903,1902,1,0,0,0,1903,1904,1,0,0,0,
        1904,1906,1,0,0,0,1905,1907,3,636,318,0,1906,1905,1,0,0,0,1906,1907,
        1,0,0,0,1907,1908,1,0,0,0,1908,1909,5,260,0,0,1909,241,1,0,0,0,1910,
        1912,5,249,0,0,1911,1913,3,636,318,0,1912,1911,1,0,0,0,1912,1913,
        1,0,0,0,1913,1922,1,0,0,0,1914,1916,3,244,122,0,1915,1917,3,636,
        318,0,1916,1915,1,0,0,0,1916,1917,1,0,0,0,1917,1918,1,0,0,0,1918,
        1920,5,240,0,0,1919,1921,3,636,318,0,1920,1919,1,0,0,0,1920,1921,
        1,0,0,0,1921,1923,1,0,0,0,1922,1914,1,0,0,0,1922,1923,1,0,0,0,1923,
        1924,1,0,0,0,1924,1926,3,250,125,0,1925,1927,3,636,318,0,1926,1925,
        1,0,0,0,1926,1927,1,0,0,0,1927,1928,1,0,0,0,1928,1929,5,260,0,0,
        1929,243,1,0,0,0,1930,1932,3,246,123,0,1931,1933,3,636,318,0,1932,
        1931,1,0,0,0,1932,1933,1,0,0,0,1933,1934,1,0,0,0,1934,1936,5,240,
        0,0,1935,1937,3,636,318,0,1936,1935,1,0,0,0,1936,1937,1,0,0,0,1937,
        1938,1,0,0,0,1938,1939,3,248,124,0,1939,1954,1,0,0,0,1940,1949,3,
        246,123,0,1941,1943,3,636,318,0,1942,1941,1,0,0,0,1942,1943,1,0,
        0,0,1943,1944,1,0,0,0,1944,1946,5,240,0,0,1945,1947,3,636,318,0,
        1946,1945,1,0,0,0,1946,1947,1,0,0,0,1947,1948,1,0,0,0,1948,1950,
        3,256,128,0,1949,1942,1,0,0,0,1949,1950,1,0,0,0,1950,1954,1,0,0,
        0,1951,1954,3,248,124,0,1952,1954,3,256,128,0,1953,1930,1,0,0,0,
        1953,1940,1,0,0,0,1953,1951,1,0,0,0,1953,1952,1,0,0,0,1954,245,1,
        0,0,0,1955,1966,3,252,126,0,1956,1958,3,636,318,0,1957,1956,1,0,
        0,0,1957,1958,1,0,0,0,1958,1959,1,0,0,0,1959,1961,5,240,0,0,1960,
        1962,3,636,318,0,1961,1960,1,0,0,0,1961,1962,1,0,0,0,1962,1963,1,
        0,0,0,1963,1965,3,252,126,0,1964,1957,1,0,0,0,1965,1968,1,0,0,0,
        1966,1964,1,0,0,0,1966,1967,1,0,0,0,1967,247,1,0,0,0,1968,1966,1,
        0,0,0,1969,1980,3,254,127,0,1970,1972,3,636,318,0,1971,1970,1,0,
        0,0,1971,1972,1,0,0,0,1972,1973,1,0,0,0,1973,1975,5,240,0,0,1974,
        1976,3,636,318,0,1975,1974,1,0,0,0,1975,1976,1,0,0,0,1976,1977,1,
        0,0,0,1977,1979,3,254,127,0,1978,1971,1,0,0,0,1979,1982,1,0,0,0,
        1980,1978,1,0,0,0,1980,1981,1,0,0,0,1981,249,1,0,0,0,1982,1980,1,
        0,0,0,1983,1984,3,252,126,0,1984,251,1,0,0,0,1985,1986,3,266,133,
        0,1986,1987,3,636,318,0,1987,1989,1,0,0,0,1988,1985,1,0,0,0,1988,
        1989,1,0,0,0,1989,1990,1,0,0,0,1990,1991,3,258,129,0,1991,253,1,
        0,0,0,1992,1993,3,264,132,0,1993,1994,3,636,318,0,1994,1996,3,258,
        129,0,1995,1997,3,636,318,0,1996,1995,1,0,0,0,1996,1997,1,0,0,0,
        1997,1999,1,0,0,0,1998,2000,3,270,135,0,1999,1998,1,0,0,0,1999,2000,
        1,0,0,0,2000,255,1,0,0,0,2001,2002,5,143,0,0,2002,2003,3,636,318,
        0,2003,2004,3,650,325,0,2004,2006,5,249,0,0,2005,2007,3,636,318,
        0,2006,2005,1,0,0,0,2006,2007,1,0,0,0,2007,2008,1,0,0,0,2008,2018,
        5,260,0,0,2009,2010,3,636,318,0,2010,2011,5,10,0,0,2011,2016,3,636,
        318,0,2012,2017,5,210,0,0,2013,2014,5,262,0,0,2014,2015,5,210,0,
        0,2015,2017,5,263,0,0,2016,2012,1,0,0,0,2016,2013,1,0,0,0,2017,2019,
        1,0,0,0,2018,2009,1,0,0,0,2018,2019,1,0,0,0,2019,257,1,0,0,0,2020,
        2023,3,260,130,0,2021,2023,3,262,131,0,2022,2020,1,0,0,0,2022,2021,
        1,0,0,0,2023,259,1,0,0,0,2024,2026,3,650,325,0,2025,2027,3,268,134,
        0,2026,2025,1,0,0,0,2026,2027,1,0,0,0,2027,261,1,0,0,0,2028,2030,
        3,684,342,0,2029,2031,3,238,119,0,2030,2029,1,0,0,0,2030,2031,1,
        0,0,0,2031,263,1,0,0,0,2032,2036,5,140,0,0,2033,2034,3,636,318,0,
        2034,2035,3,266,133,0,2035,2037,1,0,0,0,2036,2033,1,0,0,0,2036,2037,
        1,0,0,0,2037,2043,1,0,0,0,2038,2039,3,266,133,0,2039,2040,3,636,
        318,0,2040,2041,5,140,0,0,2041,2043,1,0,0,0,2042,2032,1,0,0,0,2042,
        2038,1,0,0,0,2043,265,1,0,0,0,2044,2045,7,6,0,0,2045,267,1,0,0,0,
        2046,2048,3,238,119,0,2047,2046,1,0,0,0,2047,2048,1,0,0,0,2048,2049,
        1,0,0,0,2049,2050,3,636,318,0,2050,2051,5,10,0,0,2051,2054,3,636,
        318,0,2052,2055,3,628,314,0,2053,2055,5,6,0,0,2054,2052,1,0,0,0,
        2054,2053,1,0,0,0,2055,269,1,0,0,0,2056,2058,5,243,0,0,2057,2059,
        3,636,318,0,2058,2057,1,0,0,0,2058,2059,1,0,0,0,2059,2060,1,0,0,
        0,2060,2061,3,616,308,0,2061,271,1,0,0,0,2062,2063,3,650,325,0,2063,
        273,1,0,0,0,2064,2065,3,650,325,0,2065,275,1,0,0,0,2066,2067,7,7,
        0,0,2067,277,1,0,0,0,2068,2069,3,280,140,0,2069,279,1,0,0,0,2070,
        2072,3,282,141,0,2071,2070,1,0,0,0,2072,2073,1,0,0,0,2073,2071,1,
        0,0,0,2073,2074,1,0,0,0,2074,281,1,0,0,0,2075,2077,3,642,321,0,2076,
        2075,1,0,0,0,2077,2080,1,0,0,0,2078,2076,1,0,0,0,2078,2079,1,0,0,
        0,2079,2081,1,0,0,0,2080,2078,1,0,0,0,2081,2082,3,640,320,0,2082,
        2083,3,286,143,0,2083,2102,1,0,0,0,2084,2086,3,642,321,0,2085,2084,
        1,0,0,0,2086,2087,1,0,0,0,2087,2085,1,0,0,0,2087,2088,1,0,0,0,2088,
        2089,1,0,0,0,2089,2090,3,296,148,0,2090,2102,1,0,0,0,2091,2102,3,
        284,142,0,2092,2094,3,642,321,0,2093,2092,1,0,0,0,2094,2097,1,0,
        0,0,2095,2093,1,0,0,0,2095,2096,1,0,0,0,2096,2098,1,0,0,0,2097,2095,
        1,0,0,0,2098,2099,3,640,320,0,2099,2100,3,564,282,0,2100,2102,1,
        0,0,0,2101,2078,1,0,0,0,2101,2085,1,0,0,0,2101,2091,1,0,0,0,2101,
        2095,1,0,0,0,2102,283,1,0,0,0,2103,2126,3,298,149,0,2104,2106,3,
        642,321,0,2105,2104,1,0,0,0,2106,2107,1,0,0,0,2107,2105,1,0,0,0,
        2107,2108,1,0,0,0,2108,2109,1,0,0,0,2109,2110,3,404,202,0,2110,2126,
        1,0,0,0,2111,2113,3,642,321,0,2112,2111,1,0,0,0,2113,2114,1,0,0,
        0,2114,2112,1,0,0,0,2114,2115,1,0,0,0,2115,2116,1,0,0,0,2116,2117,
        3,462,231,0,2117,2126,1,0,0,0,2118,2120,3,642,321,0,2119,2118,1,
        0,0,0,2120,2121,1,0,0,0,2121,2119,1,0,0,0,2121,2122,1,0,0,0,2122,
        2123,1,0,0,0,2123,2124,3,474,237,0,2124,2126,1,0,0,0,2125,2103,1,
        0,0,0,2125,2105,1,0,0,0,2125,2112,1,0,0,0,2125,2119,1,0,0,0,2126,
        285,1,0,0,0,2127,2128,3,292,146,0,2128,2129,5,276,0,0,2129,2135,
        1,0,0,0,2130,2132,3,294,147,0,2131,2133,5,276,0,0,2132,2131,1,0,
        0,0,2132,2133,1,0,0,0,2133,2135,1,0,0,0,2134,2127,1,0,0,0,2134,2130,
        1,0,0,0,2135,287,1,0,0,0,2136,2139,3,292,146,0,2137,2139,3,294,147,
        0,2138,2136,1,0,0,0,2138,2137,1,0,0,0,2139,289,1,0,0,0,2140,2149,
        3,288,144,0,2141,2143,3,636,318,0,2142,2141,1,0,0,0,2142,2143,1,
        0,0,0,2143,2144,1,0,0,0,2144,2146,5,240,0,0,2145,2147,3,636,318,
        0,2146,2145,1,0,0,0,2146,2147,1,0,0,0,2147,2148,1,0,0,0,2148,2150,
        3,288,144,0,2149,2142,1,0,0,0,2149,2150,1,0,0,0,2150,291,1,0,0,0,
        2151,2152,3,650,325,0,2152,293,1,0,0,0,2153,2154,5,268,0,0,2154,
        295,1,0,0,0,2155,2156,5,273,0,0,2156,297,1,0,0,0,2157,2159,3,642,
        321,0,2158,2157,1,0,0,0,2159,2162,1,0,0,0,2160,2158,1,0,0,0,2160,
        2161,1,0,0,0,2161,2164,1,0,0,0,2162,2160,1,0,0,0,2163,2165,3,638,
        319,0,2164,2163,1,0,0,0,2165,2166,1,0,0,0,2166,2164,1,0,0,0,2166,
        2167,1,0,0,0,2167,2168,1,0,0,0,2168,2169,3,346,173,0,2169,2178,1,
        0,0,0,2170,2172,3,642,321,0,2171,2170,1,0,0,0,2172,2173,1,0,0,0,
        2173,2171,1,0,0,0,2173,2174,1,0,0,0,2174,2175,1,0,0,0,2175,2176,
        3,300,150,0,2176,2178,1,0,0,0,2177,2160,1,0,0,0,2177,2171,1,0,0,
        0,2178,299,1,0,0,0,2179,2201,3,302,151,0,2180,2201,3,304,152,0,2181,
        2201,3,306,153,0,2182,2201,3,334,167,0,2183,2201,3,336,168,0,2184,
        2201,3,344,172,0,2185,2201,3,352,176,0,2186,2201,3,364,182,0,2187,
        2201,3,376,188,0,2188,2201,3,378,189,0,2189,2201,3,380,190,0,2190,
        2201,3,382,191,0,2191,2201,3,384,192,0,2192,2201,3,386,193,0,2193,
        2201,3,324,162,0,2194,2201,3,388,194,0,2195,2201,3,390,195,0,2196,
        2201,3,392,196,0,2197,2201,3,394,197,0,2198,2201,3,400,200,0,2199,
        2201,3,402,201,0,2200,2179,1,0,0,0,2200,2180,1,0,0,0,2200,2181,1,
        0,0,0,2200,2182,1,0,0,0,2200,2183,1,0,0,0,2200,2184,1,0,0,0,2200,
        2185,1,0,0,0,2200,2186,1,0,0,0,2200,2187,1,0,0,0,2200,2188,1,0,0,
        0,2200,2189,1,0,0,0,2200,2190,1,0,0,0,2200,2191,1,0,0,0,2200,2192,
        1,0,0,0,2200,2193,1,0,0,0,2200,2194,1,0,0,0,2200,2195,1,0,0,0,2200,
        2196,1,0,0,0,2200,2197,1,0,0,0,2200,2198,1,0,0,0,2200,2199,1,0,0,
        0,2201,301,1,0,0,0,2202,2203,5,20,0,0,2203,2208,3,636,318,0,2204,
        2209,3,586,293,0,2205,2209,3,590,295,0,2206,2209,3,592,296,0,2207,
        2209,3,610,305,0,2208,2204,1,0,0,0,2208,2205,1,0,0,0,2208,2206,1,
        0,0,0,2208,2207,1,0,0,0,2209,2221,1,0,0,0,2210,2214,3,586,293,0,
        2211,2214,3,590,295,0,2212,2214,3,610,305,0,2213,2210,1,0,0,0,2213,
        2211,1,0,0,0,2213,2212,1,0,0,0,2214,2218,1,0,0,0,2215,2216,3,636,
        318,0,2216,2217,3,594,297,0,2217,2219,1,0,0,0,2218,2215,1,0,0,0,
        2218,2219,1,0,0,0,2219,2221,1,0,0,0,2220,2202,1,0,0,0,2220,2213,
        1,0,0,0,2221,303,1,0,0,0,2222,2223,5,214,0,0,2223,2224,3,636,318,
        0,2224,2226,3,620,310,0,2225,2227,3,280,140,0,2226,2225,1,0,0,0,
        2226,2227,1,0,0,0,2227,2229,1,0,0,0,2228,2230,3,642,321,0,2229,2228,
        1,0,0,0,2230,2231,1,0,0,0,2231,2229,1,0,0,0,2231,2232,1,0,0,0,2232,
        2233,1,0,0,0,2233,2234,5,213,0,0,2234,305,1,0,0,0,2235,2238,3,308,
        154,0,2236,2238,3,310,155,0,2237,2235,1,0,0,0,2237,2236,1,0,0,0,
        2238,307,1,0,0,0,2239,2241,3,314,157,0,2240,2242,3,280,140,0,2241,
        2240,1,0,0,0,2241,2242,1,0,0,0,2242,2244,1,0,0,0,2243,2245,3,642,
        321,0,2244,2243,1,0,0,0,2245,2246,1,0,0,0,2246,2244,1,0,0,0,2246,
        2247,1,0,0,0,2247,2248,1,0,0,0,2248,2249,5,130,0,0,2249,309,1,0,
        0,0,2250,2252,3,314,157,0,2251,2253,3,280,140,0,2252,2251,1,0,0,
        0,2252,2253,1,0,0,0,2253,2255,1,0,0,0,2254,2256,3,642,321,0,2255,
        2254,1,0,0,0,2256,2257,1,0,0,0,2257,2255,1,0,0,0,2257,2258,1,0,0,
        0,2258,2266,1,0,0,0,2259,2267,5,130,0,0,2260,2262,3,312,156,0,2261,
        2263,3,636,318,0,2262,2261,1,0,0,0,2262,2263,1,0,0,0,2263,2264,1,
        0,0,0,2264,2265,5,240,0,0,2265,2267,1,0,0,0,2266,2259,1,0,0,0,2266,
        2260,1,0,0,0,2267,2268,1,0,0,0,2268,2269,3,636,318,0,2269,2270,3,
        626,313,0,2270,311,1,0,0,0,2271,2274,3,310,155,0,2272,2274,3,328,
        164,0,2273,2271,1,0,0,0,2273,2272,1,0,0,0,2274,313,1,0,0,0,2275,
        2276,5,88,0,0,2276,2277,3,636,318,0,2277,2279,3,626,313,0,2278,2280,
        3,636,318,0,2279,2278,1,0,0,0,2279,2280,1,0,0,0,2280,2281,1,0,0,
        0,2281,2283,5,243,0,0,2282,2284,3,636,318,0,2283,2282,1,0,0,0,2283,
        2284,1,0,0,0,2284,2285,1,0,0,0,2285,2286,3,316,158,0,2286,2287,3,
        636,318,0,2287,2288,5,179,0,0,2288,2289,3,636,318,0,2289,2293,3,
        318,159,0,2290,2291,3,636,318,0,2291,2292,3,320,160,0,2292,2294,
        1,0,0,0,2293,2290,1,0,0,0,2293,2294,1,0,0,0,2294,315,1,0,0,0,2295,
        2296,3,570,285,0,2296,317,1,0,0,0,2297,2298,3,570,285,0,2298,319,
        1,0,0,0,2299,2300,5,171,0,0,2300,2301,3,636,318,0,2301,2302,3,322,
        161,0,2302,321,1,0,0,0,2303,2304,3,570,285,0,2304,323,1,0,0,0,2305,
        2308,3,326,163,0,2306,2308,3,328,164,0,2307,2305,1,0,0,0,2307,2306,
        1,0,0,0,2308,325,1,0,0,0,2309,2311,3,330,165,0,2310,2312,3,280,140,
        0,2311,2310,1,0,0,0,2311,2312,1,0,0,0,2312,2314,1,0,0,0,2313,2315,
        3,642,321,0,2314,2313,1,0,0,0,2315,2316,1,0,0,0,2316,2314,1,0,0,
        0,2316,2317,1,0,0,0,2317,2318,1,0,0,0,2318,2319,5,130,0,0,2319,327,
        1,0,0,0,2320,2322,3,330,165,0,2321,2323,3,280,140,0,2322,2321,1,
        0,0,0,2322,2323,1,0,0,0,2323,2324,1,0,0,0,2324,2332,3,642,321,0,
        2325,2333,5,130,0,0,2326,2328,3,312,156,0,2327,2329,3,636,318,0,
        2328,2327,1,0,0,0,2328,2329,1,0,0,0,2329,2330,1,0,0,0,2330,2331,
        5,240,0,0,2331,2333,1,0,0,0,2332,2325,1,0,0,0,2332,2326,1,0,0,0,
        2333,2334,1,0,0,0,2334,2335,3,636,318,0,2335,2336,3,626,313,0,2336,
        329,1,0,0,0,2337,2338,5,88,0,0,2338,2339,3,636,318,0,2339,2341,5,
        72,0,0,2340,2342,3,636,318,0,2341,2340,1,0,0,0,2341,2342,1,0,0,0,
        2342,2343,1,0,0,0,2343,2345,3,626,313,0,2344,2346,3,636,318,0,2345,
        2344,1,0,0,0,2345,2346,1,0,0,0,2346,2347,1,0,0,0,2347,2349,5,98,
        0,0,2348,2350,3,636,318,0,2349,2348,1,0,0,0,2349,2350,1,0,0,0,2350,
        2351,1,0,0,0,2351,2352,3,332,166,0,2352,331,1,0,0,0,2353,2354,3,
        570,285,0,2354,333,1,0,0,0,2355,2356,5,83,0,0,2356,2357,3,636,318,
        0,2357,2358,5,88,0,0,2358,335,1,0,0,0,2359,2364,5,68,0,0,2360,2362,
        3,636,318,0,2361,2360,1,0,0,0,2361,2362,1,0,0,0,2362,2363,1,0,0,
        0,2363,2365,3,338,169,0,2364,2361,1,0,0,0,2364,2365,1,0,0,0,2365,
        2367,1,0,0,0,2366,2368,3,280,140,0,2367,2366,1,0,0,0,2367,2368,1,
        0,0,0,2368,2370,1,0,0,0,2369,2371,3,642,321,0,2370,2369,1,0,0,0,
        2371,2372,1,0,0,0,2372,2370,1,0,0,0,2372,2373,1,0,0,0,2373,2374,
        1,0,0,0,2374,2379,5,121,0,0,2375,2377,3,636,318,0,2376,2375,1,0,
        0,0,2376,2377,1,0,0,0,2377,2378,1,0,0,0,2378,2380,3,338,169,0,2379,
        2376,1,0,0,0,2379,2380,1,0,0,0,2380,337,1,0,0,0,2381,2384,3,340,
        170,0,2382,2384,3,342,171,0,2383,2381,1,0,0,0,2383,2382,1,0,0,0,
        2384,339,1,0,0,0,2385,2387,5,214,0,0,2386,2388,3,636,318,0,2387,
        2386,1,0,0,0,2387,2388,1,0,0,0,2388,2389,1,0,0,0,2389,2390,3,620,
        310,0,2390,341,1,0,0,0,2391,2393,5,185,0,0,2392,2394,3,636,318,0,
        2393,2392,1,0,0,0,2393,2394,1,0,0,0,2394,2395,1,0,0,0,2395,2396,
        3,620,310,0,2396,343,1,0,0,0,2397,2398,5,83,0,0,2398,2399,3,636,
        318,0,2399,2400,5,68,0,0,2400,345,1,0,0,0,2401,2403,5,95,0,0,2402,
        2404,3,636,318,0,2403,2402,1,0,0,0,2403,2404,1,0,0,0,2404,2405,1,
        0,0,0,2405,2407,3,620,310,0,2406,2408,3,636,318,0,2407,2406,1,0,
        0,0,2407,2408,1,0,0,0,2408,2409,1,0,0,0,2409,2411,5,178,0,0,2410,
        2412,3,280,140,0,2411,2410,1,0,0,0,2411,2412,1,0,0,0,2412,2416,1,
        0,0,0,2413,2415,3,348,174,0,2414,2413,1,0,0,0,2415,2418,1,0,0,0,
        2416,2414,1,0,0,0,2416,2417,1,0,0,0,2417,2420,1,0,0,0,2418,2416,
        1,0,0,0,2419,2421,3,350,175,0,2420,2419,1,0,0,0,2420,2421,1,0,0,
        0,2421,2423,1,0,0,0,2422,2424,3,642,321,0,2423,2422,1,0,0,0,2424,
        2425,1,0,0,0,2425,2423,1,0,0,0,2425,2426,1,0,0,0,2426,2432,1,0,0,
        0,2427,2428,5,77,0,0,2428,2429,3,636,318,0,2429,2430,5,95,0,0,2430,
        2433,1,0,0,0,2431,2433,5,76,0,0,2432,2427,1,0,0,0,2432,2431,1,0,
        0,0,2433,347,1,0,0,0,2434,2436,3,642,321,0,2435,2434,1,0,0,0,2436,
        2439,1,0,0,0,2437,2435,1,0,0,0,2437,2438,1,0,0,0,2438,2440,1,0,0,
        0,2439,2437,1,0,0,0,2440,2441,3,638,319,0,2441,2443,5,74,0,0,2442,
        2444,3,636,318,0,2443,2442,1,0,0,0,2443,2444,1,0,0,0,2444,2445,1,
        0,0,0,2445,2447,3,620,310,0,2446,2448,3,636,318,0,2447,2446,1,0,
        0,0,2447,2448,1,0,0,0,2448,2449,1,0,0,0,2449,2451,5,178,0,0,2450,
        2452,3,638,319,0,2451,2450,1,0,0,0,2451,2452,1,0,0,0,2452,2454,1,
        0,0,0,2453,2455,3,280,140,0,2454,2453,1,0,0,0,2454,2455,1,0,0,0,
        2455,2475,1,0,0,0,2456,2458,3,642,321,0,2457,2456,1,0,0,0,2458,2461,
        1,0,0,0,2459,2457,1,0,0,0,2459,2460,1,0,0,0,2460,2462,1,0,0,0,2461,
        2459,1,0,0,0,2462,2464,5,74,0,0,2463,2465,3,636,318,0,2464,2463,
        1,0,0,0,2464,2465,1,0,0,0,2465,2466,1,0,0,0,2466,2468,3,620,310,
        0,2467,2469,3,636,318,0,2468,2467,1,0,0,0,2468,2469,1,0,0,0,2469,
        2470,1,0,0,0,2470,2472,5,178,0,0,2471,2473,3,280,140,0,2472,2471,
        1,0,0,0,2472,2473,1,0,0,0,2473,2475,1,0,0,0,2474,2437,1,0,0,0,2474,
        2459,1,0,0,0,2475,349,1,0,0,0,2476,2478,3,638,319,0,2477,2476,1,
        0,0,0,2478,2479,1,0,0,0,2479,2477,1,0,0,0,2479,2480,1,0,0,0,2480,
        2481,1,0,0,0,2481,2483,5,73,0,0,2482,2484,3,638,319,0,2483,2482,
        1,0,0,0,2483,2484,1,0,0,0,2484,2486,1,0,0,0,2485,2487,3,636,318,
        0,2486,2485,1,0,0,0,2486,2487,1,0,0,0,2487,2489,1,0,0,0,2488,2490,
        3,280,140,0,2489,2488,1,0,0,0,2489,2490,1,0,0,0,2490,351,1,0,0,0,
        2491,2494,3,354,177,0,2492,2494,3,356,178,0,2493,2491,1,0,0,0,2493,
        2492,1,0,0,0,2494,353,1,0,0,0,2495,2496,5,95,0,0,2496,2497,3,636,
        318,0,2497,2498,3,620,310,0,2498,2499,3,636,318,0,2499,2500,5,178,
        0,0,2500,2501,3,636,318,0,2501,2505,3,360,180,0,2502,2503,3,636,
        318,0,2503,2504,3,358,179,0,2504,2506,1,0,0,0,2505,2502,1,0,0,0,
        2505,2506,1,0,0,0,2506,355,1,0,0,0,2507,2508,5,95,0,0,2508,2509,
        3,636,318,0,2509,2510,3,620,310,0,2510,2511,3,636,318,0,2511,2512,
        5,178,0,0,2512,2513,3,636,318,0,2513,2514,3,358,179,0,2514,357,1,
        0,0,0,2515,2517,5,73,0,0,2516,2518,3,636,318,0,2517,2516,1,0,0,0,
        2517,2518,1,0,0,0,2518,2520,1,0,0,0,2519,2521,3,360,180,0,2520,2519,
        1,0,0,0,2520,2521,1,0,0,0,2521,359,1,0,0,0,2522,2532,3,288,144,0,
        2523,2525,5,276,0,0,2524,2526,3,636,318,0,2525,2524,1,0,0,0,2525,
        2526,1,0,0,0,2526,2528,1,0,0,0,2527,2529,3,362,181,0,2528,2527,1,
        0,0,0,2528,2529,1,0,0,0,2529,2531,1,0,0,0,2530,2523,1,0,0,0,2531,
        2534,1,0,0,0,2532,2530,1,0,0,0,2532,2533,1,0,0,0,2533,2552,1,0,0,
        0,2534,2532,1,0,0,0,2535,2537,5,276,0,0,2536,2535,1,0,0,0,2536,2537,
        1,0,0,0,2537,2538,1,0,0,0,2538,2548,3,362,181,0,2539,2541,5,276,
        0,0,2540,2542,3,636,318,0,2541,2540,1,0,0,0,2541,2542,1,0,0,0,2542,
        2544,1,0,0,0,2543,2545,3,362,181,0,2544,2543,1,0,0,0,2544,2545,1,
        0,0,0,2545,2547,1,0,0,0,2546,2539,1,0,0,0,2547,2550,1,0,0,0,2548,
        2546,1,0,0,0,2548,2549,1,0,0,0,2549,2552,1,0,0,0,2550,2548,1,0,0,
        0,2551,2522,1,0,0,0,2551,2536,1,0,0,0,2552,361,1,0,0,0,2553,2558,
        3,474,237,0,2554,2558,3,462,231,0,2555,2558,3,404,202,0,2556,2558,
        3,300,150,0,2557,2553,1,0,0,0,2557,2554,1,0,0,0,2557,2555,1,0,0,
        0,2557,2556,1,0,0,0,2558,363,1,0,0,0,2559,2560,5,163,0,0,2560,2561,
        3,636,318,0,2561,2562,5,21,0,0,2562,2563,3,636,318,0,2563,2567,3,
        372,186,0,2564,2566,3,366,183,0,2565,2564,1,0,0,0,2566,2569,1,0,
        0,0,2567,2565,1,0,0,0,2567,2568,1,0,0,0,2568,2571,1,0,0,0,2569,2567,
        1,0,0,0,2570,2572,3,368,184,0,2571,2570,1,0,0,0,2571,2572,1,0,0,
        0,2572,2574,1,0,0,0,2573,2575,3,642,321,0,2574,2573,1,0,0,0,2575,
        2576,1,0,0,0,2576,2574,1,0,0,0,2576,2577,1,0,0,0,2577,2578,1,0,0,
        0,2578,2579,5,77,0,0,2579,2580,3,636,318,0,2580,2581,5,163,0,0,2581,
        365,1,0,0,0,2582,2584,3,642,321,0,2583,2582,1,0,0,0,2584,2585,1,
        0,0,0,2585,2583,1,0,0,0,2585,2586,1,0,0,0,2586,2587,1,0,0,0,2587,
        2589,5,21,0,0,2588,2590,3,636,318,0,2589,2588,1,0,0,0,2589,2590,
        1,0,0,0,2590,2591,1,0,0,0,2591,2602,3,370,185,0,2592,2594,3,636,
        318,0,2593,2592,1,0,0,0,2593,2594,1,0,0,0,2594,2595,1,0,0,0,2595,
        2597,5,240,0,0,2596,2598,3,636,318,0,2597,2596,1,0,0,0,2597,2598,
        1,0,0,0,2598,2599,1,0,0,0,2599,2601,3,370,185,0,2600,2593,1,0,0,
        0,2601,2604,1,0,0,0,2602,2600,1,0,0,0,2602,2603,1,0,0,0,2603,2606,
        1,0,0,0,2604,2602,1,0,0,0,2605,2607,3,280,140,0,2606,2605,1,0,0,
        0,2606,2607,1,0,0,0,2607,367,1,0,0,0,2608,2610,3,642,321,0,2609,
        2608,1,0,0,0,2610,2611,1,0,0,0,2611,2609,1,0,0,0,2611,2612,1,0,0,
        0,2612,2613,1,0,0,0,2613,2614,5,21,0,0,2614,2615,3,636,318,0,2615,
        2617,5,73,0,0,2616,2618,3,280,140,0,2617,2616,1,0,0,0,2617,2618,
        1,0,0,0,2618,369,1,0,0,0,2619,2641,3,570,285,0,2620,2622,3,316,158,
        0,2621,2623,3,636,318,0,2622,2621,1,0,0,0,2622,2623,1,0,0,0,2623,
        2624,1,0,0,0,2624,2626,5,179,0,0,2625,2627,3,636,318,0,2626,2625,
        1,0,0,0,2626,2627,1,0,0,0,2627,2628,1,0,0,0,2628,2629,3,318,159,
        0,2629,2641,1,0,0,0,2630,2632,5,102,0,0,2631,2630,1,0,0,0,2631,2632,
        1,0,0,0,2632,2633,1,0,0,0,2633,2634,3,636,318,0,2634,2636,3,374,
        187,0,2635,2637,3,636,318,0,2636,2635,1,0,0,0,2636,2637,1,0,0,0,
        2637,2638,1,0,0,0,2638,2639,3,570,285,0,2639,2641,1,0,0,0,2640,2619,
        1,0,0,0,2640,2620,1,0,0,0,2640,2631,1,0,0,0,2641,371,1,0,0,0,2642,
        2643,3,570,285,0,2643,373,1,0,0,0,2644,2645,7,8,0,0,2645,375,1,0,
        0,0,2646,2647,5,172,0,0,2647,377,1,0,0,0,2648,2649,5,92,0,0,2649,
        2650,3,636,318,0,2650,2651,5,179,0,0,2651,2654,1,0,0,0,2652,2654,
        5,94,0,0,2653,2648,1,0,0,0,2653,2652,1,0,0,0,2654,2655,1,0,0,0,2655,
        2656,3,636,318,0,2656,2657,3,288,144,0,2657,379,1,0,0,0,2658,2660,
        5,137,0,0,2659,2661,3,636,318,0,2660,2659,1,0,0,0,2660,2661,1,0,
        0,0,2661,2662,1,0,0,0,2662,2663,3,570,285,0,2663,2664,5,94,0,0,2664,
        2665,3,636,318,0,2665,2666,3,290,145,0,2666,381,1,0,0,0,2667,2668,
        5,92,0,0,2668,2669,3,636,318,0,2669,2670,5,175,0,0,2670,2673,1,0,
        0,0,2671,2673,5,93,0,0,2672,2667,1,0,0,0,2672,2671,1,0,0,0,2673,
        2674,1,0,0,0,2674,2675,3,636,318,0,2675,2676,3,288,144,0,2676,383,
        1,0,0,0,2677,2678,5,159,0,0,2678,385,1,0,0,0,2679,2681,5,137,0,0,
        2680,2682,3,636,318,0,2681,2680,1,0,0,0,2681,2682,1,0,0,0,2682,2683,
        1,0,0,0,2683,2685,3,570,285,0,2684,2686,3,636,318,0,2685,2684,1,
        0,0,0,2685,2686,1,0,0,0,2686,2687,1,0,0,0,2687,2688,5,93,0,0,2688,
        2689,3,636,318,0,2689,2690,3,290,145,0,2690,387,1,0,0,0,2691,2692,
        5,83,0,0,2692,2693,3,636,318,0,2693,2694,5,175,0,0,2694,389,1,0,
        0,0,2695,2696,5,83,0,0,2696,2697,3,636,318,0,2697,2698,5,89,0,0,
        2698,391,1,0,0,0,2699,2700,5,83,0,0,2700,2701,3,636,318,0,2701,2702,
        5,147,0,0,2702,393,1,0,0,0,2703,2705,5,153,0,0,2704,2706,3,636,318,
        0,2705,2704,1,0,0,0,2705,2706,1,0,0,0,2706,2707,1,0,0,0,2707,2709,
        3,650,325,0,2708,2710,3,636,318,0,2709,2708,1,0,0,0,2709,2710,1,
        0,0,0,2710,2721,1,0,0,0,2711,2713,5,249,0,0,2712,2714,3,636,318,
        0,2713,2712,1,0,0,0,2713,2714,1,0,0,0,2714,2715,1,0,0,0,2715,2717,
        3,396,198,0,2716,2718,3,636,318,0,2717,2716,1,0,0,0,2717,2718,1,
        0,0,0,2718,2719,1,0,0,0,2719,2720,5,260,0,0,2720,2722,1,0,0,0,2721,
        2711,1,0,0,0,2721,2722,1,0,0,0,2722,395,1,0,0,0,2723,2734,3,398,
        199,0,2724,2726,3,636,318,0,2725,2724,1,0,0,0,2725,2726,1,0,0,0,
        2726,2727,1,0,0,0,2727,2729,5,240,0,0,2728,2730,3,636,318,0,2729,
        2728,1,0,0,0,2729,2730,1,0,0,0,2730,2731,1,0,0,0,2731,2733,3,398,
        199,0,2732,2725,1,0,0,0,2733,2736,1,0,0,0,2734,2732,1,0,0,0,2734,
        2735,1,0,0,0,2735,2738,1,0,0,0,2736,2734,1,0,0,0,2737,2723,1,0,0,
        0,2737,2738,1,0,0,0,2738,397,1,0,0,0,2739,2740,3,570,285,0,2740,
        399,1,0,0,0,2741,2743,5,216,0,0,2742,2744,3,636,318,0,2743,2742,
        1,0,0,0,2743,2744,1,0,0,0,2744,2745,1,0,0,0,2745,2747,3,570,285,
        0,2746,2748,3,280,140,0,2747,2746,1,0,0,0,2747,2748,1,0,0,0,2748,
        2750,1,0,0,0,2749,2751,3,642,321,0,2750,2749,1,0,0,0,2751,2752,1,
        0,0,0,2752,2750,1,0,0,0,2752,2753,1,0,0,0,2753,2754,1,0,0,0,2754,
        2755,5,77,0,0,2755,2756,3,636,318,0,2756,2757,5,216,0,0,2757,401,
        1,0,0,0,2758,2759,5,77,0,0,2759,403,1,0,0,0,2760,2771,3,406,203,
        0,2761,2771,3,408,204,0,2762,2771,3,410,205,0,2763,2771,3,412,206,
        0,2764,2771,3,438,219,0,2765,2771,3,444,222,0,2766,2771,3,456,228,
        0,2767,2771,3,454,227,0,2768,2771,3,458,229,0,2769,2771,3,460,230,
        0,2770,2760,1,0,0,0,2770,2761,1,0,0,0,2770,2762,1,0,0,0,2770,2763,
        1,0,0,0,2770,2764,1,0,0,0,2770,2765,1,0,0,0,2770,2766,1,0,0,0,2770,
        2767,1,0,0,0,2770,2768,1,0,0,0,2770,2769,1,0,0,0,2771,405,1,0,0,
        0,2772,2774,5,67,0,0,2773,2775,3,636,318,0,2774,2773,1,0,0,0,2774,
        2775,1,0,0,0,2775,2777,1,0,0,0,2776,2778,5,166,0,0,2777,2776,1,0,
        0,0,2777,2778,1,0,0,0,2778,2780,1,0,0,0,2779,2781,3,636,318,0,2780,
        2779,1,0,0,0,2780,2781,1,0,0,0,2781,2782,1,0,0,0,2782,2783,3,88,
        44,0,2783,407,1,0,0,0,2784,2785,5,170,0,0,2785,2786,3,636,318,0,
        2786,2787,3,88,44,0,2787,409,1,0,0,0,2788,2789,3,132,66,0,2789,411,
        1,0,0,0,2790,2794,5,155,0,0,2791,2792,3,636,318,0,2792,2793,5,144,
        0,0,2793,2795,1,0,0,0,2794,2791,1,0,0,0,2794,2795,1,0,0,0,2795,2797,
        1,0,0,0,2796,2798,3,636,318,0,2797,2796,1,0,0,0,2797,2798,1,0,0,
        0,2798,2799,1,0,0,0,2799,2800,3,414,207,0,2800,413,1,0,0,0,2801,
        2812,3,416,208,0,2802,2804,3,636,318,0,2803,2802,1,0,0,0,2803,2804,
        1,0,0,0,2804,2805,1,0,0,0,2805,2807,5,240,0,0,2806,2808,3,636,318,
        0,2807,2806,1,0,0,0,2807,2808,1,0,0,0,2808,2809,1,0,0,0,2809,2811,
        3,416,208,0,2810,2803,1,0,0,0,2811,2814,1,0,0,0,2812,2810,1,0,0,
        0,2812,2813,1,0,0,0,2813,415,1,0,0,0,2814,2812,1,0,0,0,2815,2820,
        3,418,209,0,2816,2820,3,420,210,0,2817,2820,3,422,211,0,2818,2820,
        3,424,212,0,2819,2815,1,0,0,0,2819,2816,1,0,0,0,2819,2817,1,0,0,
        0,2819,2818,1,0,0,0,2820,417,1,0,0,0,2821,2823,3,684,342,0,2822,
        2824,3,636,318,0,2823,2822,1,0,0,0,2823,2824,1,0,0,0,2824,2825,1,
        0,0,0,2825,2826,3,426,213,0,2826,419,1,0,0,0,2827,2829,3,30,15,0,
        2828,2830,3,636,318,0,2829,2828,1,0,0,0,2829,2830,1,0,0,0,2830,2831,
        1,0,0,0,2831,2832,3,436,218,0,2832,421,1,0,0,0,2833,2835,3,610,305,
        0,2834,2836,3,636,318,0,2835,2834,1,0,0,0,2835,2836,1,0,0,0,2836,
        2837,1,0,0,0,2837,2838,3,426,213,0,2838,423,1,0,0,0,2839,2841,3,
        590,295,0,2840,2842,3,636,318,0,2841,2840,1,0,0,0,2841,2842,1,0,
        0,0,2842,2843,1,0,0,0,2843,2844,3,426,213,0,2844,425,1,0,0,0,2845,
        2847,5,249,0,0,2846,2848,3,636,318,0,2847,2846,1,0,0,0,2847,2848,
        1,0,0,0,2848,2849,1,0,0,0,2849,2851,3,428,214,0,2850,2852,3,636,
        318,0,2851,2850,1,0,0,0,2851,2852,1,0,0,0,2852,2853,1,0,0,0,2853,
        2854,5,260,0,0,2854,427,1,0,0,0,2855,2866,3,430,215,0,2856,2858,
        3,636,318,0,2857,2856,1,0,0,0,2857,2858,1,0,0,0,2858,2859,1,0,0,
        0,2859,2861,5,240,0,0,2860,2862,3,636,318,0,2861,2860,1,0,0,0,2861,
        2862,1,0,0,0,2862,2863,1,0,0,0,2863,2865,3,430,215,0,2864,2857,1,
        0,0,0,2865,2868,1,0,0,0,2866,2864,1,0,0,0,2866,2867,1,0,0,0,2867,
        429,1,0,0,0,2868,2866,1,0,0,0,2869,2870,3,432,216,0,2870,2871,3,
        636,318,0,2871,2873,1,0,0,0,2872,2869,1,0,0,0,2872,2873,1,0,0,0,
        2873,2874,1,0,0,0,2874,2875,3,434,217,0,2875,431,1,0,0,0,2876,2878,
        3,622,311,0,2877,2879,3,636,318,0,2878,2877,1,0,0,0,2878,2879,1,
        0,0,0,2879,2880,1,0,0,0,2880,2881,5,179,0,0,2881,433,1,0,0,0,2882,
        2883,3,622,311,0,2883,435,1,0,0,0,2884,2886,3,426,213,0,2885,2887,
        3,636,318,0,2886,2885,1,0,0,0,2886,2887,1,0,0,0,2887,2889,1,0,0,
        0,2888,2890,3,98,49,0,2889,2888,1,0,0,0,2889,2890,1,0,0,0,2890,437,
        1,0,0,0,2891,2893,5,80,0,0,2892,2894,3,636,318,0,2893,2892,1,0,0,
        0,2893,2894,1,0,0,0,2894,2895,1,0,0,0,2895,2896,3,440,220,0,2896,
        439,1,0,0,0,2897,2908,3,442,221,0,2898,2900,3,636,318,0,2899,2898,
        1,0,0,0,2899,2900,1,0,0,0,2900,2901,1,0,0,0,2901,2903,5,240,0,0,
        2902,2904,3,636,318,0,2903,2902,1,0,0,0,2903,2904,1,0,0,0,2904,2905,
        1,0,0,0,2905,2907,3,442,221,0,2906,2899,1,0,0,0,2907,2910,1,0,0,
        0,2908,2906,1,0,0,0,2908,2909,1,0,0,0,2909,441,1,0,0,0,2910,2908,
        1,0,0,0,2911,2912,3,572,286,0,2912,443,1,0,0,0,2913,2915,3,446,223,
        0,2914,2916,3,636,318,0,2915,2914,1,0,0,0,2915,2916,1,0,0,0,2916,
        2917,1,0,0,0,2917,2919,5,249,0,0,2918,2920,3,636,318,0,2919,2918,
        1,0,0,0,2919,2920,1,0,0,0,2920,2921,1,0,0,0,2921,2923,3,448,224,
        0,2922,2924,3,636,318,0,2923,2922,1,0,0,0,2923,2924,1,0,0,0,2924,
        2925,1,0,0,0,2925,2927,5,240,0,0,2926,2928,3,636,318,0,2927,2926,
        1,0,0,0,2927,2928,1,0,0,0,2928,2929,1,0,0,0,2929,2931,3,450,225,
        0,2930,2932,3,636,318,0,2931,2930,1,0,0,0,2931,2932,1,0,0,0,2932,
        2938,1,0,0,0,2933,2935,5,240,0,0,2934,2936,3,636,318,0,2935,2934,
        1,0,0,0,2935,2936,1,0,0,0,2936,2937,1,0,0,0,2937,2939,3,452,226,
        0,2938,2933,1,0,0,0,2938,2939,1,0,0,0,2939,2940,1,0,0,0,2940,2942,
        5,260,0,0,2941,2943,3,636,318,0,2942,2941,1,0,0,0,2942,2943,1,0,
        0,0,2943,2944,1,0,0,0,2944,2946,5,243,0,0,2945,2947,3,636,318,0,
        2946,2945,1,0,0,0,2946,2947,1,0,0,0,2947,2948,1,0,0,0,2948,2949,
        3,570,285,0,2949,445,1,0,0,0,2950,2951,7,9,0,0,2951,447,1,0,0,0,
        2952,2953,3,626,313,0,2953,449,1,0,0,0,2954,2955,3,622,311,0,2955,
        451,1,0,0,0,2956,2957,3,622,311,0,2957,453,1,0,0,0,2958,2960,5,122,
        0,0,2959,2961,3,636,318,0,2960,2959,1,0,0,0,2960,2961,1,0,0,0,2961,
        2962,1,0,0,0,2962,2964,3,626,313,0,2963,2965,3,636,318,0,2964,2963,
        1,0,0,0,2964,2965,1,0,0,0,2965,2966,1,0,0,0,2966,2968,5,243,0,0,
        2967,2969,3,636,318,0,2968,2967,1,0,0,0,2968,2969,1,0,0,0,2969,2970,
        1,0,0,0,2970,2971,3,570,285,0,2971,455,1,0,0,0,2972,2974,5,160,0,
        0,2973,2975,3,636,318,0,2974,2973,1,0,0,0,2974,2975,1,0,0,0,2975,
        2976,1,0,0,0,2976,2978,3,626,313,0,2977,2979,3,636,318,0,2978,2977,
        1,0,0,0,2978,2979,1,0,0,0,2979,2980,1,0,0,0,2980,2982,5,243,0,0,
        2981,2983,3,636,318,0,2982,2981,1,0,0,0,2982,2983,1,0,0,0,2983,2984,
        1,0,0,0,2984,2985,3,570,285,0,2985,457,1,0,0,0,2986,2987,5,109,0,
        0,2987,2989,3,636,318,0,2988,2986,1,0,0,0,2988,2989,1,0,0,0,2989,
        2990,1,0,0,0,2990,2992,3,572,286,0,2991,2993,3,636,318,0,2992,2991,
        1,0,0,0,2992,2993,1,0,0,0,2993,2994,1,0,0,0,2994,2996,5,243,0,0,
        2995,2997,3,636,318,0,2996,2995,1,0,0,0,2996,2997,1,0,0,0,2997,2998,
        1,0,0,0,2998,2999,3,570,285,0,2999,459,1,0,0,0,3000,3001,5,164,0,
        0,3001,3002,3,636,318,0,3002,3004,3,572,286,0,3003,3005,3,636,318,
        0,3004,3003,1,0,0,0,3004,3005,1,0,0,0,3005,3006,1,0,0,0,3006,3008,
        5,243,0,0,3007,3009,3,636,318,0,3008,3007,1,0,0,0,3008,3009,1,0,
        0,0,3009,3010,1,0,0,0,3010,3011,3,570,285,0,3011,461,1,0,0,0,3012,
        3016,3,464,232,0,3013,3016,3,468,234,0,3014,3016,3,470,235,0,3015,
        3012,1,0,0,0,3015,3013,1,0,0,0,3015,3014,1,0,0,0,3016,463,1,0,0,
        0,3017,3018,5,137,0,0,3018,3019,3,636,318,0,3019,3021,5,81,0,0,3020,
        3022,3,636,318,0,3021,3020,1,0,0,0,3021,3022,1,0,0,0,3022,3023,1,
        0,0,0,3023,3024,3,466,233,0,3024,465,1,0,0,0,3025,3026,5,158,0,0,
        3026,3027,3,636,318,0,3027,3028,5,130,0,0,3028,3035,1,0,0,0,3029,
        3031,5,94,0,0,3030,3032,3,636,318,0,3031,3030,1,0,0,0,3031,3032,
        1,0,0,0,3032,3033,1,0,0,0,3033,3035,3,288,144,0,3034,3025,1,0,0,
        0,3034,3029,1,0,0,0,3035,467,1,0,0,0,3036,3038,5,158,0,0,3037,3039,
        3,636,318,0,3038,3037,1,0,0,0,3038,3039,1,0,0,0,3039,3042,1,0,0,
        0,3040,3043,5,130,0,0,3041,3043,3,288,144,0,3042,3040,1,0,0,0,3042,
        3041,1,0,0,0,3042,3043,1,0,0,0,3043,469,1,0,0,0,3044,3045,5,81,0,
        0,3045,3046,3,636,318,0,3046,3047,3,472,236,0,3047,471,1,0,0,0,3048,
        3049,3,622,311,0,3049,473,1,0,0,0,3050,3063,3,476,238,0,3051,3063,
        3,500,250,0,3052,3063,3,504,252,0,3053,3063,3,508,254,0,3054,3063,
        3,516,258,0,3055,3063,3,518,259,0,3056,3063,3,522,261,0,3057,3063,
        3,526,263,0,3058,3063,3,546,273,0,3059,3063,3,548,274,0,3060,3063,
        3,554,277,0,3061,3063,3,560,280,0,3062,3050,1,0,0,0,3062,3051,1,
        0,0,0,3062,3052,1,0,0,0,3062,3053,1,0,0,0,3062,3054,1,0,0,0,3062,
        3055,1,0,0,0,3062,3056,1,0,0,0,3062,3057,1,0,0,0,3062,3058,1,0,0,
        0,3062,3059,1,0,0,0,3062,3060,1,0,0,0,3062,3061,1,0,0,0,3063,475,
        1,0,0,0,3064,3066,5,138,0,0,3065,3067,3,636,318,0,3066,3065,1,0,
        0,0,3066,3067,1,0,0,0,3067,3068,1,0,0,0,3068,3070,3,478,239,0,3069,
        3071,3,636,318,0,3070,3069,1,0,0,0,3070,3071,1,0,0,0,3071,3073,1,
        0,0,0,3072,3074,3,480,240,0,3073,3072,1,0,0,0,3073,3074,1,0,0,0,
        3074,3076,1,0,0,0,3075,3077,3,636,318,0,3076,3075,1,0,0,0,3076,3077,
        1,0,0,0,3077,3079,1,0,0,0,3078,3080,3,484,242,0,3079,3078,1,0,0,
        0,3079,3080,1,0,0,0,3080,3082,1,0,0,0,3081,3083,3,636,318,0,3082,
        3081,1,0,0,0,3082,3083,1,0,0,0,3083,3085,1,0,0,0,3084,3086,3,488,
        244,0,3085,3084,1,0,0,0,3085,3086,1,0,0,0,3086,3088,1,0,0,0,3087,
        3089,3,636,318,0,3088,3087,1,0,0,0,3088,3089,1,0,0,0,3089,3090,1,
        0,0,0,3090,3092,5,10,0,0,3091,3093,3,636,318,0,3092,3091,1,0,0,0,
        3092,3093,1,0,0,0,3093,3094,1,0,0,0,3094,3096,3,494,247,0,3095,3097,
        3,636,318,0,3096,3095,1,0,0,0,3096,3097,1,0,0,0,3097,3099,1,0,0,
        0,3098,3100,3,490,245,0,3099,3098,1,0,0,0,3099,3100,1,0,0,0,3100,
        477,1,0,0,0,3101,3102,3,570,285,0,3102,479,1,0,0,0,3103,3105,5,88,
        0,0,3104,3106,3,636,318,0,3105,3104,1,0,0,0,3105,3106,1,0,0,0,3106,
        3107,1,0,0,0,3107,3108,3,482,241,0,3108,481,1,0,0,0,3109,3110,7,
        10,0,0,3110,483,1,0,0,0,3111,3112,5,2,0,0,3112,3113,3,486,243,0,
        3113,485,1,0,0,0,3114,3121,5,154,0,0,3115,3121,5,218,0,0,3116,3117,
        5,154,0,0,3117,3118,3,636,318,0,3118,3119,5,218,0,0,3119,3121,1,
        0,0,0,3120,3114,1,0,0,0,3120,3115,1,0,0,0,3120,3116,1,0,0,0,3121,
        487,1,0,0,0,3122,3138,5,166,0,0,3123,3124,5,114,0,0,3124,3125,3,
        636,318,0,3125,3126,5,154,0,0,3126,3138,1,0,0,0,3127,3128,5,114,
        0,0,3128,3129,3,636,318,0,3129,3130,5,218,0,0,3130,3138,1,0,0,0,
        3131,3132,5,114,0,0,3132,3133,3,636,318,0,3133,3134,5,154,0,0,3134,
        3135,3,636,318,0,3135,3136,5,218,0,0,3136,3138,1,0,0,0,3137,3122,
        1,0,0,0,3137,3123,1,0,0,0,3137,3127,1,0,0,0,3137,3131,1,0,0,0,3138,
        489,1,0,0,0,3139,3140,5,107,0,0,3140,3141,3,636,318,0,3141,3142,
        5,243,0,0,3142,3143,3,636,318,0,3143,3144,3,492,246,0,3144,491,1,
        0,0,0,3145,3146,3,570,285,0,3146,493,1,0,0,0,3147,3150,3,496,248,
        0,3148,3150,3,498,249,0,3149,3147,1,0,0,0,3149,3148,1,0,0,0,3150,
        495,1,0,0,0,3151,3152,5,247,0,0,3152,3153,3,570,285,0,3153,497,1,
        0,0,0,3154,3155,3,570,285,0,3155,499,1,0,0,0,3156,3165,5,157,0,0,
        3157,3159,5,39,0,0,3158,3160,3,636,318,0,3159,3158,1,0,0,0,3159,
        3160,1,0,0,0,3160,3162,1,0,0,0,3161,3163,3,502,251,0,3162,3161,1,
        0,0,0,3162,3163,1,0,0,0,3163,3165,1,0,0,0,3164,3156,1,0,0,0,3164,
        3157,1,0,0,0,3165,501,1,0,0,0,3166,3177,3,494,247,0,3167,3169,3,
        636,318,0,3168,3167,1,0,0,0,3168,3169,1,0,0,0,3169,3170,1,0,0,0,
        3170,3172,5,240,0,0,3171,3173,3,636,318,0,3172,3171,1,0,0,0,3172,
        3173,1,0,0,0,3173,3174,1,0,0,0,3174,3176,3,494,247,0,3175,3168,1,
        0,0,0,3176,3179,1,0,0,0,3177,3175,1,0,0,0,3177,3178,1,0,0,0,3178,
        503,1,0,0,0,3179,3177,1,0,0,0,3180,3181,5,162,0,0,3181,3182,3,636,
        318,0,3182,3184,3,494,247,0,3183,3185,3,636,318,0,3184,3183,1,0,
        0,0,3184,3185,1,0,0,0,3185,3186,1,0,0,0,3186,3188,5,240,0,0,3187,
        3189,3,636,318,0,3188,3187,1,0,0,0,3188,3189,1,0,0,0,3189,3190,1,
        0,0,0,3190,3191,3,506,253,0,3191,505,1,0,0,0,3192,3193,3,570,285,
        0,3193,507,1,0,0,0,3194,3195,5,114,0,0,3195,3196,3,636,318,0,3196,
        3198,3,494,247,0,3197,3199,3,636,318,0,3198,3197,1,0,0,0,3198,3199,
        1,0,0,0,3199,3200,1,0,0,0,3200,3202,5,240,0,0,3201,3203,3,636,318,
        0,3202,3201,1,0,0,0,3202,3203,1,0,0,0,3203,3204,1,0,0,0,3204,3205,
        3,510,255,0,3205,509,1,0,0,0,3206,3216,3,512,256,0,3207,3209,3,512,
        256,0,3208,3207,1,0,0,0,3208,3209,1,0,0,0,3209,3210,1,0,0,0,3210,
        3211,3,636,318,0,3211,3212,5,179,0,0,3212,3213,3,636,318,0,3213,
        3214,3,514,257,0,3214,3216,1,0,0,0,3215,3206,1,0,0,0,3215,3208,1,
        0,0,0,3216,511,1,0,0,0,3217,3218,3,570,285,0,3218,513,1,0,0,0,3219,
        3220,3,570,285,0,3220,515,1,0,0,0,3221,3222,5,184,0,0,3222,3223,
        3,636,318,0,3223,3232,3,494,247,0,3224,3226,3,636,318,0,3225,3224,
        1,0,0,0,3225,3226,1,0,0,0,3226,3227,1,0,0,0,3227,3229,5,240,0,0,
        3228,3230,3,636,318,0,3229,3228,1,0,0,0,3229,3230,1,0,0,0,3230,3231,
        1,0,0,0,3231,3233,3,510,255,0,3232,3225,1,0,0,0,3232,3233,1,0,0,
        0,3233,517,1,0,0,0,3234,3235,5,112,0,0,3235,3236,3,636,318,0,3236,
        3237,5,99,0,0,3237,3238,3,636,318,0,3238,3240,3,496,248,0,3239,3241,
        3,636,318,0,3240,3239,1,0,0,0,3240,3241,1,0,0,0,3241,3242,1,0,0,
        0,3242,3244,5,240,0,0,3243,3245,3,636,318,0,3244,3243,1,0,0,0,3244,
        3245,1,0,0,0,3245,3246,1,0,0,0,3246,3247,3,520,260,0,3247,519,1,
        0,0,0,3248,3249,3,624,312,0,3249,521,1,0,0,0,3250,3251,5,215,0,0,
        3251,3252,3,636,318,0,3252,3254,3,496,248,0,3253,3255,3,636,318,
        0,3254,3253,1,0,0,0,3254,3255,1,0,0,0,3255,3256,1,0,0,0,3256,3258,
        5,240,0,0,3257,3259,3,636,318,0,3258,3257,1,0,0,0,3258,3259,1,0,
        0,0,3259,3260,1,0,0,0,3260,3261,3,524,262,0,3261,523,1,0,0,0,3262,
        3263,3,570,285,0,3263,525,1,0,0,0,3264,3265,5,145,0,0,3265,3266,
        3,636,318,0,3266,3268,3,496,248,0,3267,3269,3,636,318,0,3268,3267,
        1,0,0,0,3268,3269,1,0,0,0,3269,3270,1,0,0,0,3270,3272,5,240,0,0,
        3271,3273,3,636,318,0,3272,3271,1,0,0,0,3272,3273,1,0,0,0,3273,3275,
        1,0,0,0,3274,3276,3,528,264,0,3275,3274,1,0,0,0,3275,3276,1,0,0,
        0,3276,527,1,0,0,0,3277,3279,3,530,265,0,3278,3277,1,0,0,0,3279,
        3280,1,0,0,0,3280,3278,1,0,0,0,3280,3281,1,0,0,0,3281,529,1,0,0,
        0,3282,3284,3,532,266,0,3283,3285,3,534,267,0,3284,3283,1,0,0,0,
        3284,3285,1,0,0,0,3285,3288,1,0,0,0,3286,3288,3,534,267,0,3287,3282,
        1,0,0,0,3287,3286,1,0,0,0,3288,531,1,0,0,0,3289,3293,3,538,269,0,
        3290,3293,3,542,271,0,3291,3293,3,536,268,0,3292,3289,1,0,0,0,3292,
        3290,1,0,0,0,3292,3291,1,0,0,0,3293,533,1,0,0,0,3294,3295,7,11,0,
        0,3295,535,1,0,0,0,3296,3297,3,570,285,0,3297,537,1,0,0,0,3298,3299,
        5,169,0,0,3299,3300,3,636,318,0,3300,3302,5,249,0,0,3301,3303,3,
        636,318,0,3302,3301,1,0,0,0,3302,3303,1,0,0,0,3303,3304,1,0,0,0,
        3304,3306,3,540,270,0,3305,3307,3,636,318,0,3306,3305,1,0,0,0,3306,
        3307,1,0,0,0,3307,3308,1,0,0,0,3308,3309,5,260,0,0,3309,539,1,0,
        0,0,3310,3311,3,570,285,0,3311,541,1,0,0,0,3312,3313,5,176,0,0,3313,
        3314,3,636,318,0,3314,3316,5,249,0,0,3315,3317,3,636,318,0,3316,
        3315,1,0,0,0,3316,3317,1,0,0,0,3317,3318,1,0,0,0,3318,3320,3,544,
        272,0,3319,3321,3,636,318,0,3320,3319,1,0,0,0,3320,3321,1,0,0,0,
        3321,3322,1,0,0,0,3322,3323,5,260,0,0,3323,543,1,0,0,0,3324,3325,
        3,570,285,0,3325,545,1,0,0,0,3326,3327,5,218,0,0,3327,3328,3,636,
        318,0,3328,3330,3,496,248,0,3329,3331,3,636,318,0,3330,3329,1,0,
        0,0,3330,3331,1,0,0,0,3331,3332,1,0,0,0,3332,3334,5,240,0,0,3333,
        3335,3,636,318,0,3334,3333,1,0,0,0,3334,3335,1,0,0,0,3335,3337,1,
        0,0,0,3336,3338,3,528,264,0,3337,3336,1,0,0,0,3337,3338,1,0,0,0,
        3338,547,1,0,0,0,3339,3340,5,99,0,0,3340,3341,3,636,318,0,3341,3343,
        3,496,248,0,3342,3344,3,636,318,0,3343,3342,1,0,0,0,3343,3344,1,
        0,0,0,3344,3345,1,0,0,0,3345,3347,5,240,0,0,3346,3348,3,636,318,
        0,3347,3346,1,0,0,0,3347,3348,1,0,0,0,3348,3349,1,0,0,0,3349,3350,
        3,550,275,0,3350,549,1,0,0,0,3351,3362,3,552,276,0,3352,3354,3,636,
        318,0,3353,3352,1,0,0,0,3353,3354,1,0,0,0,3354,3355,1,0,0,0,3355,
        3357,5,240,0,0,3356,3358,3,636,318,0,3357,3356,1,0,0,0,3357,3358,
        1,0,0,0,3358,3359,1,0,0,0,3359,3361,3,552,276,0,3360,3353,1,0,0,
        0,3361,3364,1,0,0,0,3362,3360,1,0,0,0,3362,3363,1,0,0,0,3363,551,
        1,0,0,0,3364,3362,1,0,0,0,3365,3366,3,626,313,0,3366,553,1,0,0,0,
        3367,3368,5,151,0,0,3368,3369,3,636,318,0,3369,3371,3,494,247,0,
        3370,3372,3,636,318,0,3371,3370,1,0,0,0,3371,3372,1,0,0,0,3372,3373,
        1,0,0,0,3373,3375,5,240,0,0,3374,3376,3,636,318,0,3375,3374,1,0,
        0,0,3375,3376,1,0,0,0,3376,3378,1,0,0,0,3377,3379,3,556,278,0,3378,
        3377,1,0,0,0,3378,3379,1,0,0,0,3379,3381,1,0,0,0,3380,3382,3,636,
        318,0,3381,3380,1,0,0,0,3381,3382,1,0,0,0,3382,3383,1,0,0,0,3383,
        3384,5,240,0,0,3384,3385,3,558,279,0,3385,555,1,0,0,0,3386,3387,
        3,570,285,0,3387,557,1,0,0,0,3388,3389,3,570,285,0,3389,559,1,0,
        0,0,3390,3391,5,90,0,0,3391,3392,3,636,318,0,3392,3394,3,494,247,
        0,3393,3395,3,636,318,0,3394,3393,1,0,0,0,3394,3395,1,0,0,0,3395,
        3396,1,0,0,0,3396,3398,5,240,0,0,3397,3399,3,636,318,0,3398,3397,
        1,0,0,0,3398,3399,1,0,0,0,3399,3401,1,0,0,0,3400,3402,3,556,278,
        0,3401,3400,1,0,0,0,3401,3402,1,0,0,0,3402,3404,1,0,0,0,3403,3405,
        3,636,318,0,3404,3403,1,0,0,0,3404,3405,1,0,0,0,3405,3406,1,0,0,
        0,3406,3408,5,240,0,0,3407,3409,3,636,318,0,3408,3407,1,0,0,0,3408,
        3409,1,0,0,0,3409,3410,1,0,0,0,3410,3411,3,562,281,0,3411,561,1,
        0,0,0,3412,3413,3,624,312,0,3413,563,1,0,0,0,3414,3415,5,7,0,0,3415,
        3416,5,278,0,0,3416,3417,3,650,325,0,3417,3418,5,256,0,0,3418,3420,
        3,566,283,0,3419,3421,5,278,0,0,3420,3419,1,0,0,0,3420,3421,1,0,
        0,0,3421,3422,1,0,0,0,3422,3424,5,243,0,0,3423,3425,5,278,0,0,3424,
        3423,1,0,0,0,3424,3425,1,0,0,0,3425,3426,1,0,0,0,3426,3427,5,265,
        0,0,3427,3458,1,0,0,0,3428,3429,5,7,0,0,3429,3430,5,278,0,0,3430,
        3431,3,650,325,0,3431,3432,5,256,0,0,3432,3434,3,568,284,0,3433,
        3435,5,278,0,0,3434,3433,1,0,0,0,3434,3435,1,0,0,0,3435,3436,1,0,
        0,0,3436,3438,5,243,0,0,3437,3439,5,278,0,0,3438,3437,1,0,0,0,3438,
        3439,1,0,0,0,3439,3441,1,0,0,0,3440,3442,5,251,0,0,3441,3440,1,0,
        0,0,3441,3442,1,0,0,0,3442,3443,1,0,0,0,3443,3444,5,268,0,0,3444,
        3458,1,0,0,0,3445,3446,5,7,0,0,3446,3447,5,278,0,0,3447,3448,3,650,
        325,0,3448,3449,5,256,0,0,3449,3450,5,202,0,0,3450,3451,5,256,0,
        0,3451,3452,5,195,0,0,3452,3453,5,278,0,0,3453,3454,5,243,0,0,3454,
        3455,5,278,0,0,3455,3456,5,265,0,0,3456,3458,1,0,0,0,3457,3414,1,
        0,0,0,3457,3428,1,0,0,0,3457,3445,1,0,0,0,3458,565,1,0,0,0,3459,
        3460,7,12,0,0,3460,567,1,0,0,0,3461,3462,7,13,0,0,3462,569,1,0,0,
        0,3463,3464,6,285,-1,0,3464,3472,3,574,287,0,3465,3472,3,576,288,
        0,3466,3472,3,578,289,0,3467,3472,3,580,290,0,3468,3472,3,584,292,
        0,3469,3472,3,582,291,0,3470,3472,3,572,286,0,3471,3463,1,0,0,0,
        3471,3465,1,0,0,0,3471,3466,1,0,0,0,3471,3467,1,0,0,0,3471,3468,
        1,0,0,0,3471,3469,1,0,0,0,3471,3470,1,0,0,0,3472,3538,1,0,0,0,3473,
        3475,10,10,0,0,3474,3476,3,636,318,0,3475,3474,1,0,0,0,3475,3476,
        1,0,0,0,3476,3477,1,0,0,0,3477,3479,5,259,0,0,3478,3480,3,636,318,
        0,3479,3478,1,0,0,0,3479,3480,1,0,0,0,3480,3481,1,0,0,0,3481,3537,
        3,570,285,11,3482,3484,10,8,0,0,3483,3485,3,636,318,0,3484,3483,
        1,0,0,0,3484,3485,1,0,0,0,3485,3486,1,0,0,0,3486,3488,7,14,0,0,3487,
        3489,3,636,318,0,3488,3487,1,0,0,0,3488,3489,1,0,0,0,3489,3490,1,
        0,0,0,3490,3537,3,570,285,9,3491,3493,10,7,0,0,3492,3494,3,636,318,
        0,3493,3492,1,0,0,0,3493,3494,1,0,0,0,3494,3495,1,0,0,0,3495,3497,
        5,128,0,0,3496,3498,3,636,318,0,3497,3496,1,0,0,0,3497,3498,1,0,
        0,0,3498,3499,1,0,0,0,3499,3537,3,570,285,8,3500,3502,10,6,0,0,3501,
        3503,3,636,318,0,3502,3501,1,0,0,0,3502,3503,1,0,0,0,3503,3504,1,
        0,0,0,3504,3506,7,15,0,0,3505,3507,3,636,318,0,3506,3505,1,0,0,0,
        3506,3507,1,0,0,0,3507,3508,1,0,0,0,3508,3537,3,570,285,7,3509,3511,
        10,5,0,0,3510,3512,3,636,318,0,3511,3510,1,0,0,0,3511,3512,1,0,0,
        0,3512,3513,1,0,0,0,3513,3515,5,237,0,0,3514,3516,3,636,318,0,3515,
        3514,1,0,0,0,3515,3516,1,0,0,0,3516,3517,1,0,0,0,3517,3537,3,570,
        285,6,3518,3520,10,4,0,0,3519,3521,3,636,318,0,3520,3519,1,0,0,0,
        3520,3521,1,0,0,0,3521,3522,1,0,0,0,3522,3524,7,16,0,0,3523,3525,
        3,636,318,0,3524,3523,1,0,0,0,3524,3525,1,0,0,0,3525,3526,1,0,0,
        0,3526,3537,3,570,285,5,3527,3529,10,2,0,0,3528,3530,3,636,318,0,
        3529,3528,1,0,0,0,3529,3530,1,0,0,0,3530,3531,1,0,0,0,3531,3533,
        7,17,0,0,3532,3534,3,636,318,0,3533,3532,1,0,0,0,3533,3534,1,0,0,
        0,3534,3535,1,0,0,0,3535,3537,3,570,285,3,3536,3473,1,0,0,0,3536,
        3482,1,0,0,0,3536,3491,1,0,0,0,3536,3500,1,0,0,0,3536,3509,1,0,0,
        0,3536,3518,1,0,0,0,3536,3527,1,0,0,0,3537,3540,1,0,0,0,3538,3536,
        1,0,0,0,3538,3539,1,0,0,0,3539,571,1,0,0,0,3540,3538,1,0,0,0,3541,
        3542,6,286,-1,0,3542,3546,3,586,293,0,3543,3546,3,588,294,0,3544,
        3546,3,610,305,0,3545,3541,1,0,0,0,3545,3543,1,0,0,0,3545,3544,1,
        0,0,0,3546,3612,1,0,0,0,3547,3548,10,7,0,0,3548,3550,5,256,0,0,3549,
        3551,3,636,318,0,3550,3549,1,0,0,0,3550,3551,1,0,0,0,3551,3552,1,
        0,0,0,3552,3611,3,26,13,0,3553,3555,10,6,0,0,3554,3556,3,636,318,
        0,3555,3554,1,0,0,0,3555,3556,1,0,0,0,3556,3557,1,0,0,0,3557,3559,
        5,271,0,0,3558,3560,3,636,318,0,3559,3558,1,0,0,0,3559,3560,1,0,
        0,0,3560,3561,1,0,0,0,3561,3563,5,256,0,0,3562,3564,3,636,318,0,
        3563,3562,1,0,0,0,3563,3564,1,0,0,0,3564,3565,1,0,0,0,3565,3611,
        3,26,13,0,3566,3568,10,5,0,0,3567,3569,3,636,318,0,3568,3567,1,0,
        0,0,3568,3569,1,0,0,0,3569,3570,1,0,0,0,3570,3572,5,249,0,0,3571,
        3573,3,636,318,0,3572,3571,1,0,0,0,3572,3573,1,0,0,0,3573,3574,1,
        0,0,0,3574,3576,3,594,297,0,3575,3577,3,636,318,0,3576,3575,1,0,
        0,0,3576,3577,1,0,0,0,3577,3578,1,0,0,0,3578,3579,5,260,0,0,3579,
        3611,1,0,0,0,3580,3581,10,4,0,0,3581,3582,5,244,0,0,3582,3611,3,
        26,13,0,3583,3585,10,3,0,0,3584,3586,3,636,318,0,3585,3584,1,0,0,
        0,3585,3586,1,0,0,0,3586,3587,1,0,0,0,3587,3589,5,271,0,0,3588,3590,
        3,636,318,0,3589,3588,1,0,0,0,3589,3590,1,0,0,0,3590,3591,1,0,0,
        0,3591,3592,5,244,0,0,3592,3611,3,26,13,0,3593,3595,10,2,0,0,3594,
        3596,3,636,318,0,3595,3594,1,0,0,0,3595,3596,1,0,0,0,3596,3597,1,
        0,0,0,3597,3599,5,271,0,0,3598,3600,3,636,318,0,3599,3598,1,0,0,
        0,3599,3600,1,0,0,0,3600,3601,1,0,0,0,3601,3603,5,244,0,0,3602,3604,
        3,636,318,0,3603,3602,1,0,0,0,3603,3604,1,0,0,0,3604,3605,1,0,0,
        0,3605,3607,5,271,0,0,3606,3608,3,636,318,0,3607,3606,1,0,0,0,3607,
        3608,1,0,0,0,3608,3609,1,0,0,0,3609,3611,3,26,13,0,3610,3547,1,0,
        0,0,3610,3553,1,0,0,0,3610,3566,1,0,0,0,3610,3580,1,0,0,0,3610,3583,
        1,0,0,0,3610,3593,1,0,0,0,3611,3614,1,0,0,0,3612,3610,1,0,0,0,3612,
        3613,1,0,0,0,3613,573,1,0,0,0,3614,3612,1,0,0,0,3615,3624,5,270,
        0,0,3616,3624,5,269,0,0,3617,3624,5,268,0,0,3618,3624,5,265,0,0,
        3619,3621,3,670,335,0,3620,3622,3,686,343,0,3621,3620,1,0,0,0,3621,
        3622,1,0,0,0,3622,3624,1,0,0,0,3623,3615,1,0,0,0,3623,3616,1,0,0,
        0,3623,3617,1,0,0,0,3623,3618,1,0,0,0,3623,3619,1,0,0,0,3624,575,
        1,0,0,0,3625,3627,5,249,0,0,3626,3628,3,636,318,0,3627,3626,1,0,
        0,0,3627,3628,1,0,0,0,3628,3629,1,0,0,0,3629,3631,3,570,285,0,3630,
        3632,3,636,318,0,3631,3630,1,0,0,0,3631,3632,1,0,0,0,3632,3633,1,
        0,0,0,3633,3634,5,260,0,0,3634,577,1,0,0,0,3635,3637,5,182,0,0,3636,
        3638,3,636,318,0,3637,3636,1,0,0,0,3637,3638,1,0,0,0,3638,3639,1,
        0,0,0,3639,3641,3,570,285,0,3640,3642,3,636,318,0,3641,3640,1,0,
        0,0,3641,3642,1,0,0,0,3642,3643,1,0,0,0,3643,3645,5,102,0,0,3644,
        3646,3,636,318,0,3645,3644,1,0,0,0,3645,3646,1,0,0,0,3646,3647,1,
        0,0,0,3647,3648,3,628,314,0,3648,579,1,0,0,0,3649,3651,5,131,0,0,
        3650,3652,3,636,318,0,3651,3650,1,0,0,0,3651,3652,1,0,0,0,3652,3653,
        1,0,0,0,3653,3654,3,570,285,0,3654,581,1,0,0,0,3655,3657,5,132,0,
        0,3656,3658,3,636,318,0,3657,3656,1,0,0,0,3657,3658,1,0,0,0,3658,
        3659,1,0,0,0,3659,3660,3,570,285,0,3660,583,1,0,0,0,3661,3663,5,
        251,0,0,3662,3664,3,636,318,0,3663,3662,1,0,0,0,3663,3664,1,0,0,
        0,3664,3665,1,0,0,0,3665,3666,3,570,285,0,3666,585,1,0,0,0,3667,
        3671,3,28,14,0,3668,3671,3,660,330,0,3669,3671,3,662,331,0,3670,
        3667,1,0,0,0,3670,3668,1,0,0,0,3670,3669,1,0,0,0,3671,587,1,0,0,
        0,3672,3673,5,123,0,0,3673,589,1,0,0,0,3674,3675,3,572,286,0,3675,
        3677,5,256,0,0,3676,3678,3,636,318,0,3677,3676,1,0,0,0,3677,3678,
        1,0,0,0,3678,3679,1,0,0,0,3679,3680,3,26,13,0,3680,3696,1,0,0,0,
        3681,3683,3,572,286,0,3682,3684,3,636,318,0,3683,3682,1,0,0,0,3683,
        3684,1,0,0,0,3684,3685,1,0,0,0,3685,3687,5,271,0,0,3686,3688,3,636,
        318,0,3687,3686,1,0,0,0,3687,3688,1,0,0,0,3688,3689,1,0,0,0,3689,
        3691,5,256,0,0,3690,3692,3,636,318,0,3691,3690,1,0,0,0,3691,3692,
        1,0,0,0,3692,3693,1,0,0,0,3693,3694,3,26,13,0,3694,3696,1,0,0,0,
        3695,3674,1,0,0,0,3695,3681,1,0,0,0,3696,591,1,0,0,0,3697,3699,3,
        572,286,0,3698,3700,3,636,318,0,3699,3698,1,0,0,0,3699,3700,1,0,
        0,0,3700,3701,1,0,0,0,3701,3703,5,249,0,0,3702,3704,3,636,318,0,
        3703,3702,1,0,0,0,3703,3704,1,0,0,0,3704,3705,1,0,0,0,3705,3707,
        3,594,297,0,3706,3708,3,636,318,0,3707,3706,1,0,0,0,3707,3708,1,
        0,0,0,3708,3709,1,0,0,0,3709,3710,5,260,0,0,3710,593,1,0,0,0,3711,
        3713,3,596,298,0,3712,3711,1,0,0,0,3712,3713,1,0,0,0,3713,595,1,
        0,0,0,3714,3716,3,598,299,0,3715,3717,3,636,318,0,3716,3715,1,0,
        0,0,3716,3717,1,0,0,0,3717,3718,1,0,0,0,3718,3720,5,240,0,0,3719,
        3721,3,636,318,0,3720,3719,1,0,0,0,3720,3721,1,0,0,0,3721,3723,1,
        0,0,0,3722,3714,1,0,0,0,3723,3726,1,0,0,0,3724,3722,1,0,0,0,3724,
        3725,1,0,0,0,3725,3727,1,0,0,0,3726,3724,1,0,0,0,3727,3743,3,600,
        300,0,3728,3730,3,598,299,0,3729,3731,3,636,318,0,3730,3729,1,0,
        0,0,3730,3731,1,0,0,0,3731,3732,1,0,0,0,3732,3734,5,240,0,0,3733,
        3735,3,636,318,0,3734,3733,1,0,0,0,3734,3735,1,0,0,0,3735,3737,1,
        0,0,0,3736,3728,1,0,0,0,3737,3740,1,0,0,0,3738,3736,1,0,0,0,3738,
        3739,1,0,0,0,3739,3741,1,0,0,0,3740,3738,1,0,0,0,3741,3743,3,602,
        301,0,3742,3724,1,0,0,0,3742,3738,1,0,0,0,3743,597,1,0,0,0,3744,
        3746,3,606,303,0,3745,3744,1,0,0,0,3745,3746,1,0,0,0,3746,599,1,
        0,0,0,3747,3748,3,606,303,0,3748,601,1,0,0,0,3749,3760,3,604,302,
        0,3750,3752,3,636,318,0,3751,3750,1,0,0,0,3751,3752,1,0,0,0,3752,
        3753,1,0,0,0,3753,3755,5,240,0,0,3754,3756,3,636,318,0,3755,3754,
        1,0,0,0,3755,3756,1,0,0,0,3756,3757,1,0,0,0,3757,3759,3,604,302,
        0,3758,3751,1,0,0,0,3759,3762,1,0,0,0,3760,3758,1,0,0,0,3760,3761,
        1,0,0,0,3761,603,1,0,0,0,3762,3760,1,0,0,0,3763,3765,3,26,13,0,3764,
        3766,3,636,318,0,3765,3764,1,0,0,0,3765,3766,1,0,0,0,3766,3767,1,
        0,0,0,3767,3769,5,239,0,0,3768,3770,3,636,318,0,3769,3768,1,0,0,
        0,3769,3770,1,0,0,0,3770,3771,1,0,0,0,3771,3772,3,606,303,0,3772,
        605,1,0,0,0,3773,3774,5,16,0,0,3774,3776,3,636,318,0,3775,3773,1,
        0,0,0,3775,3776,1,0,0,0,3776,3777,1,0,0,0,3777,3780,3,570,285,0,
        3778,3780,3,632,316,0,3779,3775,1,0,0,0,3779,3778,1,0,0,0,3780,607,
        1,0,0,0,3781,3782,3,572,286,0,3782,3783,5,244,0,0,3783,3784,3,26,
        13,0,3784,3815,1,0,0,0,3785,3787,3,572,286,0,3786,3788,3,636,318,
        0,3787,3786,1,0,0,0,3787,3788,1,0,0,0,3788,3789,1,0,0,0,3789,3791,
        5,271,0,0,3790,3792,3,636,318,0,3791,3790,1,0,0,0,3791,3792,1,0,
        0,0,3792,3793,1,0,0,0,3793,3794,5,244,0,0,3794,3795,3,26,13,0,3795,
        3815,1,0,0,0,3796,3798,3,572,286,0,3797,3799,3,636,318,0,3798,3797,
        1,0,0,0,3798,3799,1,0,0,0,3799,3800,1,0,0,0,3800,3802,5,271,0,0,
        3801,3803,3,636,318,0,3802,3801,1,0,0,0,3802,3803,1,0,0,0,3803,3804,
        1,0,0,0,3804,3806,5,244,0,0,3805,3807,3,636,318,0,3806,3805,1,0,
        0,0,3806,3807,1,0,0,0,3807,3808,1,0,0,0,3808,3810,5,271,0,0,3809,
        3811,3,636,318,0,3810,3809,1,0,0,0,3810,3811,1,0,0,0,3811,3812,1,
        0,0,0,3812,3813,3,26,13,0,3813,3815,1,0,0,0,3814,3781,1,0,0,0,3814,
        3785,1,0,0,0,3814,3796,1,0,0,0,3815,609,1,0,0,0,3816,3819,3,612,
        306,0,3817,3819,3,614,307,0,3818,3816,1,0,0,0,3818,3817,1,0,0,0,
        3819,611,1,0,0,0,3820,3821,5,256,0,0,3821,3822,3,26,13,0,3822,613,
        1,0,0,0,3823,3824,5,244,0,0,3824,3825,3,26,13,0,3825,615,1,0,0,0,
        3826,3827,3,570,285,0,3827,617,1,0,0,0,3828,3829,3,570,285,0,3829,
        619,1,0,0,0,3830,3831,3,570,285,0,3831,621,1,0,0,0,3832,3833,3,570,
        285,0,3833,623,1,0,0,0,3834,3835,3,572,286,0,3835,625,1,0,0,0,3836,
        3837,3,572,286,0,3837,627,1,0,0,0,3838,3841,3,682,341,0,3839,3841,
        3,630,315,0,3840,3838,1,0,0,0,3840,3839,1,0,0,0,3841,629,1,0,0,0,
        3842,3845,3,586,293,0,3843,3845,3,590,295,0,3844,3842,1,0,0,0,3844,
        3843,1,0,0,0,3845,631,1,0,0,0,3846,3847,5,3,0,0,3847,3848,3,636,
        318,0,3848,3849,3,634,317,0,3849,633,1,0,0,0,3850,3853,3,586,293,
        0,3851,3853,3,590,295,0,3852,3850,1,0,0,0,3852,3851,1,0,0,0,3853,
        635,1,0,0,0,3854,3856,7,18,0,0,3855,3854,1,0,0,0,3856,3857,1,0,0,
        0,3857,3855,1,0,0,0,3857,3858,1,0,0,0,3858,637,1,0,0,0,3859,3861,
        5,278,0,0,3860,3859,1,0,0,0,3860,3861,1,0,0,0,3861,3865,1,0,0,0,
        3862,3866,5,272,0,0,3863,3866,3,646,323,0,3864,3866,3,296,148,0,
        3865,3862,1,0,0,0,3865,3863,1,0,0,0,3865,3864,1,0,0,0,3866,3868,
        1,0,0,0,3867,3869,5,278,0,0,3868,3867,1,0,0,0,3868,3869,1,0,0,0,
        3869,639,1,0,0,0,3870,3872,5,278,0,0,3871,3870,1,0,0,0,3871,3872,
        1,0,0,0,3872,3876,1,0,0,0,3873,3877,5,272,0,0,3874,3877,3,646,323,
        0,3875,3877,3,296,148,0,3876,3873,1,0,0,0,3876,3874,1,0,0,0,3876,
        3875,1,0,0,0,3877,641,1,0,0,0,3878,3887,3,638,319,0,3879,3881,5,
        278,0,0,3880,3879,1,0,0,0,3880,3881,1,0,0,0,3881,3882,1,0,0,0,3882,
        3884,5,276,0,0,3883,3885,5,278,0,0,3884,3883,1,0,0,0,3884,3885,1,
        0,0,0,3885,3887,1,0,0,0,3886,3878,1,0,0,0,3886,3880,1,0,0,0,3887,
        3888,1,0,0,0,3888,3886,1,0,0,0,3888,3889,1,0,0,0,3889,643,1,0,0,
        0,3890,3896,3,640,320,0,3891,3893,5,278,0,0,3892,3891,1,0,0,0,3892,
        3893,1,0,0,0,3893,3894,1,0,0,0,3894,3896,5,276,0,0,3895,3890,1,0,
        0,0,3895,3892,1,0,0,0,3896,3897,1,0,0,0,3897,3895,1,0,0,0,3897,3898,
        1,0,0,0,3898,645,1,0,0,0,3899,3900,5,274,0,0,3900,647,1,0,0,0,3901,
        3912,3,652,326,0,3902,3912,3,656,328,0,3903,3912,3,658,329,0,3904,
        3912,3,662,331,0,3905,3912,3,660,330,0,3906,3912,3,664,332,0,3907,
        3912,3,670,335,0,3908,3912,3,654,327,0,3909,3912,3,678,339,0,3910,
        3912,3,680,340,0,3911,3901,1,0,0,0,3911,3902,1,0,0,0,3911,3903,1,
        0,0,0,3911,3904,1,0,0,0,3911,3905,1,0,0,0,3911,3906,1,0,0,0,3911,
        3907,1,0,0,0,3911,3908,1,0,0,0,3911,3909,1,0,0,0,3911,3910,1,0,0,
        0,3912,649,1,0,0,0,3913,3916,5,280,0,0,3914,3916,3,688,344,0,3915,
        3913,1,0,0,0,3915,3914,1,0,0,0,3916,651,1,0,0,0,3917,3918,7,19,0,
        0,3918,653,1,0,0,0,3919,3920,5,156,0,0,3920,655,1,0,0,0,3921,3922,
        7,20,0,0,3922,657,1,0,0,0,3923,3924,7,21,0,0,3924,659,1,0,0,0,3925,
        3926,7,22,0,0,3926,661,1,0,0,0,3927,3928,7,23,0,0,3928,663,1,0,0,
        0,3929,3930,7,24,0,0,3930,665,1,0,0,0,3931,3932,7,25,0,0,3932,667,
        1,0,0,0,3933,3934,7,26,0,0,3934,669,1,0,0,0,3935,3939,3,672,336,
        0,3936,3939,3,674,337,0,3937,3939,3,676,338,0,3938,3935,1,0,0,0,
        3938,3936,1,0,0,0,3938,3937,1,0,0,0,3939,671,1,0,0,0,3940,3941,7,
        27,0,0,3941,673,1,0,0,0,3942,3943,5,133,0,0,3943,675,1,0,0,0,3944,
        3945,7,28,0,0,3945,677,1,0,0,0,3946,3947,7,29,0,0,3947,679,1,0,0,
        0,3948,3949,7,30,0,0,3949,681,1,0,0,0,3950,3955,3,664,332,0,3951,
        3955,3,666,333,0,3952,3955,5,135,0,0,3953,3955,5,136,0,0,3954,3950,
        1,0,0,0,3954,3951,1,0,0,0,3954,3952,1,0,0,0,3954,3953,1,0,0,0,3955,
        683,1,0,0,0,3956,3957,3,650,325,0,3957,3958,3,686,343,0,3958,3963,
        1,0,0,0,3959,3960,3,668,334,0,3960,3961,3,686,343,0,3961,3963,1,
        0,0,0,3962,3956,1,0,0,0,3962,3959,1,0,0,0,3963,685,1,0,0,0,3964,
        3965,7,31,0,0,3965,687,1,0,0,0,3966,3967,7,32,0,0,3967,689,1,0,0,
        0,585,696,703,708,712,722,730,735,741,748,752,755,760,765,772,781,
        789,794,798,802,809,815,818,822,826,830,835,839,843,848,852,856,
        861,865,869,874,878,882,887,891,895,898,901,906,912,918,923,927,
        932,938,943,949,955,964,967,973,977,983,987,996,1000,1003,1008,1018,
        1023,1029,1035,1068,1074,1106,1111,1119,1123,1126,1137,1147,1153,
        1156,1160,1164,1168,1173,1177,1182,1187,1191,1194,1198,1202,1208,
        1212,1220,1228,1231,1234,1240,1244,1249,1253,1256,1279,1289,1299,
        1311,1315,1320,1325,1329,1333,1341,1344,1348,1358,1372,1378,1390,
        1395,1399,1409,1422,1430,1444,1450,1462,1467,1471,1475,1478,1482,
        1494,1498,1508,1518,1523,1529,1544,1551,1555,1558,1561,1569,1574,
        1581,1586,1593,1597,1603,1608,1613,1619,1622,1628,1631,1634,1638,
        1641,1644,1649,1655,1660,1665,1671,1674,1677,1680,1686,1689,1692,
        1695,1698,1702,1705,1708,1713,1719,1724,1729,1737,1740,1743,1746,
        1754,1757,1760,1763,1767,1770,1773,1778,1784,1789,1794,1802,1813,
        1817,1820,1823,1828,1834,1839,1846,1850,1854,1858,1861,1871,1876,
        1881,1887,1890,1894,1900,1903,1906,1912,1916,1920,1922,1926,1932,
        1936,1942,1946,1949,1953,1957,1961,1966,1971,1975,1980,1988,1996,
        1999,2006,2016,2018,2022,2026,2030,2036,2042,2047,2054,2058,2073,
        2078,2087,2095,2101,2107,2114,2121,2125,2132,2134,2138,2142,2146,
        2149,2160,2166,2173,2177,2200,2208,2213,2218,2220,2226,2231,2237,
        2241,2246,2252,2257,2262,2266,2273,2279,2283,2293,2307,2311,2316,
        2322,2328,2332,2341,2345,2349,2361,2364,2367,2372,2376,2379,2383,
        2387,2393,2403,2407,2411,2416,2420,2425,2432,2437,2443,2447,2451,
        2454,2459,2464,2468,2472,2474,2479,2483,2486,2489,2493,2505,2517,
        2520,2525,2528,2532,2536,2541,2544,2548,2551,2557,2567,2571,2576,
        2585,2589,2593,2597,2602,2606,2611,2617,2622,2626,2631,2636,2640,
        2653,2660,2672,2681,2685,2705,2709,2713,2717,2721,2725,2729,2734,
        2737,2743,2747,2752,2770,2774,2777,2780,2794,2797,2803,2807,2812,
        2819,2823,2829,2835,2841,2847,2851,2857,2861,2866,2872,2878,2886,
        2889,2893,2899,2903,2908,2915,2919,2923,2927,2931,2935,2938,2942,
        2946,2960,2964,2968,2974,2978,2982,2988,2992,2996,3004,3008,3015,
        3021,3031,3034,3038,3042,3062,3066,3070,3073,3076,3079,3082,3085,
        3088,3092,3096,3099,3105,3120,3137,3149,3159,3162,3164,3168,3172,
        3177,3184,3188,3198,3202,3208,3215,3225,3229,3232,3240,3244,3254,
        3258,3268,3272,3275,3280,3284,3287,3292,3302,3306,3316,3320,3330,
        3334,3337,3343,3347,3353,3357,3362,3371,3375,3378,3381,3394,3398,
        3401,3404,3408,3420,3424,3434,3438,3441,3457,3471,3475,3479,3484,
        3488,3493,3497,3502,3506,3511,3515,3520,3524,3529,3533,3536,3538,
        3545,3550,3555,3559,3563,3568,3572,3576,3585,3589,3595,3599,3603,
        3607,3610,3612,3621,3623,3627,3631,3637,3641,3645,3651,3657,3663,
        3670,3677,3683,3687,3691,3695,3699,3703,3707,3712,3716,3720,3724,
        3730,3734,3738,3742,3745,3751,3755,3760,3765,3769,3775,3779,3787,
        3791,3798,3802,3806,3810,3814,3818,3840,3844,3852,3857,3860,3865,
        3868,3871,3876,3880,3884,3886,3888,3892,3895,3897,3911,3915,3938,
        3954,3962
    ]

class vbaParser ( Parser ):

    grammarFileName = "vbaParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'ABS'", "'ACCESS'", "'ADDRESSOF'", "'ALIAS'", 
                     "'AND'", "'ANY'", "'ATTRIBUTE'", "'APPEND'", "'ARRAY'", 
                     "'AS'", "'BASE'", "'BEGIN'", "'BINARY'", "'BOOLEAN'", 
                     "'[BOOLEAN]'", "'BYVAL'", "'BYREF'", "'BYTE'", "'[BYTE]'", 
                     "'CALL'", "'CASE'", "'CBOOL'", "'CBYTE'", "'CCUR'", 
                     "'CDATE'", "'CDBL'", "'CDEC'", "'CDECL'", "'CHDIR'", 
                     "'CHDRIVE'", "'CINT'", "'CIRCLE'", "'CLASS'", "'CLASS_INITIALIZE'", 
                     "'CLASS_TERMINATE'", "'CLNG'", "'CLNGLNG'", "'CLNGPTR'", 
                     "'CLOSE'", "'COMPARE'", "'CONST'", "'CSNG'", "'CSTR'", 
                     "'CVAR'", "'CVERR'", "'CURRENCY'", "'[CURRENCY]'", 
                     "'DATE'", "'[DATE]'", "'DEBUG'", "'DECLARE'", "'DECIMAL'", 
                     "'DEFBOOL'", "'DEFBYTE'", "'DEFCUR'", "'DEFDATE'", 
                     "'DEFDBL'", "'DEFDEC'", "'DEFINT'", "'DEFLNG'", "'DEFLNGLNG'", 
                     "'DEFLNGPTR'", "'DEFOBJ'", "'DEFSNG'", "'DEFSTR'", 
                     "'DEFVAR'", "'DIM'", "'DO'", "'DOEVENTS'", "'DOUBLE'", 
                     "'[DOUBLE]'", "'EACH'", "'ELSE'", "'ELSEIF'", "'EMPTY'", 
                     "'ENDIF'", "'END'", "'ENUM'", "'EQV'", "'ERASE'", "'ERROR'", 
                     "'EVENT'", "'EXIT'", "'EXPLICIT'", "'FALSE'", "'FIX'", 
                     "'FRIEND'", "'FOR'", "'FUNCTION'", "'GET'", "'GLOBAL'", 
                     "'GO'", "'GOSUB'", "'GOTO'", "'IF'", "'IMP'", "'IMPLEMENTS'", 
                     "'IN'", "'INPUT'", "'INPUTB'", "'INT'", "'IS'", "'INTEGER'", 
                     "'[INTEGER]'", "'KILL'", "'LBOUND'", "'LEN'", "'LENB'", 
                     "'LET'", "'LIB'", "'LIKE'", "'LINE'", "'LINEINPUT'", 
                     "'LOCK'", "'LONG'", "'[LONG]'", "'LONGLONG'", "'[LONGLONG]'", 
                     "'LONGPTR'", "'[LONGPTR]'", "'LOOP'", "'LSET'", "'ME'", 
                     "'MID'", "'MIDB'", "'MID$'", "'MIDB$'", "'MOD'", "'MODULE'", 
                     "'NEXT'", "'NEW'", "'NOT'", "'NOTHING'", "'NULL'", 
                     "'OBJECT'", "'[OBJECT]'", "'ON'", "'OPEN'", "'OPTION'", 
                     "'OPTIONAL'", "'OR'", "'OUTPUT'", "'PARAMARRAY'", "'PRESERVE'", 
                     "'PRINT'", "'PRIVATE'", "'PROPERTY'", "'PSET'", "'PTRSAFE'", 
                     "'PUBLIC'", "'PUT'", "'RANDOM'", "'RAISEEVENT'", "'READ'", 
                     "'REDIM'", "'REM'", "'RESET'", "'RESUME'", "'RETURN'", 
                     "'RSET'", "'SCALE'", "'SEEK'", "'SELECT'", "'SET'", 
                     "'SGN'", "'SHARED'", "'SINGLE'", "'[SINGLE]'", "'SPC'", 
                     "'STATIC'", "'STEP'", "'STOP'", "'STRING'", "'[STRING]'", 
                     "'SUB'", "'TAB'", "'TEXT'", "'THEN'", "'TO'", "'TRUE'", 
                     "'TYPE'", "'TYPEOF'", "'UBOUND'", "'UNLOCK'", "'UNTIL'", 
                     "'VB_BASE'", "'VB_CONTROL'", "'VB_CREATABLE'", "'VB_CUSTOMIZABLE'", 
                     "'VB_DESCRIPTION'", "'VB_EXPOSED'", "'VB_EXT_KEY '", 
                     "'VB_GLOBALNAMESPACE'", "'VB_HELPID'", "'VB_INVOKE_FUNC'", 
                     "'VB_INVOKE_PROPERTY '", "'VB_INVOKE_PROPERTYPUT'", 
                     "'VB_INVOKE_PROPERTYPUTREF'", "'VB_MEMBERFLAGS'", "'VB_NAME'", 
                     "'VB_PREDECLAREDID'", "'VB_PROCDATA'", "'VB_TEMPLATEDERIVED'", 
                     "'VB_USERMEMID'", "'VB_VARDESCRIPTION'", "'VB_VARHELPID'", 
                     "'VB_VARMEMBERFLAGS'", "'VB_VARPROCDATA '", "'VB_VARUSERMEMID'", 
                     "'VARIANT'", "'[VARIANT]'", "'VERSION'", "'WEND'", 
                     "'WHILE'", "'WIDTH'", "'WITH'", "'WITHEVENTS'", "'WRITE'", 
                     "'XOR'", "'APPACTIVATE'", "'BEEP'", "'COLLECTION'", 
                     "'DATABASE'", "'DELETESETTING'", "'FILECOPY'", "'MKDIR'", 
                     "'NAME'", "'RANDOMIZE'", "'RMDIR'", "'SAVEPICTURE'", 
                     "'SAVESETTING'", "'SENDKEYS'", "'SETATTR'", "'TIME'", 
                     "'LOAD'", "'UNLOAD'", "'&'", "'@'", "':='", "','", 
                     "<INVALID>", "'$'", "'='", "'!'", "'>='", "'>'", "'#'", 
                     "'<='", "'('", "'<'", "'-'", "'-='", "'*'", "'<>'", 
                     "'%'", "'.'", "'+'", "'+='", "'^'", "')'", "';'", "'['", 
                     "']'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'''", "':'", 
                     "'_'" ]

    symbolicNames = [ "<INVALID>", "ABS", "ACCESS", "ADDRESSOF", "ALIAS", 
                      "AND", "ANY", "ATTRIBUTE", "APPEND", "ARRAY", "AS", 
                      "BASE", "BEGIN", "BINARY", "BOOLEAN", "BOOLEAN_B", 
                      "BYVAL", "BYREF", "BYTE", "BYTE_B", "CALL", "CASE", 
                      "CBOOL", "CBYTE", "CCUR", "CDATE", "CDBL", "CDEC", 
                      "CDECL", "CHDIR", "CHDRIVE", "CINT", "CIRCLE", "CLASS", 
                      "CLASS_INITIALIZE", "CLASS_TERMINATE", "CLNG", "CLNGLNG", 
                      "CLNGPTR", "CLOSE", "COMPARE", "CONST", "CSNG", "CSTR", 
                      "CVAR", "CVERR", "CURRENCY", "CURRENCY_B", "DATE", 
                      "DATE_B", "DEBUG", "DECLARE", "DECIMAL", "DEFBOOL", 
                      "DEFBYTE", "DEFCUR", "DEFDATE", "DEFDBL", "DEFDEC", 
                      "DEFINT", "DEFLNG", "DEFLNGLNG", "DEFLNGPTR", "DEFOBJ", 
                      "DEFSNG", "DEFSTR", "DEFVAR", "DIM", "DO", "DOEVENTS", 
                      "DOUBLE", "DOUBLE_B", "EACH", "ELSE", "ELSEIF", "EMPTY_X", 
                      "ENDIF", "END", "ENUM", "EQV", "ERASE", "ERROR", "EVENT", 
                      "EXIT", "EXPLICIT", "FALSE", "FIX", "FRIEND", "FOR", 
                      "FUNCTION", "GET", "GLOBAL", "GO", "GOSUB", "GOTO", 
                      "IF", "IMP", "IMPLEMENTS", "IN", "INPUT", "INPUTB", 
                      "INT", "IS", "INTEGER", "INTEGER_B", "KILL", "LBOUND", 
                      "LEN", "LENB", "LET", "LIB", "LIKE", "LINE", "LINEINPUT", 
                      "LOCK", "LONG", "LONG_B", "LONGLONG", "LONGLONG_B", 
                      "LONGPTR", "LONGPTR_B", "LOOP", "LSET", "ME", "MID", 
                      "MIDB", "MID_D", "MIDB_D", "MOD", "MODULE", "NEXT", 
                      "NEW", "NOT", "NOTHING", "NULL_", "OBJECT", "OBJECT_B", 
                      "ON", "OPEN", "OPTION", "OPTIONAL", "OR", "OUTPUT", 
                      "PARAMARRAY", "PRESERVE", "PRINT", "PRIVATE", "PROPERTY", 
                      "PSET", "PTRSAFE", "PUBLIC", "PUT", "RANDOM", "RAISEEVENT", 
                      "READ", "REDIM", "REM", "RESET", "RESUME", "RETURN", 
                      "RSET", "SCALE", "SEEK", "SELECT", "SET", "SGN", "SHARED", 
                      "SINGLE", "SINGLE_B", "SPC", "STATIC", "STEP", "STOP", 
                      "STRING", "STRING_B", "SUB", "TAB", "TEXT", "THEN", 
                      "TO", "TRUE", "TYPE", "TYPEOF", "UBOUND", "UNLOCK", 
                      "UNTIL", "VB_BASE", "VB_CONTROL", "VB_CREATABLE", 
                      "VB_CUSTOMIZABLE", "VB_DESCRIPTION", "VB_EXPOSED", 
                      "VB_EXT_KEY", "VB_GLOBALNAMESPACE", "VB_HELPID", "VB_INVOKE_FUNC", 
                      "VB_INVOKE_PROPERTY", "VB_INVOKE_PROPERTYPUT", "VB_INVOKE_PROPERTYPUTREF", 
                      "VB_MEMBERFLAGS", "VB_NAME", "VB_PREDECLAREDID", "VB_PROCDATA", 
                      "VB_TEMPLATEDERIVED", "VB_USERMEMID", "VB_VARDESCRIPTION", 
                      "VB_VARHELPID", "VB_VARMEMBERFLAGS", "VB_VARPROCDATA", 
                      "VB_VARUSERMEMID", "VARIANT", "VARIANT_B", "VERSION", 
                      "WEND", "WHILE", "WIDTH", "WITH", "WITHEVENTS", "WRITE", 
                      "XOR", "APPACTIVATE", "BEEP", "COLLECTION", "DATABASE", 
                      "DELETESETTING", "FILECOPY", "MKDIR", "NAME", "RANDOMIZE", 
                      "RMDIR", "SAVEPICTURE", "SAVESETTING", "SENDKEYS", 
                      "SETATTR", "TIME", "LOAD", "UNLOAD", "AMPERSAND", 
                      "ASPERAND", "ASSIGN", "COMMA", "DIV", "Dollar", "EQ", 
                      "EXCLAM", "GEQ", "GT", "HASH", "LEQ", "LPAREN", "LT", 
                      "MINUS", "MINUS_EQ", "MULT", "NEQ", "PERCENT", "PERIOD", 
                      "PLUS", "PLUS_EQ", "POW", "RPAREN", "SEMICOLON", "L_SQUARE_BRACKET", 
                      "R_SQUARE_BRACKET", "GUID", "STRINGLITERAL", "OCTLITERAL", 
                      "HEXLITERAL", "INTEGERLITERAL", "FLOATLITERAL", "DATELITERAL", 
                      "LINE_CONTINUATION", "NEWLINE", "REMCOMMENT", "COMMENT", 
                      "SINGLEQUOTE", "COLON", "UNDERSCORE", "WS", "MACRO_LINE", 
                      "IDENTIFIER", "FOREIGN_NAME" ]

    RULE_startRule = 0
    RULE_module = 1
    RULE_classFileHeader = 2
    RULE_classVersionIdentification = 3
    RULE_classBeginBlock = 4
    RULE_beginBlockConfigElement = 5
    RULE_proceduralModule = 6
    RULE_classModule = 7
    RULE_proceduralModuleHeader = 8
    RULE_classModuleHeader = 9
    RULE_classAttr = 10
    RULE_proceduralModuleBody = 11
    RULE_classModuleBody = 12
    RULE_unrestrictedName = 13
    RULE_name = 14
    RULE_untypedName = 15
    RULE_proceduralModuleDeclarationSection = 16
    RULE_classModuleDeclarationSection = 17
    RULE_proceduralModuleDirectiveElement = 18
    RULE_proceduralModuleDeclarationElement = 19
    RULE_classModuleDirectiveElement = 20
    RULE_classModuleDeclarationElement = 21
    RULE_commonOptionDirective = 22
    RULE_optionCompareDirective = 23
    RULE_optionBaseDirective = 24
    RULE_optionExplicitDirective = 25
    RULE_optionPrivateDirective = 26
    RULE_defDirective = 27
    RULE_letterSpec = 28
    RULE_singleLetter = 29
    RULE_universalLetterRange = 30
    RULE_upperCaseA = 31
    RULE_upperCaseZ = 32
    RULE_letterRange = 33
    RULE_firstLetter = 34
    RULE_lastLetter = 35
    RULE_defType = 36
    RULE_commonModuleDeclarationElement = 37
    RULE_moduleVariableDeclaration = 38
    RULE_variableHelpAttribute = 39
    RULE_globalVariableDeclaration = 40
    RULE_publicVariableDecalation = 41
    RULE_privateVariableDeclaration = 42
    RULE_moduleVariableDeclarationList = 43
    RULE_variableDeclarationList = 44
    RULE_variableDcl = 45
    RULE_typedVariableDcl = 46
    RULE_untypedVariableDcl = 47
    RULE_arrayClause = 48
    RULE_asClause = 49
    RULE_witheventsVariableDcl = 50
    RULE_classTypeName = 51
    RULE_arrayDim = 52
    RULE_boundsList = 53
    RULE_dimSpec = 54
    RULE_lowerBound = 55
    RULE_upperBound = 56
    RULE_asAutoObject = 57
    RULE_asType = 58
    RULE_typeSpec = 59
    RULE_fixedLengthStringSpec = 60
    RULE_stringLength = 61
    RULE_constantName = 62
    RULE_publicConstDeclaration = 63
    RULE_privateConstDeclaration = 64
    RULE_moduleConstDeclaration = 65
    RULE_constDeclaration = 66
    RULE_constItemList = 67
    RULE_constItem = 68
    RULE_typedNameConstItem = 69
    RULE_untypedNameConstItem = 70
    RULE_constAsClause = 71
    RULE_publicTypeDeclaration = 72
    RULE_privateTypeDeclaration = 73
    RULE_udtDeclaration = 74
    RULE_udtMemberList = 75
    RULE_udtElement = 76
    RULE_udtMember = 77
    RULE_untypedNameMemberDcl = 78
    RULE_reservedNameMemberDcl = 79
    RULE_optionalArrayClause = 80
    RULE_reservedMemberName = 81
    RULE_globalEnumDeclaration = 82
    RULE_publicEnumDeclaration = 83
    RULE_privateEnumDeclaration = 84
    RULE_enumDeclaration = 85
    RULE_enumMemberList = 86
    RULE_enumElement = 87
    RULE_enumMember = 88
    RULE_publicExternalProcedureDeclaration = 89
    RULE_privateExternalProcedureDeclaration = 90
    RULE_externalProcDcl = 91
    RULE_externalSub = 92
    RULE_externalFunction = 93
    RULE_libInfo = 94
    RULE_libClause = 95
    RULE_aliasClause = 96
    RULE_implementsDirective = 97
    RULE_eventDeclaration = 98
    RULE_eventParameterList = 99
    RULE_proceduralModuleCode = 100
    RULE_classModuleCode = 101
    RULE_proceduralModuleCodeElement = 102
    RULE_classModuleCodeElement = 103
    RULE_commonModuleCodeElement = 104
    RULE_procedureDeclaration = 105
    RULE_subroutineDeclaration = 106
    RULE_functionDeclaration = 107
    RULE_propertyGetDeclaration = 108
    RULE_propertyLhsDeclaration = 109
    RULE_endLabel = 110
    RULE_procedureTail = 111
    RULE_procedureScope = 112
    RULE_initialStatic = 113
    RULE_trailingStatic = 114
    RULE_subroutineName = 115
    RULE_functionName = 116
    RULE_prefixedName = 117
    RULE_functionType = 118
    RULE_arrayDesignator = 119
    RULE_procedureParameters = 120
    RULE_propertyParameters = 121
    RULE_parameterList = 122
    RULE_positionalParameters = 123
    RULE_optionalParameters = 124
    RULE_valueParam = 125
    RULE_positionalParam = 126
    RULE_optionalParam = 127
    RULE_paramArray = 128
    RULE_paramDcl = 129
    RULE_untypedNameParamDcl = 130
    RULE_typedNameParamDcl = 131
    RULE_optionalPrefix = 132
    RULE_parameterMechanism = 133
    RULE_parameterType = 134
    RULE_defaultValue = 135
    RULE_eventHandlerName = 136
    RULE_implementedName = 137
    RULE_lifecycleHandlerName = 138
    RULE_procedureBody = 139
    RULE_statementBlock = 140
    RULE_blockStatement = 141
    RULE_statement = 142
    RULE_statementLabelDefinition = 143
    RULE_statementLabel = 144
    RULE_statementLabelList = 145
    RULE_identifierStatementLabel = 146
    RULE_lineNumberLabel = 147
    RULE_remStatement = 148
    RULE_controlStatement = 149
    RULE_controlStatementExceptMultilineIf = 150
    RULE_callStatement = 151
    RULE_whileStatement = 152
    RULE_forStatement = 153
    RULE_simpleForStatement = 154
    RULE_explicitForStatement = 155
    RULE_nestedForStatement = 156
    RULE_forClause = 157
    RULE_startValue = 158
    RULE_endValue = 159
    RULE_stepClause = 160
    RULE_stepIncrement = 161
    RULE_forEachStatement = 162
    RULE_simpleForEachStatement = 163
    RULE_explicitForEachStatement = 164
    RULE_forEachClause = 165
    RULE_collection = 166
    RULE_exitForStatement = 167
    RULE_doStatement = 168
    RULE_conditionClause = 169
    RULE_whileClause = 170
    RULE_untilClause = 171
    RULE_exitDoStatement = 172
    RULE_ifStatement = 173
    RULE_elseIfBlock = 174
    RULE_elseBlock = 175
    RULE_singleLineIfStatement = 176
    RULE_ifWithNonEmptyThen = 177
    RULE_ifWithEmptyThen = 178
    RULE_singleLineElseClause = 179
    RULE_listOrLabel = 180
    RULE_sameLineStatement = 181
    RULE_selectCaseStatement = 182
    RULE_caseClause = 183
    RULE_caseElseClause = 184
    RULE_rangeClause = 185
    RULE_selectExpression = 186
    RULE_comparisonOperator = 187
    RULE_stopStatement = 188
    RULE_gotoStatement = 189
    RULE_onGotoStatement = 190
    RULE_gosubStatement = 191
    RULE_returnStatement = 192
    RULE_onGosubStatement = 193
    RULE_exitSubStatement = 194
    RULE_exitFunctionStatement = 195
    RULE_exitPropertyStatement = 196
    RULE_raiseeventStatement = 197
    RULE_eventArgumentList = 198
    RULE_eventArgument = 199
    RULE_withStatement = 200
    RULE_endStatement = 201
    RULE_dataManipulationStatement = 202
    RULE_localVariableDeclaration = 203
    RULE_staticVariableDeclaration = 204
    RULE_localConstDeclaration = 205
    RULE_redimStatement = 206
    RULE_redimDeclarationList = 207
    RULE_redimVariableDcl = 208
    RULE_redimTypedVariableDcl = 209
    RULE_redimUntypedDcl = 210
    RULE_withExpressionDcl = 211
    RULE_memberAccessExpressionDcl = 212
    RULE_dynamicArrayDim = 213
    RULE_dynamicBoundsList = 214
    RULE_dynamicDimSpec = 215
    RULE_dynamicLowerBound = 216
    RULE_dynamicUpperBound = 217
    RULE_dynamicArrayClause = 218
    RULE_eraseStatement = 219
    RULE_eraseList = 220
    RULE_eraseElement = 221
    RULE_midStatement = 222
    RULE_modeSpecifier = 223
    RULE_stringArgument = 224
    RULE_startMid = 225
    RULE_length = 226
    RULE_lsetStatement = 227
    RULE_rsetStatement = 228
    RULE_letStatement = 229
    RULE_setStatement = 230
    RULE_errorHandlingStatement = 231
    RULE_onErrorStatement = 232
    RULE_errorBehavior = 233
    RULE_resumeStatement = 234
    RULE_errorStatement = 235
    RULE_errorNumber = 236
    RULE_fileStatement = 237
    RULE_openStatement = 238
    RULE_pathName = 239
    RULE_modeClause = 240
    RULE_modeOpt = 241
    RULE_accessClause = 242
    RULE_access = 243
    RULE_lock = 244
    RULE_lenClause = 245
    RULE_recLength = 246
    RULE_fileNumber = 247
    RULE_markedFileNumber = 248
    RULE_unmarkedFileNumber = 249
    RULE_closeStatement = 250
    RULE_fileNumberList = 251
    RULE_seekStatement = 252
    RULE_position = 253
    RULE_lockStatement = 254
    RULE_recordRange = 255
    RULE_startRecordNumber = 256
    RULE_endRecordNumber = 257
    RULE_unlockStatement = 258
    RULE_lineInputStatement = 259
    RULE_variableName = 260
    RULE_widthStatement = 261
    RULE_lineWidth = 262
    RULE_printStatement = 263
    RULE_outputList = 264
    RULE_outputItem = 265
    RULE_outputClause = 266
    RULE_charPosition = 267
    RULE_outputExpression = 268
    RULE_spcClause = 269
    RULE_spcNumber = 270
    RULE_tabClause = 271
    RULE_tabNumber = 272
    RULE_writeStatement = 273
    RULE_inputStatement = 274
    RULE_inputList = 275
    RULE_inputVariable = 276
    RULE_putStatement = 277
    RULE_recordNumber = 278
    RULE_data = 279
    RULE_getStatement = 280
    RULE_variable = 281
    RULE_attributeStatement = 282
    RULE_attributeDescName = 283
    RULE_attributeUsrName = 284
    RULE_expression = 285
    RULE_lExpression = 286
    RULE_literalExpression = 287
    RULE_parenthesizedExpression = 288
    RULE_typeofIsExpression = 289
    RULE_newExpress = 290
    RULE_notOperatorExpression = 291
    RULE_unaryMinusExpression = 292
    RULE_simpleNameExpression = 293
    RULE_instanceExpression = 294
    RULE_memberAccessExpression = 295
    RULE_indexExpression = 296
    RULE_argumentList = 297
    RULE_positionalOrNamedArgumentList = 298
    RULE_positionalArgument = 299
    RULE_requiredPositionalArgument = 300
    RULE_namedArgumentList = 301
    RULE_namedArgument = 302
    RULE_argumentExpression = 303
    RULE_dictionaryAccessExpression = 304
    RULE_withExpression = 305
    RULE_withMemberAccessExpression = 306
    RULE_withDictionaryAccessExpression = 307
    RULE_constantExpression = 308
    RULE_ccExpression = 309
    RULE_booleanExpression = 310
    RULE_integerExpression = 311
    RULE_variableExpression = 312
    RULE_boundVariableExpression = 313
    RULE_typeExpression = 314
    RULE_definedTypeExpression = 315
    RULE_addressofExpression = 316
    RULE_procedurePointerExpression = 317
    RULE_wsc = 318
    RULE_endOfLine = 319
    RULE_endOfLineNoWs = 320
    RULE_endOfStatement = 321
    RULE_endOfStatementNoWs = 322
    RULE_commentBody = 323
    RULE_reservedIdentifier = 324
    RULE_ambiguousIdentifier = 325
    RULE_statementKeyword = 326
    RULE_remKeyword = 327
    RULE_markerKeyword = 328
    RULE_operatorIdentifier = 329
    RULE_reservedName = 330
    RULE_specialForm = 331
    RULE_reservedTypeIdentifier = 332
    RULE_reservedTypeIdentifierB = 333
    RULE_typeableReservedName = 334
    RULE_literalIdentifier = 335
    RULE_booleanLiteralIdentifier = 336
    RULE_objectLiteralIdentifier = 337
    RULE_variantLiteralIdentifier = 338
    RULE_reservedForImplementationUse = 339
    RULE_futureReserved = 340
    RULE_builtinType = 341
    RULE_typedName = 342
    RULE_typeSuffix = 343
    RULE_ambiguousKeyword = 344

    ruleNames =  [ "startRule", "module", "classFileHeader", "classVersionIdentification", 
                   "classBeginBlock", "beginBlockConfigElement", "proceduralModule", 
                   "classModule", "proceduralModuleHeader", "classModuleHeader", 
                   "classAttr", "proceduralModuleBody", "classModuleBody", 
                   "unrestrictedName", "name", "untypedName", "proceduralModuleDeclarationSection", 
                   "classModuleDeclarationSection", "proceduralModuleDirectiveElement", 
                   "proceduralModuleDeclarationElement", "classModuleDirectiveElement", 
                   "classModuleDeclarationElement", "commonOptionDirective", 
                   "optionCompareDirective", "optionBaseDirective", "optionExplicitDirective", 
                   "optionPrivateDirective", "defDirective", "letterSpec", 
                   "singleLetter", "universalLetterRange", "upperCaseA", 
                   "upperCaseZ", "letterRange", "firstLetter", "lastLetter", 
                   "defType", "commonModuleDeclarationElement", "moduleVariableDeclaration", 
                   "variableHelpAttribute", "globalVariableDeclaration", 
                   "publicVariableDecalation", "privateVariableDeclaration", 
                   "moduleVariableDeclarationList", "variableDeclarationList", 
                   "variableDcl", "typedVariableDcl", "untypedVariableDcl", 
                   "arrayClause", "asClause", "witheventsVariableDcl", "classTypeName", 
                   "arrayDim", "boundsList", "dimSpec", "lowerBound", "upperBound", 
                   "asAutoObject", "asType", "typeSpec", "fixedLengthStringSpec", 
                   "stringLength", "constantName", "publicConstDeclaration", 
                   "privateConstDeclaration", "moduleConstDeclaration", 
                   "constDeclaration", "constItemList", "constItem", "typedNameConstItem", 
                   "untypedNameConstItem", "constAsClause", "publicTypeDeclaration", 
                   "privateTypeDeclaration", "udtDeclaration", "udtMemberList", 
                   "udtElement", "udtMember", "untypedNameMemberDcl", "reservedNameMemberDcl", 
                   "optionalArrayClause", "reservedMemberName", "globalEnumDeclaration", 
                   "publicEnumDeclaration", "privateEnumDeclaration", "enumDeclaration", 
                   "enumMemberList", "enumElement", "enumMember", "publicExternalProcedureDeclaration", 
                   "privateExternalProcedureDeclaration", "externalProcDcl", 
                   "externalSub", "externalFunction", "libInfo", "libClause", 
                   "aliasClause", "implementsDirective", "eventDeclaration", 
                   "eventParameterList", "proceduralModuleCode", "classModuleCode", 
                   "proceduralModuleCodeElement", "classModuleCodeElement", 
                   "commonModuleCodeElement", "procedureDeclaration", "subroutineDeclaration", 
                   "functionDeclaration", "propertyGetDeclaration", "propertyLhsDeclaration", 
                   "endLabel", "procedureTail", "procedureScope", "initialStatic", 
                   "trailingStatic", "subroutineName", "functionName", "prefixedName", 
                   "functionType", "arrayDesignator", "procedureParameters", 
                   "propertyParameters", "parameterList", "positionalParameters", 
                   "optionalParameters", "valueParam", "positionalParam", 
                   "optionalParam", "paramArray", "paramDcl", "untypedNameParamDcl", 
                   "typedNameParamDcl", "optionalPrefix", "parameterMechanism", 
                   "parameterType", "defaultValue", "eventHandlerName", 
                   "implementedName", "lifecycleHandlerName", "procedureBody", 
                   "statementBlock", "blockStatement", "statement", "statementLabelDefinition", 
                   "statementLabel", "statementLabelList", "identifierStatementLabel", 
                   "lineNumberLabel", "remStatement", "controlStatement", 
                   "controlStatementExceptMultilineIf", "callStatement", 
                   "whileStatement", "forStatement", "simpleForStatement", 
                   "explicitForStatement", "nestedForStatement", "forClause", 
                   "startValue", "endValue", "stepClause", "stepIncrement", 
                   "forEachStatement", "simpleForEachStatement", "explicitForEachStatement", 
                   "forEachClause", "collection", "exitForStatement", "doStatement", 
                   "conditionClause", "whileClause", "untilClause", "exitDoStatement", 
                   "ifStatement", "elseIfBlock", "elseBlock", "singleLineIfStatement", 
                   "ifWithNonEmptyThen", "ifWithEmptyThen", "singleLineElseClause", 
                   "listOrLabel", "sameLineStatement", "selectCaseStatement", 
                   "caseClause", "caseElseClause", "rangeClause", "selectExpression", 
                   "comparisonOperator", "stopStatement", "gotoStatement", 
                   "onGotoStatement", "gosubStatement", "returnStatement", 
                   "onGosubStatement", "exitSubStatement", "exitFunctionStatement", 
                   "exitPropertyStatement", "raiseeventStatement", "eventArgumentList", 
                   "eventArgument", "withStatement", "endStatement", "dataManipulationStatement", 
                   "localVariableDeclaration", "staticVariableDeclaration", 
                   "localConstDeclaration", "redimStatement", "redimDeclarationList", 
                   "redimVariableDcl", "redimTypedVariableDcl", "redimUntypedDcl", 
                   "withExpressionDcl", "memberAccessExpressionDcl", "dynamicArrayDim", 
                   "dynamicBoundsList", "dynamicDimSpec", "dynamicLowerBound", 
                   "dynamicUpperBound", "dynamicArrayClause", "eraseStatement", 
                   "eraseList", "eraseElement", "midStatement", "modeSpecifier", 
                   "stringArgument", "startMid", "length", "lsetStatement", 
                   "rsetStatement", "letStatement", "setStatement", "errorHandlingStatement", 
                   "onErrorStatement", "errorBehavior", "resumeStatement", 
                   "errorStatement", "errorNumber", "fileStatement", "openStatement", 
                   "pathName", "modeClause", "modeOpt", "accessClause", 
                   "access", "lock", "lenClause", "recLength", "fileNumber", 
                   "markedFileNumber", "unmarkedFileNumber", "closeStatement", 
                   "fileNumberList", "seekStatement", "position", "lockStatement", 
                   "recordRange", "startRecordNumber", "endRecordNumber", 
                   "unlockStatement", "lineInputStatement", "variableName", 
                   "widthStatement", "lineWidth", "printStatement", "outputList", 
                   "outputItem", "outputClause", "charPosition", "outputExpression", 
                   "spcClause", "spcNumber", "tabClause", "tabNumber", "writeStatement", 
                   "inputStatement", "inputList", "inputVariable", "putStatement", 
                   "recordNumber", "data", "getStatement", "variable", "attributeStatement", 
                   "attributeDescName", "attributeUsrName", "expression", 
                   "lExpression", "literalExpression", "parenthesizedExpression", 
                   "typeofIsExpression", "newExpress", "notOperatorExpression", 
                   "unaryMinusExpression", "simpleNameExpression", "instanceExpression", 
                   "memberAccessExpression", "indexExpression", "argumentList", 
                   "positionalOrNamedArgumentList", "positionalArgument", 
                   "requiredPositionalArgument", "namedArgumentList", "namedArgument", 
                   "argumentExpression", "dictionaryAccessExpression", "withExpression", 
                   "withMemberAccessExpression", "withDictionaryAccessExpression", 
                   "constantExpression", "ccExpression", "booleanExpression", 
                   "integerExpression", "variableExpression", "boundVariableExpression", 
                   "typeExpression", "definedTypeExpression", "addressofExpression", 
                   "procedurePointerExpression", "wsc", "endOfLine", "endOfLineNoWs", 
                   "endOfStatement", "endOfStatementNoWs", "commentBody", 
                   "reservedIdentifier", "ambiguousIdentifier", "statementKeyword", 
                   "remKeyword", "markerKeyword", "operatorIdentifier", 
                   "reservedName", "specialForm", "reservedTypeIdentifier", 
                   "reservedTypeIdentifierB", "typeableReservedName", "literalIdentifier", 
                   "booleanLiteralIdentifier", "objectLiteralIdentifier", 
                   "variantLiteralIdentifier", "reservedForImplementationUse", 
                   "futureReserved", "builtinType", "typedName", "typeSuffix", 
                   "ambiguousKeyword" ]

    EOF = Token.EOF
    ABS=1
    ACCESS=2
    ADDRESSOF=3
    ALIAS=4
    AND=5
    ANY=6
    ATTRIBUTE=7
    APPEND=8
    ARRAY=9
    AS=10
    BASE=11
    BEGIN=12
    BINARY=13
    BOOLEAN=14
    BOOLEAN_B=15
    BYVAL=16
    BYREF=17
    BYTE=18
    BYTE_B=19
    CALL=20
    CASE=21
    CBOOL=22
    CBYTE=23
    CCUR=24
    CDATE=25
    CDBL=26
    CDEC=27
    CDECL=28
    CHDIR=29
    CHDRIVE=30
    CINT=31
    CIRCLE=32
    CLASS=33
    CLASS_INITIALIZE=34
    CLASS_TERMINATE=35
    CLNG=36
    CLNGLNG=37
    CLNGPTR=38
    CLOSE=39
    COMPARE=40
    CONST=41
    CSNG=42
    CSTR=43
    CVAR=44
    CVERR=45
    CURRENCY=46
    CURRENCY_B=47
    DATE=48
    DATE_B=49
    DEBUG=50
    DECLARE=51
    DECIMAL=52
    DEFBOOL=53
    DEFBYTE=54
    DEFCUR=55
    DEFDATE=56
    DEFDBL=57
    DEFDEC=58
    DEFINT=59
    DEFLNG=60
    DEFLNGLNG=61
    DEFLNGPTR=62
    DEFOBJ=63
    DEFSNG=64
    DEFSTR=65
    DEFVAR=66
    DIM=67
    DO=68
    DOEVENTS=69
    DOUBLE=70
    DOUBLE_B=71
    EACH=72
    ELSE=73
    ELSEIF=74
    EMPTY_X=75
    ENDIF=76
    END=77
    ENUM=78
    EQV=79
    ERASE=80
    ERROR=81
    EVENT=82
    EXIT=83
    EXPLICIT=84
    FALSE=85
    FIX=86
    FRIEND=87
    FOR=88
    FUNCTION=89
    GET=90
    GLOBAL=91
    GO=92
    GOSUB=93
    GOTO=94
    IF=95
    IMP=96
    IMPLEMENTS=97
    IN=98
    INPUT=99
    INPUTB=100
    INT=101
    IS=102
    INTEGER=103
    INTEGER_B=104
    KILL=105
    LBOUND=106
    LEN=107
    LENB=108
    LET=109
    LIB=110
    LIKE=111
    LINE=112
    LINEINPUT=113
    LOCK=114
    LONG=115
    LONG_B=116
    LONGLONG=117
    LONGLONG_B=118
    LONGPTR=119
    LONGPTR_B=120
    LOOP=121
    LSET=122
    ME=123
    MID=124
    MIDB=125
    MID_D=126
    MIDB_D=127
    MOD=128
    MODULE=129
    NEXT=130
    NEW=131
    NOT=132
    NOTHING=133
    NULL_=134
    OBJECT=135
    OBJECT_B=136
    ON=137
    OPEN=138
    OPTION=139
    OPTIONAL=140
    OR=141
    OUTPUT=142
    PARAMARRAY=143
    PRESERVE=144
    PRINT=145
    PRIVATE=146
    PROPERTY=147
    PSET=148
    PTRSAFE=149
    PUBLIC=150
    PUT=151
    RANDOM=152
    RAISEEVENT=153
    READ=154
    REDIM=155
    REM=156
    RESET=157
    RESUME=158
    RETURN=159
    RSET=160
    SCALE=161
    SEEK=162
    SELECT=163
    SET=164
    SGN=165
    SHARED=166
    SINGLE=167
    SINGLE_B=168
    SPC=169
    STATIC=170
    STEP=171
    STOP=172
    STRING=173
    STRING_B=174
    SUB=175
    TAB=176
    TEXT=177
    THEN=178
    TO=179
    TRUE=180
    TYPE=181
    TYPEOF=182
    UBOUND=183
    UNLOCK=184
    UNTIL=185
    VB_BASE=186
    VB_CONTROL=187
    VB_CREATABLE=188
    VB_CUSTOMIZABLE=189
    VB_DESCRIPTION=190
    VB_EXPOSED=191
    VB_EXT_KEY=192
    VB_GLOBALNAMESPACE=193
    VB_HELPID=194
    VB_INVOKE_FUNC=195
    VB_INVOKE_PROPERTY=196
    VB_INVOKE_PROPERTYPUT=197
    VB_INVOKE_PROPERTYPUTREF=198
    VB_MEMBERFLAGS=199
    VB_NAME=200
    VB_PREDECLAREDID=201
    VB_PROCDATA=202
    VB_TEMPLATEDERIVED=203
    VB_USERMEMID=204
    VB_VARDESCRIPTION=205
    VB_VARHELPID=206
    VB_VARMEMBERFLAGS=207
    VB_VARPROCDATA=208
    VB_VARUSERMEMID=209
    VARIANT=210
    VARIANT_B=211
    VERSION=212
    WEND=213
    WHILE=214
    WIDTH=215
    WITH=216
    WITHEVENTS=217
    WRITE=218
    XOR=219
    APPACTIVATE=220
    BEEP=221
    COLLECTION=222
    DATABASE=223
    DELETESETTING=224
    FILECOPY=225
    MKDIR=226
    NAME=227
    RANDOMIZE=228
    RMDIR=229
    SAVEPICTURE=230
    SAVESETTING=231
    SENDKEYS=232
    SETATTR=233
    TIME=234
    LOAD=235
    UNLOAD=236
    AMPERSAND=237
    ASPERAND=238
    ASSIGN=239
    COMMA=240
    DIV=241
    Dollar=242
    EQ=243
    EXCLAM=244
    GEQ=245
    GT=246
    HASH=247
    LEQ=248
    LPAREN=249
    LT=250
    MINUS=251
    MINUS_EQ=252
    MULT=253
    NEQ=254
    PERCENT=255
    PERIOD=256
    PLUS=257
    PLUS_EQ=258
    POW=259
    RPAREN=260
    SEMICOLON=261
    L_SQUARE_BRACKET=262
    R_SQUARE_BRACKET=263
    GUID=264
    STRINGLITERAL=265
    OCTLITERAL=266
    HEXLITERAL=267
    INTEGERLITERAL=268
    FLOATLITERAL=269
    DATELITERAL=270
    LINE_CONTINUATION=271
    NEWLINE=272
    REMCOMMENT=273
    COMMENT=274
    SINGLEQUOTE=275
    COLON=276
    UNDERSCORE=277
    WS=278
    MACRO_LINE=279
    IDENTIFIER=280
    FOREIGN_NAME=281

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class StartRuleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def module(self):
            return self.getTypedRuleContext(vbaParser.ModuleContext,0)


        def EOF(self):
            return self.getToken(vbaParser.EOF, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_startRule

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStartRule" ):
                listener.enterStartRule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStartRule" ):
                listener.exitStartRule(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStartRule" ):
                return visitor.visitStartRule(self)
            else:
                return visitor.visitChildren(self)




    def startRule(self):

        localctx = vbaParser.StartRuleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_startRule)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 690
            self.module()
            self.state = 691
            self.match(vbaParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def proceduralModule(self):
            return self.getTypedRuleContext(vbaParser.ProceduralModuleContext,0)


        def classFileHeader(self):
            return self.getTypedRuleContext(vbaParser.ClassFileHeaderContext,0)


        def classModule(self):
            return self.getTypedRuleContext(vbaParser.ClassModuleContext,0)


        def endOfLineNoWs(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfLineNoWsContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfLineNoWsContext,i)


        def endOfLine(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfLineContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfLineContext,i)


        def WS(self):
            return self.getToken(vbaParser.WS, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_module

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModule" ):
                listener.enterModule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModule" ):
                listener.exitModule(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModule" ):
                return visitor.visitModule(self)
            else:
                return visitor.visitChildren(self)




    def module(self):

        localctx = vbaParser.ModuleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_module)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 696
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,0,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 693
                    self.endOfLineNoWs() 
                self.state = 698
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,0,self._ctx)

            self.state = 703
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [7, 272, 273, 274, 278]:
                self.state = 699
                self.proceduralModule()
                pass
            elif token in [212]:
                self.state = 700
                self.classFileHeader()
                self.state = 701
                self.classModule()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 708
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,2,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 705
                    self.endOfLine() 
                self.state = 710
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,2,self._ctx)

            self.state = 712
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==278:
                self.state = 711
                self.match(vbaParser.WS)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassFileHeaderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classVersionIdentification(self):
            return self.getTypedRuleContext(vbaParser.ClassVersionIdentificationContext,0)


        def classBeginBlock(self):
            return self.getTypedRuleContext(vbaParser.ClassBeginBlockContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_classFileHeader

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassFileHeader" ):
                listener.enterClassFileHeader(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassFileHeader" ):
                listener.exitClassFileHeader(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassFileHeader" ):
                return visitor.visitClassFileHeader(self)
            else:
                return visitor.visitChildren(self)




    def classFileHeader(self):

        localctx = vbaParser.ClassFileHeaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_classFileHeader)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 714
            self.classVersionIdentification()
            self.state = 715
            self.classBeginBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassVersionIdentificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VERSION(self):
            return self.getToken(vbaParser.VERSION, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def FLOATLITERAL(self):
            return self.getToken(vbaParser.FLOATLITERAL, 0)

        def CLASS(self):
            return self.getToken(vbaParser.CLASS, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_classVersionIdentification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassVersionIdentification" ):
                listener.enterClassVersionIdentification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassVersionIdentification" ):
                listener.exitClassVersionIdentification(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassVersionIdentification" ):
                return visitor.visitClassVersionIdentification(self)
            else:
                return visitor.visitChildren(self)




    def classVersionIdentification(self):

        localctx = vbaParser.ClassVersionIdentificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_classVersionIdentification)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 717
            self.match(vbaParser.VERSION)
            self.state = 718
            self.match(vbaParser.WS)
            self.state = 719
            self.match(vbaParser.FLOATLITERAL)
            self.state = 722
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
            if la_ == 1:
                self.state = 720
                self.match(vbaParser.WS)
                self.state = 721
                self.match(vbaParser.CLASS)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassBeginBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def endOfLine(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfLineContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfLineContext,i)


        def BEGIN(self):
            return self.getToken(vbaParser.BEGIN, 0)

        def END(self):
            return self.getToken(vbaParser.END, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def GUID(self):
            return self.getToken(vbaParser.GUID, 0)

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def beginBlockConfigElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.BeginBlockConfigElementContext)
            else:
                return self.getTypedRuleContext(vbaParser.BeginBlockConfigElementContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_classBeginBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassBeginBlock" ):
                listener.enterClassBeginBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassBeginBlock" ):
                listener.exitClassBeginBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassBeginBlock" ):
                return visitor.visitClassBeginBlock(self)
            else:
                return visitor.visitChildren(self)




    def classBeginBlock(self):

        localctx = vbaParser.ClassBeginBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_classBeginBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 724
            self.endOfLine()
            self.state = 725
            self.match(vbaParser.BEGIN)
            self.state = 730
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.state = 726
                self.match(vbaParser.WS)
                self.state = 727
                self.match(vbaParser.GUID)
                self.state = 728
                self.match(vbaParser.WS)
                self.state = 729
                self.ambiguousIdentifier()


            self.state = 735
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 272)) & ~0x3f) == 0 and ((1 << (_la - 272)) & 71) != 0):
                self.state = 732
                self.endOfLine()
                self.state = 737
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 739 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 738
                self.beginBlockConfigElement()
                self.state = 741 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 1161251797268) != 0) or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & 2324270826796353537) != 0) or ((((_la - 147)) & ~0x3f) == 0 and ((1 << (_la - 147)) & 1090520225) != 0) or ((((_la - 212)) & ~0x3f) == 0 and ((1 << (_la - 212)) & 33554185) != 0) or _la==280):
                    break

            self.state = 743
            self.endOfLine()
            self.state = 744
            self.match(vbaParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BeginBlockConfigElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def EQ(self):
            return self.getToken(vbaParser.EQ, 0)

        def literalExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.LiteralExpressionContext)
            else:
                return self.getTypedRuleContext(vbaParser.LiteralExpressionContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def MINUS(self):
            return self.getToken(vbaParser.MINUS, 0)

        def COLON(self):
            return self.getToken(vbaParser.COLON, 0)

        def endOfLine(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfLineContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfLineContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_beginBlockConfigElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBeginBlockConfigElement" ):
                listener.enterBeginBlockConfigElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBeginBlockConfigElement" ):
                listener.exitBeginBlockConfigElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBeginBlockConfigElement" ):
                return visitor.visitBeginBlockConfigElement(self)
            else:
                return visitor.visitChildren(self)




    def beginBlockConfigElement(self):

        localctx = vbaParser.BeginBlockConfigElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_beginBlockConfigElement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 746
            self.ambiguousIdentifier()
            self.state = 748
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==278:
                self.state = 747
                self.match(vbaParser.WS)


            self.state = 750
            self.match(vbaParser.EQ)
            self.state = 752
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==278:
                self.state = 751
                self.match(vbaParser.WS)


            self.state = 755
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==251:
                self.state = 754
                self.match(vbaParser.MINUS)


            self.state = 757
            self.literalExpression()
            self.state = 760
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==276:
                self.state = 758
                self.match(vbaParser.COLON)
                self.state = 759
                self.literalExpression()


            self.state = 765
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,12,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 762
                    self.endOfLine() 
                self.state = 767
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,12,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProceduralModuleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def proceduralModuleHeader(self):
            return self.getTypedRuleContext(vbaParser.ProceduralModuleHeaderContext,0)


        def proceduralModuleBody(self):
            return self.getTypedRuleContext(vbaParser.ProceduralModuleBodyContext,0)


        def endOfLineNoWs(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfLineNoWsContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfLineNoWsContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_proceduralModule

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProceduralModule" ):
                listener.enterProceduralModule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProceduralModule" ):
                listener.exitProceduralModule(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProceduralModule" ):
                return visitor.visitProceduralModule(self)
            else:
                return visitor.visitChildren(self)




    def proceduralModule(self):

        localctx = vbaParser.ProceduralModuleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_proceduralModule)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 768
            self.proceduralModuleHeader()
            self.state = 772
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,13,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 769
                    self.endOfLineNoWs() 
                self.state = 774
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,13,self._ctx)

            self.state = 775
            self.proceduralModuleBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassModuleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classModuleHeader(self):
            return self.getTypedRuleContext(vbaParser.ClassModuleHeaderContext,0)


        def classModuleBody(self):
            return self.getTypedRuleContext(vbaParser.ClassModuleBodyContext,0)


        def endOfLine(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfLineContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfLineContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_classModule

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassModule" ):
                listener.enterClassModule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassModule" ):
                listener.exitClassModule(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassModule" ):
                return visitor.visitClassModule(self)
            else:
                return visitor.visitChildren(self)




    def classModule(self):

        localctx = vbaParser.ClassModuleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_classModule)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 777
            self.classModuleHeader()
            self.state = 781
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,14,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 778
                    self.endOfLine() 
                self.state = 783
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,14,self._ctx)

            self.state = 784
            self.classModuleBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProceduralModuleHeaderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ATTRIBUTE(self):
            return self.getToken(vbaParser.ATTRIBUTE, 0)

        def VB_NAME(self):
            return self.getToken(vbaParser.VB_NAME, 0)

        def EQ(self):
            return self.getToken(vbaParser.EQ, 0)

        def STRINGLITERAL(self):
            return self.getToken(vbaParser.STRINGLITERAL, 0)

        def endOfLine(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfLineContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfLineContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def getRuleIndex(self):
            return vbaParser.RULE_proceduralModuleHeader

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProceduralModuleHeader" ):
                listener.enterProceduralModuleHeader(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProceduralModuleHeader" ):
                listener.exitProceduralModuleHeader(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProceduralModuleHeader" ):
                return visitor.visitProceduralModuleHeader(self)
            else:
                return visitor.visitChildren(self)




    def proceduralModuleHeader(self):

        localctx = vbaParser.ProceduralModuleHeaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_proceduralModuleHeader)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 789
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 272)) & ~0x3f) == 0 and ((1 << (_la - 272)) & 71) != 0):
                self.state = 786
                self.endOfLine()
                self.state = 791
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 792
            self.match(vbaParser.ATTRIBUTE)
            self.state = 794
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==278:
                self.state = 793
                self.match(vbaParser.WS)


            self.state = 796
            self.match(vbaParser.VB_NAME)
            self.state = 798
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==278:
                self.state = 797
                self.match(vbaParser.WS)


            self.state = 800
            self.match(vbaParser.EQ)
            self.state = 802
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==278:
                self.state = 801
                self.match(vbaParser.WS)


            self.state = 804
            self.match(vbaParser.STRINGLITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassModuleHeaderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classAttr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ClassAttrContext)
            else:
                return self.getTypedRuleContext(vbaParser.ClassAttrContext,i)


        def WS(self):
            return self.getToken(vbaParser.WS, 0)

        def endOfLine(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfLineContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfLineContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_classModuleHeader

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassModuleHeader" ):
                listener.enterClassModuleHeader(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassModuleHeader" ):
                listener.exitClassModuleHeader(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassModuleHeader" ):
                return visitor.visitClassModuleHeader(self)
            else:
                return visitor.visitChildren(self)




    def classModuleHeader(self):

        localctx = vbaParser.ClassModuleHeaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_classModuleHeader)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 813 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 807 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 806
                        self.endOfLine()
                        self.state = 809 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (((((_la - 272)) & ~0x3f) == 0 and ((1 << (_la - 272)) & 71) != 0)):
                            break

                    self.state = 811
                    self.classAttr()

                else:
                    raise NoViableAltException(self)
                self.state = 815 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,20,self._ctx)

            self.state = 818
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,21,self._ctx)
            if la_ == 1:
                self.state = 817
                self.match(vbaParser.WS)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassAttrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ATTRIBUTE(self):
            return self.getToken(vbaParser.ATTRIBUTE, 0)

        def VB_NAME(self):
            return self.getToken(vbaParser.VB_NAME, 0)

        def EQ(self):
            return self.getToken(vbaParser.EQ, 0)

        def STRINGLITERAL(self):
            return self.getToken(vbaParser.STRINGLITERAL, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def VB_GLOBALNAMESPACE(self):
            return self.getToken(vbaParser.VB_GLOBALNAMESPACE, 0)

        def booleanLiteralIdentifier(self):
            return self.getTypedRuleContext(vbaParser.BooleanLiteralIdentifierContext,0)


        def VB_CREATABLE(self):
            return self.getToken(vbaParser.VB_CREATABLE, 0)

        def VB_PREDECLAREDID(self):
            return self.getToken(vbaParser.VB_PREDECLAREDID, 0)

        def VB_EXPOSED(self):
            return self.getToken(vbaParser.VB_EXPOSED, 0)

        def VB_CUSTOMIZABLE(self):
            return self.getToken(vbaParser.VB_CUSTOMIZABLE, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_classAttr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassAttr" ):
                listener.enterClassAttr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassAttr" ):
                listener.exitClassAttr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassAttr" ):
                return visitor.visitClassAttr(self)
            else:
                return visitor.visitChildren(self)




    def classAttr(self):

        localctx = vbaParser.ClassAttrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_classAttr)
        self._la = 0 # Token type
        try:
            self.state = 898
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 820
                self.match(vbaParser.ATTRIBUTE)
                self.state = 822
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==278:
                    self.state = 821
                    self.match(vbaParser.WS)


                self.state = 824
                self.match(vbaParser.VB_NAME)
                self.state = 826
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==278:
                    self.state = 825
                    self.match(vbaParser.WS)


                self.state = 828
                self.match(vbaParser.EQ)
                self.state = 830
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==278:
                    self.state = 829
                    self.match(vbaParser.WS)


                self.state = 832
                self.match(vbaParser.STRINGLITERAL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 833
                self.match(vbaParser.ATTRIBUTE)
                self.state = 835
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==278:
                    self.state = 834
                    self.match(vbaParser.WS)


                self.state = 837
                self.match(vbaParser.VB_GLOBALNAMESPACE)
                self.state = 839
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==278:
                    self.state = 838
                    self.match(vbaParser.WS)


                self.state = 841
                self.match(vbaParser.EQ)
                self.state = 843
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==278:
                    self.state = 842
                    self.match(vbaParser.WS)


                self.state = 845
                self.booleanLiteralIdentifier()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 846
                self.match(vbaParser.ATTRIBUTE)
                self.state = 848
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==278:
                    self.state = 847
                    self.match(vbaParser.WS)


                self.state = 850
                self.match(vbaParser.VB_CREATABLE)
                self.state = 852
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==278:
                    self.state = 851
                    self.match(vbaParser.WS)


                self.state = 854
                self.match(vbaParser.EQ)
                self.state = 856
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==278:
                    self.state = 855
                    self.match(vbaParser.WS)


                self.state = 858
                self.booleanLiteralIdentifier()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 859
                self.match(vbaParser.ATTRIBUTE)
                self.state = 861
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==278:
                    self.state = 860
                    self.match(vbaParser.WS)


                self.state = 863
                self.match(vbaParser.VB_PREDECLAREDID)
                self.state = 865
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==278:
                    self.state = 864
                    self.match(vbaParser.WS)


                self.state = 867
                self.match(vbaParser.EQ)
                self.state = 869
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==278:
                    self.state = 868
                    self.match(vbaParser.WS)


                self.state = 871
                self.booleanLiteralIdentifier()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 872
                self.match(vbaParser.ATTRIBUTE)
                self.state = 874
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==278:
                    self.state = 873
                    self.match(vbaParser.WS)


                self.state = 876
                self.match(vbaParser.VB_EXPOSED)
                self.state = 878
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==278:
                    self.state = 877
                    self.match(vbaParser.WS)


                self.state = 880
                self.match(vbaParser.EQ)
                self.state = 882
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==278:
                    self.state = 881
                    self.match(vbaParser.WS)


                self.state = 884
                self.booleanLiteralIdentifier()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 885
                self.match(vbaParser.ATTRIBUTE)
                self.state = 887
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==278:
                    self.state = 886
                    self.match(vbaParser.WS)


                self.state = 889
                self.match(vbaParser.VB_CUSTOMIZABLE)
                self.state = 891
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==278:
                    self.state = 890
                    self.match(vbaParser.WS)


                self.state = 893
                self.match(vbaParser.EQ)
                self.state = 895
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==278:
                    self.state = 894
                    self.match(vbaParser.WS)


                self.state = 897
                self.booleanLiteralIdentifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProceduralModuleBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def proceduralModuleCode(self):
            return self.getTypedRuleContext(vbaParser.ProceduralModuleCodeContext,0)


        def proceduralModuleDeclarationSection(self):
            return self.getTypedRuleContext(vbaParser.ProceduralModuleDeclarationSectionContext,0)


        def endOfLine(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfLineContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfLineContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_proceduralModuleBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProceduralModuleBody" ):
                listener.enterProceduralModuleBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProceduralModuleBody" ):
                listener.exitProceduralModuleBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProceduralModuleBody" ):
                return visitor.visitProceduralModuleBody(self)
            else:
                return visitor.visitChildren(self)




    def proceduralModuleBody(self):

        localctx = vbaParser.ProceduralModuleBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_proceduralModuleBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 901
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
            if la_ == 1:
                self.state = 900
                self.proceduralModuleDeclarationSection()


            self.state = 906
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,42,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 903
                    self.endOfLine() 
                self.state = 908
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,42,self._ctx)

            self.state = 909
            self.proceduralModuleCode()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassModuleBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classModuleCode(self):
            return self.getTypedRuleContext(vbaParser.ClassModuleCodeContext,0)


        def classModuleDeclarationSection(self):
            return self.getTypedRuleContext(vbaParser.ClassModuleDeclarationSectionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_classModuleBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassModuleBody" ):
                listener.enterClassModuleBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassModuleBody" ):
                listener.exitClassModuleBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassModuleBody" ):
                return visitor.visitClassModuleBody(self)
            else:
                return visitor.visitChildren(self)




    def classModuleBody(self):

        localctx = vbaParser.ClassModuleBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_classModuleBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 912
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
            if la_ == 1:
                self.state = 911
                self.classModuleDeclarationSection()


            self.state = 914
            self.classModuleCode()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnrestrictedNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def reservedIdentifier(self):
            return self.getTypedRuleContext(vbaParser.ReservedIdentifierContext,0)


        def name(self):
            return self.getTypedRuleContext(vbaParser.NameContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_unrestrictedName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnrestrictedName" ):
                listener.enterUnrestrictedName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnrestrictedName" ):
                listener.exitUnrestrictedName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnrestrictedName" ):
                return visitor.visitUnrestrictedName(self)
            else:
                return visitor.visitChildren(self)




    def unrestrictedName(self):

        localctx = vbaParser.UnrestrictedNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_unrestrictedName)
        try:
            self.state = 918
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 916
                self.reservedIdentifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 917
                self.name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def untypedName(self):
            return self.getTypedRuleContext(vbaParser.UntypedNameContext,0)


        def typedName(self):
            return self.getTypedRuleContext(vbaParser.TypedNameContext,0)


        def markedFileNumber(self):
            return self.getTypedRuleContext(vbaParser.MarkedFileNumberContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterName" ):
                listener.enterName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitName" ):
                listener.exitName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitName" ):
                return visitor.visitName(self)
            else:
                return visitor.visitChildren(self)




    def name(self):

        localctx = vbaParser.NameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_name)
        try:
            self.state = 923
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 920
                self.untypedName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 921
                self.typedName()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 922
                self.markedFileNumber()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UntypedNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def FOREIGN_NAME(self):
            return self.getToken(vbaParser.FOREIGN_NAME, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_untypedName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUntypedName" ):
                listener.enterUntypedName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUntypedName" ):
                listener.exitUntypedName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUntypedName" ):
                return visitor.visitUntypedName(self)
            else:
                return visitor.visitChildren(self)




    def untypedName(self):

        localctx = vbaParser.UntypedNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_untypedName)
        try:
            self.state = 927
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2, 4, 8, 11, 12, 13, 29, 30, 33, 34, 35, 40, 81, 92, 105, 110, 112, 124, 125, 126, 127, 129, 135, 142, 147, 152, 154, 157, 171, 177, 212, 215, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 280]:
                self.enterOuterAlt(localctx, 1)
                self.state = 925
                self.ambiguousIdentifier()
                pass
            elif token in [281]:
                self.enterOuterAlt(localctx, 2)
                self.state = 926
                self.match(vbaParser.FOREIGN_NAME)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProceduralModuleDeclarationSectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def proceduralModuleDeclarationElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ProceduralModuleDeclarationElementContext)
            else:
                return self.getTypedRuleContext(vbaParser.ProceduralModuleDeclarationElementContext,i)


        def endOfLine(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfLineContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfLineContext,i)


        def defDirective(self):
            return self.getTypedRuleContext(vbaParser.DefDirectiveContext,0)


        def endOfLineNoWs(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfLineNoWsContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfLineNoWsContext,i)


        def proceduralModuleDirectiveElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ProceduralModuleDirectiveElementContext)
            else:
                return self.getTypedRuleContext(vbaParser.ProceduralModuleDirectiveElementContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_proceduralModuleDeclarationSection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProceduralModuleDeclarationSection" ):
                listener.enterProceduralModuleDeclarationSection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProceduralModuleDeclarationSection" ):
                listener.exitProceduralModuleDeclarationSection(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProceduralModuleDeclarationSection" ):
                return visitor.visitProceduralModuleDeclarationSection(self)
            else:
                return visitor.visitChildren(self)




    def proceduralModuleDeclarationSection(self):

        localctx = vbaParser.ProceduralModuleDeclarationSectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_proceduralModuleDeclarationSection)
        self._la = 0 # Token type
        try:
            self.state = 967
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 936 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 930 
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 929
                                self.endOfLine()

                            else:
                                raise NoViableAltException(self)
                            self.state = 932 
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,47,self._ctx)

                        self.state = 934
                        self.proceduralModuleDeclarationElement()

                    else:
                        raise NoViableAltException(self)
                    self.state = 938 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,48,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 949
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,50,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 941 
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 940
                                self.endOfLine()

                            else:
                                raise NoViableAltException(self)
                            self.state = 943 
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,49,self._ctx)

                        self.state = 945
                        self.proceduralModuleDirectiveElement() 
                    self.state = 951
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,50,self._ctx)

                self.state = 953 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 952
                    self.endOfLine()
                    self.state = 955 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (((((_la - 272)) & ~0x3f) == 0 and ((1 << (_la - 272)) & 71) != 0)):
                        break

                self.state = 957
                self.defDirective()
                self.state = 964
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,52,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 959
                        self.proceduralModuleDeclarationElement()
                        self.state = 960
                        self.endOfLineNoWs() 
                    self.state = 966
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,52,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassModuleDeclarationSectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classModuleDeclarationElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ClassModuleDeclarationElementContext)
            else:
                return self.getTypedRuleContext(vbaParser.ClassModuleDeclarationElementContext,i)


        def endOfLine(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfLineContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfLineContext,i)


        def defDirective(self):
            return self.getTypedRuleContext(vbaParser.DefDirectiveContext,0)


        def classModuleDirectiveElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ClassModuleDirectiveElementContext)
            else:
                return self.getTypedRuleContext(vbaParser.ClassModuleDirectiveElementContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_classModuleDeclarationSection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassModuleDeclarationSection" ):
                listener.enterClassModuleDeclarationSection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassModuleDeclarationSection" ):
                listener.exitClassModuleDeclarationSection(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassModuleDeclarationSection" ):
                return visitor.visitClassModuleDeclarationSection(self)
            else:
                return visitor.visitChildren(self)




    def classModuleDeclarationSection(self):

        localctx = vbaParser.ClassModuleDeclarationSectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_classModuleDeclarationSection)
        try:
            self.state = 1003
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 975 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 969
                        self.classModuleDeclarationElement()
                        self.state = 971 
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 970
                                self.endOfLine()

                            else:
                                raise NoViableAltException(self)
                            self.state = 973 
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,54,self._ctx)


                    else:
                        raise NoViableAltException(self)
                    self.state = 977 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,55,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 987
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,57,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 979
                        self.classModuleDirectiveElement()
                        self.state = 981 
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 980
                                self.endOfLine()

                            else:
                                raise NoViableAltException(self)
                            self.state = 983 
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,56,self._ctx)
                 
                    self.state = 989
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,57,self._ctx)

                self.state = 990
                self.defDirective()
                self.state = 1000
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,59,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 992
                        self.classModuleDeclarationElement()
                        self.state = 994 
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 993
                                self.endOfLine()

                            else:
                                raise NoViableAltException(self)
                            self.state = 996 
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,58,self._ctx)
                 
                    self.state = 1002
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,59,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProceduralModuleDirectiveElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def commonOptionDirective(self):
            return self.getTypedRuleContext(vbaParser.CommonOptionDirectiveContext,0)


        def optionPrivateDirective(self):
            return self.getTypedRuleContext(vbaParser.OptionPrivateDirectiveContext,0)


        def defDirective(self):
            return self.getTypedRuleContext(vbaParser.DefDirectiveContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_proceduralModuleDirectiveElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProceduralModuleDirectiveElement" ):
                listener.enterProceduralModuleDirectiveElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProceduralModuleDirectiveElement" ):
                listener.exitProceduralModuleDirectiveElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProceduralModuleDirectiveElement" ):
                return visitor.visitProceduralModuleDirectiveElement(self)
            else:
                return visitor.visitChildren(self)




    def proceduralModuleDirectiveElement(self):

        localctx = vbaParser.ProceduralModuleDirectiveElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_proceduralModuleDirectiveElement)
        try:
            self.state = 1008
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1005
                self.commonOptionDirective()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1006
                self.optionPrivateDirective()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1007
                self.defDirective()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProceduralModuleDeclarationElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def commonModuleDeclarationElement(self):
            return self.getTypedRuleContext(vbaParser.CommonModuleDeclarationElementContext,0)


        def globalVariableDeclaration(self):
            return self.getTypedRuleContext(vbaParser.GlobalVariableDeclarationContext,0)


        def publicConstDeclaration(self):
            return self.getTypedRuleContext(vbaParser.PublicConstDeclarationContext,0)


        def publicTypeDeclaration(self):
            return self.getTypedRuleContext(vbaParser.PublicTypeDeclarationContext,0)


        def publicExternalProcedureDeclaration(self):
            return self.getTypedRuleContext(vbaParser.PublicExternalProcedureDeclarationContext,0)


        def globalEnumDeclaration(self):
            return self.getTypedRuleContext(vbaParser.GlobalEnumDeclarationContext,0)


        def commonOptionDirective(self):
            return self.getTypedRuleContext(vbaParser.CommonOptionDirectiveContext,0)


        def optionPrivateDirective(self):
            return self.getTypedRuleContext(vbaParser.OptionPrivateDirectiveContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_proceduralModuleDeclarationElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProceduralModuleDeclarationElement" ):
                listener.enterProceduralModuleDeclarationElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProceduralModuleDeclarationElement" ):
                listener.exitProceduralModuleDeclarationElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProceduralModuleDeclarationElement" ):
                return visitor.visitProceduralModuleDeclarationElement(self)
            else:
                return visitor.visitChildren(self)




    def proceduralModuleDeclarationElement(self):

        localctx = vbaParser.ProceduralModuleDeclarationElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_proceduralModuleDeclarationElement)
        try:
            self.state = 1018
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1010
                self.commonModuleDeclarationElement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1011
                self.globalVariableDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1012
                self.publicConstDeclaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1013
                self.publicTypeDeclaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1014
                self.publicExternalProcedureDeclaration()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1015
                self.globalEnumDeclaration()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1016
                self.commonOptionDirective()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1017
                self.optionPrivateDirective()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassModuleDirectiveElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def commonOptionDirective(self):
            return self.getTypedRuleContext(vbaParser.CommonOptionDirectiveContext,0)


        def defDirective(self):
            return self.getTypedRuleContext(vbaParser.DefDirectiveContext,0)


        def implementsDirective(self):
            return self.getTypedRuleContext(vbaParser.ImplementsDirectiveContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_classModuleDirectiveElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassModuleDirectiveElement" ):
                listener.enterClassModuleDirectiveElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassModuleDirectiveElement" ):
                listener.exitClassModuleDirectiveElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassModuleDirectiveElement" ):
                return visitor.visitClassModuleDirectiveElement(self)
            else:
                return visitor.visitChildren(self)




    def classModuleDirectiveElement(self):

        localctx = vbaParser.ClassModuleDirectiveElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_classModuleDirectiveElement)
        try:
            self.state = 1023
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [139, 273]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1020
                self.commonOptionDirective()
                pass
            elif token in [53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1021
                self.defDirective()
                pass
            elif token in [97]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1022
                self.implementsDirective()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassModuleDeclarationElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def commonModuleDeclarationElement(self):
            return self.getTypedRuleContext(vbaParser.CommonModuleDeclarationElementContext,0)


        def eventDeclaration(self):
            return self.getTypedRuleContext(vbaParser.EventDeclarationContext,0)


        def commonOptionDirective(self):
            return self.getTypedRuleContext(vbaParser.CommonOptionDirectiveContext,0)


        def implementsDirective(self):
            return self.getTypedRuleContext(vbaParser.ImplementsDirectiveContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_classModuleDeclarationElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassModuleDeclarationElement" ):
                listener.enterClassModuleDeclarationElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassModuleDeclarationElement" ):
                listener.exitClassModuleDeclarationElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassModuleDeclarationElement" ):
                return visitor.visitClassModuleDeclarationElement(self)
            else:
                return visitor.visitChildren(self)




    def classModuleDeclarationElement(self):

        localctx = vbaParser.ClassModuleDeclarationElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_classModuleDeclarationElement)
        try:
            self.state = 1029
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1025
                self.commonModuleDeclarationElement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1026
                self.eventDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1027
                self.commonOptionDirective()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1028
                self.implementsDirective()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommonOptionDirectiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optionCompareDirective(self):
            return self.getTypedRuleContext(vbaParser.OptionCompareDirectiveContext,0)


        def optionBaseDirective(self):
            return self.getTypedRuleContext(vbaParser.OptionBaseDirectiveContext,0)


        def optionExplicitDirective(self):
            return self.getTypedRuleContext(vbaParser.OptionExplicitDirectiveContext,0)


        def remStatement(self):
            return self.getTypedRuleContext(vbaParser.RemStatementContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_commonOptionDirective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommonOptionDirective" ):
                listener.enterCommonOptionDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommonOptionDirective" ):
                listener.exitCommonOptionDirective(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCommonOptionDirective" ):
                return visitor.visitCommonOptionDirective(self)
            else:
                return visitor.visitChildren(self)




    def commonOptionDirective(self):

        localctx = vbaParser.CommonOptionDirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_commonOptionDirective)
        try:
            self.state = 1035
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1031
                self.optionCompareDirective()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1032
                self.optionBaseDirective()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1033
                self.optionExplicitDirective()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1034
                self.remStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptionCompareDirectiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPTION(self):
            return self.getToken(vbaParser.OPTION, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def COMPARE(self):
            return self.getToken(vbaParser.COMPARE, 0)

        def BINARY(self):
            return self.getToken(vbaParser.BINARY, 0)

        def TEXT(self):
            return self.getToken(vbaParser.TEXT, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_optionCompareDirective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptionCompareDirective" ):
                listener.enterOptionCompareDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptionCompareDirective" ):
                listener.exitOptionCompareDirective(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOptionCompareDirective" ):
                return visitor.visitOptionCompareDirective(self)
            else:
                return visitor.visitChildren(self)




    def optionCompareDirective(self):

        localctx = vbaParser.OptionCompareDirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_optionCompareDirective)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1037
            self.match(vbaParser.OPTION)
            self.state = 1038
            self.wsc()
            self.state = 1039
            self.match(vbaParser.COMPARE)
            self.state = 1040
            self.wsc()
            self.state = 1041
            _la = self._input.LA(1)
            if not(_la==13 or _la==177):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptionBaseDirectiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPTION(self):
            return self.getToken(vbaParser.OPTION, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def BASE(self):
            return self.getToken(vbaParser.BASE, 0)

        def INTEGERLITERAL(self):
            return self.getToken(vbaParser.INTEGERLITERAL, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_optionBaseDirective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptionBaseDirective" ):
                listener.enterOptionBaseDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptionBaseDirective" ):
                listener.exitOptionBaseDirective(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOptionBaseDirective" ):
                return visitor.visitOptionBaseDirective(self)
            else:
                return visitor.visitChildren(self)




    def optionBaseDirective(self):

        localctx = vbaParser.OptionBaseDirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_optionBaseDirective)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1043
            self.match(vbaParser.OPTION)
            self.state = 1044
            self.wsc()
            self.state = 1045
            self.match(vbaParser.BASE)
            self.state = 1046
            self.wsc()
            self.state = 1047
            self.match(vbaParser.INTEGERLITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptionExplicitDirectiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPTION(self):
            return self.getToken(vbaParser.OPTION, 0)

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def EXPLICIT(self):
            return self.getToken(vbaParser.EXPLICIT, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_optionExplicitDirective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptionExplicitDirective" ):
                listener.enterOptionExplicitDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptionExplicitDirective" ):
                listener.exitOptionExplicitDirective(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOptionExplicitDirective" ):
                return visitor.visitOptionExplicitDirective(self)
            else:
                return visitor.visitChildren(self)




    def optionExplicitDirective(self):

        localctx = vbaParser.OptionExplicitDirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_optionExplicitDirective)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1049
            self.match(vbaParser.OPTION)
            self.state = 1050
            self.wsc()
            self.state = 1051
            self.match(vbaParser.EXPLICIT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptionPrivateDirectiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPTION(self):
            return self.getToken(vbaParser.OPTION, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def PRIVATE(self):
            return self.getToken(vbaParser.PRIVATE, 0)

        def MODULE(self):
            return self.getToken(vbaParser.MODULE, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_optionPrivateDirective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptionPrivateDirective" ):
                listener.enterOptionPrivateDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptionPrivateDirective" ):
                listener.exitOptionPrivateDirective(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOptionPrivateDirective" ):
                return visitor.visitOptionPrivateDirective(self)
            else:
                return visitor.visitChildren(self)




    def optionPrivateDirective(self):

        localctx = vbaParser.OptionPrivateDirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_optionPrivateDirective)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1053
            self.match(vbaParser.OPTION)
            self.state = 1054
            self.wsc()
            self.state = 1055
            self.match(vbaParser.PRIVATE)
            self.state = 1056
            self.wsc()
            self.state = 1057
            self.match(vbaParser.MODULE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefDirectiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def defType(self):
            return self.getTypedRuleContext(vbaParser.DefTypeContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def letterSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.LetterSpecContext)
            else:
                return self.getTypedRuleContext(vbaParser.LetterSpecContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.COMMA)
            else:
                return self.getToken(vbaParser.COMMA, i)

        def getRuleIndex(self):
            return vbaParser.RULE_defDirective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefDirective" ):
                listener.enterDefDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefDirective" ):
                listener.exitDefDirective(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefDirective" ):
                return visitor.visitDefDirective(self)
            else:
                return visitor.visitChildren(self)




    def defDirective(self):

        localctx = vbaParser.DefDirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_defDirective)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1059
            self.defType()
            self.state = 1060
            self.match(vbaParser.WS)
            self.state = 1061
            self.letterSpec()
            self.state = 1068
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,66,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1062
                    self.match(vbaParser.WS)
                    self.state = 1063
                    self.match(vbaParser.COMMA)
                    self.state = 1064
                    self.match(vbaParser.WS)
                    self.state = 1065
                    self.letterSpec() 
                self.state = 1070
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,66,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LetterSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def singleLetter(self):
            return self.getTypedRuleContext(vbaParser.SingleLetterContext,0)


        def universalLetterRange(self):
            return self.getTypedRuleContext(vbaParser.UniversalLetterRangeContext,0)


        def letterRange(self):
            return self.getTypedRuleContext(vbaParser.LetterRangeContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_letterSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLetterSpec" ):
                listener.enterLetterSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLetterSpec" ):
                listener.exitLetterSpec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLetterSpec" ):
                return visitor.visitLetterSpec(self)
            else:
                return visitor.visitChildren(self)




    def letterSpec(self):

        localctx = vbaParser.LetterSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_letterSpec)
        try:
            self.state = 1074
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1071
                self.singleLetter()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1072
                self.universalLetterRange()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1073
                self.letterRange()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleLetterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_singleLetter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleLetter" ):
                listener.enterSingleLetter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleLetter" ):
                listener.exitSingleLetter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleLetter" ):
                return visitor.visitSingleLetter(self)
            else:
                return visitor.visitChildren(self)




    def singleLetter(self):

        localctx = vbaParser.SingleLetterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_singleLetter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1076
            self.ambiguousIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UniversalLetterRangeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def upperCaseA(self):
            return self.getTypedRuleContext(vbaParser.UpperCaseAContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def MINUS(self):
            return self.getToken(vbaParser.MINUS, 0)

        def upperCaseZ(self):
            return self.getTypedRuleContext(vbaParser.UpperCaseZContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_universalLetterRange

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUniversalLetterRange" ):
                listener.enterUniversalLetterRange(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUniversalLetterRange" ):
                listener.exitUniversalLetterRange(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUniversalLetterRange" ):
                return visitor.visitUniversalLetterRange(self)
            else:
                return visitor.visitChildren(self)




    def universalLetterRange(self):

        localctx = vbaParser.UniversalLetterRangeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_universalLetterRange)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1078
            self.upperCaseA()
            self.state = 1079
            self.match(vbaParser.WS)
            self.state = 1080
            self.match(vbaParser.MINUS)
            self.state = 1081
            self.match(vbaParser.WS)
            self.state = 1082
            self.upperCaseZ()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UpperCaseAContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_upperCaseA

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpperCaseA" ):
                listener.enterUpperCaseA(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpperCaseA" ):
                listener.exitUpperCaseA(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUpperCaseA" ):
                return visitor.visitUpperCaseA(self)
            else:
                return visitor.visitChildren(self)




    def upperCaseA(self):

        localctx = vbaParser.UpperCaseAContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_upperCaseA)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1084
            self.ambiguousIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UpperCaseZContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_upperCaseZ

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpperCaseZ" ):
                listener.enterUpperCaseZ(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpperCaseZ" ):
                listener.exitUpperCaseZ(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUpperCaseZ" ):
                return visitor.visitUpperCaseZ(self)
            else:
                return visitor.visitChildren(self)




    def upperCaseZ(self):

        localctx = vbaParser.UpperCaseZContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_upperCaseZ)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1086
            self.ambiguousIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LetterRangeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def firstLetter(self):
            return self.getTypedRuleContext(vbaParser.FirstLetterContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def MINUS(self):
            return self.getToken(vbaParser.MINUS, 0)

        def lastLetter(self):
            return self.getTypedRuleContext(vbaParser.LastLetterContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_letterRange

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLetterRange" ):
                listener.enterLetterRange(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLetterRange" ):
                listener.exitLetterRange(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLetterRange" ):
                return visitor.visitLetterRange(self)
            else:
                return visitor.visitChildren(self)




    def letterRange(self):

        localctx = vbaParser.LetterRangeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_letterRange)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1088
            self.firstLetter()
            self.state = 1089
            self.match(vbaParser.WS)
            self.state = 1090
            self.match(vbaParser.MINUS)
            self.state = 1091
            self.match(vbaParser.WS)
            self.state = 1092
            self.lastLetter()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FirstLetterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_firstLetter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFirstLetter" ):
                listener.enterFirstLetter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFirstLetter" ):
                listener.exitFirstLetter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFirstLetter" ):
                return visitor.visitFirstLetter(self)
            else:
                return visitor.visitChildren(self)




    def firstLetter(self):

        localctx = vbaParser.FirstLetterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_firstLetter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1094
            self.ambiguousIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LastLetterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_lastLetter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLastLetter" ):
                listener.enterLastLetter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLastLetter" ):
                listener.exitLastLetter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLastLetter" ):
                return visitor.visitLastLetter(self)
            else:
                return visitor.visitChildren(self)




    def lastLetter(self):

        localctx = vbaParser.LastLetterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_lastLetter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1096
            self.ambiguousIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFBOOL(self):
            return self.getToken(vbaParser.DEFBOOL, 0)

        def DEFBYTE(self):
            return self.getToken(vbaParser.DEFBYTE, 0)

        def DEFCUR(self):
            return self.getToken(vbaParser.DEFCUR, 0)

        def DEFDATE(self):
            return self.getToken(vbaParser.DEFDATE, 0)

        def DEFDBL(self):
            return self.getToken(vbaParser.DEFDBL, 0)

        def DEFINT(self):
            return self.getToken(vbaParser.DEFINT, 0)

        def DEFLNG(self):
            return self.getToken(vbaParser.DEFLNG, 0)

        def DEFLNGLNG(self):
            return self.getToken(vbaParser.DEFLNGLNG, 0)

        def DEFLNGPTR(self):
            return self.getToken(vbaParser.DEFLNGPTR, 0)

        def DEFOBJ(self):
            return self.getToken(vbaParser.DEFOBJ, 0)

        def DEFSNG(self):
            return self.getToken(vbaParser.DEFSNG, 0)

        def DEFSTR(self):
            return self.getToken(vbaParser.DEFSTR, 0)

        def DEFVAR(self):
            return self.getToken(vbaParser.DEFVAR, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_defType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefType" ):
                listener.enterDefType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefType" ):
                listener.exitDefType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefType" ):
                return visitor.visitDefType(self)
            else:
                return visitor.visitChildren(self)




    def defType(self):

        localctx = vbaParser.DefTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_defType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1098
            _la = self._input.LA(1)
            if not(((((_la - 53)) & ~0x3f) == 0 and ((1 << (_la - 53)) & 16351) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommonModuleDeclarationElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def moduleVariableDeclaration(self):
            return self.getTypedRuleContext(vbaParser.ModuleVariableDeclarationContext,0)


        def privateConstDeclaration(self):
            return self.getTypedRuleContext(vbaParser.PrivateConstDeclarationContext,0)


        def privateTypeDeclaration(self):
            return self.getTypedRuleContext(vbaParser.PrivateTypeDeclarationContext,0)


        def privateEnumDeclaration(self):
            return self.getTypedRuleContext(vbaParser.PrivateEnumDeclarationContext,0)


        def publicEnumDeclaration(self):
            return self.getTypedRuleContext(vbaParser.PublicEnumDeclarationContext,0)


        def privateExternalProcedureDeclaration(self):
            return self.getTypedRuleContext(vbaParser.PrivateExternalProcedureDeclarationContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_commonModuleDeclarationElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommonModuleDeclarationElement" ):
                listener.enterCommonModuleDeclarationElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommonModuleDeclarationElement" ):
                listener.exitCommonModuleDeclarationElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCommonModuleDeclarationElement" ):
                return visitor.visitCommonModuleDeclarationElement(self)
            else:
                return visitor.visitChildren(self)




    def commonModuleDeclarationElement(self):

        localctx = vbaParser.CommonModuleDeclarationElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_commonModuleDeclarationElement)
        try:
            self.state = 1106
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1100
                self.moduleVariableDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1101
                self.privateConstDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1102
                self.privateTypeDeclaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1103
                self.privateEnumDeclaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1104
                self.publicEnumDeclaration()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1105
                self.privateExternalProcedureDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleVariableDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def publicVariableDecalation(self):
            return self.getTypedRuleContext(vbaParser.PublicVariableDecalationContext,0)


        def privateVariableDeclaration(self):
            return self.getTypedRuleContext(vbaParser.PrivateVariableDeclarationContext,0)


        def variableHelpAttribute(self):
            return self.getTypedRuleContext(vbaParser.VariableHelpAttributeContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_moduleVariableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleVariableDeclaration" ):
                listener.enterModuleVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleVariableDeclaration" ):
                listener.exitModuleVariableDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModuleVariableDeclaration" ):
                return visitor.visitModuleVariableDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def moduleVariableDeclaration(self):

        localctx = vbaParser.ModuleVariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_moduleVariableDeclaration)
        try:
            self.state = 1111
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [150]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1108
                self.publicVariableDecalation()
                pass
            elif token in [67, 146]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1109
                self.privateVariableDeclaration()
                pass
            elif token in [7]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1110
                self.variableHelpAttribute()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableHelpAttributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ATTRIBUTE(self):
            return self.getToken(vbaParser.ATTRIBUTE, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def PERIOD(self):
            return self.getToken(vbaParser.PERIOD, 0)

        def VB_VARHELPID(self):
            return self.getToken(vbaParser.VB_VARHELPID, 0)

        def EQ(self):
            return self.getToken(vbaParser.EQ, 0)

        def INTEGERLITERAL(self):
            return self.getToken(vbaParser.INTEGERLITERAL, 0)

        def MINUS(self):
            return self.getToken(vbaParser.MINUS, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_variableHelpAttribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableHelpAttribute" ):
                listener.enterVariableHelpAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableHelpAttribute" ):
                listener.exitVariableHelpAttribute(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableHelpAttribute" ):
                return visitor.visitVariableHelpAttribute(self)
            else:
                return visitor.visitChildren(self)




    def variableHelpAttribute(self):

        localctx = vbaParser.VariableHelpAttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_variableHelpAttribute)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1113
            self.match(vbaParser.ATTRIBUTE)
            self.state = 1114
            self.match(vbaParser.WS)
            self.state = 1115
            self.ambiguousIdentifier()
            self.state = 1116
            self.match(vbaParser.PERIOD)
            self.state = 1117
            self.match(vbaParser.VB_VARHELPID)
            self.state = 1119
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==278:
                self.state = 1118
                self.match(vbaParser.WS)


            self.state = 1121
            self.match(vbaParser.EQ)
            self.state = 1123
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==278:
                self.state = 1122
                self.match(vbaParser.WS)


            self.state = 1126
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==251:
                self.state = 1125
                self.match(vbaParser.MINUS)


            self.state = 1128
            self.match(vbaParser.INTEGERLITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GlobalVariableDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GLOBAL(self):
            return self.getToken(vbaParser.GLOBAL, 0)

        def WS(self):
            return self.getToken(vbaParser.WS, 0)

        def variableDeclarationList(self):
            return self.getTypedRuleContext(vbaParser.VariableDeclarationListContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_globalVariableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobalVariableDeclaration" ):
                listener.enterGlobalVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobalVariableDeclaration" ):
                listener.exitGlobalVariableDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGlobalVariableDeclaration" ):
                return visitor.visitGlobalVariableDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def globalVariableDeclaration(self):

        localctx = vbaParser.GlobalVariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_globalVariableDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1130
            self.match(vbaParser.GLOBAL)
            self.state = 1131
            self.match(vbaParser.WS)
            self.state = 1132
            self.variableDeclarationList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PublicVariableDecalationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PUBLIC(self):
            return self.getToken(vbaParser.PUBLIC, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def moduleVariableDeclarationList(self):
            return self.getTypedRuleContext(vbaParser.ModuleVariableDeclarationListContext,0)


        def SHARED(self):
            return self.getToken(vbaParser.SHARED, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_publicVariableDecalation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPublicVariableDecalation" ):
                listener.enterPublicVariableDecalation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPublicVariableDecalation" ):
                listener.exitPublicVariableDecalation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPublicVariableDecalation" ):
                return visitor.visitPublicVariableDecalation(self)
            else:
                return visitor.visitChildren(self)




    def publicVariableDecalation(self):

        localctx = vbaParser.PublicVariableDecalationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_publicVariableDecalation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1134
            self.match(vbaParser.PUBLIC)
            self.state = 1137
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
            if la_ == 1:
                self.state = 1135
                self.match(vbaParser.WS)
                self.state = 1136
                self.match(vbaParser.SHARED)


            self.state = 1139
            self.match(vbaParser.WS)
            self.state = 1140
            self.moduleVariableDeclarationList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivateVariableDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def moduleVariableDeclarationList(self):
            return self.getTypedRuleContext(vbaParser.ModuleVariableDeclarationListContext,0)


        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def PRIVATE(self):
            return self.getToken(vbaParser.PRIVATE, 0)

        def DIM(self):
            return self.getToken(vbaParser.DIM, 0)

        def SHARED(self):
            return self.getToken(vbaParser.SHARED, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_privateVariableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivateVariableDeclaration" ):
                listener.enterPrivateVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivateVariableDeclaration" ):
                listener.exitPrivateVariableDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrivateVariableDeclaration" ):
                return visitor.visitPrivateVariableDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def privateVariableDeclaration(self):

        localctx = vbaParser.PrivateVariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_privateVariableDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1142
            _la = self._input.LA(1)
            if not(_la==67 or _la==146):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1143
            self.wsc()
            self.state = 1147
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==166:
                self.state = 1145
                self.match(vbaParser.SHARED)
                self.state = 1146
                self.wsc()


            self.state = 1149
            self.moduleVariableDeclarationList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleVariableDeclarationListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def witheventsVariableDcl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WitheventsVariableDclContext)
            else:
                return self.getTypedRuleContext(vbaParser.WitheventsVariableDclContext,i)


        def variableDcl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.VariableDclContext)
            else:
                return self.getTypedRuleContext(vbaParser.VariableDclContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.COMMA)
            else:
                return self.getToken(vbaParser.COMMA, i)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_moduleVariableDeclarationList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleVariableDeclarationList" ):
                listener.enterModuleVariableDeclarationList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleVariableDeclarationList" ):
                listener.exitModuleVariableDeclarationList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModuleVariableDeclarationList" ):
                return visitor.visitModuleVariableDeclarationList(self)
            else:
                return visitor.visitChildren(self)




    def moduleVariableDeclarationList(self):

        localctx = vbaParser.ModuleVariableDeclarationListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_moduleVariableDeclarationList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1153
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [217]:
                self.state = 1151
                self.witheventsVariableDcl()
                pass
            elif token in [2, 4, 8, 11, 12, 13, 29, 30, 33, 34, 35, 40, 48, 81, 92, 105, 110, 112, 124, 125, 126, 127, 129, 135, 142, 147, 152, 154, 157, 171, 173, 177, 212, 215, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 280]:
                self.state = 1152
                self.variableDcl()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1168
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,79,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1156
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==271 or _la==278:
                        self.state = 1155
                        self.wsc()


                    self.state = 1158
                    self.match(vbaParser.COMMA)
                    self.state = 1160
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==271 or _la==278:
                        self.state = 1159
                        self.wsc()


                    self.state = 1164
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [217]:
                        self.state = 1162
                        self.witheventsVariableDcl()
                        pass
                    elif token in [2, 4, 8, 11, 12, 13, 29, 30, 33, 34, 35, 40, 48, 81, 92, 105, 110, 112, 124, 125, 126, 127, 129, 135, 142, 147, 152, 154, 157, 171, 173, 177, 212, 215, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 280]:
                        self.state = 1163
                        self.variableDcl()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 1170
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,79,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclarationListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDcl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.VariableDclContext)
            else:
                return self.getTypedRuleContext(vbaParser.VariableDclContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.COMMA)
            else:
                return self.getToken(vbaParser.COMMA, i)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_variableDeclarationList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclarationList" ):
                listener.enterVariableDeclarationList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclarationList" ):
                listener.exitVariableDeclarationList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableDeclarationList" ):
                return visitor.visitVariableDeclarationList(self)
            else:
                return visitor.visitChildren(self)




    def variableDeclarationList(self):

        localctx = vbaParser.VariableDeclarationListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_variableDeclarationList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1171
            self.variableDcl()
            self.state = 1182
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,82,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1173
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==271 or _la==278:
                        self.state = 1172
                        self.wsc()


                    self.state = 1175
                    self.match(vbaParser.COMMA)
                    self.state = 1177
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==271 or _la==278:
                        self.state = 1176
                        self.wsc()


                    self.state = 1179
                    self.variableDcl() 
                self.state = 1184
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,82,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typedVariableDcl(self):
            return self.getTypedRuleContext(vbaParser.TypedVariableDclContext,0)


        def untypedVariableDcl(self):
            return self.getTypedRuleContext(vbaParser.UntypedVariableDclContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_variableDcl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDcl" ):
                listener.enterVariableDcl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDcl" ):
                listener.exitVariableDcl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableDcl" ):
                return visitor.visitVariableDcl(self)
            else:
                return visitor.visitChildren(self)




    def variableDcl(self):

        localctx = vbaParser.VariableDclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_variableDcl)
        try:
            self.state = 1187
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1185
                self.typedVariableDcl()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1186
                self.untypedVariableDcl()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypedVariableDclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typedName(self):
            return self.getTypedRuleContext(vbaParser.TypedNameContext,0)


        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def arrayDim(self):
            return self.getTypedRuleContext(vbaParser.ArrayDimContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_typedVariableDcl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypedVariableDcl" ):
                listener.enterTypedVariableDcl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypedVariableDcl" ):
                listener.exitTypedVariableDcl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypedVariableDcl" ):
                return visitor.visitTypedVariableDcl(self)
            else:
                return visitor.visitChildren(self)




    def typedVariableDcl(self):

        localctx = vbaParser.TypedVariableDclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_typedVariableDcl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1189
            self.typedName()
            self.state = 1191
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
            if la_ == 1:
                self.state = 1190
                self.wsc()


            self.state = 1194
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==249:
                self.state = 1193
                self.arrayDim()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UntypedVariableDclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def arrayClause(self):
            return self.getTypedRuleContext(vbaParser.ArrayClauseContext,0)


        def asClause(self):
            return self.getTypedRuleContext(vbaParser.AsClauseContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_untypedVariableDcl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUntypedVariableDcl" ):
                listener.enterUntypedVariableDcl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUntypedVariableDcl" ):
                listener.exitUntypedVariableDcl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUntypedVariableDcl" ):
                return visitor.visitUntypedVariableDcl(self)
            else:
                return visitor.visitChildren(self)




    def untypedVariableDcl(self):

        localctx = vbaParser.UntypedVariableDclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_untypedVariableDcl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1196
            self.ambiguousIdentifier()
            self.state = 1198
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
            if la_ == 1:
                self.state = 1197
                self.wsc()


            self.state = 1202
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [249]:
                self.state = 1200
                self.arrayClause()
                pass
            elif token in [10]:
                self.state = 1201
                self.asClause()
                pass
            elif token in [-1, 74, 87, 89, 91, 146, 147, 150, 170, 175, 240, 271, 272, 273, 274, 276, 278]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arrayDim(self):
            return self.getTypedRuleContext(vbaParser.ArrayDimContext,0)


        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def asClause(self):
            return self.getTypedRuleContext(vbaParser.AsClauseContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_arrayClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayClause" ):
                listener.enterArrayClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayClause" ):
                listener.exitArrayClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayClause" ):
                return visitor.visitArrayClause(self)
            else:
                return visitor.visitChildren(self)




    def arrayClause(self):

        localctx = vbaParser.ArrayClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_arrayClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1204
            self.arrayDim()
            self.state = 1208
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
            if la_ == 1:
                self.state = 1205
                self.wsc()
                self.state = 1206
                self.asClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AsClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def asAutoObject(self):
            return self.getTypedRuleContext(vbaParser.AsAutoObjectContext,0)


        def asType(self):
            return self.getTypedRuleContext(vbaParser.AsTypeContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_asClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAsClause" ):
                listener.enterAsClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAsClause" ):
                listener.exitAsClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAsClause" ):
                return visitor.visitAsClause(self)
            else:
                return visitor.visitChildren(self)




    def asClause(self):

        localctx = vbaParser.AsClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_asClause)
        try:
            self.state = 1212
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1210
                self.asAutoObject()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1211
                self.asType()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WitheventsVariableDclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITHEVENTS(self):
            return self.getToken(vbaParser.WITHEVENTS, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def AS(self):
            return self.getToken(vbaParser.AS, 0)

        def classTypeName(self):
            return self.getTypedRuleContext(vbaParser.ClassTypeNameContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_witheventsVariableDcl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWitheventsVariableDcl" ):
                listener.enterWitheventsVariableDcl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWitheventsVariableDcl" ):
                listener.exitWitheventsVariableDcl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWitheventsVariableDcl" ):
                return visitor.visitWitheventsVariableDcl(self)
            else:
                return visitor.visitChildren(self)




    def witheventsVariableDcl(self):

        localctx = vbaParser.WitheventsVariableDclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_witheventsVariableDcl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1214
            self.match(vbaParser.WITHEVENTS)
            self.state = 1215
            self.wsc()
            self.state = 1216
            self.ambiguousIdentifier()
            self.state = 1217
            self.wsc()
            self.state = 1218
            self.match(vbaParser.AS)
            self.state = 1220
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==271 or _la==278:
                self.state = 1219
                self.wsc()


            self.state = 1222
            self.classTypeName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassTypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def definedTypeExpression(self):
            return self.getTypedRuleContext(vbaParser.DefinedTypeExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_classTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassTypeName" ):
                listener.enterClassTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassTypeName" ):
                listener.exitClassTypeName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassTypeName" ):
                return visitor.visitClassTypeName(self)
            else:
                return visitor.visitChildren(self)




    def classTypeName(self):

        localctx = vbaParser.ClassTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_classTypeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1224
            self.definedTypeExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayDimContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(vbaParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(vbaParser.RPAREN, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def boundsList(self):
            return self.getTypedRuleContext(vbaParser.BoundsListContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_arrayDim

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayDim" ):
                listener.enterArrayDim(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayDim" ):
                listener.exitArrayDim(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayDim" ):
                return visitor.visitArrayDim(self)
            else:
                return visitor.visitChildren(self)




    def arrayDim(self):

        localctx = vbaParser.ArrayDimContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_arrayDim)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1226
            self.match(vbaParser.LPAREN)
            self.state = 1228
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
            if la_ == 1:
                self.state = 1227
                self.wsc()


            self.state = 1231
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
            if la_ == 1:
                self.state = 1230
                self.boundsList()


            self.state = 1234
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==271 or _la==278:
                self.state = 1233
                self.wsc()


            self.state = 1236
            self.match(vbaParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BoundsListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dimSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.DimSpecContext)
            else:
                return self.getTypedRuleContext(vbaParser.DimSpecContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.COMMA)
            else:
                return self.getToken(vbaParser.COMMA, i)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_boundsList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoundsList" ):
                listener.enterBoundsList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoundsList" ):
                listener.exitBoundsList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBoundsList" ):
                return visitor.visitBoundsList(self)
            else:
                return visitor.visitChildren(self)




    def boundsList(self):

        localctx = vbaParser.BoundsListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_boundsList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1238
            self.dimSpec()
            self.state = 1249
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,96,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1240
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==271 or _la==278:
                        self.state = 1239
                        self.wsc()


                    self.state = 1242
                    self.match(vbaParser.COMMA)
                    self.state = 1244
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
                    if la_ == 1:
                        self.state = 1243
                        self.wsc()


                    self.state = 1246
                    self.dimSpec() 
                self.state = 1251
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,96,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DimSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def upperBound(self):
            return self.getTypedRuleContext(vbaParser.UpperBoundContext,0)


        def lowerBound(self):
            return self.getTypedRuleContext(vbaParser.LowerBoundContext,0)


        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_dimSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDimSpec" ):
                listener.enterDimSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDimSpec" ):
                listener.exitDimSpec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDimSpec" ):
                return visitor.visitDimSpec(self)
            else:
                return visitor.visitChildren(self)




    def dimSpec(self):

        localctx = vbaParser.DimSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_dimSpec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1253
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
            if la_ == 1:
                self.state = 1252
                self.lowerBound()


            self.state = 1256
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==271 or _la==278:
                self.state = 1255
                self.wsc()


            self.state = 1258
            self.upperBound()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LowerBoundContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constantExpression(self):
            return self.getTypedRuleContext(vbaParser.ConstantExpressionContext,0)


        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def TO(self):
            return self.getToken(vbaParser.TO, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_lowerBound

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLowerBound" ):
                listener.enterLowerBound(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLowerBound" ):
                listener.exitLowerBound(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLowerBound" ):
                return visitor.visitLowerBound(self)
            else:
                return visitor.visitChildren(self)




    def lowerBound(self):

        localctx = vbaParser.LowerBoundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_lowerBound)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1260
            self.constantExpression()
            self.state = 1261
            self.wsc()
            self.state = 1262
            self.match(vbaParser.TO)
            self.state = 1263
            self.wsc()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UpperBoundContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constantExpression(self):
            return self.getTypedRuleContext(vbaParser.ConstantExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_upperBound

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpperBound" ):
                listener.enterUpperBound(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpperBound" ):
                listener.exitUpperBound(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUpperBound" ):
                return visitor.visitUpperBound(self)
            else:
                return visitor.visitChildren(self)




    def upperBound(self):

        localctx = vbaParser.UpperBoundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_upperBound)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1265
            self.constantExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AsAutoObjectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(vbaParser.AS, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def NEW(self):
            return self.getToken(vbaParser.NEW, 0)

        def classTypeName(self):
            return self.getTypedRuleContext(vbaParser.ClassTypeNameContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_asAutoObject

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAsAutoObject" ):
                listener.enterAsAutoObject(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAsAutoObject" ):
                listener.exitAsAutoObject(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAsAutoObject" ):
                return visitor.visitAsAutoObject(self)
            else:
                return visitor.visitChildren(self)




    def asAutoObject(self):

        localctx = vbaParser.AsAutoObjectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_asAutoObject)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1267
            self.match(vbaParser.AS)
            self.state = 1268
            self.match(vbaParser.WS)
            self.state = 1269
            self.match(vbaParser.NEW)
            self.state = 1270
            self.match(vbaParser.WS)
            self.state = 1271
            self.classTypeName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AsTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(vbaParser.AS, 0)

        def WS(self):
            return self.getToken(vbaParser.WS, 0)

        def typeSpec(self):
            return self.getTypedRuleContext(vbaParser.TypeSpecContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_asType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAsType" ):
                listener.enterAsType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAsType" ):
                listener.exitAsType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAsType" ):
                return visitor.visitAsType(self)
            else:
                return visitor.visitChildren(self)




    def asType(self):

        localctx = vbaParser.AsTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_asType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1273
            self.match(vbaParser.AS)
            self.state = 1274
            self.match(vbaParser.WS)
            self.state = 1275
            self.typeSpec()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fixedLengthStringSpec(self):
            return self.getTypedRuleContext(vbaParser.FixedLengthStringSpecContext,0)


        def typeExpression(self):
            return self.getTypedRuleContext(vbaParser.TypeExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_typeSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeSpec" ):
                listener.enterTypeSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeSpec" ):
                listener.exitTypeSpec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeSpec" ):
                return visitor.visitTypeSpec(self)
            else:
                return visitor.visitChildren(self)




    def typeSpec(self):

        localctx = vbaParser.TypeSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_typeSpec)
        try:
            self.state = 1279
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,99,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1277
                self.fixedLengthStringSpec()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1278
                self.typeExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FixedLengthStringSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(vbaParser.STRING, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def MULT(self):
            return self.getToken(vbaParser.MULT, 0)

        def stringLength(self):
            return self.getTypedRuleContext(vbaParser.StringLengthContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_fixedLengthStringSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFixedLengthStringSpec" ):
                listener.enterFixedLengthStringSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFixedLengthStringSpec" ):
                listener.exitFixedLengthStringSpec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFixedLengthStringSpec" ):
                return visitor.visitFixedLengthStringSpec(self)
            else:
                return visitor.visitChildren(self)




    def fixedLengthStringSpec(self):

        localctx = vbaParser.FixedLengthStringSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_fixedLengthStringSpec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1281
            self.match(vbaParser.STRING)
            self.state = 1282
            self.match(vbaParser.WS)
            self.state = 1283
            self.match(vbaParser.MULT)
            self.state = 1284
            self.match(vbaParser.WS)
            self.state = 1285
            self.stringLength()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringLengthContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGERLITERAL(self):
            return self.getToken(vbaParser.INTEGERLITERAL, 0)

        def constantName(self):
            return self.getTypedRuleContext(vbaParser.ConstantNameContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_stringLength

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLength" ):
                listener.enterStringLength(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLength" ):
                listener.exitStringLength(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringLength" ):
                return visitor.visitStringLength(self)
            else:
                return visitor.visitChildren(self)




    def stringLength(self):

        localctx = vbaParser.StringLengthContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_stringLength)
        try:
            self.state = 1289
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [268]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1287
                self.match(vbaParser.INTEGERLITERAL)
                pass
            elif token in [1, 2, 4, 8, 9, 11, 12, 13, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 42, 43, 44, 45, 48, 50, 69, 81, 86, 92, 99, 100, 101, 105, 106, 107, 108, 110, 112, 123, 124, 125, 126, 127, 129, 135, 142, 147, 148, 152, 154, 157, 161, 165, 171, 173, 177, 183, 212, 215, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 247, 280, 281]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1288
                self.constantName()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleNameExpression(self):
            return self.getTypedRuleContext(vbaParser.SimpleNameExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_constantName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantName" ):
                listener.enterConstantName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantName" ):
                listener.exitConstantName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstantName" ):
                return visitor.visitConstantName(self)
            else:
                return visitor.visitChildren(self)




    def constantName(self):

        localctx = vbaParser.ConstantNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_constantName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1291
            self.simpleNameExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PublicConstDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def moduleConstDeclaration(self):
            return self.getTypedRuleContext(vbaParser.ModuleConstDeclarationContext,0)


        def GLOBAL(self):
            return self.getToken(vbaParser.GLOBAL, 0)

        def PUBLIC(self):
            return self.getToken(vbaParser.PUBLIC, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_publicConstDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPublicConstDeclaration" ):
                listener.enterPublicConstDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPublicConstDeclaration" ):
                listener.exitPublicConstDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPublicConstDeclaration" ):
                return visitor.visitPublicConstDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def publicConstDeclaration(self):

        localctx = vbaParser.PublicConstDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_publicConstDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1293
            _la = self._input.LA(1)
            if not(_la==91 or _la==150):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1294
            self.wsc()
            self.state = 1295
            self.moduleConstDeclaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivateConstDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def moduleConstDeclaration(self):
            return self.getTypedRuleContext(vbaParser.ModuleConstDeclarationContext,0)


        def PRIVATE(self):
            return self.getToken(vbaParser.PRIVATE, 0)

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_privateConstDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivateConstDeclaration" ):
                listener.enterPrivateConstDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivateConstDeclaration" ):
                listener.exitPrivateConstDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrivateConstDeclaration" ):
                return visitor.visitPrivateConstDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def privateConstDeclaration(self):

        localctx = vbaParser.PrivateConstDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_privateConstDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1299
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==146:
                self.state = 1297
                self.match(vbaParser.PRIVATE)
                self.state = 1298
                self.wsc()


            self.state = 1301
            self.moduleConstDeclaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleConstDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constDeclaration(self):
            return self.getTypedRuleContext(vbaParser.ConstDeclarationContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_moduleConstDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleConstDeclaration" ):
                listener.enterModuleConstDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleConstDeclaration" ):
                listener.exitModuleConstDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModuleConstDeclaration" ):
                return visitor.visitModuleConstDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def moduleConstDeclaration(self):

        localctx = vbaParser.ModuleConstDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_moduleConstDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1303
            self.constDeclaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONST(self):
            return self.getToken(vbaParser.CONST, 0)

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def constItemList(self):
            return self.getTypedRuleContext(vbaParser.ConstItemListContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_constDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstDeclaration" ):
                listener.enterConstDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstDeclaration" ):
                listener.exitConstDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstDeclaration" ):
                return visitor.visitConstDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def constDeclaration(self):

        localctx = vbaParser.ConstDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_constDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1305
            self.match(vbaParser.CONST)
            self.state = 1306
            self.wsc()
            self.state = 1307
            self.constItemList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstItemListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ConstItemContext)
            else:
                return self.getTypedRuleContext(vbaParser.ConstItemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.COMMA)
            else:
                return self.getToken(vbaParser.COMMA, i)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_constItemList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstItemList" ):
                listener.enterConstItemList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstItemList" ):
                listener.exitConstItemList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstItemList" ):
                return visitor.visitConstItemList(self)
            else:
                return visitor.visitChildren(self)




    def constItemList(self):

        localctx = vbaParser.ConstItemListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_constItemList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1309
            self.constItem()
            self.state = 1320
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,104,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1311
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==271 or _la==278:
                        self.state = 1310
                        self.wsc()


                    self.state = 1313
                    self.match(vbaParser.COMMA)
                    self.state = 1315
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==271 or _la==278:
                        self.state = 1314
                        self.wsc()


                    self.state = 1317
                    self.constItem() 
                self.state = 1322
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,104,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typedNameConstItem(self):
            return self.getTypedRuleContext(vbaParser.TypedNameConstItemContext,0)


        def untypedNameConstItem(self):
            return self.getTypedRuleContext(vbaParser.UntypedNameConstItemContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_constItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstItem" ):
                listener.enterConstItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstItem" ):
                listener.exitConstItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstItem" ):
                return visitor.visitConstItem(self)
            else:
                return visitor.visitChildren(self)




    def constItem(self):

        localctx = vbaParser.ConstItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_constItem)
        try:
            self.state = 1325
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1323
                self.typedNameConstItem()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1324
                self.untypedNameConstItem()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypedNameConstItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typedName(self):
            return self.getTypedRuleContext(vbaParser.TypedNameContext,0)


        def EQ(self):
            return self.getToken(vbaParser.EQ, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(vbaParser.ConstantExpressionContext,0)


        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_typedNameConstItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypedNameConstItem" ):
                listener.enterTypedNameConstItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypedNameConstItem" ):
                listener.exitTypedNameConstItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypedNameConstItem" ):
                return visitor.visitTypedNameConstItem(self)
            else:
                return visitor.visitChildren(self)




    def typedNameConstItem(self):

        localctx = vbaParser.TypedNameConstItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_typedNameConstItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1327
            self.typedName()
            self.state = 1329
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==271 or _la==278:
                self.state = 1328
                self.wsc()


            self.state = 1331
            self.match(vbaParser.EQ)
            self.state = 1333
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==271 or _la==278:
                self.state = 1332
                self.wsc()


            self.state = 1335
            self.constantExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UntypedNameConstItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def EQ(self):
            return self.getToken(vbaParser.EQ, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(vbaParser.ConstantExpressionContext,0)


        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def constAsClause(self):
            return self.getTypedRuleContext(vbaParser.ConstAsClauseContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_untypedNameConstItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUntypedNameConstItem" ):
                listener.enterUntypedNameConstItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUntypedNameConstItem" ):
                listener.exitUntypedNameConstItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUntypedNameConstItem" ):
                return visitor.visitUntypedNameConstItem(self)
            else:
                return visitor.visitChildren(self)




    def untypedNameConstItem(self):

        localctx = vbaParser.UntypedNameConstItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_untypedNameConstItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1337
            self.ambiguousIdentifier()
            self.state = 1341
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
            if la_ == 1:
                self.state = 1338
                self.wsc()
                self.state = 1339
                self.constAsClause()


            self.state = 1344
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==271 or _la==278:
                self.state = 1343
                self.wsc()


            self.state = 1346
            self.match(vbaParser.EQ)
            self.state = 1348
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==271 or _la==278:
                self.state = 1347
                self.wsc()


            self.state = 1350
            self.constantExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstAsClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(vbaParser.AS, 0)

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def builtinType(self):
            return self.getTypedRuleContext(vbaParser.BuiltinTypeContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_constAsClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstAsClause" ):
                listener.enterConstAsClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstAsClause" ):
                listener.exitConstAsClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstAsClause" ):
                return visitor.visitConstAsClause(self)
            else:
                return visitor.visitChildren(self)




    def constAsClause(self):

        localctx = vbaParser.ConstAsClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_constAsClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1352
            self.match(vbaParser.AS)
            self.state = 1353
            self.wsc()
            self.state = 1354
            self.builtinType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PublicTypeDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def udtDeclaration(self):
            return self.getTypedRuleContext(vbaParser.UdtDeclarationContext,0)


        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def GLOBAL(self):
            return self.getToken(vbaParser.GLOBAL, 0)

        def PUBLIC(self):
            return self.getToken(vbaParser.PUBLIC, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_publicTypeDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPublicTypeDeclaration" ):
                listener.enterPublicTypeDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPublicTypeDeclaration" ):
                listener.exitPublicTypeDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPublicTypeDeclaration" ):
                return visitor.visitPublicTypeDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def publicTypeDeclaration(self):

        localctx = vbaParser.PublicTypeDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_publicTypeDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1358
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==91 or _la==150:
                self.state = 1356
                _la = self._input.LA(1)
                if not(_la==91 or _la==150):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1357
                self.wsc()


            self.state = 1360
            self.udtDeclaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivateTypeDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRIVATE(self):
            return self.getToken(vbaParser.PRIVATE, 0)

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def udtDeclaration(self):
            return self.getTypedRuleContext(vbaParser.UdtDeclarationContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_privateTypeDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivateTypeDeclaration" ):
                listener.enterPrivateTypeDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivateTypeDeclaration" ):
                listener.exitPrivateTypeDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrivateTypeDeclaration" ):
                return visitor.visitPrivateTypeDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def privateTypeDeclaration(self):

        localctx = vbaParser.PrivateTypeDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_privateTypeDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1362
            self.match(vbaParser.PRIVATE)
            self.state = 1363
            self.wsc()
            self.state = 1364
            self.udtDeclaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UdtDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPE(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.TYPE)
            else:
                return self.getToken(vbaParser.TYPE, i)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def untypedName(self):
            return self.getTypedRuleContext(vbaParser.UntypedNameContext,0)


        def udtMemberList(self):
            return self.getTypedRuleContext(vbaParser.UdtMemberListContext,0)


        def END(self):
            return self.getToken(vbaParser.END, 0)

        def endOfStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfStatementContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfStatementContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_udtDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUdtDeclaration" ):
                listener.enterUdtDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUdtDeclaration" ):
                listener.exitUdtDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUdtDeclaration" ):
                return visitor.visitUdtDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def udtDeclaration(self):

        localctx = vbaParser.UdtDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_udtDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1366
            self.match(vbaParser.TYPE)
            self.state = 1367
            self.wsc()
            self.state = 1368
            self.untypedName()
            self.state = 1370 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1369
                    self.endOfStatement()

                else:
                    raise NoViableAltException(self)
                self.state = 1372 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,112,self._ctx)

            self.state = 1374
            self.udtMemberList()
            self.state = 1376 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1375
                self.endOfStatement()
                self.state = 1378 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 272)) & ~0x3f) == 0 and ((1 << (_la - 272)) & 87) != 0)):
                    break

            self.state = 1380
            self.match(vbaParser.END)
            self.state = 1381
            self.wsc()
            self.state = 1382
            self.match(vbaParser.TYPE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UdtMemberListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def udtElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.UdtElementContext)
            else:
                return self.getTypedRuleContext(vbaParser.UdtElementContext,i)


        def endOfStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfStatementContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfStatementContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_udtMemberList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUdtMemberList" ):
                listener.enterUdtMemberList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUdtMemberList" ):
                listener.exitUdtMemberList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUdtMemberList" ):
                return visitor.visitUdtMemberList(self)
            else:
                return visitor.visitChildren(self)




    def udtMemberList(self):

        localctx = vbaParser.UdtMemberListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_udtMemberList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1384
            self.udtElement()
            self.state = 1390
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,114,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1385
                    self.endOfStatement()
                    self.state = 1386
                    self.udtElement() 
                self.state = 1392
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,114,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UdtElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def remStatement(self):
            return self.getTypedRuleContext(vbaParser.RemStatementContext,0)


        def udtMember(self):
            return self.getTypedRuleContext(vbaParser.UdtMemberContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_udtElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUdtElement" ):
                listener.enterUdtElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUdtElement" ):
                listener.exitUdtElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUdtElement" ):
                return visitor.visitUdtElement(self)
            else:
                return visitor.visitChildren(self)




    def udtElement(self):

        localctx = vbaParser.UdtElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_udtElement)
        try:
            self.state = 1395
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [273]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1393
                self.remStatement()
                pass
            elif token in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 17, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 280]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1394
                self.udtMember()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UdtMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def reservedNameMemberDcl(self):
            return self.getTypedRuleContext(vbaParser.ReservedNameMemberDclContext,0)


        def untypedNameMemberDcl(self):
            return self.getTypedRuleContext(vbaParser.UntypedNameMemberDclContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_udtMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUdtMember" ):
                listener.enterUdtMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUdtMember" ):
                listener.exitUdtMember(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUdtMember" ):
                return visitor.visitUdtMember(self)
            else:
                return visitor.visitChildren(self)




    def udtMember(self):

        localctx = vbaParser.UdtMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_udtMember)
        try:
            self.state = 1399
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 3, 5, 6, 7, 9, 10, 16, 17, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 36, 37, 38, 39, 41, 42, 43, 44, 45, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 106, 107, 108, 109, 111, 113, 114, 121, 122, 123, 128, 130, 131, 132, 133, 134, 137, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 155, 158, 159, 160, 161, 162, 163, 164, 165, 166, 169, 170, 172, 173, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 213, 214, 216, 217, 218, 219]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1397
                self.reservedNameMemberDcl()
                pass
            elif token in [2, 4, 8, 11, 12, 13, 29, 30, 33, 34, 35, 40, 81, 92, 105, 110, 112, 124, 125, 126, 127, 129, 135, 142, 147, 152, 154, 157, 171, 177, 212, 215, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 280]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1398
                self.untypedNameMemberDcl()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UntypedNameMemberDclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def optionalArrayClause(self):
            return self.getTypedRuleContext(vbaParser.OptionalArrayClauseContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_untypedNameMemberDcl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUntypedNameMemberDcl" ):
                listener.enterUntypedNameMemberDcl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUntypedNameMemberDcl" ):
                listener.exitUntypedNameMemberDcl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUntypedNameMemberDcl" ):
                return visitor.visitUntypedNameMemberDcl(self)
            else:
                return visitor.visitChildren(self)




    def untypedNameMemberDcl(self):

        localctx = vbaParser.UntypedNameMemberDclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_untypedNameMemberDcl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1401
            self.ambiguousIdentifier()
            self.state = 1402
            self.optionalArrayClause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReservedNameMemberDclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def reservedMemberName(self):
            return self.getTypedRuleContext(vbaParser.ReservedMemberNameContext,0)


        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def asClause(self):
            return self.getTypedRuleContext(vbaParser.AsClauseContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_reservedNameMemberDcl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReservedNameMemberDcl" ):
                listener.enterReservedNameMemberDcl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReservedNameMemberDcl" ):
                listener.exitReservedNameMemberDcl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReservedNameMemberDcl" ):
                return visitor.visitReservedNameMemberDcl(self)
            else:
                return visitor.visitChildren(self)




    def reservedNameMemberDcl(self):

        localctx = vbaParser.ReservedNameMemberDclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_reservedNameMemberDcl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1404
            self.reservedMemberName()
            self.state = 1405
            self.wsc()
            self.state = 1406
            self.asClause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptionalArrayClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def asClause(self):
            return self.getTypedRuleContext(vbaParser.AsClauseContext,0)


        def arrayDim(self):
            return self.getTypedRuleContext(vbaParser.ArrayDimContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_optionalArrayClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptionalArrayClause" ):
                listener.enterOptionalArrayClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptionalArrayClause" ):
                listener.exitOptionalArrayClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOptionalArrayClause" ):
                return visitor.visitOptionalArrayClause(self)
            else:
                return visitor.visitChildren(self)




    def optionalArrayClause(self):

        localctx = vbaParser.OptionalArrayClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_optionalArrayClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1409
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==249:
                self.state = 1408
                self.arrayDim()


            self.state = 1411
            self.wsc()
            self.state = 1412
            self.asClause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReservedMemberNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statementKeyword(self):
            return self.getTypedRuleContext(vbaParser.StatementKeywordContext,0)


        def markerKeyword(self):
            return self.getTypedRuleContext(vbaParser.MarkerKeywordContext,0)


        def operatorIdentifier(self):
            return self.getTypedRuleContext(vbaParser.OperatorIdentifierContext,0)


        def specialForm(self):
            return self.getTypedRuleContext(vbaParser.SpecialFormContext,0)


        def reservedName(self):
            return self.getTypedRuleContext(vbaParser.ReservedNameContext,0)


        def literalIdentifier(self):
            return self.getTypedRuleContext(vbaParser.LiteralIdentifierContext,0)


        def reservedForImplementationUse(self):
            return self.getTypedRuleContext(vbaParser.ReservedForImplementationUseContext,0)


        def futureReserved(self):
            return self.getTypedRuleContext(vbaParser.FutureReservedContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_reservedMemberName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReservedMemberName" ):
                listener.enterReservedMemberName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReservedMemberName" ):
                listener.exitReservedMemberName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReservedMemberName" ):
                return visitor.visitReservedMemberName(self)
            else:
                return visitor.visitChildren(self)




    def reservedMemberName(self):

        localctx = vbaParser.ReservedMemberNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_reservedMemberName)
        try:
            self.state = 1422
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,118,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1414
                self.statementKeyword()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1415
                self.markerKeyword()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1416
                self.operatorIdentifier()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1417
                self.specialForm()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1418
                self.reservedName()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1419
                self.literalIdentifier()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1420
                self.reservedForImplementationUse()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1421
                self.futureReserved()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GlobalEnumDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GLOBAL(self):
            return self.getToken(vbaParser.GLOBAL, 0)

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def enumDeclaration(self):
            return self.getTypedRuleContext(vbaParser.EnumDeclarationContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_globalEnumDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobalEnumDeclaration" ):
                listener.enterGlobalEnumDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobalEnumDeclaration" ):
                listener.exitGlobalEnumDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGlobalEnumDeclaration" ):
                return visitor.visitGlobalEnumDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def globalEnumDeclaration(self):

        localctx = vbaParser.GlobalEnumDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_globalEnumDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1424
            self.match(vbaParser.GLOBAL)
            self.state = 1425
            self.wsc()
            self.state = 1426
            self.enumDeclaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PublicEnumDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumDeclaration(self):
            return self.getTypedRuleContext(vbaParser.EnumDeclarationContext,0)


        def PUBLIC(self):
            return self.getToken(vbaParser.PUBLIC, 0)

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_publicEnumDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPublicEnumDeclaration" ):
                listener.enterPublicEnumDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPublicEnumDeclaration" ):
                listener.exitPublicEnumDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPublicEnumDeclaration" ):
                return visitor.visitPublicEnumDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def publicEnumDeclaration(self):

        localctx = vbaParser.PublicEnumDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_publicEnumDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1430
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==150:
                self.state = 1428
                self.match(vbaParser.PUBLIC)
                self.state = 1429
                self.wsc()


            self.state = 1432
            self.enumDeclaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivateEnumDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRIVATE(self):
            return self.getToken(vbaParser.PRIVATE, 0)

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def enumDeclaration(self):
            return self.getTypedRuleContext(vbaParser.EnumDeclarationContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_privateEnumDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivateEnumDeclaration" ):
                listener.enterPrivateEnumDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivateEnumDeclaration" ):
                listener.exitPrivateEnumDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrivateEnumDeclaration" ):
                return visitor.visitPrivateEnumDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def privateEnumDeclaration(self):

        localctx = vbaParser.PrivateEnumDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_privateEnumDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1434
            self.match(vbaParser.PRIVATE)
            self.state = 1435
            self.wsc()
            self.state = 1436
            self.enumDeclaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENUM(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.ENUM)
            else:
                return self.getToken(vbaParser.ENUM, i)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def untypedName(self):
            return self.getTypedRuleContext(vbaParser.UntypedNameContext,0)


        def enumMemberList(self):
            return self.getTypedRuleContext(vbaParser.EnumMemberListContext,0)


        def END(self):
            return self.getToken(vbaParser.END, 0)

        def endOfStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfStatementContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfStatementContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_enumDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumDeclaration" ):
                listener.enterEnumDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumDeclaration" ):
                listener.exitEnumDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumDeclaration" ):
                return visitor.visitEnumDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def enumDeclaration(self):

        localctx = vbaParser.EnumDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_enumDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1438
            self.match(vbaParser.ENUM)
            self.state = 1439
            self.wsc()
            self.state = 1440
            self.untypedName()
            self.state = 1442 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1441
                    self.endOfStatement()

                else:
                    raise NoViableAltException(self)
                self.state = 1444 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,120,self._ctx)

            self.state = 1446
            self.enumMemberList()
            self.state = 1448 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1447
                self.endOfStatement()
                self.state = 1450 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 272)) & ~0x3f) == 0 and ((1 << (_la - 272)) & 87) != 0)):
                    break

            self.state = 1452
            self.match(vbaParser.END)
            self.state = 1453
            self.wsc()
            self.state = 1454
            self.match(vbaParser.ENUM)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumMemberListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EnumElementContext)
            else:
                return self.getTypedRuleContext(vbaParser.EnumElementContext,i)


        def endOfStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfStatementContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfStatementContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_enumMemberList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumMemberList" ):
                listener.enterEnumMemberList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumMemberList" ):
                listener.exitEnumMemberList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumMemberList" ):
                return visitor.visitEnumMemberList(self)
            else:
                return visitor.visitChildren(self)




    def enumMemberList(self):

        localctx = vbaParser.EnumMemberListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_enumMemberList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1456
            self.enumElement()
            self.state = 1462
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,122,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1457
                    self.endOfStatement()
                    self.state = 1458
                    self.enumElement() 
                self.state = 1464
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,122,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def remStatement(self):
            return self.getTypedRuleContext(vbaParser.RemStatementContext,0)


        def enumMember(self):
            return self.getTypedRuleContext(vbaParser.EnumMemberContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_enumElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumElement" ):
                listener.enterEnumElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumElement" ):
                listener.exitEnumElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumElement" ):
                return visitor.visitEnumElement(self)
            else:
                return visitor.visitChildren(self)




    def enumElement(self):

        localctx = vbaParser.EnumElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_enumElement)
        try:
            self.state = 1467
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [273]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1465
                self.remStatement()
                pass
            elif token in [2, 4, 8, 11, 12, 13, 29, 30, 33, 34, 35, 40, 81, 92, 105, 110, 112, 124, 125, 126, 127, 129, 135, 142, 147, 152, 154, 157, 171, 177, 212, 215, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 280, 281]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1466
                self.enumMember()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def untypedName(self):
            return self.getTypedRuleContext(vbaParser.UntypedNameContext,0)


        def EQ(self):
            return self.getToken(vbaParser.EQ, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(vbaParser.ConstantExpressionContext,0)


        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_enumMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumMember" ):
                listener.enterEnumMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumMember" ):
                listener.exitEnumMember(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumMember" ):
                return visitor.visitEnumMember(self)
            else:
                return visitor.visitChildren(self)




    def enumMember(self):

        localctx = vbaParser.EnumMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_enumMember)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1469
            self.untypedName()
            self.state = 1478
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
            if la_ == 1:
                self.state = 1471
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==271 or _la==278:
                    self.state = 1470
                    self.wsc()


                self.state = 1473
                self.match(vbaParser.EQ)
                self.state = 1475
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==271 or _la==278:
                    self.state = 1474
                    self.wsc()


                self.state = 1477
                self.constantExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PublicExternalProcedureDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def externalProcDcl(self):
            return self.getTypedRuleContext(vbaParser.ExternalProcDclContext,0)


        def PUBLIC(self):
            return self.getToken(vbaParser.PUBLIC, 0)

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_publicExternalProcedureDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPublicExternalProcedureDeclaration" ):
                listener.enterPublicExternalProcedureDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPublicExternalProcedureDeclaration" ):
                listener.exitPublicExternalProcedureDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPublicExternalProcedureDeclaration" ):
                return visitor.visitPublicExternalProcedureDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def publicExternalProcedureDeclaration(self):

        localctx = vbaParser.PublicExternalProcedureDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_publicExternalProcedureDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1482
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==150:
                self.state = 1480
                self.match(vbaParser.PUBLIC)
                self.state = 1481
                self.wsc()


            self.state = 1484
            self.externalProcDcl()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivateExternalProcedureDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRIVATE(self):
            return self.getToken(vbaParser.PRIVATE, 0)

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def externalProcDcl(self):
            return self.getTypedRuleContext(vbaParser.ExternalProcDclContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_privateExternalProcedureDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivateExternalProcedureDeclaration" ):
                listener.enterPrivateExternalProcedureDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivateExternalProcedureDeclaration" ):
                listener.exitPrivateExternalProcedureDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrivateExternalProcedureDeclaration" ):
                return visitor.visitPrivateExternalProcedureDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def privateExternalProcedureDeclaration(self):

        localctx = vbaParser.PrivateExternalProcedureDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_privateExternalProcedureDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1486
            self.match(vbaParser.PRIVATE)
            self.state = 1487
            self.wsc()
            self.state = 1488
            self.externalProcDcl()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternalProcDclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECLARE(self):
            return self.getToken(vbaParser.DECLARE, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def externalSub(self):
            return self.getTypedRuleContext(vbaParser.ExternalSubContext,0)


        def externalFunction(self):
            return self.getTypedRuleContext(vbaParser.ExternalFunctionContext,0)


        def PTRSAFE(self):
            return self.getToken(vbaParser.PTRSAFE, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_externalProcDcl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternalProcDcl" ):
                listener.enterExternalProcDcl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternalProcDcl" ):
                listener.exitExternalProcDcl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternalProcDcl" ):
                return visitor.visitExternalProcDcl(self)
            else:
                return visitor.visitChildren(self)




    def externalProcDcl(self):

        localctx = vbaParser.ExternalProcDclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_externalProcDcl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1490
            self.match(vbaParser.DECLARE)
            self.state = 1491
            self.wsc()
            self.state = 1494
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==149:
                self.state = 1492
                self.match(vbaParser.PTRSAFE)
                self.state = 1493
                self.wsc()


            self.state = 1498
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [175]:
                self.state = 1496
                self.externalSub()
                pass
            elif token in [89]:
                self.state = 1497
                self.externalFunction()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternalSubContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUB(self):
            return self.getToken(vbaParser.SUB, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def subroutineName(self):
            return self.getTypedRuleContext(vbaParser.SubroutineNameContext,0)


        def libInfo(self):
            return self.getTypedRuleContext(vbaParser.LibInfoContext,0)


        def procedureParameters(self):
            return self.getTypedRuleContext(vbaParser.ProcedureParametersContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_externalSub

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternalSub" ):
                listener.enterExternalSub(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternalSub" ):
                listener.exitExternalSub(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternalSub" ):
                return visitor.visitExternalSub(self)
            else:
                return visitor.visitChildren(self)




    def externalSub(self):

        localctx = vbaParser.ExternalSubContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_externalSub)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1500
            self.match(vbaParser.SUB)
            self.state = 1501
            self.wsc()
            self.state = 1502
            self.subroutineName()
            self.state = 1503
            self.wsc()
            self.state = 1504
            self.libInfo()
            self.state = 1508
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,130,self._ctx)
            if la_ == 1:
                self.state = 1505
                self.wsc()
                self.state = 1506
                self.procedureParameters()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternalFunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNCTION(self):
            return self.getToken(vbaParser.FUNCTION, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def functionName(self):
            return self.getTypedRuleContext(vbaParser.FunctionNameContext,0)


        def libInfo(self):
            return self.getTypedRuleContext(vbaParser.LibInfoContext,0)


        def procedureParameters(self):
            return self.getTypedRuleContext(vbaParser.ProcedureParametersContext,0)


        def functionType(self):
            return self.getTypedRuleContext(vbaParser.FunctionTypeContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_externalFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternalFunction" ):
                listener.enterExternalFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternalFunction" ):
                listener.exitExternalFunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternalFunction" ):
                return visitor.visitExternalFunction(self)
            else:
                return visitor.visitChildren(self)




    def externalFunction(self):

        localctx = vbaParser.ExternalFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_externalFunction)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1510
            self.match(vbaParser.FUNCTION)
            self.state = 1511
            self.wsc()
            self.state = 1512
            self.functionName()
            self.state = 1513
            self.wsc()
            self.state = 1514
            self.libInfo()
            self.state = 1518
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,131,self._ctx)
            if la_ == 1:
                self.state = 1515
                self.wsc()
                self.state = 1516
                self.procedureParameters()


            self.state = 1523
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,132,self._ctx)
            if la_ == 1:
                self.state = 1520
                self.wsc()
                self.state = 1521
                self.functionType()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LibInfoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def libClause(self):
            return self.getTypedRuleContext(vbaParser.LibClauseContext,0)


        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def aliasClause(self):
            return self.getTypedRuleContext(vbaParser.AliasClauseContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_libInfo

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLibInfo" ):
                listener.enterLibInfo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLibInfo" ):
                listener.exitLibInfo(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLibInfo" ):
                return visitor.visitLibInfo(self)
            else:
                return visitor.visitChildren(self)




    def libInfo(self):

        localctx = vbaParser.LibInfoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_libInfo)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1525
            self.libClause()
            self.state = 1529
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,133,self._ctx)
            if la_ == 1:
                self.state = 1526
                self.wsc()
                self.state = 1527
                self.aliasClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LibClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIB(self):
            return self.getToken(vbaParser.LIB, 0)

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def STRINGLITERAL(self):
            return self.getToken(vbaParser.STRINGLITERAL, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_libClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLibClause" ):
                listener.enterLibClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLibClause" ):
                listener.exitLibClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLibClause" ):
                return visitor.visitLibClause(self)
            else:
                return visitor.visitChildren(self)




    def libClause(self):

        localctx = vbaParser.LibClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_libClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1531
            self.match(vbaParser.LIB)
            self.state = 1532
            self.wsc()
            self.state = 1533
            self.match(vbaParser.STRINGLITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AliasClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALIAS(self):
            return self.getToken(vbaParser.ALIAS, 0)

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def STRINGLITERAL(self):
            return self.getToken(vbaParser.STRINGLITERAL, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_aliasClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAliasClause" ):
                listener.enterAliasClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAliasClause" ):
                listener.exitAliasClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAliasClause" ):
                return visitor.visitAliasClause(self)
            else:
                return visitor.visitChildren(self)




    def aliasClause(self):

        localctx = vbaParser.AliasClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_aliasClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1535
            self.match(vbaParser.ALIAS)
            self.state = 1536
            self.wsc()
            self.state = 1537
            self.match(vbaParser.STRINGLITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImplementsDirectiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPLEMENTS(self):
            return self.getToken(vbaParser.IMPLEMENTS, 0)

        def WS(self):
            return self.getToken(vbaParser.WS, 0)

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_implementsDirective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImplementsDirective" ):
                listener.enterImplementsDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImplementsDirective" ):
                listener.exitImplementsDirective(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImplementsDirective" ):
                return visitor.visitImplementsDirective(self)
            else:
                return visitor.visitChildren(self)




    def implementsDirective(self):

        localctx = vbaParser.ImplementsDirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_implementsDirective)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1539
            self.match(vbaParser.IMPLEMENTS)
            self.state = 1540
            self.match(vbaParser.WS)
            self.state = 1541
            self.ambiguousIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EventDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def EVENT(self):
            return self.getToken(vbaParser.EVENT, 0)

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def PUBLIC(self):
            return self.getToken(vbaParser.PUBLIC, 0)

        def eventParameterList(self):
            return self.getTypedRuleContext(vbaParser.EventParameterListContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_eventDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEventDeclaration" ):
                listener.enterEventDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEventDeclaration" ):
                listener.exitEventDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEventDeclaration" ):
                return visitor.visitEventDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def eventDeclaration(self):

        localctx = vbaParser.EventDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_eventDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1544
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==150:
                self.state = 1543
                self.match(vbaParser.PUBLIC)


            self.state = 1546
            self.wsc()
            self.state = 1547
            self.match(vbaParser.EVENT)
            self.state = 1548
            self.wsc()
            self.state = 1549
            self.ambiguousIdentifier()
            self.state = 1551
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==249:
                self.state = 1550
                self.eventParameterList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EventParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(vbaParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(vbaParser.RPAREN, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def positionalParameters(self):
            return self.getTypedRuleContext(vbaParser.PositionalParametersContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_eventParameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEventParameterList" ):
                listener.enterEventParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEventParameterList" ):
                listener.exitEventParameterList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEventParameterList" ):
                return visitor.visitEventParameterList(self)
            else:
                return visitor.visitChildren(self)




    def eventParameterList(self):

        localctx = vbaParser.EventParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_eventParameterList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1553
            self.match(vbaParser.LPAREN)
            self.state = 1555
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,136,self._ctx)
            if la_ == 1:
                self.state = 1554
                self.wsc()


            self.state = 1558
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 282636228704532) != 0) or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & 2324270826796353537) != 0) or ((((_la - 147)) & ~0x3f) == 0 and ((1 << (_la - 147)) & 1157629089) != 0) or ((((_la - 212)) & ~0x3f) == 0 and ((1 << (_la - 212)) & 33554185) != 0) or _la==280:
                self.state = 1557
                self.positionalParameters()


            self.state = 1561
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==271 or _la==278:
                self.state = 1560
                self.wsc()


            self.state = 1563
            self.match(vbaParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProceduralModuleCodeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def proceduralModuleCodeElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ProceduralModuleCodeElementContext)
            else:
                return self.getTypedRuleContext(vbaParser.ProceduralModuleCodeElementContext,i)


        def endOfLine(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfLineContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfLineContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_proceduralModuleCode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProceduralModuleCode" ):
                listener.enterProceduralModuleCode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProceduralModuleCode" ):
                listener.exitProceduralModuleCode(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProceduralModuleCode" ):
                return visitor.visitProceduralModuleCode(self)
            else:
                return visitor.visitChildren(self)




    def proceduralModuleCode(self):

        localctx = vbaParser.ProceduralModuleCodeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_proceduralModuleCode)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1574
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,140,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1565
                    self.proceduralModuleCodeElement()
                    self.state = 1569
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,139,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1566
                            self.endOfLine() 
                        self.state = 1571
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,139,self._ctx)
             
                self.state = 1576
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,140,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassModuleCodeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classModuleCodeElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ClassModuleCodeElementContext)
            else:
                return self.getTypedRuleContext(vbaParser.ClassModuleCodeElementContext,i)


        def endOfLine(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfLineContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfLineContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_classModuleCode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassModuleCode" ):
                listener.enterClassModuleCode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassModuleCode" ):
                listener.exitClassModuleCode(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassModuleCode" ):
                return visitor.visitClassModuleCode(self)
            else:
                return visitor.visitChildren(self)




    def classModuleCode(self):

        localctx = vbaParser.ClassModuleCodeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_classModuleCode)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1586
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,142,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1577
                    self.classModuleCodeElement()
                    self.state = 1581
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,141,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1578
                            self.endOfLine() 
                        self.state = 1583
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,141,self._ctx)
             
                self.state = 1588
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,142,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProceduralModuleCodeElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def commonModuleCodeElement(self):
            return self.getTypedRuleContext(vbaParser.CommonModuleCodeElementContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_proceduralModuleCodeElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProceduralModuleCodeElement" ):
                listener.enterProceduralModuleCodeElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProceduralModuleCodeElement" ):
                listener.exitProceduralModuleCodeElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProceduralModuleCodeElement" ):
                return visitor.visitProceduralModuleCodeElement(self)
            else:
                return visitor.visitChildren(self)




    def proceduralModuleCodeElement(self):

        localctx = vbaParser.ProceduralModuleCodeElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_proceduralModuleCodeElement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1589
            self.commonModuleCodeElement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassModuleCodeElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def commonModuleCodeElement(self):
            return self.getTypedRuleContext(vbaParser.CommonModuleCodeElementContext,0)


        def implementsDirective(self):
            return self.getTypedRuleContext(vbaParser.ImplementsDirectiveContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_classModuleCodeElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassModuleCodeElement" ):
                listener.enterClassModuleCodeElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassModuleCodeElement" ):
                listener.exitClassModuleCodeElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassModuleCodeElement" ):
                return visitor.visitClassModuleCodeElement(self)
            else:
                return visitor.visitChildren(self)




    def classModuleCodeElement(self):

        localctx = vbaParser.ClassModuleCodeElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_classModuleCodeElement)
        try:
            self.state = 1593
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [87, 89, 91, 146, 147, 150, 170, 175, 273]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1591
                self.commonModuleCodeElement()
                pass
            elif token in [97]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1592
                self.implementsDirective()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommonModuleCodeElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def remStatement(self):
            return self.getTypedRuleContext(vbaParser.RemStatementContext,0)


        def procedureDeclaration(self):
            return self.getTypedRuleContext(vbaParser.ProcedureDeclarationContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_commonModuleCodeElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommonModuleCodeElement" ):
                listener.enterCommonModuleCodeElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommonModuleCodeElement" ):
                listener.exitCommonModuleCodeElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCommonModuleCodeElement" ):
                return visitor.visitCommonModuleCodeElement(self)
            else:
                return visitor.visitChildren(self)




    def commonModuleCodeElement(self):

        localctx = vbaParser.CommonModuleCodeElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_commonModuleCodeElement)
        try:
            self.state = 1597
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [273]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1595
                self.remStatement()
                pass
            elif token in [87, 89, 91, 146, 147, 150, 170, 175]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1596
                self.procedureDeclaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcedureDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subroutineDeclaration(self):
            return self.getTypedRuleContext(vbaParser.SubroutineDeclarationContext,0)


        def functionDeclaration(self):
            return self.getTypedRuleContext(vbaParser.FunctionDeclarationContext,0)


        def propertyGetDeclaration(self):
            return self.getTypedRuleContext(vbaParser.PropertyGetDeclarationContext,0)


        def propertyLhsDeclaration(self):
            return self.getTypedRuleContext(vbaParser.PropertyLhsDeclarationContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_procedureDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedureDeclaration" ):
                listener.enterProcedureDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedureDeclaration" ):
                listener.exitProcedureDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProcedureDeclaration" ):
                return visitor.visitProcedureDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def procedureDeclaration(self):

        localctx = vbaParser.ProcedureDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_procedureDeclaration)
        try:
            self.state = 1603
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,145,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1599
                self.subroutineDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1600
                self.functionDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1601
                self.propertyGetDeclaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1602
                self.propertyLhsDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubroutineDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def END(self):
            return self.getToken(vbaParser.END, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def SUB(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.SUB)
            else:
                return self.getToken(vbaParser.SUB, i)

        def procedureScope(self):
            return self.getTypedRuleContext(vbaParser.ProcedureScopeContext,0)


        def procedureBody(self):
            return self.getTypedRuleContext(vbaParser.ProcedureBodyContext,0)


        def endLabel(self):
            return self.getTypedRuleContext(vbaParser.EndLabelContext,0)


        def endOfStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfStatementContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfStatementContext,i)


        def procedureTail(self):
            return self.getTypedRuleContext(vbaParser.ProcedureTailContext,0)


        def subroutineName(self):
            return self.getTypedRuleContext(vbaParser.SubroutineNameContext,0)


        def trailingStatic(self):
            return self.getTypedRuleContext(vbaParser.TrailingStaticContext,0)


        def initialStatic(self):
            return self.getTypedRuleContext(vbaParser.InitialStaticContext,0)


        def procedureParameters(self):
            return self.getTypedRuleContext(vbaParser.ProcedureParametersContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_subroutineDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubroutineDeclaration" ):
                listener.enterSubroutineDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubroutineDeclaration" ):
                listener.exitSubroutineDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubroutineDeclaration" ):
                return visitor.visitSubroutineDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def subroutineDeclaration(self):

        localctx = vbaParser.SubroutineDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_subroutineDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1608
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 87)) & ~0x3f) == 0 and ((1 << (_la - 87)) & -8646911284551352303) != 0):
                self.state = 1605
                self.procedureScope()
                self.state = 1606
                self.wsc()


            self.state = 1638
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,153,self._ctx)
            if la_ == 1:
                self.state = 1613
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==170:
                    self.state = 1610
                    self.initialStatic()
                    self.state = 1611
                    self.wsc()


                self.state = 1615
                self.match(vbaParser.SUB)
                self.state = 1616
                self.wsc()
                self.state = 1617
                self.subroutineName()

                self.state = 1619
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,148,self._ctx)
                if la_ == 1:
                    self.state = 1618
                    self.wsc()


                self.state = 1622
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==249:
                    self.state = 1621
                    self.procedureParameters()


                pass

            elif la_ == 2:
                self.state = 1624
                self.match(vbaParser.SUB)
                self.state = 1625
                self.wsc()
                self.state = 1626
                self.subroutineName()
                self.state = 1631
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,151,self._ctx)
                if la_ == 1:
                    self.state = 1628
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==271 or _la==278:
                        self.state = 1627
                        self.wsc()


                    self.state = 1630
                    self.procedureParameters()


                self.state = 1634
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==271 or _la==278:
                    self.state = 1633
                    self.wsc()


                self.state = 1636
                self.trailingStatic()
                pass


            self.state = 1641
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,154,self._ctx)
            if la_ == 1:
                self.state = 1640
                self.procedureBody()


            self.state = 1644
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,155,self._ctx)
            if la_ == 1:
                self.state = 1643
                self.endLabel()


            self.state = 1647 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1646
                self.endOfStatement()
                self.state = 1649 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 272)) & ~0x3f) == 0 and ((1 << (_la - 272)) & 87) != 0)):
                    break

            self.state = 1651
            self.match(vbaParser.END)
            self.state = 1652
            self.wsc()
            self.state = 1653
            self.match(vbaParser.SUB)
            self.state = 1655
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,157,self._ctx)
            if la_ == 1:
                self.state = 1654
                self.procedureTail()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def END(self):
            return self.getToken(vbaParser.END, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def FUNCTION(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.FUNCTION)
            else:
                return self.getToken(vbaParser.FUNCTION, i)

        def functionName(self):
            return self.getTypedRuleContext(vbaParser.FunctionNameContext,0)


        def trailingStatic(self):
            return self.getTypedRuleContext(vbaParser.TrailingStaticContext,0)


        def procedureScope(self):
            return self.getTypedRuleContext(vbaParser.ProcedureScopeContext,0)


        def procedureBody(self):
            return self.getTypedRuleContext(vbaParser.ProcedureBodyContext,0)


        def endLabel(self):
            return self.getTypedRuleContext(vbaParser.EndLabelContext,0)


        def endOfStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfStatementContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfStatementContext,i)


        def procedureTail(self):
            return self.getTypedRuleContext(vbaParser.ProcedureTailContext,0)


        def initialStatic(self):
            return self.getTypedRuleContext(vbaParser.InitialStaticContext,0)


        def procedureParameters(self):
            return self.getTypedRuleContext(vbaParser.ProcedureParametersContext,0)


        def functionType(self):
            return self.getTypedRuleContext(vbaParser.FunctionTypeContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_functionDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDeclaration" ):
                listener.enterFunctionDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDeclaration" ):
                listener.exitFunctionDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionDeclaration" ):
                return visitor.visitFunctionDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def functionDeclaration(self):

        localctx = vbaParser.FunctionDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_functionDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1660
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 87)) & ~0x3f) == 0 and ((1 << (_la - 87)) & -8646911284551352303) != 0):
                self.state = 1657
                self.procedureScope()
                self.state = 1658
                self.wsc()


            self.state = 1702
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,169,self._ctx)
            if la_ == 1:
                self.state = 1665
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==170:
                    self.state = 1662
                    self.initialStatic()
                    self.state = 1663
                    self.wsc()


                self.state = 1667
                self.match(vbaParser.FUNCTION)
                self.state = 1668
                self.wsc()
                self.state = 1669
                self.functionName()
                self.state = 1674
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,161,self._ctx)
                if la_ == 1:
                    self.state = 1671
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==271 or _la==278:
                        self.state = 1670
                        self.wsc()


                    self.state = 1673
                    self.procedureParameters()


                self.state = 1680
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,163,self._ctx)
                if la_ == 1:
                    self.state = 1677
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==271 or _la==278:
                        self.state = 1676
                        self.wsc()


                    self.state = 1679
                    self.functionType()


                pass

            elif la_ == 2:
                self.state = 1682
                self.match(vbaParser.FUNCTION)
                self.state = 1683
                self.wsc()
                self.state = 1684
                self.functionName()
                self.state = 1689
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,165,self._ctx)
                if la_ == 1:
                    self.state = 1686
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==271 or _la==278:
                        self.state = 1685
                        self.wsc()


                    self.state = 1688
                    self.procedureParameters()


                self.state = 1695
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,167,self._ctx)
                if la_ == 1:
                    self.state = 1692
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==271 or _la==278:
                        self.state = 1691
                        self.wsc()


                    self.state = 1694
                    self.functionType()


                self.state = 1698
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==271 or _la==278:
                    self.state = 1697
                    self.wsc()


                self.state = 1700
                self.trailingStatic()
                pass


            self.state = 1705
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,170,self._ctx)
            if la_ == 1:
                self.state = 1704
                self.procedureBody()


            self.state = 1708
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,171,self._ctx)
            if la_ == 1:
                self.state = 1707
                self.endLabel()


            self.state = 1711 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1710
                self.endOfStatement()
                self.state = 1713 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 272)) & ~0x3f) == 0 and ((1 << (_la - 272)) & 87) != 0)):
                    break

            self.state = 1715
            self.match(vbaParser.END)
            self.state = 1716
            self.wsc()
            self.state = 1717
            self.match(vbaParser.FUNCTION)
            self.state = 1719
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,173,self._ctx)
            if la_ == 1:
                self.state = 1718
                self.procedureTail()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertyGetDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def END(self):
            return self.getToken(vbaParser.END, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def PROPERTY(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.PROPERTY)
            else:
                return self.getToken(vbaParser.PROPERTY, i)

        def GET(self):
            return self.getToken(vbaParser.GET, 0)

        def functionName(self):
            return self.getTypedRuleContext(vbaParser.FunctionNameContext,0)


        def trailingStatic(self):
            return self.getTypedRuleContext(vbaParser.TrailingStaticContext,0)


        def procedureScope(self):
            return self.getTypedRuleContext(vbaParser.ProcedureScopeContext,0)


        def procedureBody(self):
            return self.getTypedRuleContext(vbaParser.ProcedureBodyContext,0)


        def endLabel(self):
            return self.getTypedRuleContext(vbaParser.EndLabelContext,0)


        def endOfStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfStatementContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfStatementContext,i)


        def procedureTail(self):
            return self.getTypedRuleContext(vbaParser.ProcedureTailContext,0)


        def initialStatic(self):
            return self.getTypedRuleContext(vbaParser.InitialStaticContext,0)


        def procedureParameters(self):
            return self.getTypedRuleContext(vbaParser.ProcedureParametersContext,0)


        def functionType(self):
            return self.getTypedRuleContext(vbaParser.FunctionTypeContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_propertyGetDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertyGetDeclaration" ):
                listener.enterPropertyGetDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertyGetDeclaration" ):
                listener.exitPropertyGetDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPropertyGetDeclaration" ):
                return visitor.visitPropertyGetDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def propertyGetDeclaration(self):

        localctx = vbaParser.PropertyGetDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_propertyGetDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1724
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 87)) & ~0x3f) == 0 and ((1 << (_la - 87)) & -8646911284551352303) != 0):
                self.state = 1721
                self.procedureScope()
                self.state = 1722
                self.wsc()


            self.state = 1767
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,184,self._ctx)
            if la_ == 1:
                self.state = 1729
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==170:
                    self.state = 1726
                    self.initialStatic()
                    self.state = 1727
                    self.wsc()


                self.state = 1731
                self.match(vbaParser.PROPERTY)
                self.state = 1732
                self.wsc()
                self.state = 1733
                self.match(vbaParser.GET)
                self.state = 1734
                self.wsc()
                self.state = 1735
                self.functionName()
                self.state = 1740
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,177,self._ctx)
                if la_ == 1:
                    self.state = 1737
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==271 or _la==278:
                        self.state = 1736
                        self.wsc()


                    self.state = 1739
                    self.procedureParameters()


                self.state = 1746
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,179,self._ctx)
                if la_ == 1:
                    self.state = 1743
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==271 or _la==278:
                        self.state = 1742
                        self.wsc()


                    self.state = 1745
                    self.functionType()


                pass

            elif la_ == 2:
                self.state = 1748
                self.match(vbaParser.PROPERTY)
                self.state = 1749
                self.wsc()
                self.state = 1750
                self.match(vbaParser.GET)
                self.state = 1751
                self.wsc()
                self.state = 1752
                self.functionName()
                self.state = 1754
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==249:
                    self.state = 1753
                    self.procedureParameters()


                self.state = 1760
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,182,self._ctx)
                if la_ == 1:
                    self.state = 1757
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==271 or _la==278:
                        self.state = 1756
                        self.wsc()


                    self.state = 1759
                    self.functionType()


                self.state = 1763
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==271 or _la==278:
                    self.state = 1762
                    self.wsc()


                self.state = 1765
                self.trailingStatic()
                pass


            self.state = 1770
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,185,self._ctx)
            if la_ == 1:
                self.state = 1769
                self.procedureBody()


            self.state = 1773
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,186,self._ctx)
            if la_ == 1:
                self.state = 1772
                self.endLabel()


            self.state = 1776 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1775
                self.endOfStatement()
                self.state = 1778 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 272)) & ~0x3f) == 0 and ((1 << (_la - 272)) & 87) != 0)):
                    break

            self.state = 1780
            self.match(vbaParser.END)
            self.state = 1781
            self.wsc()
            self.state = 1782
            self.match(vbaParser.PROPERTY)
            self.state = 1784
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,188,self._ctx)
            if la_ == 1:
                self.state = 1783
                self.procedureTail()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertyLhsDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def END(self):
            return self.getToken(vbaParser.END, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def PROPERTY(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.PROPERTY)
            else:
                return self.getToken(vbaParser.PROPERTY, i)

        def subroutineName(self):
            return self.getTypedRuleContext(vbaParser.SubroutineNameContext,0)


        def propertyParameters(self):
            return self.getTypedRuleContext(vbaParser.PropertyParametersContext,0)


        def trailingStatic(self):
            return self.getTypedRuleContext(vbaParser.TrailingStaticContext,0)


        def procedureScope(self):
            return self.getTypedRuleContext(vbaParser.ProcedureScopeContext,0)


        def LET(self):
            return self.getToken(vbaParser.LET, 0)

        def SET(self):
            return self.getToken(vbaParser.SET, 0)

        def procedureBody(self):
            return self.getTypedRuleContext(vbaParser.ProcedureBodyContext,0)


        def endLabel(self):
            return self.getTypedRuleContext(vbaParser.EndLabelContext,0)


        def endOfStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfStatementContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfStatementContext,i)


        def procedureTail(self):
            return self.getTypedRuleContext(vbaParser.ProcedureTailContext,0)


        def initialStatic(self):
            return self.getTypedRuleContext(vbaParser.InitialStaticContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_propertyLhsDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertyLhsDeclaration" ):
                listener.enterPropertyLhsDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertyLhsDeclaration" ):
                listener.exitPropertyLhsDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPropertyLhsDeclaration" ):
                return visitor.visitPropertyLhsDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def propertyLhsDeclaration(self):

        localctx = vbaParser.PropertyLhsDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_propertyLhsDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1789
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 87)) & ~0x3f) == 0 and ((1 << (_la - 87)) & -8646911284551352303) != 0):
                self.state = 1786
                self.procedureScope()
                self.state = 1787
                self.wsc()


            self.state = 1817
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,193,self._ctx)
            if la_ == 1:
                self.state = 1794
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==170:
                    self.state = 1791
                    self.initialStatic()
                    self.state = 1792
                    self.wsc()


                self.state = 1796
                self.match(vbaParser.PROPERTY)
                self.state = 1797
                self.wsc()
                self.state = 1798
                _la = self._input.LA(1)
                if not(_la==109 or _la==164):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1799
                self.wsc()
                self.state = 1800
                self.subroutineName()
                self.state = 1802
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==271 or _la==278:
                    self.state = 1801
                    self.wsc()


                self.state = 1804
                self.propertyParameters()
                pass

            elif la_ == 2:
                self.state = 1806
                self.match(vbaParser.PROPERTY)
                self.state = 1807
                self.wsc()
                self.state = 1808
                _la = self._input.LA(1)
                if not(_la==109 or _la==164):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1809
                self.wsc()
                self.state = 1810
                self.subroutineName()
                self.state = 1811
                self.propertyParameters()
                self.state = 1813
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==271 or _la==278:
                    self.state = 1812
                    self.wsc()


                self.state = 1815
                self.trailingStatic()
                pass


            self.state = 1820
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,194,self._ctx)
            if la_ == 1:
                self.state = 1819
                self.procedureBody()


            self.state = 1823
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,195,self._ctx)
            if la_ == 1:
                self.state = 1822
                self.endLabel()


            self.state = 1826 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1825
                self.endOfStatement()
                self.state = 1828 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 272)) & ~0x3f) == 0 and ((1 << (_la - 272)) & 87) != 0)):
                    break

            self.state = 1830
            self.match(vbaParser.END)
            self.state = 1831
            self.wsc()
            self.state = 1832
            self.match(vbaParser.PROPERTY)
            self.state = 1834
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,197,self._ctx)
            if la_ == 1:
                self.state = 1833
                self.procedureTail()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EndLabelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def endOfLineNoWs(self):
            return self.getTypedRuleContext(vbaParser.EndOfLineNoWsContext,0)


        def statementLabelDefinition(self):
            return self.getTypedRuleContext(vbaParser.StatementLabelDefinitionContext,0)


        def endOfStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfStatementContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfStatementContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_endLabel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEndLabel" ):
                listener.enterEndLabel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEndLabel" ):
                listener.exitEndLabel(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEndLabel" ):
                return visitor.visitEndLabel(self)
            else:
                return visitor.visitChildren(self)




    def endLabel(self):

        localctx = vbaParser.EndLabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_endLabel)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1839
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,198,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1836
                    self.endOfStatement() 
                self.state = 1841
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,198,self._ctx)

            self.state = 1842
            self.endOfLineNoWs()
            self.state = 1843
            self.statementLabelDefinition()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcedureTailContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEWLINE(self):
            return self.getToken(vbaParser.NEWLINE, 0)

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def commentBody(self):
            return self.getTypedRuleContext(vbaParser.CommentBodyContext,0)


        def COLON(self):
            return self.getToken(vbaParser.COLON, 0)

        def remStatement(self):
            return self.getTypedRuleContext(vbaParser.RemStatementContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def getRuleIndex(self):
            return vbaParser.RULE_procedureTail

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedureTail" ):
                listener.enterProcedureTail(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedureTail" ):
                listener.exitProcedureTail(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProcedureTail" ):
                return visitor.visitProcedureTail(self)
            else:
                return visitor.visitChildren(self)




    def procedureTail(self):

        localctx = vbaParser.ProcedureTailContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_procedureTail)
        self._la = 0 # Token type
        try:
            self.state = 1861
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,203,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1846
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==271 or _la==278:
                    self.state = 1845
                    self.wsc()


                self.state = 1848
                self.match(vbaParser.NEWLINE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1850
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==271 or _la==278:
                    self.state = 1849
                    self.wsc()


                self.state = 1852
                self.commentBody()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1854
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==278:
                    self.state = 1853
                    self.match(vbaParser.WS)


                self.state = 1856
                self.match(vbaParser.COLON)
                self.state = 1858
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==278:
                    self.state = 1857
                    self.match(vbaParser.WS)


                self.state = 1860
                self.remStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcedureScopeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRIVATE(self):
            return self.getToken(vbaParser.PRIVATE, 0)

        def PUBLIC(self):
            return self.getToken(vbaParser.PUBLIC, 0)

        def FRIEND(self):
            return self.getToken(vbaParser.FRIEND, 0)

        def GLOBAL(self):
            return self.getToken(vbaParser.GLOBAL, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_procedureScope

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedureScope" ):
                listener.enterProcedureScope(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedureScope" ):
                listener.exitProcedureScope(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProcedureScope" ):
                return visitor.visitProcedureScope(self)
            else:
                return visitor.visitChildren(self)




    def procedureScope(self):

        localctx = vbaParser.ProcedureScopeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_procedureScope)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1863
            _la = self._input.LA(1)
            if not(((((_la - 87)) & ~0x3f) == 0 and ((1 << (_la - 87)) & -8646911284551352303) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitialStaticContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STATIC(self):
            return self.getToken(vbaParser.STATIC, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_initialStatic

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitialStatic" ):
                listener.enterInitialStatic(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitialStatic" ):
                listener.exitInitialStatic(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitialStatic" ):
                return visitor.visitInitialStatic(self)
            else:
                return visitor.visitChildren(self)




    def initialStatic(self):

        localctx = vbaParser.InitialStaticContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_initialStatic)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1865
            self.match(vbaParser.STATIC)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TrailingStaticContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STATIC(self):
            return self.getToken(vbaParser.STATIC, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_trailingStatic

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrailingStatic" ):
                listener.enterTrailingStatic(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrailingStatic" ):
                listener.exitTrailingStatic(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTrailingStatic" ):
                return visitor.visitTrailingStatic(self)
            else:
                return visitor.visitChildren(self)




    def trailingStatic(self):

        localctx = vbaParser.TrailingStaticContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_trailingStatic)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1867
            self.match(vbaParser.STATIC)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubroutineNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def prefixedName(self):
            return self.getTypedRuleContext(vbaParser.PrefixedNameContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_subroutineName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubroutineName" ):
                listener.enterSubroutineName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubroutineName" ):
                listener.exitSubroutineName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubroutineName" ):
                return visitor.visitSubroutineName(self)
            else:
                return visitor.visitChildren(self)




    def subroutineName(self):

        localctx = vbaParser.SubroutineNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_subroutineName)
        try:
            self.state = 1871
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,204,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1869
                self.ambiguousIdentifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1870
                self.prefixedName()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typedName(self):
            return self.getTypedRuleContext(vbaParser.TypedNameContext,0)


        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def prefixedName(self):
            return self.getTypedRuleContext(vbaParser.PrefixedNameContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_functionName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionName" ):
                listener.enterFunctionName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionName" ):
                listener.exitFunctionName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionName" ):
                return visitor.visitFunctionName(self)
            else:
                return visitor.visitChildren(self)




    def functionName(self):

        localctx = vbaParser.FunctionNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_functionName)
        try:
            self.state = 1876
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,205,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1873
                self.typedName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1874
                self.ambiguousIdentifier()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1875
                self.prefixedName()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrefixedNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def eventHandlerName(self):
            return self.getTypedRuleContext(vbaParser.EventHandlerNameContext,0)


        def implementedName(self):
            return self.getTypedRuleContext(vbaParser.ImplementedNameContext,0)


        def lifecycleHandlerName(self):
            return self.getTypedRuleContext(vbaParser.LifecycleHandlerNameContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_prefixedName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrefixedName" ):
                listener.enterPrefixedName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrefixedName" ):
                listener.exitPrefixedName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrefixedName" ):
                return visitor.visitPrefixedName(self)
            else:
                return visitor.visitChildren(self)




    def prefixedName(self):

        localctx = vbaParser.PrefixedNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_prefixedName)
        try:
            self.state = 1881
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,206,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1878
                self.eventHandlerName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1879
                self.implementedName()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1880
                self.lifecycleHandlerName()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(vbaParser.AS, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def typeExpression(self):
            return self.getTypedRuleContext(vbaParser.TypeExpressionContext,0)


        def arrayDesignator(self):
            return self.getTypedRuleContext(vbaParser.ArrayDesignatorContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_functionType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionType" ):
                listener.enterFunctionType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionType" ):
                listener.exitFunctionType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionType" ):
                return visitor.visitFunctionType(self)
            else:
                return visitor.visitChildren(self)




    def functionType(self):

        localctx = vbaParser.FunctionTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_functionType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1883
            self.match(vbaParser.AS)
            self.state = 1884
            self.wsc()
            self.state = 1885
            self.typeExpression()
            self.state = 1887
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,207,self._ctx)
            if la_ == 1:
                self.state = 1886
                self.wsc()


            self.state = 1890
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==249:
                self.state = 1889
                self.arrayDesignator()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayDesignatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(vbaParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(vbaParser.RPAREN, 0)

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_arrayDesignator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayDesignator" ):
                listener.enterArrayDesignator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayDesignator" ):
                listener.exitArrayDesignator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayDesignator" ):
                return visitor.visitArrayDesignator(self)
            else:
                return visitor.visitChildren(self)




    def arrayDesignator(self):

        localctx = vbaParser.ArrayDesignatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_arrayDesignator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1892
            self.match(vbaParser.LPAREN)
            self.state = 1894
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==271 or _la==278:
                self.state = 1893
                self.wsc()


            self.state = 1896
            self.match(vbaParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcedureParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(vbaParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(vbaParser.RPAREN, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def parameterList(self):
            return self.getTypedRuleContext(vbaParser.ParameterListContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_procedureParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedureParameters" ):
                listener.enterProcedureParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedureParameters" ):
                listener.exitProcedureParameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProcedureParameters" ):
                return visitor.visitProcedureParameters(self)
            else:
                return visitor.visitChildren(self)




    def procedureParameters(self):

        localctx = vbaParser.ProcedureParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_procedureParameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1898
            self.match(vbaParser.LPAREN)
            self.state = 1900
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,210,self._ctx)
            if la_ == 1:
                self.state = 1899
                self.wsc()


            self.state = 1903
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 282636228704532) != 0) or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & 7512417597527164929) != 0) or ((((_la - 147)) & ~0x3f) == 0 and ((1 << (_la - 147)) & 1157629089) != 0) or ((((_la - 212)) & ~0x3f) == 0 and ((1 << (_la - 212)) & 33554185) != 0) or _la==280:
                self.state = 1902
                self.parameterList()


            self.state = 1906
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==271 or _la==278:
                self.state = 1905
                self.wsc()


            self.state = 1908
            self.match(vbaParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertyParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(vbaParser.LPAREN, 0)

        def valueParam(self):
            return self.getTypedRuleContext(vbaParser.ValueParamContext,0)


        def RPAREN(self):
            return self.getToken(vbaParser.RPAREN, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def parameterList(self):
            return self.getTypedRuleContext(vbaParser.ParameterListContext,0)


        def COMMA(self):
            return self.getToken(vbaParser.COMMA, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_propertyParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertyParameters" ):
                listener.enterPropertyParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertyParameters" ):
                listener.exitPropertyParameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPropertyParameters" ):
                return visitor.visitPropertyParameters(self)
            else:
                return visitor.visitChildren(self)




    def propertyParameters(self):

        localctx = vbaParser.PropertyParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_propertyParameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1910
            self.match(vbaParser.LPAREN)
            self.state = 1912
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==271 or _la==278:
                self.state = 1911
                self.wsc()


            self.state = 1922
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,216,self._ctx)
            if la_ == 1:
                self.state = 1914
                self.parameterList()
                self.state = 1916
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==271 or _la==278:
                    self.state = 1915
                    self.wsc()


                self.state = 1918
                self.match(vbaParser.COMMA)
                self.state = 1920
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==271 or _la==278:
                    self.state = 1919
                    self.wsc()




            self.state = 1924
            self.valueParam()
            self.state = 1926
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==271 or _la==278:
                self.state = 1925
                self.wsc()


            self.state = 1928
            self.match(vbaParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def positionalParameters(self):
            return self.getTypedRuleContext(vbaParser.PositionalParametersContext,0)


        def COMMA(self):
            return self.getToken(vbaParser.COMMA, 0)

        def optionalParameters(self):
            return self.getTypedRuleContext(vbaParser.OptionalParametersContext,0)


        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def paramArray(self):
            return self.getTypedRuleContext(vbaParser.ParamArrayContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_parameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterList" ):
                listener.enterParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterList" ):
                listener.exitParameterList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameterList" ):
                return visitor.visitParameterList(self)
            else:
                return visitor.visitChildren(self)




    def parameterList(self):

        localctx = vbaParser.ParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_parameterList)
        self._la = 0 # Token type
        try:
            self.state = 1953
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,223,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1930
                self.positionalParameters()
                self.state = 1932
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==271 or _la==278:
                    self.state = 1931
                    self.wsc()


                self.state = 1934
                self.match(vbaParser.COMMA)
                self.state = 1936
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==271 or _la==278:
                    self.state = 1935
                    self.wsc()


                self.state = 1938
                self.optionalParameters()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1940
                self.positionalParameters()
                self.state = 1949
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,222,self._ctx)
                if la_ == 1:
                    self.state = 1942
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==271 or _la==278:
                        self.state = 1941
                        self.wsc()


                    self.state = 1944
                    self.match(vbaParser.COMMA)
                    self.state = 1946
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==271 or _la==278:
                        self.state = 1945
                        self.wsc()


                    self.state = 1948
                    self.paramArray()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1951
                self.optionalParameters()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1952
                self.paramArray()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PositionalParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def positionalParam(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.PositionalParamContext)
            else:
                return self.getTypedRuleContext(vbaParser.PositionalParamContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.COMMA)
            else:
                return self.getToken(vbaParser.COMMA, i)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_positionalParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPositionalParameters" ):
                listener.enterPositionalParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPositionalParameters" ):
                listener.exitPositionalParameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPositionalParameters" ):
                return visitor.visitPositionalParameters(self)
            else:
                return visitor.visitChildren(self)




    def positionalParameters(self):

        localctx = vbaParser.PositionalParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_positionalParameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1955
            self.positionalParam()
            self.state = 1966
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,226,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1957
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==271 or _la==278:
                        self.state = 1956
                        self.wsc()


                    self.state = 1959
                    self.match(vbaParser.COMMA)
                    self.state = 1961
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==271 or _la==278:
                        self.state = 1960
                        self.wsc()


                    self.state = 1963
                    self.positionalParam() 
                self.state = 1968
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,226,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptionalParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optionalParam(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.OptionalParamContext)
            else:
                return self.getTypedRuleContext(vbaParser.OptionalParamContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.COMMA)
            else:
                return self.getToken(vbaParser.COMMA, i)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_optionalParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptionalParameters" ):
                listener.enterOptionalParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptionalParameters" ):
                listener.exitOptionalParameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOptionalParameters" ):
                return visitor.visitOptionalParameters(self)
            else:
                return visitor.visitChildren(self)




    def optionalParameters(self):

        localctx = vbaParser.OptionalParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_optionalParameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1969
            self.optionalParam()
            self.state = 1980
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,229,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1971
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==271 or _la==278:
                        self.state = 1970
                        self.wsc()


                    self.state = 1973
                    self.match(vbaParser.COMMA)
                    self.state = 1975
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==271 or _la==278:
                        self.state = 1974
                        self.wsc()


                    self.state = 1977
                    self.optionalParam() 
                self.state = 1982
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,229,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValueParamContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def positionalParam(self):
            return self.getTypedRuleContext(vbaParser.PositionalParamContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_valueParam

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValueParam" ):
                listener.enterValueParam(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValueParam" ):
                listener.exitValueParam(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitValueParam" ):
                return visitor.visitValueParam(self)
            else:
                return visitor.visitChildren(self)




    def valueParam(self):

        localctx = vbaParser.ValueParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_valueParam)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1983
            self.positionalParam()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PositionalParamContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def paramDcl(self):
            return self.getTypedRuleContext(vbaParser.ParamDclContext,0)


        def parameterMechanism(self):
            return self.getTypedRuleContext(vbaParser.ParameterMechanismContext,0)


        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_positionalParam

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPositionalParam" ):
                listener.enterPositionalParam(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPositionalParam" ):
                listener.exitPositionalParam(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPositionalParam" ):
                return visitor.visitPositionalParam(self)
            else:
                return visitor.visitChildren(self)




    def positionalParam(self):

        localctx = vbaParser.PositionalParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_positionalParam)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1988
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==16 or _la==17:
                self.state = 1985
                self.parameterMechanism()
                self.state = 1986
                self.wsc()


            self.state = 1990
            self.paramDcl()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptionalParamContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optionalPrefix(self):
            return self.getTypedRuleContext(vbaParser.OptionalPrefixContext,0)


        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def paramDcl(self):
            return self.getTypedRuleContext(vbaParser.ParamDclContext,0)


        def defaultValue(self):
            return self.getTypedRuleContext(vbaParser.DefaultValueContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_optionalParam

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptionalParam" ):
                listener.enterOptionalParam(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptionalParam" ):
                listener.exitOptionalParam(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOptionalParam" ):
                return visitor.visitOptionalParam(self)
            else:
                return visitor.visitChildren(self)




    def optionalParam(self):

        localctx = vbaParser.OptionalParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_optionalParam)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1992
            self.optionalPrefix()
            self.state = 1993
            self.wsc()
            self.state = 1994
            self.paramDcl()
            self.state = 1996
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,231,self._ctx)
            if la_ == 1:
                self.state = 1995
                self.wsc()


            self.state = 1999
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==243:
                self.state = 1998
                self.defaultValue()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParamArrayContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARAMARRAY(self):
            return self.getToken(vbaParser.PARAMARRAY, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def LPAREN(self):
            return self.getToken(vbaParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(vbaParser.RPAREN, 0)

        def AS(self):
            return self.getToken(vbaParser.AS, 0)

        def VARIANT(self):
            return self.getToken(vbaParser.VARIANT, 0)

        def L_SQUARE_BRACKET(self):
            return self.getToken(vbaParser.L_SQUARE_BRACKET, 0)

        def R_SQUARE_BRACKET(self):
            return self.getToken(vbaParser.R_SQUARE_BRACKET, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_paramArray

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParamArray" ):
                listener.enterParamArray(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParamArray" ):
                listener.exitParamArray(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParamArray" ):
                return visitor.visitParamArray(self)
            else:
                return visitor.visitChildren(self)




    def paramArray(self):

        localctx = vbaParser.ParamArrayContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_paramArray)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2001
            self.match(vbaParser.PARAMARRAY)
            self.state = 2002
            self.wsc()
            self.state = 2003
            self.ambiguousIdentifier()
            self.state = 2004
            self.match(vbaParser.LPAREN)
            self.state = 2006
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==271 or _la==278:
                self.state = 2005
                self.wsc()


            self.state = 2008
            self.match(vbaParser.RPAREN)
            self.state = 2018
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,235,self._ctx)
            if la_ == 1:
                self.state = 2009
                self.wsc()
                self.state = 2010
                self.match(vbaParser.AS)
                self.state = 2011
                self.wsc()
                self.state = 2016
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [210]:
                    self.state = 2012
                    self.match(vbaParser.VARIANT)
                    pass
                elif token in [262]:
                    self.state = 2013
                    self.match(vbaParser.L_SQUARE_BRACKET)
                    self.state = 2014
                    self.match(vbaParser.VARIANT)
                    self.state = 2015
                    self.match(vbaParser.R_SQUARE_BRACKET)
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParamDclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def untypedNameParamDcl(self):
            return self.getTypedRuleContext(vbaParser.UntypedNameParamDclContext,0)


        def typedNameParamDcl(self):
            return self.getTypedRuleContext(vbaParser.TypedNameParamDclContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_paramDcl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParamDcl" ):
                listener.enterParamDcl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParamDcl" ):
                listener.exitParamDcl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParamDcl" ):
                return visitor.visitParamDcl(self)
            else:
                return visitor.visitChildren(self)




    def paramDcl(self):

        localctx = vbaParser.ParamDclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_paramDcl)
        try:
            self.state = 2022
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,236,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2020
                self.untypedNameParamDcl()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2021
                self.typedNameParamDcl()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UntypedNameParamDclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def parameterType(self):
            return self.getTypedRuleContext(vbaParser.ParameterTypeContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_untypedNameParamDcl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUntypedNameParamDcl" ):
                listener.enterUntypedNameParamDcl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUntypedNameParamDcl" ):
                listener.exitUntypedNameParamDcl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUntypedNameParamDcl" ):
                return visitor.visitUntypedNameParamDcl(self)
            else:
                return visitor.visitChildren(self)




    def untypedNameParamDcl(self):

        localctx = vbaParser.UntypedNameParamDclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_untypedNameParamDcl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2024
            self.ambiguousIdentifier()
            self.state = 2026
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,237,self._ctx)
            if la_ == 1:
                self.state = 2025
                self.parameterType()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypedNameParamDclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typedName(self):
            return self.getTypedRuleContext(vbaParser.TypedNameContext,0)


        def arrayDesignator(self):
            return self.getTypedRuleContext(vbaParser.ArrayDesignatorContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_typedNameParamDcl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypedNameParamDcl" ):
                listener.enterTypedNameParamDcl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypedNameParamDcl" ):
                listener.exitTypedNameParamDcl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypedNameParamDcl" ):
                return visitor.visitTypedNameParamDcl(self)
            else:
                return visitor.visitChildren(self)




    def typedNameParamDcl(self):

        localctx = vbaParser.TypedNameParamDclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_typedNameParamDcl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2028
            self.typedName()
            self.state = 2030
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==249:
                self.state = 2029
                self.arrayDesignator()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptionalPrefixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPTIONAL(self):
            return self.getToken(vbaParser.OPTIONAL, 0)

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def parameterMechanism(self):
            return self.getTypedRuleContext(vbaParser.ParameterMechanismContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_optionalPrefix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptionalPrefix" ):
                listener.enterOptionalPrefix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptionalPrefix" ):
                listener.exitOptionalPrefix(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOptionalPrefix" ):
                return visitor.visitOptionalPrefix(self)
            else:
                return visitor.visitChildren(self)




    def optionalPrefix(self):

        localctx = vbaParser.OptionalPrefixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_optionalPrefix)
        try:
            self.state = 2042
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [140]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2032
                self.match(vbaParser.OPTIONAL)
                self.state = 2036
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,239,self._ctx)
                if la_ == 1:
                    self.state = 2033
                    self.wsc()
                    self.state = 2034
                    self.parameterMechanism()


                pass
            elif token in [16, 17]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2038
                self.parameterMechanism()
                self.state = 2039
                self.wsc()
                self.state = 2040
                self.match(vbaParser.OPTIONAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterMechanismContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BYVAL(self):
            return self.getToken(vbaParser.BYVAL, 0)

        def BYREF(self):
            return self.getToken(vbaParser.BYREF, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_parameterMechanism

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterMechanism" ):
                listener.enterParameterMechanism(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterMechanism" ):
                listener.exitParameterMechanism(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameterMechanism" ):
                return visitor.visitParameterMechanism(self)
            else:
                return visitor.visitChildren(self)




    def parameterMechanism(self):

        localctx = vbaParser.ParameterMechanismContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_parameterMechanism)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2044
            _la = self._input.LA(1)
            if not(_la==16 or _la==17):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def AS(self):
            return self.getToken(vbaParser.AS, 0)

        def typeExpression(self):
            return self.getTypedRuleContext(vbaParser.TypeExpressionContext,0)


        def ANY(self):
            return self.getToken(vbaParser.ANY, 0)

        def arrayDesignator(self):
            return self.getTypedRuleContext(vbaParser.ArrayDesignatorContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_parameterType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterType" ):
                listener.enterParameterType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterType" ):
                listener.exitParameterType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameterType" ):
                return visitor.visitParameterType(self)
            else:
                return visitor.visitChildren(self)




    def parameterType(self):

        localctx = vbaParser.ParameterTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_parameterType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2047
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==249:
                self.state = 2046
                self.arrayDesignator()


            self.state = 2049
            self.wsc()
            self.state = 2050
            self.match(vbaParser.AS)
            self.state = 2051
            self.wsc()
            self.state = 2054
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 2, 4, 8, 9, 11, 12, 13, 14, 15, 18, 19, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 69, 70, 71, 81, 86, 92, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 112, 115, 116, 117, 118, 119, 120, 123, 124, 125, 126, 127, 129, 135, 136, 142, 147, 148, 152, 154, 157, 161, 165, 167, 168, 171, 173, 174, 177, 183, 210, 211, 212, 215, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 244, 247, 256, 280, 281]:
                self.state = 2052
                self.typeExpression()
                pass
            elif token in [6]:
                self.state = 2053
                self.match(vbaParser.ANY)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefaultValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQ(self):
            return self.getToken(vbaParser.EQ, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(vbaParser.ConstantExpressionContext,0)


        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_defaultValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefaultValue" ):
                listener.enterDefaultValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefaultValue" ):
                listener.exitDefaultValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefaultValue" ):
                return visitor.visitDefaultValue(self)
            else:
                return visitor.visitChildren(self)




    def defaultValue(self):

        localctx = vbaParser.DefaultValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_defaultValue)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2056
            self.match(vbaParser.EQ)
            self.state = 2058
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==271 or _la==278:
                self.state = 2057
                self.wsc()


            self.state = 2060
            self.constantExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EventHandlerNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_eventHandlerName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEventHandlerName" ):
                listener.enterEventHandlerName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEventHandlerName" ):
                listener.exitEventHandlerName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEventHandlerName" ):
                return visitor.visitEventHandlerName(self)
            else:
                return visitor.visitChildren(self)




    def eventHandlerName(self):

        localctx = vbaParser.EventHandlerNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_eventHandlerName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2062
            self.ambiguousIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImplementedNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_implementedName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImplementedName" ):
                listener.enterImplementedName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImplementedName" ):
                listener.exitImplementedName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImplementedName" ):
                return visitor.visitImplementedName(self)
            else:
                return visitor.visitChildren(self)




    def implementedName(self):

        localctx = vbaParser.ImplementedNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_implementedName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2064
            self.ambiguousIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LifecycleHandlerNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASS_INITIALIZE(self):
            return self.getToken(vbaParser.CLASS_INITIALIZE, 0)

        def CLASS_TERMINATE(self):
            return self.getToken(vbaParser.CLASS_TERMINATE, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_lifecycleHandlerName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLifecycleHandlerName" ):
                listener.enterLifecycleHandlerName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLifecycleHandlerName" ):
                listener.exitLifecycleHandlerName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLifecycleHandlerName" ):
                return visitor.visitLifecycleHandlerName(self)
            else:
                return visitor.visitChildren(self)




    def lifecycleHandlerName(self):

        localctx = vbaParser.LifecycleHandlerNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_lifecycleHandlerName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2066
            _la = self._input.LA(1)
            if not(_la==34 or _la==35):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcedureBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statementBlock(self):
            return self.getTypedRuleContext(vbaParser.StatementBlockContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_procedureBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedureBody" ):
                listener.enterProcedureBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedureBody" ):
                listener.exitProcedureBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProcedureBody" ):
                return visitor.visitProcedureBody(self)
            else:
                return visitor.visitChildren(self)




    def procedureBody(self):

        localctx = vbaParser.ProcedureBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_procedureBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2068
            self.statementBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def blockStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.BlockStatementContext)
            else:
                return self.getTypedRuleContext(vbaParser.BlockStatementContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_statementBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatementBlock" ):
                listener.enterStatementBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatementBlock" ):
                listener.exitStatementBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatementBlock" ):
                return visitor.visitStatementBlock(self)
            else:
                return visitor.visitChildren(self)




    def statementBlock(self):

        localctx = vbaParser.StatementBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_statementBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2071 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2070
                    self.blockStatement()

                else:
                    raise NoViableAltException(self)
                self.state = 2073 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,244,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def endOfLineNoWs(self):
            return self.getTypedRuleContext(vbaParser.EndOfLineNoWsContext,0)


        def statementLabelDefinition(self):
            return self.getTypedRuleContext(vbaParser.StatementLabelDefinitionContext,0)


        def endOfStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfStatementContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfStatementContext,i)


        def remStatement(self):
            return self.getTypedRuleContext(vbaParser.RemStatementContext,0)


        def statement(self):
            return self.getTypedRuleContext(vbaParser.StatementContext,0)


        def attributeStatement(self):
            return self.getTypedRuleContext(vbaParser.AttributeStatementContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_blockStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockStatement" ):
                listener.enterBlockStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockStatement" ):
                listener.exitBlockStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlockStatement" ):
                return visitor.visitBlockStatement(self)
            else:
                return visitor.visitChildren(self)




    def blockStatement(self):

        localctx = vbaParser.BlockStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_blockStatement)
        try:
            self.state = 2101
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,248,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2078
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,245,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2075
                        self.endOfStatement() 
                    self.state = 2080
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,245,self._ctx)

                self.state = 2081
                self.endOfLineNoWs()
                self.state = 2082
                self.statementLabelDefinition()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2085 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2084
                        self.endOfStatement()

                    else:
                        raise NoViableAltException(self)
                    self.state = 2087 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,246,self._ctx)

                self.state = 2089
                self.remStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2091
                self.statement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2095
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,247,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2092
                        self.endOfStatement() 
                    self.state = 2097
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,247,self._ctx)

                self.state = 2098
                self.endOfLineNoWs()
                self.state = 2099
                self.attributeStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def controlStatement(self):
            return self.getTypedRuleContext(vbaParser.ControlStatementContext,0)


        def dataManipulationStatement(self):
            return self.getTypedRuleContext(vbaParser.DataManipulationStatementContext,0)


        def endOfStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfStatementContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfStatementContext,i)


        def errorHandlingStatement(self):
            return self.getTypedRuleContext(vbaParser.ErrorHandlingStatementContext,0)


        def fileStatement(self):
            return self.getTypedRuleContext(vbaParser.FileStatementContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = vbaParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_statement)
        self._la = 0 # Token type
        try:
            self.state = 2125
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,252,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2103
                self.controlStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2105 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2104
                    self.endOfStatement()
                    self.state = 2107 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (((((_la - 272)) & ~0x3f) == 0 and ((1 << (_la - 272)) & 87) != 0)):
                        break

                self.state = 2109
                self.dataManipulationStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2112 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2111
                    self.endOfStatement()
                    self.state = 2114 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (((((_la - 272)) & ~0x3f) == 0 and ((1 << (_la - 272)) & 87) != 0)):
                        break

                self.state = 2116
                self.errorHandlingStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2119 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2118
                    self.endOfStatement()
                    self.state = 2121 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (((((_la - 272)) & ~0x3f) == 0 and ((1 << (_la - 272)) & 87) != 0)):
                        break

                self.state = 2123
                self.fileStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementLabelDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifierStatementLabel(self):
            return self.getTypedRuleContext(vbaParser.IdentifierStatementLabelContext,0)


        def COLON(self):
            return self.getToken(vbaParser.COLON, 0)

        def lineNumberLabel(self):
            return self.getTypedRuleContext(vbaParser.LineNumberLabelContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_statementLabelDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatementLabelDefinition" ):
                listener.enterStatementLabelDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatementLabelDefinition" ):
                listener.exitStatementLabelDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatementLabelDefinition" ):
                return visitor.visitStatementLabelDefinition(self)
            else:
                return visitor.visitChildren(self)




    def statementLabelDefinition(self):

        localctx = vbaParser.StatementLabelDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_statementLabelDefinition)
        try:
            self.state = 2134
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2, 4, 8, 11, 12, 13, 29, 30, 33, 34, 35, 40, 81, 92, 105, 110, 112, 124, 125, 126, 127, 129, 135, 142, 147, 152, 154, 157, 171, 177, 212, 215, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 280]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2127
                self.identifierStatementLabel()
                self.state = 2128
                self.match(vbaParser.COLON)
                pass
            elif token in [268]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2130
                self.lineNumberLabel()
                self.state = 2132
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,253,self._ctx)
                if la_ == 1:
                    self.state = 2131
                    self.match(vbaParser.COLON)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementLabelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifierStatementLabel(self):
            return self.getTypedRuleContext(vbaParser.IdentifierStatementLabelContext,0)


        def lineNumberLabel(self):
            return self.getTypedRuleContext(vbaParser.LineNumberLabelContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_statementLabel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatementLabel" ):
                listener.enterStatementLabel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatementLabel" ):
                listener.exitStatementLabel(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatementLabel" ):
                return visitor.visitStatementLabel(self)
            else:
                return visitor.visitChildren(self)




    def statementLabel(self):

        localctx = vbaParser.StatementLabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_statementLabel)
        try:
            self.state = 2138
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2, 4, 8, 11, 12, 13, 29, 30, 33, 34, 35, 40, 81, 92, 105, 110, 112, 124, 125, 126, 127, 129, 135, 142, 147, 152, 154, 157, 171, 177, 212, 215, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 280]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2136
                self.identifierStatementLabel()
                pass
            elif token in [268]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2137
                self.lineNumberLabel()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementLabelListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statementLabel(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.StatementLabelContext)
            else:
                return self.getTypedRuleContext(vbaParser.StatementLabelContext,i)


        def COMMA(self):
            return self.getToken(vbaParser.COMMA, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_statementLabelList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatementLabelList" ):
                listener.enterStatementLabelList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatementLabelList" ):
                listener.exitStatementLabelList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatementLabelList" ):
                return visitor.visitStatementLabelList(self)
            else:
                return visitor.visitChildren(self)




    def statementLabelList(self):

        localctx = vbaParser.StatementLabelListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_statementLabelList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2140
            self.statementLabel()
            self.state = 2149
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,258,self._ctx)
            if la_ == 1:
                self.state = 2142
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==271 or _la==278:
                    self.state = 2141
                    self.wsc()


                self.state = 2144
                self.match(vbaParser.COMMA)
                self.state = 2146
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==271 or _la==278:
                    self.state = 2145
                    self.wsc()


                self.state = 2148
                self.statementLabel()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierStatementLabelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_identifierStatementLabel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierStatementLabel" ):
                listener.enterIdentifierStatementLabel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierStatementLabel" ):
                listener.exitIdentifierStatementLabel(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifierStatementLabel" ):
                return visitor.visitIdentifierStatementLabel(self)
            else:
                return visitor.visitChildren(self)




    def identifierStatementLabel(self):

        localctx = vbaParser.IdentifierStatementLabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_identifierStatementLabel)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2151
            self.ambiguousIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LineNumberLabelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGERLITERAL(self):
            return self.getToken(vbaParser.INTEGERLITERAL, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_lineNumberLabel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLineNumberLabel" ):
                listener.enterLineNumberLabel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLineNumberLabel" ):
                listener.exitLineNumberLabel(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLineNumberLabel" ):
                return visitor.visitLineNumberLabel(self)
            else:
                return visitor.visitChildren(self)




    def lineNumberLabel(self):

        localctx = vbaParser.LineNumberLabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_lineNumberLabel)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2153
            self.match(vbaParser.INTEGERLITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RemStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REMCOMMENT(self):
            return self.getToken(vbaParser.REMCOMMENT, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_remStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRemStatement" ):
                listener.enterRemStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRemStatement" ):
                listener.exitRemStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRemStatement" ):
                return visitor.visitRemStatement(self)
            else:
                return visitor.visitChildren(self)




    def remStatement(self):

        localctx = vbaParser.RemStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_remStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2155
            self.match(vbaParser.REMCOMMENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ControlStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ifStatement(self):
            return self.getTypedRuleContext(vbaParser.IfStatementContext,0)


        def endOfStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfStatementContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfStatementContext,i)


        def endOfLine(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfLineContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfLineContext,i)


        def controlStatementExceptMultilineIf(self):
            return self.getTypedRuleContext(vbaParser.ControlStatementExceptMultilineIfContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_controlStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterControlStatement" ):
                listener.enterControlStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitControlStatement" ):
                listener.exitControlStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitControlStatement" ):
                return visitor.visitControlStatement(self)
            else:
                return visitor.visitChildren(self)




    def controlStatement(self):

        localctx = vbaParser.ControlStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_controlStatement)
        self._la = 0 # Token type
        try:
            self.state = 2177
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,262,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2160
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,259,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2157
                        self.endOfStatement() 
                    self.state = 2162
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,259,self._ctx)

                self.state = 2164 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2163
                    self.endOfLine()
                    self.state = 2166 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (((((_la - 272)) & ~0x3f) == 0 and ((1 << (_la - 272)) & 71) != 0)):
                        break

                self.state = 2168
                self.ifStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2171 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2170
                    self.endOfStatement()
                    self.state = 2173 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (((((_la - 272)) & ~0x3f) == 0 and ((1 << (_la - 272)) & 87) != 0)):
                        break

                self.state = 2175
                self.controlStatementExceptMultilineIf()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ControlStatementExceptMultilineIfContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def callStatement(self):
            return self.getTypedRuleContext(vbaParser.CallStatementContext,0)


        def whileStatement(self):
            return self.getTypedRuleContext(vbaParser.WhileStatementContext,0)


        def forStatement(self):
            return self.getTypedRuleContext(vbaParser.ForStatementContext,0)


        def exitForStatement(self):
            return self.getTypedRuleContext(vbaParser.ExitForStatementContext,0)


        def doStatement(self):
            return self.getTypedRuleContext(vbaParser.DoStatementContext,0)


        def exitDoStatement(self):
            return self.getTypedRuleContext(vbaParser.ExitDoStatementContext,0)


        def singleLineIfStatement(self):
            return self.getTypedRuleContext(vbaParser.SingleLineIfStatementContext,0)


        def selectCaseStatement(self):
            return self.getTypedRuleContext(vbaParser.SelectCaseStatementContext,0)


        def stopStatement(self):
            return self.getTypedRuleContext(vbaParser.StopStatementContext,0)


        def gotoStatement(self):
            return self.getTypedRuleContext(vbaParser.GotoStatementContext,0)


        def onGotoStatement(self):
            return self.getTypedRuleContext(vbaParser.OnGotoStatementContext,0)


        def gosubStatement(self):
            return self.getTypedRuleContext(vbaParser.GosubStatementContext,0)


        def returnStatement(self):
            return self.getTypedRuleContext(vbaParser.ReturnStatementContext,0)


        def onGosubStatement(self):
            return self.getTypedRuleContext(vbaParser.OnGosubStatementContext,0)


        def forEachStatement(self):
            return self.getTypedRuleContext(vbaParser.ForEachStatementContext,0)


        def exitSubStatement(self):
            return self.getTypedRuleContext(vbaParser.ExitSubStatementContext,0)


        def exitFunctionStatement(self):
            return self.getTypedRuleContext(vbaParser.ExitFunctionStatementContext,0)


        def exitPropertyStatement(self):
            return self.getTypedRuleContext(vbaParser.ExitPropertyStatementContext,0)


        def raiseeventStatement(self):
            return self.getTypedRuleContext(vbaParser.RaiseeventStatementContext,0)


        def withStatement(self):
            return self.getTypedRuleContext(vbaParser.WithStatementContext,0)


        def endStatement(self):
            return self.getTypedRuleContext(vbaParser.EndStatementContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_controlStatementExceptMultilineIf

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterControlStatementExceptMultilineIf" ):
                listener.enterControlStatementExceptMultilineIf(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitControlStatementExceptMultilineIf" ):
                listener.exitControlStatementExceptMultilineIf(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitControlStatementExceptMultilineIf" ):
                return visitor.visitControlStatementExceptMultilineIf(self)
            else:
                return visitor.visitChildren(self)




    def controlStatementExceptMultilineIf(self):

        localctx = vbaParser.ControlStatementExceptMultilineIfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_controlStatementExceptMultilineIf)
        try:
            self.state = 2200
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,263,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2179
                self.callStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2180
                self.whileStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2181
                self.forStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2182
                self.exitForStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2183
                self.doStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2184
                self.exitDoStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2185
                self.singleLineIfStatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2186
                self.selectCaseStatement()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2187
                self.stopStatement()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2188
                self.gotoStatement()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 2189
                self.onGotoStatement()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 2190
                self.gosubStatement()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 2191
                self.returnStatement()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 2192
                self.onGosubStatement()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 2193
                self.forEachStatement()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 2194
                self.exitSubStatement()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 2195
                self.exitFunctionStatement()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 2196
                self.exitPropertyStatement()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 2197
                self.raiseeventStatement()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 2198
                self.withStatement()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 2199
                self.endStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CallStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALL(self):
            return self.getToken(vbaParser.CALL, 0)

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def simpleNameExpression(self):
            return self.getTypedRuleContext(vbaParser.SimpleNameExpressionContext,0)


        def memberAccessExpression(self):
            return self.getTypedRuleContext(vbaParser.MemberAccessExpressionContext,0)


        def indexExpression(self):
            return self.getTypedRuleContext(vbaParser.IndexExpressionContext,0)


        def withExpression(self):
            return self.getTypedRuleContext(vbaParser.WithExpressionContext,0)


        def argumentList(self):
            return self.getTypedRuleContext(vbaParser.ArgumentListContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_callStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCallStatement" ):
                listener.enterCallStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCallStatement" ):
                listener.exitCallStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCallStatement" ):
                return visitor.visitCallStatement(self)
            else:
                return visitor.visitChildren(self)




    def callStatement(self):

        localctx = vbaParser.CallStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_callStatement)
        try:
            self.state = 2220
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [20]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2202
                self.match(vbaParser.CALL)
                self.state = 2203
                self.wsc()
                self.state = 2208
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,264,self._ctx)
                if la_ == 1:
                    self.state = 2204
                    self.simpleNameExpression()
                    pass

                elif la_ == 2:
                    self.state = 2205
                    self.memberAccessExpression()
                    pass

                elif la_ == 3:
                    self.state = 2206
                    self.indexExpression()
                    pass

                elif la_ == 4:
                    self.state = 2207
                    self.withExpression()
                    pass


                pass
            elif token in [1, 2, 4, 8, 9, 11, 12, 13, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 42, 43, 44, 45, 48, 50, 69, 81, 86, 92, 99, 100, 101, 105, 106, 107, 108, 110, 112, 123, 124, 125, 126, 127, 129, 135, 142, 147, 148, 152, 154, 157, 161, 165, 171, 173, 177, 183, 212, 215, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 244, 247, 256, 280, 281]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2213
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,265,self._ctx)
                if la_ == 1:
                    self.state = 2210
                    self.simpleNameExpression()
                    pass

                elif la_ == 2:
                    self.state = 2211
                    self.memberAccessExpression()
                    pass

                elif la_ == 3:
                    self.state = 2212
                    self.withExpression()
                    pass


                self.state = 2218
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,266,self._ctx)
                if la_ == 1:
                    self.state = 2215
                    self.wsc()
                    self.state = 2216
                    self.argumentList()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(vbaParser.WHILE, 0)

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def booleanExpression(self):
            return self.getTypedRuleContext(vbaParser.BooleanExpressionContext,0)


        def WEND(self):
            return self.getToken(vbaParser.WEND, 0)

        def statementBlock(self):
            return self.getTypedRuleContext(vbaParser.StatementBlockContext,0)


        def endOfStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfStatementContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfStatementContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_whileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileStatement" ):
                listener.enterWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileStatement" ):
                listener.exitWhileStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhileStatement" ):
                return visitor.visitWhileStatement(self)
            else:
                return visitor.visitChildren(self)




    def whileStatement(self):

        localctx = vbaParser.WhileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_whileStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2222
            self.match(vbaParser.WHILE)
            self.state = 2223
            self.wsc()
            self.state = 2224
            self.booleanExpression()
            self.state = 2226
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,268,self._ctx)
            if la_ == 1:
                self.state = 2225
                self.statementBlock()


            self.state = 2229 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2228
                self.endOfStatement()
                self.state = 2231 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 272)) & ~0x3f) == 0 and ((1 << (_la - 272)) & 87) != 0)):
                    break

            self.state = 2233
            self.match(vbaParser.WEND)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleForStatement(self):
            return self.getTypedRuleContext(vbaParser.SimpleForStatementContext,0)


        def explicitForStatement(self):
            return self.getTypedRuleContext(vbaParser.ExplicitForStatementContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_forStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForStatement" ):
                listener.enterForStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForStatement" ):
                listener.exitForStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForStatement" ):
                return visitor.visitForStatement(self)
            else:
                return visitor.visitChildren(self)




    def forStatement(self):

        localctx = vbaParser.ForStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_forStatement)
        try:
            self.state = 2237
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,270,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2235
                self.simpleForStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2236
                self.explicitForStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleForStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def forClause(self):
            return self.getTypedRuleContext(vbaParser.ForClauseContext,0)


        def NEXT(self):
            return self.getToken(vbaParser.NEXT, 0)

        def statementBlock(self):
            return self.getTypedRuleContext(vbaParser.StatementBlockContext,0)


        def endOfStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfStatementContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfStatementContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_simpleForStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleForStatement" ):
                listener.enterSimpleForStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleForStatement" ):
                listener.exitSimpleForStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleForStatement" ):
                return visitor.visitSimpleForStatement(self)
            else:
                return visitor.visitChildren(self)




    def simpleForStatement(self):

        localctx = vbaParser.SimpleForStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_simpleForStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2239
            self.forClause()
            self.state = 2241
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,271,self._ctx)
            if la_ == 1:
                self.state = 2240
                self.statementBlock()


            self.state = 2244 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2243
                self.endOfStatement()
                self.state = 2246 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 272)) & ~0x3f) == 0 and ((1 << (_la - 272)) & 87) != 0)):
                    break

            self.state = 2248
            self.match(vbaParser.NEXT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExplicitForStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def forClause(self):
            return self.getTypedRuleContext(vbaParser.ForClauseContext,0)


        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def boundVariableExpression(self):
            return self.getTypedRuleContext(vbaParser.BoundVariableExpressionContext,0)


        def NEXT(self):
            return self.getToken(vbaParser.NEXT, 0)

        def statementBlock(self):
            return self.getTypedRuleContext(vbaParser.StatementBlockContext,0)


        def endOfStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfStatementContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfStatementContext,i)


        def nestedForStatement(self):
            return self.getTypedRuleContext(vbaParser.NestedForStatementContext,0)


        def COMMA(self):
            return self.getToken(vbaParser.COMMA, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_explicitForStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplicitForStatement" ):
                listener.enterExplicitForStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplicitForStatement" ):
                listener.exitExplicitForStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExplicitForStatement" ):
                return visitor.visitExplicitForStatement(self)
            else:
                return visitor.visitChildren(self)




    def explicitForStatement(self):

        localctx = vbaParser.ExplicitForStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_explicitForStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2250
            self.forClause()
            self.state = 2252
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,273,self._ctx)
            if la_ == 1:
                self.state = 2251
                self.statementBlock()


            self.state = 2255 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2254
                self.endOfStatement()
                self.state = 2257 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 272)) & ~0x3f) == 0 and ((1 << (_la - 272)) & 87) != 0)):
                    break

            self.state = 2266
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [130]:
                self.state = 2259
                self.match(vbaParser.NEXT)
                pass
            elif token in [88]:
                self.state = 2260
                self.nestedForStatement()
                self.state = 2262
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==271 or _la==278:
                    self.state = 2261
                    self.wsc()


                self.state = 2264
                self.match(vbaParser.COMMA)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2268
            self.wsc()
            self.state = 2269
            self.boundVariableExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NestedForStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def explicitForStatement(self):
            return self.getTypedRuleContext(vbaParser.ExplicitForStatementContext,0)


        def explicitForEachStatement(self):
            return self.getTypedRuleContext(vbaParser.ExplicitForEachStatementContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_nestedForStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNestedForStatement" ):
                listener.enterNestedForStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNestedForStatement" ):
                listener.exitNestedForStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNestedForStatement" ):
                return visitor.visitNestedForStatement(self)
            else:
                return visitor.visitChildren(self)




    def nestedForStatement(self):

        localctx = vbaParser.NestedForStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_nestedForStatement)
        try:
            self.state = 2273
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,277,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2271
                self.explicitForStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2272
                self.explicitForEachStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(vbaParser.FOR, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def boundVariableExpression(self):
            return self.getTypedRuleContext(vbaParser.BoundVariableExpressionContext,0)


        def EQ(self):
            return self.getToken(vbaParser.EQ, 0)

        def startValue(self):
            return self.getTypedRuleContext(vbaParser.StartValueContext,0)


        def TO(self):
            return self.getToken(vbaParser.TO, 0)

        def endValue(self):
            return self.getTypedRuleContext(vbaParser.EndValueContext,0)


        def stepClause(self):
            return self.getTypedRuleContext(vbaParser.StepClauseContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_forClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForClause" ):
                listener.enterForClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForClause" ):
                listener.exitForClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForClause" ):
                return visitor.visitForClause(self)
            else:
                return visitor.visitChildren(self)




    def forClause(self):

        localctx = vbaParser.ForClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_forClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2275
            self.match(vbaParser.FOR)
            self.state = 2276
            self.wsc()
            self.state = 2277
            self.boundVariableExpression()
            self.state = 2279
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==271 or _la==278:
                self.state = 2278
                self.wsc()


            self.state = 2281
            self.match(vbaParser.EQ)
            self.state = 2283
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==271 or _la==278:
                self.state = 2282
                self.wsc()


            self.state = 2285
            self.startValue()
            self.state = 2286
            self.wsc()
            self.state = 2287
            self.match(vbaParser.TO)
            self.state = 2288
            self.wsc()
            self.state = 2289
            self.endValue()
            self.state = 2293
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,280,self._ctx)
            if la_ == 1:
                self.state = 2290
                self.wsc()
                self.state = 2291
                self.stepClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StartValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_startValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStartValue" ):
                listener.enterStartValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStartValue" ):
                listener.exitStartValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStartValue" ):
                return visitor.visitStartValue(self)
            else:
                return visitor.visitChildren(self)




    def startValue(self):

        localctx = vbaParser.StartValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_startValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2295
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EndValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_endValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEndValue" ):
                listener.enterEndValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEndValue" ):
                listener.exitEndValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEndValue" ):
                return visitor.visitEndValue(self)
            else:
                return visitor.visitChildren(self)




    def endValue(self):

        localctx = vbaParser.EndValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_endValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2297
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StepClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STEP(self):
            return self.getToken(vbaParser.STEP, 0)

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def stepIncrement(self):
            return self.getTypedRuleContext(vbaParser.StepIncrementContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_stepClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStepClause" ):
                listener.enterStepClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStepClause" ):
                listener.exitStepClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStepClause" ):
                return visitor.visitStepClause(self)
            else:
                return visitor.visitChildren(self)




    def stepClause(self):

        localctx = vbaParser.StepClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_stepClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2299
            self.match(vbaParser.STEP)
            self.state = 2300
            self.wsc()
            self.state = 2301
            self.stepIncrement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StepIncrementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_stepIncrement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStepIncrement" ):
                listener.enterStepIncrement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStepIncrement" ):
                listener.exitStepIncrement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStepIncrement" ):
                return visitor.visitStepIncrement(self)
            else:
                return visitor.visitChildren(self)




    def stepIncrement(self):

        localctx = vbaParser.StepIncrementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_stepIncrement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2303
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForEachStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleForEachStatement(self):
            return self.getTypedRuleContext(vbaParser.SimpleForEachStatementContext,0)


        def explicitForEachStatement(self):
            return self.getTypedRuleContext(vbaParser.ExplicitForEachStatementContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_forEachStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForEachStatement" ):
                listener.enterForEachStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForEachStatement" ):
                listener.exitForEachStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForEachStatement" ):
                return visitor.visitForEachStatement(self)
            else:
                return visitor.visitChildren(self)




    def forEachStatement(self):

        localctx = vbaParser.ForEachStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_forEachStatement)
        try:
            self.state = 2307
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,281,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2305
                self.simpleForEachStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2306
                self.explicitForEachStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleForEachStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def forEachClause(self):
            return self.getTypedRuleContext(vbaParser.ForEachClauseContext,0)


        def NEXT(self):
            return self.getToken(vbaParser.NEXT, 0)

        def statementBlock(self):
            return self.getTypedRuleContext(vbaParser.StatementBlockContext,0)


        def endOfStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfStatementContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfStatementContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_simpleForEachStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleForEachStatement" ):
                listener.enterSimpleForEachStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleForEachStatement" ):
                listener.exitSimpleForEachStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleForEachStatement" ):
                return visitor.visitSimpleForEachStatement(self)
            else:
                return visitor.visitChildren(self)




    def simpleForEachStatement(self):

        localctx = vbaParser.SimpleForEachStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_simpleForEachStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2309
            self.forEachClause()
            self.state = 2311
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,282,self._ctx)
            if la_ == 1:
                self.state = 2310
                self.statementBlock()


            self.state = 2314 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2313
                self.endOfStatement()
                self.state = 2316 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 272)) & ~0x3f) == 0 and ((1 << (_la - 272)) & 87) != 0)):
                    break

            self.state = 2318
            self.match(vbaParser.NEXT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExplicitForEachStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def forEachClause(self):
            return self.getTypedRuleContext(vbaParser.ForEachClauseContext,0)


        def endOfStatement(self):
            return self.getTypedRuleContext(vbaParser.EndOfStatementContext,0)


        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def boundVariableExpression(self):
            return self.getTypedRuleContext(vbaParser.BoundVariableExpressionContext,0)


        def NEXT(self):
            return self.getToken(vbaParser.NEXT, 0)

        def statementBlock(self):
            return self.getTypedRuleContext(vbaParser.StatementBlockContext,0)


        def nestedForStatement(self):
            return self.getTypedRuleContext(vbaParser.NestedForStatementContext,0)


        def COMMA(self):
            return self.getToken(vbaParser.COMMA, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_explicitForEachStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplicitForEachStatement" ):
                listener.enterExplicitForEachStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplicitForEachStatement" ):
                listener.exitExplicitForEachStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExplicitForEachStatement" ):
                return visitor.visitExplicitForEachStatement(self)
            else:
                return visitor.visitChildren(self)




    def explicitForEachStatement(self):

        localctx = vbaParser.ExplicitForEachStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_explicitForEachStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2320
            self.forEachClause()
            self.state = 2322
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,284,self._ctx)
            if la_ == 1:
                self.state = 2321
                self.statementBlock()


            self.state = 2324
            self.endOfStatement()
            self.state = 2332
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [130]:
                self.state = 2325
                self.match(vbaParser.NEXT)
                pass
            elif token in [88]:
                self.state = 2326
                self.nestedForStatement()
                self.state = 2328
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==271 or _la==278:
                    self.state = 2327
                    self.wsc()


                self.state = 2330
                self.match(vbaParser.COMMA)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2334
            self.wsc()
            self.state = 2335
            self.boundVariableExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForEachClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(vbaParser.FOR, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def EACH(self):
            return self.getToken(vbaParser.EACH, 0)

        def boundVariableExpression(self):
            return self.getTypedRuleContext(vbaParser.BoundVariableExpressionContext,0)


        def IN(self):
            return self.getToken(vbaParser.IN, 0)

        def collection(self):
            return self.getTypedRuleContext(vbaParser.CollectionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_forEachClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForEachClause" ):
                listener.enterForEachClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForEachClause" ):
                listener.exitForEachClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForEachClause" ):
                return visitor.visitForEachClause(self)
            else:
                return visitor.visitChildren(self)




    def forEachClause(self):

        localctx = vbaParser.ForEachClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_forEachClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2337
            self.match(vbaParser.FOR)
            self.state = 2338
            self.wsc()
            self.state = 2339
            self.match(vbaParser.EACH)
            self.state = 2341
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==271 or _la==278:
                self.state = 2340
                self.wsc()


            self.state = 2343
            self.boundVariableExpression()
            self.state = 2345
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==271 or _la==278:
                self.state = 2344
                self.wsc()


            self.state = 2347
            self.match(vbaParser.IN)
            self.state = 2349
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==271 or _la==278:
                self.state = 2348
                self.wsc()


            self.state = 2351
            self.collection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CollectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_collection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollection" ):
                listener.enterCollection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollection" ):
                listener.exitCollection(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCollection" ):
                return visitor.visitCollection(self)
            else:
                return visitor.visitChildren(self)




    def collection(self):

        localctx = vbaParser.CollectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_collection)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2353
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExitForStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXIT(self):
            return self.getToken(vbaParser.EXIT, 0)

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def FOR(self):
            return self.getToken(vbaParser.FOR, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_exitForStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExitForStatement" ):
                listener.enterExitForStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExitForStatement" ):
                listener.exitExitForStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExitForStatement" ):
                return visitor.visitExitForStatement(self)
            else:
                return visitor.visitChildren(self)




    def exitForStatement(self):

        localctx = vbaParser.ExitForStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_exitForStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2355
            self.match(vbaParser.EXIT)
            self.state = 2356
            self.wsc()
            self.state = 2357
            self.match(vbaParser.FOR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DoStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DO(self):
            return self.getToken(vbaParser.DO, 0)

        def LOOP(self):
            return self.getToken(vbaParser.LOOP, 0)

        def conditionClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ConditionClauseContext)
            else:
                return self.getTypedRuleContext(vbaParser.ConditionClauseContext,i)


        def statementBlock(self):
            return self.getTypedRuleContext(vbaParser.StatementBlockContext,0)


        def endOfStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfStatementContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfStatementContext,i)


        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_doStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoStatement" ):
                listener.enterDoStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoStatement" ):
                listener.exitDoStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDoStatement" ):
                return visitor.visitDoStatement(self)
            else:
                return visitor.visitChildren(self)




    def doStatement(self):

        localctx = vbaParser.DoStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_doStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2359
            self.match(vbaParser.DO)
            self.state = 2364
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,291,self._ctx)
            if la_ == 1:
                self.state = 2361
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==271 or _la==278:
                    self.state = 2360
                    self.wsc()


                self.state = 2363
                self.conditionClause()


            self.state = 2367
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,292,self._ctx)
            if la_ == 1:
                self.state = 2366
                self.statementBlock()


            self.state = 2370 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2369
                self.endOfStatement()
                self.state = 2372 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 272)) & ~0x3f) == 0 and ((1 << (_la - 272)) & 87) != 0)):
                    break

            self.state = 2374
            self.match(vbaParser.LOOP)
            self.state = 2379
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,295,self._ctx)
            if la_ == 1:
                self.state = 2376
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==271 or _la==278:
                    self.state = 2375
                    self.wsc()


                self.state = 2378
                self.conditionClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConditionClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def whileClause(self):
            return self.getTypedRuleContext(vbaParser.WhileClauseContext,0)


        def untilClause(self):
            return self.getTypedRuleContext(vbaParser.UntilClauseContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_conditionClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditionClause" ):
                listener.enterConditionClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditionClause" ):
                listener.exitConditionClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConditionClause" ):
                return visitor.visitConditionClause(self)
            else:
                return visitor.visitChildren(self)




    def conditionClause(self):

        localctx = vbaParser.ConditionClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_conditionClause)
        try:
            self.state = 2383
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [214]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2381
                self.whileClause()
                pass
            elif token in [185]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2382
                self.untilClause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(vbaParser.WHILE, 0)

        def booleanExpression(self):
            return self.getTypedRuleContext(vbaParser.BooleanExpressionContext,0)


        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_whileClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileClause" ):
                listener.enterWhileClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileClause" ):
                listener.exitWhileClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhileClause" ):
                return visitor.visitWhileClause(self)
            else:
                return visitor.visitChildren(self)




    def whileClause(self):

        localctx = vbaParser.WhileClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_whileClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2385
            self.match(vbaParser.WHILE)
            self.state = 2387
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==271 or _la==278:
                self.state = 2386
                self.wsc()


            self.state = 2389
            self.booleanExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UntilClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNTIL(self):
            return self.getToken(vbaParser.UNTIL, 0)

        def booleanExpression(self):
            return self.getTypedRuleContext(vbaParser.BooleanExpressionContext,0)


        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_untilClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUntilClause" ):
                listener.enterUntilClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUntilClause" ):
                listener.exitUntilClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUntilClause" ):
                return visitor.visitUntilClause(self)
            else:
                return visitor.visitChildren(self)




    def untilClause(self):

        localctx = vbaParser.UntilClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_untilClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2391
            self.match(vbaParser.UNTIL)
            self.state = 2393
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==271 or _la==278:
                self.state = 2392
                self.wsc()


            self.state = 2395
            self.booleanExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExitDoStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXIT(self):
            return self.getToken(vbaParser.EXIT, 0)

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def DO(self):
            return self.getToken(vbaParser.DO, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_exitDoStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExitDoStatement" ):
                listener.enterExitDoStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExitDoStatement" ):
                listener.exitExitDoStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExitDoStatement" ):
                return visitor.visitExitDoStatement(self)
            else:
                return visitor.visitChildren(self)




    def exitDoStatement(self):

        localctx = vbaParser.ExitDoStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_exitDoStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2397
            self.match(vbaParser.EXIT)
            self.state = 2398
            self.wsc()
            self.state = 2399
            self.match(vbaParser.DO)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.IF)
            else:
                return self.getToken(vbaParser.IF, i)

        def booleanExpression(self):
            return self.getTypedRuleContext(vbaParser.BooleanExpressionContext,0)


        def THEN(self):
            return self.getToken(vbaParser.THEN, 0)

        def ENDIF(self):
            return self.getToken(vbaParser.ENDIF, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def statementBlock(self):
            return self.getTypedRuleContext(vbaParser.StatementBlockContext,0)


        def elseIfBlock(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ElseIfBlockContext)
            else:
                return self.getTypedRuleContext(vbaParser.ElseIfBlockContext,i)


        def elseBlock(self):
            return self.getTypedRuleContext(vbaParser.ElseBlockContext,0)


        def endOfStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfStatementContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfStatementContext,i)


        def END(self):
            return self.getToken(vbaParser.END, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_ifStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfStatement" ):
                listener.enterIfStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfStatement" ):
                listener.exitIfStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfStatement" ):
                return visitor.visitIfStatement(self)
            else:
                return visitor.visitChildren(self)




    def ifStatement(self):

        localctx = vbaParser.IfStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 346, self.RULE_ifStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2401
            self.match(vbaParser.IF)
            self.state = 2403
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==271 or _la==278:
                self.state = 2402
                self.wsc()


            self.state = 2405
            self.booleanExpression()
            self.state = 2407
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==271 or _la==278:
                self.state = 2406
                self.wsc()


            self.state = 2409
            self.match(vbaParser.THEN)
            self.state = 2411
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,301,self._ctx)
            if la_ == 1:
                self.state = 2410
                self.statementBlock()


            self.state = 2416
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,302,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2413
                    self.elseIfBlock() 
                self.state = 2418
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,302,self._ctx)

            self.state = 2420
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,303,self._ctx)
            if la_ == 1:
                self.state = 2419
                self.elseBlock()


            self.state = 2423 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2422
                self.endOfStatement()
                self.state = 2425 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 272)) & ~0x3f) == 0 and ((1 << (_la - 272)) & 87) != 0)):
                    break

            self.state = 2432
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [77]:
                self.state = 2427
                self.match(vbaParser.END)
                self.state = 2428
                self.wsc()
                self.state = 2429
                self.match(vbaParser.IF)
                pass
            elif token in [76]:
                self.state = 2431
                self.match(vbaParser.ENDIF)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElseIfBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def endOfLine(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfLineContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfLineContext,i)


        def ELSEIF(self):
            return self.getToken(vbaParser.ELSEIF, 0)

        def booleanExpression(self):
            return self.getTypedRuleContext(vbaParser.BooleanExpressionContext,0)


        def THEN(self):
            return self.getToken(vbaParser.THEN, 0)

        def endOfStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfStatementContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfStatementContext,i)


        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def statementBlock(self):
            return self.getTypedRuleContext(vbaParser.StatementBlockContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_elseIfBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElseIfBlock" ):
                listener.enterElseIfBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElseIfBlock" ):
                listener.exitElseIfBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElseIfBlock" ):
                return visitor.visitElseIfBlock(self)
            else:
                return visitor.visitChildren(self)




    def elseIfBlock(self):

        localctx = vbaParser.ElseIfBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 348, self.RULE_elseIfBlock)
        self._la = 0 # Token type
        try:
            self.state = 2474
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,315,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2437
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,306,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2434
                        self.endOfStatement() 
                    self.state = 2439
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,306,self._ctx)

                self.state = 2440
                self.endOfLine()
                self.state = 2441
                self.match(vbaParser.ELSEIF)
                self.state = 2443
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==271 or _la==278:
                    self.state = 2442
                    self.wsc()


                self.state = 2445
                self.booleanExpression()
                self.state = 2447
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==271 or _la==278:
                    self.state = 2446
                    self.wsc()


                self.state = 2449
                self.match(vbaParser.THEN)
                self.state = 2451
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,309,self._ctx)
                if la_ == 1:
                    self.state = 2450
                    self.endOfLine()


                self.state = 2454
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,310,self._ctx)
                if la_ == 1:
                    self.state = 2453
                    self.statementBlock()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2459
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 272)) & ~0x3f) == 0 and ((1 << (_la - 272)) & 87) != 0):
                    self.state = 2456
                    self.endOfStatement()
                    self.state = 2461
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2462
                self.match(vbaParser.ELSEIF)
                self.state = 2464
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==271 or _la==278:
                    self.state = 2463
                    self.wsc()


                self.state = 2466
                self.booleanExpression()
                self.state = 2468
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==271 or _la==278:
                    self.state = 2467
                    self.wsc()


                self.state = 2470
                self.match(vbaParser.THEN)
                self.state = 2472
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,314,self._ctx)
                if la_ == 1:
                    self.state = 2471
                    self.statementBlock()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElseBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(vbaParser.ELSE, 0)

        def endOfLine(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfLineContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfLineContext,i)


        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def statementBlock(self):
            return self.getTypedRuleContext(vbaParser.StatementBlockContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_elseBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElseBlock" ):
                listener.enterElseBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElseBlock" ):
                listener.exitElseBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElseBlock" ):
                return visitor.visitElseBlock(self)
            else:
                return visitor.visitChildren(self)




    def elseBlock(self):

        localctx = vbaParser.ElseBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_elseBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2477 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2476
                self.endOfLine()
                self.state = 2479 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 272)) & ~0x3f) == 0 and ((1 << (_la - 272)) & 71) != 0)):
                    break

            self.state = 2481
            self.match(vbaParser.ELSE)
            self.state = 2483
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,317,self._ctx)
            if la_ == 1:
                self.state = 2482
                self.endOfLine()


            self.state = 2486
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,318,self._ctx)
            if la_ == 1:
                self.state = 2485
                self.wsc()


            self.state = 2489
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,319,self._ctx)
            if la_ == 1:
                self.state = 2488
                self.statementBlock()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleLineIfStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ifWithNonEmptyThen(self):
            return self.getTypedRuleContext(vbaParser.IfWithNonEmptyThenContext,0)


        def ifWithEmptyThen(self):
            return self.getTypedRuleContext(vbaParser.IfWithEmptyThenContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_singleLineIfStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleLineIfStatement" ):
                listener.enterSingleLineIfStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleLineIfStatement" ):
                listener.exitSingleLineIfStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleLineIfStatement" ):
                return visitor.visitSingleLineIfStatement(self)
            else:
                return visitor.visitChildren(self)




    def singleLineIfStatement(self):

        localctx = vbaParser.SingleLineIfStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 352, self.RULE_singleLineIfStatement)
        try:
            self.state = 2493
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,320,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2491
                self.ifWithNonEmptyThen()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2492
                self.ifWithEmptyThen()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfWithNonEmptyThenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(vbaParser.IF, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def booleanExpression(self):
            return self.getTypedRuleContext(vbaParser.BooleanExpressionContext,0)


        def THEN(self):
            return self.getToken(vbaParser.THEN, 0)

        def listOrLabel(self):
            return self.getTypedRuleContext(vbaParser.ListOrLabelContext,0)


        def singleLineElseClause(self):
            return self.getTypedRuleContext(vbaParser.SingleLineElseClauseContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_ifWithNonEmptyThen

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfWithNonEmptyThen" ):
                listener.enterIfWithNonEmptyThen(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfWithNonEmptyThen" ):
                listener.exitIfWithNonEmptyThen(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfWithNonEmptyThen" ):
                return visitor.visitIfWithNonEmptyThen(self)
            else:
                return visitor.visitChildren(self)




    def ifWithNonEmptyThen(self):

        localctx = vbaParser.IfWithNonEmptyThenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 354, self.RULE_ifWithNonEmptyThen)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2495
            self.match(vbaParser.IF)
            self.state = 2496
            self.wsc()
            self.state = 2497
            self.booleanExpression()
            self.state = 2498
            self.wsc()
            self.state = 2499
            self.match(vbaParser.THEN)
            self.state = 2500
            self.wsc()
            self.state = 2501
            self.listOrLabel()
            self.state = 2505
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,321,self._ctx)
            if la_ == 1:
                self.state = 2502
                self.wsc()
                self.state = 2503
                self.singleLineElseClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfWithEmptyThenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(vbaParser.IF, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def booleanExpression(self):
            return self.getTypedRuleContext(vbaParser.BooleanExpressionContext,0)


        def THEN(self):
            return self.getToken(vbaParser.THEN, 0)

        def singleLineElseClause(self):
            return self.getTypedRuleContext(vbaParser.SingleLineElseClauseContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_ifWithEmptyThen

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfWithEmptyThen" ):
                listener.enterIfWithEmptyThen(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfWithEmptyThen" ):
                listener.exitIfWithEmptyThen(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfWithEmptyThen" ):
                return visitor.visitIfWithEmptyThen(self)
            else:
                return visitor.visitChildren(self)




    def ifWithEmptyThen(self):

        localctx = vbaParser.IfWithEmptyThenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 356, self.RULE_ifWithEmptyThen)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2507
            self.match(vbaParser.IF)
            self.state = 2508
            self.wsc()
            self.state = 2509
            self.booleanExpression()
            self.state = 2510
            self.wsc()
            self.state = 2511
            self.match(vbaParser.THEN)
            self.state = 2512
            self.wsc()
            self.state = 2513
            self.singleLineElseClause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleLineElseClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(vbaParser.ELSE, 0)

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def listOrLabel(self):
            return self.getTypedRuleContext(vbaParser.ListOrLabelContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_singleLineElseClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleLineElseClause" ):
                listener.enterSingleLineElseClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleLineElseClause" ):
                listener.exitSingleLineElseClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleLineElseClause" ):
                return visitor.visitSingleLineElseClause(self)
            else:
                return visitor.visitChildren(self)




    def singleLineElseClause(self):

        localctx = vbaParser.SingleLineElseClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 358, self.RULE_singleLineElseClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2515
            self.match(vbaParser.ELSE)
            self.state = 2517
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,322,self._ctx)
            if la_ == 1:
                self.state = 2516
                self.wsc()


            self.state = 2520
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,323,self._ctx)
            if la_ == 1:
                self.state = 2519
                self.listOrLabel()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ListOrLabelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statementLabel(self):
            return self.getTypedRuleContext(vbaParser.StatementLabelContext,0)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.COLON)
            else:
                return self.getToken(vbaParser.COLON, i)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def sameLineStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.SameLineStatementContext)
            else:
                return self.getTypedRuleContext(vbaParser.SameLineStatementContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_listOrLabel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterListOrLabel" ):
                listener.enterListOrLabel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitListOrLabel" ):
                listener.exitListOrLabel(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitListOrLabel" ):
                return visitor.visitListOrLabel(self)
            else:
                return visitor.visitChildren(self)




    def listOrLabel(self):

        localctx = vbaParser.ListOrLabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 360, self.RULE_listOrLabel)
        self._la = 0 # Token type
        try:
            self.state = 2551
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,331,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2522
                self.statementLabel()
                self.state = 2532
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,326,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2523
                        self.match(vbaParser.COLON)
                        self.state = 2525
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,324,self._ctx)
                        if la_ == 1:
                            self.state = 2524
                            self.wsc()


                        self.state = 2528
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1477743356164886) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 6881693500369888263) != 0) or ((((_la - 135)) & ~0x3f) == 0 and ((1 << (_la - 135)) & 849340518053005) != 0) or ((((_la - 212)) & ~0x3f) == 0 and ((1 << (_la - 212)) & 17630874304349) != 0) or _la==280 or _la==281:
                            self.state = 2527
                            self.sameLineStatement()

                 
                    self.state = 2534
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,326,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2536
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==276:
                    self.state = 2535
                    self.match(vbaParser.COLON)


                self.state = 2538
                self.sameLineStatement()
                self.state = 2548
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,330,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2539
                        self.match(vbaParser.COLON)
                        self.state = 2541
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,328,self._ctx)
                        if la_ == 1:
                            self.state = 2540
                            self.wsc()


                        self.state = 2544
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1477743356164886) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 6881693500369888263) != 0) or ((((_la - 135)) & ~0x3f) == 0 and ((1 << (_la - 135)) & 849340518053005) != 0) or ((((_la - 212)) & ~0x3f) == 0 and ((1 << (_la - 212)) & 17630874304349) != 0) or _la==280 or _la==281:
                            self.state = 2543
                            self.sameLineStatement()

                 
                    self.state = 2550
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,330,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SameLineStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fileStatement(self):
            return self.getTypedRuleContext(vbaParser.FileStatementContext,0)


        def errorHandlingStatement(self):
            return self.getTypedRuleContext(vbaParser.ErrorHandlingStatementContext,0)


        def dataManipulationStatement(self):
            return self.getTypedRuleContext(vbaParser.DataManipulationStatementContext,0)


        def controlStatementExceptMultilineIf(self):
            return self.getTypedRuleContext(vbaParser.ControlStatementExceptMultilineIfContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_sameLineStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSameLineStatement" ):
                listener.enterSameLineStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSameLineStatement" ):
                listener.exitSameLineStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSameLineStatement" ):
                return visitor.visitSameLineStatement(self)
            else:
                return visitor.visitChildren(self)




    def sameLineStatement(self):

        localctx = vbaParser.SameLineStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 362, self.RULE_sameLineStatement)
        try:
            self.state = 2557
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,332,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2553
                self.fileStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2554
                self.errorHandlingStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2555
                self.dataManipulationStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2556
                self.controlStatementExceptMultilineIf()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectCaseStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELECT(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.SELECT)
            else:
                return self.getToken(vbaParser.SELECT, i)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def CASE(self):
            return self.getToken(vbaParser.CASE, 0)

        def selectExpression(self):
            return self.getTypedRuleContext(vbaParser.SelectExpressionContext,0)


        def END(self):
            return self.getToken(vbaParser.END, 0)

        def caseClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.CaseClauseContext)
            else:
                return self.getTypedRuleContext(vbaParser.CaseClauseContext,i)


        def caseElseClause(self):
            return self.getTypedRuleContext(vbaParser.CaseElseClauseContext,0)


        def endOfStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfStatementContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfStatementContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_selectCaseStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectCaseStatement" ):
                listener.enterSelectCaseStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectCaseStatement" ):
                listener.exitSelectCaseStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectCaseStatement" ):
                return visitor.visitSelectCaseStatement(self)
            else:
                return visitor.visitChildren(self)




    def selectCaseStatement(self):

        localctx = vbaParser.SelectCaseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 364, self.RULE_selectCaseStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2559
            self.match(vbaParser.SELECT)
            self.state = 2560
            self.wsc()
            self.state = 2561
            self.match(vbaParser.CASE)
            self.state = 2562
            self.wsc()
            self.state = 2563
            self.selectExpression()
            self.state = 2567
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,333,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2564
                    self.caseClause() 
                self.state = 2569
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,333,self._ctx)

            self.state = 2571
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,334,self._ctx)
            if la_ == 1:
                self.state = 2570
                self.caseElseClause()


            self.state = 2574 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2573
                self.endOfStatement()
                self.state = 2576 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 272)) & ~0x3f) == 0 and ((1 << (_la - 272)) & 87) != 0)):
                    break

            self.state = 2578
            self.match(vbaParser.END)
            self.state = 2579
            self.wsc()
            self.state = 2580
            self.match(vbaParser.SELECT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CaseClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(vbaParser.CASE, 0)

        def rangeClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.RangeClauseContext)
            else:
                return self.getTypedRuleContext(vbaParser.RangeClauseContext,i)


        def endOfStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfStatementContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfStatementContext,i)


        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.COMMA)
            else:
                return self.getToken(vbaParser.COMMA, i)

        def statementBlock(self):
            return self.getTypedRuleContext(vbaParser.StatementBlockContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_caseClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseClause" ):
                listener.enterCaseClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseClause" ):
                listener.exitCaseClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCaseClause" ):
                return visitor.visitCaseClause(self)
            else:
                return visitor.visitChildren(self)




    def caseClause(self):

        localctx = vbaParser.CaseClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 366, self.RULE_caseClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2583 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2582
                self.endOfStatement()
                self.state = 2585 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 272)) & ~0x3f) == 0 and ((1 << (_la - 272)) & 87) != 0)):
                    break

            self.state = 2587
            self.match(vbaParser.CASE)
            self.state = 2589
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,337,self._ctx)
            if la_ == 1:
                self.state = 2588
                self.wsc()


            self.state = 2591
            self.rangeClause()
            self.state = 2602
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,340,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2593
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==271 or _la==278:
                        self.state = 2592
                        self.wsc()


                    self.state = 2595
                    self.match(vbaParser.COMMA)
                    self.state = 2597
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,339,self._ctx)
                    if la_ == 1:
                        self.state = 2596
                        self.wsc()


                    self.state = 2599
                    self.rangeClause() 
                self.state = 2604
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,340,self._ctx)

            self.state = 2606
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,341,self._ctx)
            if la_ == 1:
                self.state = 2605
                self.statementBlock()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CaseElseClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(vbaParser.CASE, 0)

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def ELSE(self):
            return self.getToken(vbaParser.ELSE, 0)

        def endOfStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfStatementContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfStatementContext,i)


        def statementBlock(self):
            return self.getTypedRuleContext(vbaParser.StatementBlockContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_caseElseClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseElseClause" ):
                listener.enterCaseElseClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseElseClause" ):
                listener.exitCaseElseClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCaseElseClause" ):
                return visitor.visitCaseElseClause(self)
            else:
                return visitor.visitChildren(self)




    def caseElseClause(self):

        localctx = vbaParser.CaseElseClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 368, self.RULE_caseElseClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2609 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2608
                self.endOfStatement()
                self.state = 2611 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 272)) & ~0x3f) == 0 and ((1 << (_la - 272)) & 87) != 0)):
                    break

            self.state = 2613
            self.match(vbaParser.CASE)
            self.state = 2614
            self.wsc()
            self.state = 2615
            self.match(vbaParser.ELSE)
            self.state = 2617
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,343,self._ctx)
            if la_ == 1:
                self.state = 2616
                self.statementBlock()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RangeClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def startValue(self):
            return self.getTypedRuleContext(vbaParser.StartValueContext,0)


        def TO(self):
            return self.getToken(vbaParser.TO, 0)

        def endValue(self):
            return self.getTypedRuleContext(vbaParser.EndValueContext,0)


        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def comparisonOperator(self):
            return self.getTypedRuleContext(vbaParser.ComparisonOperatorContext,0)


        def IS(self):
            return self.getToken(vbaParser.IS, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_rangeClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRangeClause" ):
                listener.enterRangeClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRangeClause" ):
                listener.exitRangeClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRangeClause" ):
                return visitor.visitRangeClause(self)
            else:
                return visitor.visitChildren(self)




    def rangeClause(self):

        localctx = vbaParser.RangeClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 370, self.RULE_rangeClause)
        self._la = 0 # Token type
        try:
            self.state = 2640
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,348,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2619
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2620
                self.startValue()
                self.state = 2622
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==271 or _la==278:
                    self.state = 2621
                    self.wsc()


                self.state = 2624
                self.match(vbaParser.TO)
                self.state = 2626
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==271 or _la==278:
                    self.state = 2625
                    self.wsc()


                self.state = 2628
                self.endValue()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2631
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==102:
                    self.state = 2630
                    self.match(vbaParser.IS)


                self.state = 2633
                self.wsc()
                self.state = 2634
                self.comparisonOperator()
                self.state = 2636
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==271 or _la==278:
                    self.state = 2635
                    self.wsc()


                self.state = 2638
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_selectExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectExpression" ):
                listener.enterSelectExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectExpression" ):
                listener.exitSelectExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectExpression" ):
                return visitor.visitSelectExpression(self)
            else:
                return visitor.visitChildren(self)




    def selectExpression(self):

        localctx = vbaParser.SelectExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 372, self.RULE_selectExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2642
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComparisonOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQ(self):
            return self.getToken(vbaParser.EQ, 0)

        def NEW(self):
            return self.getToken(vbaParser.NEW, 0)

        def LT(self):
            return self.getToken(vbaParser.LT, 0)

        def GT(self):
            return self.getToken(vbaParser.GT, 0)

        def LEQ(self):
            return self.getToken(vbaParser.LEQ, 0)

        def GEQ(self):
            return self.getToken(vbaParser.GEQ, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_comparisonOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparisonOperator" ):
                listener.enterComparisonOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparisonOperator" ):
                listener.exitComparisonOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparisonOperator" ):
                return visitor.visitComparisonOperator(self)
            else:
                return visitor.visitChildren(self)




    def comparisonOperator(self):

        localctx = vbaParser.ComparisonOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 374, self.RULE_comparisonOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2644
            _la = self._input.LA(1)
            if not(_la==131 or ((((_la - 243)) & ~0x3f) == 0 and ((1 << (_la - 243)) & 173) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StopStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STOP(self):
            return self.getToken(vbaParser.STOP, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_stopStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStopStatement" ):
                listener.enterStopStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStopStatement" ):
                listener.exitStopStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStopStatement" ):
                return visitor.visitStopStatement(self)
            else:
                return visitor.visitChildren(self)




    def stopStatement(self):

        localctx = vbaParser.StopStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 376, self.RULE_stopStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2646
            self.match(vbaParser.STOP)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GotoStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def statementLabel(self):
            return self.getTypedRuleContext(vbaParser.StatementLabelContext,0)


        def GO(self):
            return self.getToken(vbaParser.GO, 0)

        def TO(self):
            return self.getToken(vbaParser.TO, 0)

        def GOTO(self):
            return self.getToken(vbaParser.GOTO, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_gotoStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGotoStatement" ):
                listener.enterGotoStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGotoStatement" ):
                listener.exitGotoStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGotoStatement" ):
                return visitor.visitGotoStatement(self)
            else:
                return visitor.visitChildren(self)




    def gotoStatement(self):

        localctx = vbaParser.GotoStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 378, self.RULE_gotoStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2653
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [92]:
                self.state = 2648
                self.match(vbaParser.GO)
                self.state = 2649
                self.wsc()
                self.state = 2650
                self.match(vbaParser.TO)
                pass
            elif token in [94]:
                self.state = 2652
                self.match(vbaParser.GOTO)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2655
            self.wsc()
            self.state = 2656
            self.statementLabel()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OnGotoStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(vbaParser.ON, 0)

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def GOTO(self):
            return self.getToken(vbaParser.GOTO, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def statementLabelList(self):
            return self.getTypedRuleContext(vbaParser.StatementLabelListContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_onGotoStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOnGotoStatement" ):
                listener.enterOnGotoStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOnGotoStatement" ):
                listener.exitOnGotoStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOnGotoStatement" ):
                return visitor.visitOnGotoStatement(self)
            else:
                return visitor.visitChildren(self)




    def onGotoStatement(self):

        localctx = vbaParser.OnGotoStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 380, self.RULE_onGotoStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2658
            self.match(vbaParser.ON)
            self.state = 2660
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==271 or _la==278:
                self.state = 2659
                self.wsc()


            self.state = 2662
            self.expression(0)
            self.state = 2663
            self.match(vbaParser.GOTO)
            self.state = 2664
            self.wsc()
            self.state = 2665
            self.statementLabelList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GosubStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def statementLabel(self):
            return self.getTypedRuleContext(vbaParser.StatementLabelContext,0)


        def GOSUB(self):
            return self.getToken(vbaParser.GOSUB, 0)

        def GO(self):
            return self.getToken(vbaParser.GO, 0)

        def SUB(self):
            return self.getToken(vbaParser.SUB, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_gosubStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGosubStatement" ):
                listener.enterGosubStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGosubStatement" ):
                listener.exitGosubStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGosubStatement" ):
                return visitor.visitGosubStatement(self)
            else:
                return visitor.visitChildren(self)




    def gosubStatement(self):

        localctx = vbaParser.GosubStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 382, self.RULE_gosubStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2672
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [92]:
                self.state = 2667
                self.match(vbaParser.GO)
                self.state = 2668
                self.wsc()
                self.state = 2669
                self.match(vbaParser.SUB)
                pass
            elif token in [93]:
                self.state = 2671
                self.match(vbaParser.GOSUB)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2674
            self.wsc()
            self.state = 2675
            self.statementLabel()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(vbaParser.RETURN, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_returnStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStatement" ):
                listener.enterReturnStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStatement" ):
                listener.exitReturnStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturnStatement" ):
                return visitor.visitReturnStatement(self)
            else:
                return visitor.visitChildren(self)




    def returnStatement(self):

        localctx = vbaParser.ReturnStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 384, self.RULE_returnStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2677
            self.match(vbaParser.RETURN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OnGosubStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(vbaParser.ON, 0)

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def GOSUB(self):
            return self.getToken(vbaParser.GOSUB, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def statementLabelList(self):
            return self.getTypedRuleContext(vbaParser.StatementLabelListContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_onGosubStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOnGosubStatement" ):
                listener.enterOnGosubStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOnGosubStatement" ):
                listener.exitOnGosubStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOnGosubStatement" ):
                return visitor.visitOnGosubStatement(self)
            else:
                return visitor.visitChildren(self)




    def onGosubStatement(self):

        localctx = vbaParser.OnGosubStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 386, self.RULE_onGosubStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2679
            self.match(vbaParser.ON)
            self.state = 2681
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==271 or _la==278:
                self.state = 2680
                self.wsc()


            self.state = 2683
            self.expression(0)
            self.state = 2685
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==271 or _la==278:
                self.state = 2684
                self.wsc()


            self.state = 2687
            self.match(vbaParser.GOSUB)
            self.state = 2688
            self.wsc()
            self.state = 2689
            self.statementLabelList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExitSubStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXIT(self):
            return self.getToken(vbaParser.EXIT, 0)

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def SUB(self):
            return self.getToken(vbaParser.SUB, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_exitSubStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExitSubStatement" ):
                listener.enterExitSubStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExitSubStatement" ):
                listener.exitExitSubStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExitSubStatement" ):
                return visitor.visitExitSubStatement(self)
            else:
                return visitor.visitChildren(self)




    def exitSubStatement(self):

        localctx = vbaParser.ExitSubStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 388, self.RULE_exitSubStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2691
            self.match(vbaParser.EXIT)
            self.state = 2692
            self.wsc()
            self.state = 2693
            self.match(vbaParser.SUB)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExitFunctionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXIT(self):
            return self.getToken(vbaParser.EXIT, 0)

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def FUNCTION(self):
            return self.getToken(vbaParser.FUNCTION, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_exitFunctionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExitFunctionStatement" ):
                listener.enterExitFunctionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExitFunctionStatement" ):
                listener.exitExitFunctionStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExitFunctionStatement" ):
                return visitor.visitExitFunctionStatement(self)
            else:
                return visitor.visitChildren(self)




    def exitFunctionStatement(self):

        localctx = vbaParser.ExitFunctionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 390, self.RULE_exitFunctionStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2695
            self.match(vbaParser.EXIT)
            self.state = 2696
            self.wsc()
            self.state = 2697
            self.match(vbaParser.FUNCTION)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExitPropertyStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXIT(self):
            return self.getToken(vbaParser.EXIT, 0)

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def PROPERTY(self):
            return self.getToken(vbaParser.PROPERTY, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_exitPropertyStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExitPropertyStatement" ):
                listener.enterExitPropertyStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExitPropertyStatement" ):
                listener.exitExitPropertyStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExitPropertyStatement" ):
                return visitor.visitExitPropertyStatement(self)
            else:
                return visitor.visitChildren(self)




    def exitPropertyStatement(self):

        localctx = vbaParser.ExitPropertyStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 392, self.RULE_exitPropertyStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2699
            self.match(vbaParser.EXIT)
            self.state = 2700
            self.wsc()
            self.state = 2701
            self.match(vbaParser.PROPERTY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RaiseeventStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RAISEEVENT(self):
            return self.getToken(vbaParser.RAISEEVENT, 0)

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def LPAREN(self):
            return self.getToken(vbaParser.LPAREN, 0)

        def eventArgumentList(self):
            return self.getTypedRuleContext(vbaParser.EventArgumentListContext,0)


        def RPAREN(self):
            return self.getToken(vbaParser.RPAREN, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_raiseeventStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRaiseeventStatement" ):
                listener.enterRaiseeventStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRaiseeventStatement" ):
                listener.exitRaiseeventStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRaiseeventStatement" ):
                return visitor.visitRaiseeventStatement(self)
            else:
                return visitor.visitChildren(self)




    def raiseeventStatement(self):

        localctx = vbaParser.RaiseeventStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 394, self.RULE_raiseeventStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2703
            self.match(vbaParser.RAISEEVENT)
            self.state = 2705
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==271 or _la==278:
                self.state = 2704
                self.wsc()


            self.state = 2707
            self.ambiguousIdentifier()
            self.state = 2709
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,355,self._ctx)
            if la_ == 1:
                self.state = 2708
                self.wsc()


            self.state = 2721
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==249:
                self.state = 2711
                self.match(vbaParser.LPAREN)
                self.state = 2713
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,356,self._ctx)
                if la_ == 1:
                    self.state = 2712
                    self.wsc()


                self.state = 2715
                self.eventArgumentList()
                self.state = 2717
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==271 or _la==278:
                    self.state = 2716
                    self.wsc()


                self.state = 2719
                self.match(vbaParser.RPAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EventArgumentListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def eventArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EventArgumentContext)
            else:
                return self.getTypedRuleContext(vbaParser.EventArgumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.COMMA)
            else:
                return self.getToken(vbaParser.COMMA, i)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_eventArgumentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEventArgumentList" ):
                listener.enterEventArgumentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEventArgumentList" ):
                listener.exitEventArgumentList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEventArgumentList" ):
                return visitor.visitEventArgumentList(self)
            else:
                return visitor.visitChildren(self)




    def eventArgumentList(self):

        localctx = vbaParser.EventArgumentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 396, self.RULE_eventArgumentList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2737
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1474994576046870) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & -2900306126593388479) != 0) or ((((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & 1848558507049479) != 0) or ((((_la - 212)) & ~0x3f) == 0 and ((1 << (_la - 212)) & 513428675589308169) != 0) or _la==280 or _la==281:
                self.state = 2723
                self.eventArgument()
                self.state = 2734
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,361,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2725
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==271 or _la==278:
                            self.state = 2724
                            self.wsc()


                        self.state = 2727
                        self.match(vbaParser.COMMA)
                        self.state = 2729
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==271 or _la==278:
                            self.state = 2728
                            self.wsc()


                        self.state = 2731
                        self.eventArgument() 
                    self.state = 2736
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,361,self._ctx)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EventArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_eventArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEventArgument" ):
                listener.enterEventArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEventArgument" ):
                listener.exitEventArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEventArgument" ):
                return visitor.visitEventArgument(self)
            else:
                return visitor.visitChildren(self)




    def eventArgument(self):

        localctx = vbaParser.EventArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 398, self.RULE_eventArgument)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2739
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WITH)
            else:
                return self.getToken(vbaParser.WITH, i)

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def END(self):
            return self.getToken(vbaParser.END, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def statementBlock(self):
            return self.getTypedRuleContext(vbaParser.StatementBlockContext,0)


        def endOfStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfStatementContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfStatementContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_withStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWithStatement" ):
                listener.enterWithStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWithStatement" ):
                listener.exitWithStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWithStatement" ):
                return visitor.visitWithStatement(self)
            else:
                return visitor.visitChildren(self)




    def withStatement(self):

        localctx = vbaParser.WithStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 400, self.RULE_withStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2741
            self.match(vbaParser.WITH)
            self.state = 2743
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==271 or _la==278:
                self.state = 2742
                self.wsc()


            self.state = 2745
            self.expression(0)
            self.state = 2747
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,364,self._ctx)
            if la_ == 1:
                self.state = 2746
                self.statementBlock()


            self.state = 2750 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2749
                self.endOfStatement()
                self.state = 2752 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 272)) & ~0x3f) == 0 and ((1 << (_la - 272)) & 87) != 0)):
                    break

            self.state = 2754
            self.match(vbaParser.END)
            self.state = 2755
            self.wsc()
            self.state = 2756
            self.match(vbaParser.WITH)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EndStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def END(self):
            return self.getToken(vbaParser.END, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_endStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEndStatement" ):
                listener.enterEndStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEndStatement" ):
                listener.exitEndStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEndStatement" ):
                return visitor.visitEndStatement(self)
            else:
                return visitor.visitChildren(self)




    def endStatement(self):

        localctx = vbaParser.EndStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 402, self.RULE_endStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2758
            self.match(vbaParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataManipulationStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def localVariableDeclaration(self):
            return self.getTypedRuleContext(vbaParser.LocalVariableDeclarationContext,0)


        def staticVariableDeclaration(self):
            return self.getTypedRuleContext(vbaParser.StaticVariableDeclarationContext,0)


        def localConstDeclaration(self):
            return self.getTypedRuleContext(vbaParser.LocalConstDeclarationContext,0)


        def redimStatement(self):
            return self.getTypedRuleContext(vbaParser.RedimStatementContext,0)


        def eraseStatement(self):
            return self.getTypedRuleContext(vbaParser.EraseStatementContext,0)


        def midStatement(self):
            return self.getTypedRuleContext(vbaParser.MidStatementContext,0)


        def rsetStatement(self):
            return self.getTypedRuleContext(vbaParser.RsetStatementContext,0)


        def lsetStatement(self):
            return self.getTypedRuleContext(vbaParser.LsetStatementContext,0)


        def letStatement(self):
            return self.getTypedRuleContext(vbaParser.LetStatementContext,0)


        def setStatement(self):
            return self.getTypedRuleContext(vbaParser.SetStatementContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_dataManipulationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataManipulationStatement" ):
                listener.enterDataManipulationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataManipulationStatement" ):
                listener.exitDataManipulationStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDataManipulationStatement" ):
                return visitor.visitDataManipulationStatement(self)
            else:
                return visitor.visitChildren(self)




    def dataManipulationStatement(self):

        localctx = vbaParser.DataManipulationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 404, self.RULE_dataManipulationStatement)
        try:
            self.state = 2770
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,366,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2760
                self.localVariableDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2761
                self.staticVariableDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2762
                self.localConstDeclaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2763
                self.redimStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2764
                self.eraseStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2765
                self.midStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2766
                self.rsetStatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2767
                self.lsetStatement()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2768
                self.letStatement()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2769
                self.setStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LocalVariableDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DIM(self):
            return self.getToken(vbaParser.DIM, 0)

        def variableDeclarationList(self):
            return self.getTypedRuleContext(vbaParser.VariableDeclarationListContext,0)


        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def SHARED(self):
            return self.getToken(vbaParser.SHARED, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_localVariableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocalVariableDeclaration" ):
                listener.enterLocalVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocalVariableDeclaration" ):
                listener.exitLocalVariableDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLocalVariableDeclaration" ):
                return visitor.visitLocalVariableDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def localVariableDeclaration(self):

        localctx = vbaParser.LocalVariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 406, self.RULE_localVariableDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2772
            self.match(vbaParser.DIM)
            self.state = 2774
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,367,self._ctx)
            if la_ == 1:
                self.state = 2773
                self.wsc()


            self.state = 2777
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==166:
                self.state = 2776
                self.match(vbaParser.SHARED)


            self.state = 2780
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==271 or _la==278:
                self.state = 2779
                self.wsc()


            self.state = 2782
            self.variableDeclarationList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StaticVariableDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STATIC(self):
            return self.getToken(vbaParser.STATIC, 0)

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def variableDeclarationList(self):
            return self.getTypedRuleContext(vbaParser.VariableDeclarationListContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_staticVariableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStaticVariableDeclaration" ):
                listener.enterStaticVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStaticVariableDeclaration" ):
                listener.exitStaticVariableDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStaticVariableDeclaration" ):
                return visitor.visitStaticVariableDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def staticVariableDeclaration(self):

        localctx = vbaParser.StaticVariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 408, self.RULE_staticVariableDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2784
            self.match(vbaParser.STATIC)
            self.state = 2785
            self.wsc()
            self.state = 2786
            self.variableDeclarationList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LocalConstDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constDeclaration(self):
            return self.getTypedRuleContext(vbaParser.ConstDeclarationContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_localConstDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocalConstDeclaration" ):
                listener.enterLocalConstDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocalConstDeclaration" ):
                listener.exitLocalConstDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLocalConstDeclaration" ):
                return visitor.visitLocalConstDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def localConstDeclaration(self):

        localctx = vbaParser.LocalConstDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 410, self.RULE_localConstDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2788
            self.constDeclaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RedimStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REDIM(self):
            return self.getToken(vbaParser.REDIM, 0)

        def redimDeclarationList(self):
            return self.getTypedRuleContext(vbaParser.RedimDeclarationListContext,0)


        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def PRESERVE(self):
            return self.getToken(vbaParser.PRESERVE, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_redimStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRedimStatement" ):
                listener.enterRedimStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRedimStatement" ):
                listener.exitRedimStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRedimStatement" ):
                return visitor.visitRedimStatement(self)
            else:
                return visitor.visitChildren(self)




    def redimStatement(self):

        localctx = vbaParser.RedimStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 412, self.RULE_redimStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2790
            self.match(vbaParser.REDIM)
            self.state = 2794
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,370,self._ctx)
            if la_ == 1:
                self.state = 2791
                self.wsc()
                self.state = 2792
                self.match(vbaParser.PRESERVE)


            self.state = 2797
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==271 or _la==278:
                self.state = 2796
                self.wsc()


            self.state = 2799
            self.redimDeclarationList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RedimDeclarationListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def redimVariableDcl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.RedimVariableDclContext)
            else:
                return self.getTypedRuleContext(vbaParser.RedimVariableDclContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.COMMA)
            else:
                return self.getToken(vbaParser.COMMA, i)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_redimDeclarationList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRedimDeclarationList" ):
                listener.enterRedimDeclarationList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRedimDeclarationList" ):
                listener.exitRedimDeclarationList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRedimDeclarationList" ):
                return visitor.visitRedimDeclarationList(self)
            else:
                return visitor.visitChildren(self)




    def redimDeclarationList(self):

        localctx = vbaParser.RedimDeclarationListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 414, self.RULE_redimDeclarationList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2801
            self.redimVariableDcl()
            self.state = 2812
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,374,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2803
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==271 or _la==278:
                        self.state = 2802
                        self.wsc()


                    self.state = 2805
                    self.match(vbaParser.COMMA)
                    self.state = 2807
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==271 or _la==278:
                        self.state = 2806
                        self.wsc()


                    self.state = 2809
                    self.redimVariableDcl() 
                self.state = 2814
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,374,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RedimVariableDclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def redimTypedVariableDcl(self):
            return self.getTypedRuleContext(vbaParser.RedimTypedVariableDclContext,0)


        def redimUntypedDcl(self):
            return self.getTypedRuleContext(vbaParser.RedimUntypedDclContext,0)


        def withExpressionDcl(self):
            return self.getTypedRuleContext(vbaParser.WithExpressionDclContext,0)


        def memberAccessExpressionDcl(self):
            return self.getTypedRuleContext(vbaParser.MemberAccessExpressionDclContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_redimVariableDcl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRedimVariableDcl" ):
                listener.enterRedimVariableDcl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRedimVariableDcl" ):
                listener.exitRedimVariableDcl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRedimVariableDcl" ):
                return visitor.visitRedimVariableDcl(self)
            else:
                return visitor.visitChildren(self)




    def redimVariableDcl(self):

        localctx = vbaParser.RedimVariableDclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 416, self.RULE_redimVariableDcl)
        try:
            self.state = 2819
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,375,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2815
                self.redimTypedVariableDcl()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2816
                self.redimUntypedDcl()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2817
                self.withExpressionDcl()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2818
                self.memberAccessExpressionDcl()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RedimTypedVariableDclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typedName(self):
            return self.getTypedRuleContext(vbaParser.TypedNameContext,0)


        def dynamicArrayDim(self):
            return self.getTypedRuleContext(vbaParser.DynamicArrayDimContext,0)


        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_redimTypedVariableDcl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRedimTypedVariableDcl" ):
                listener.enterRedimTypedVariableDcl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRedimTypedVariableDcl" ):
                listener.exitRedimTypedVariableDcl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRedimTypedVariableDcl" ):
                return visitor.visitRedimTypedVariableDcl(self)
            else:
                return visitor.visitChildren(self)




    def redimTypedVariableDcl(self):

        localctx = vbaParser.RedimTypedVariableDclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 418, self.RULE_redimTypedVariableDcl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2821
            self.typedName()
            self.state = 2823
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==271 or _la==278:
                self.state = 2822
                self.wsc()


            self.state = 2825
            self.dynamicArrayDim()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RedimUntypedDclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def untypedName(self):
            return self.getTypedRuleContext(vbaParser.UntypedNameContext,0)


        def dynamicArrayClause(self):
            return self.getTypedRuleContext(vbaParser.DynamicArrayClauseContext,0)


        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_redimUntypedDcl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRedimUntypedDcl" ):
                listener.enterRedimUntypedDcl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRedimUntypedDcl" ):
                listener.exitRedimUntypedDcl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRedimUntypedDcl" ):
                return visitor.visitRedimUntypedDcl(self)
            else:
                return visitor.visitChildren(self)




    def redimUntypedDcl(self):

        localctx = vbaParser.RedimUntypedDclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 420, self.RULE_redimUntypedDcl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2827
            self.untypedName()
            self.state = 2829
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==271 or _la==278:
                self.state = 2828
                self.wsc()


            self.state = 2831
            self.dynamicArrayClause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithExpressionDclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def withExpression(self):
            return self.getTypedRuleContext(vbaParser.WithExpressionContext,0)


        def dynamicArrayDim(self):
            return self.getTypedRuleContext(vbaParser.DynamicArrayDimContext,0)


        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_withExpressionDcl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWithExpressionDcl" ):
                listener.enterWithExpressionDcl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWithExpressionDcl" ):
                listener.exitWithExpressionDcl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWithExpressionDcl" ):
                return visitor.visitWithExpressionDcl(self)
            else:
                return visitor.visitChildren(self)




    def withExpressionDcl(self):

        localctx = vbaParser.WithExpressionDclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 422, self.RULE_withExpressionDcl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2833
            self.withExpression()
            self.state = 2835
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==271 or _la==278:
                self.state = 2834
                self.wsc()


            self.state = 2837
            self.dynamicArrayDim()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MemberAccessExpressionDclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def memberAccessExpression(self):
            return self.getTypedRuleContext(vbaParser.MemberAccessExpressionContext,0)


        def dynamicArrayDim(self):
            return self.getTypedRuleContext(vbaParser.DynamicArrayDimContext,0)


        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_memberAccessExpressionDcl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberAccessExpressionDcl" ):
                listener.enterMemberAccessExpressionDcl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberAccessExpressionDcl" ):
                listener.exitMemberAccessExpressionDcl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMemberAccessExpressionDcl" ):
                return visitor.visitMemberAccessExpressionDcl(self)
            else:
                return visitor.visitChildren(self)




    def memberAccessExpressionDcl(self):

        localctx = vbaParser.MemberAccessExpressionDclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 424, self.RULE_memberAccessExpressionDcl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2839
            self.memberAccessExpression()
            self.state = 2841
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==271 or _la==278:
                self.state = 2840
                self.wsc()


            self.state = 2843
            self.dynamicArrayDim()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DynamicArrayDimContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(vbaParser.LPAREN, 0)

        def dynamicBoundsList(self):
            return self.getTypedRuleContext(vbaParser.DynamicBoundsListContext,0)


        def RPAREN(self):
            return self.getToken(vbaParser.RPAREN, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_dynamicArrayDim

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDynamicArrayDim" ):
                listener.enterDynamicArrayDim(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDynamicArrayDim" ):
                listener.exitDynamicArrayDim(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDynamicArrayDim" ):
                return visitor.visitDynamicArrayDim(self)
            else:
                return visitor.visitChildren(self)




    def dynamicArrayDim(self):

        localctx = vbaParser.DynamicArrayDimContext(self, self._ctx, self.state)
        self.enterRule(localctx, 426, self.RULE_dynamicArrayDim)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2845
            self.match(vbaParser.LPAREN)
            self.state = 2847
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==271 or _la==278:
                self.state = 2846
                self.wsc()


            self.state = 2849
            self.dynamicBoundsList()
            self.state = 2851
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==271 or _la==278:
                self.state = 2850
                self.wsc()


            self.state = 2853
            self.match(vbaParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DynamicBoundsListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dynamicDimSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.DynamicDimSpecContext)
            else:
                return self.getTypedRuleContext(vbaParser.DynamicDimSpecContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.COMMA)
            else:
                return self.getToken(vbaParser.COMMA, i)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_dynamicBoundsList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDynamicBoundsList" ):
                listener.enterDynamicBoundsList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDynamicBoundsList" ):
                listener.exitDynamicBoundsList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDynamicBoundsList" ):
                return visitor.visitDynamicBoundsList(self)
            else:
                return visitor.visitChildren(self)




    def dynamicBoundsList(self):

        localctx = vbaParser.DynamicBoundsListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 428, self.RULE_dynamicBoundsList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2855
            self.dynamicDimSpec()
            self.state = 2866
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,384,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2857
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==271 or _la==278:
                        self.state = 2856
                        self.wsc()


                    self.state = 2859
                    self.match(vbaParser.COMMA)
                    self.state = 2861
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==271 or _la==278:
                        self.state = 2860
                        self.wsc()


                    self.state = 2863
                    self.dynamicDimSpec() 
                self.state = 2868
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,384,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DynamicDimSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dynamicUpperBound(self):
            return self.getTypedRuleContext(vbaParser.DynamicUpperBoundContext,0)


        def dynamicLowerBound(self):
            return self.getTypedRuleContext(vbaParser.DynamicLowerBoundContext,0)


        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_dynamicDimSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDynamicDimSpec" ):
                listener.enterDynamicDimSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDynamicDimSpec" ):
                listener.exitDynamicDimSpec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDynamicDimSpec" ):
                return visitor.visitDynamicDimSpec(self)
            else:
                return visitor.visitChildren(self)




    def dynamicDimSpec(self):

        localctx = vbaParser.DynamicDimSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 430, self.RULE_dynamicDimSpec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2872
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,385,self._ctx)
            if la_ == 1:
                self.state = 2869
                self.dynamicLowerBound()
                self.state = 2870
                self.wsc()


            self.state = 2874
            self.dynamicUpperBound()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DynamicLowerBoundContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integerExpression(self):
            return self.getTypedRuleContext(vbaParser.IntegerExpressionContext,0)


        def TO(self):
            return self.getToken(vbaParser.TO, 0)

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_dynamicLowerBound

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDynamicLowerBound" ):
                listener.enterDynamicLowerBound(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDynamicLowerBound" ):
                listener.exitDynamicLowerBound(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDynamicLowerBound" ):
                return visitor.visitDynamicLowerBound(self)
            else:
                return visitor.visitChildren(self)




    def dynamicLowerBound(self):

        localctx = vbaParser.DynamicLowerBoundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 432, self.RULE_dynamicLowerBound)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2876
            self.integerExpression()
            self.state = 2878
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==271 or _la==278:
                self.state = 2877
                self.wsc()


            self.state = 2880
            self.match(vbaParser.TO)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DynamicUpperBoundContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integerExpression(self):
            return self.getTypedRuleContext(vbaParser.IntegerExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_dynamicUpperBound

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDynamicUpperBound" ):
                listener.enterDynamicUpperBound(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDynamicUpperBound" ):
                listener.exitDynamicUpperBound(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDynamicUpperBound" ):
                return visitor.visitDynamicUpperBound(self)
            else:
                return visitor.visitChildren(self)




    def dynamicUpperBound(self):

        localctx = vbaParser.DynamicUpperBoundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 434, self.RULE_dynamicUpperBound)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2882
            self.integerExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DynamicArrayClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dynamicArrayDim(self):
            return self.getTypedRuleContext(vbaParser.DynamicArrayDimContext,0)


        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def asClause(self):
            return self.getTypedRuleContext(vbaParser.AsClauseContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_dynamicArrayClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDynamicArrayClause" ):
                listener.enterDynamicArrayClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDynamicArrayClause" ):
                listener.exitDynamicArrayClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDynamicArrayClause" ):
                return visitor.visitDynamicArrayClause(self)
            else:
                return visitor.visitChildren(self)




    def dynamicArrayClause(self):

        localctx = vbaParser.DynamicArrayClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 436, self.RULE_dynamicArrayClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2884
            self.dynamicArrayDim()
            self.state = 2886
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,387,self._ctx)
            if la_ == 1:
                self.state = 2885
                self.wsc()


            self.state = 2889
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 2888
                self.asClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EraseStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ERASE(self):
            return self.getToken(vbaParser.ERASE, 0)

        def eraseList(self):
            return self.getTypedRuleContext(vbaParser.EraseListContext,0)


        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_eraseStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEraseStatement" ):
                listener.enterEraseStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEraseStatement" ):
                listener.exitEraseStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEraseStatement" ):
                return visitor.visitEraseStatement(self)
            else:
                return visitor.visitChildren(self)




    def eraseStatement(self):

        localctx = vbaParser.EraseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 438, self.RULE_eraseStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2891
            self.match(vbaParser.ERASE)
            self.state = 2893
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==271 or _la==278:
                self.state = 2892
                self.wsc()


            self.state = 2895
            self.eraseList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EraseListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def eraseElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EraseElementContext)
            else:
                return self.getTypedRuleContext(vbaParser.EraseElementContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.COMMA)
            else:
                return self.getToken(vbaParser.COMMA, i)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_eraseList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEraseList" ):
                listener.enterEraseList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEraseList" ):
                listener.exitEraseList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEraseList" ):
                return visitor.visitEraseList(self)
            else:
                return visitor.visitChildren(self)




    def eraseList(self):

        localctx = vbaParser.EraseListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 440, self.RULE_eraseList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2897
            self.eraseElement()
            self.state = 2908
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,392,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2899
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==271 or _la==278:
                        self.state = 2898
                        self.wsc()


                    self.state = 2901
                    self.match(vbaParser.COMMA)
                    self.state = 2903
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==271 or _la==278:
                        self.state = 2902
                        self.wsc()


                    self.state = 2905
                    self.eraseElement() 
                self.state = 2910
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,392,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EraseElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lExpression(self):
            return self.getTypedRuleContext(vbaParser.LExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_eraseElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEraseElement" ):
                listener.enterEraseElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEraseElement" ):
                listener.exitEraseElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEraseElement" ):
                return visitor.visitEraseElement(self)
            else:
                return visitor.visitChildren(self)




    def eraseElement(self):

        localctx = vbaParser.EraseElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 442, self.RULE_eraseElement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2911
            self.lExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MidStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def modeSpecifier(self):
            return self.getTypedRuleContext(vbaParser.ModeSpecifierContext,0)


        def LPAREN(self):
            return self.getToken(vbaParser.LPAREN, 0)

        def stringArgument(self):
            return self.getTypedRuleContext(vbaParser.StringArgumentContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.COMMA)
            else:
                return self.getToken(vbaParser.COMMA, i)

        def startMid(self):
            return self.getTypedRuleContext(vbaParser.StartMidContext,0)


        def RPAREN(self):
            return self.getToken(vbaParser.RPAREN, 0)

        def EQ(self):
            return self.getToken(vbaParser.EQ, 0)

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def length(self):
            return self.getTypedRuleContext(vbaParser.LengthContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_midStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMidStatement" ):
                listener.enterMidStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMidStatement" ):
                listener.exitMidStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMidStatement" ):
                return visitor.visitMidStatement(self)
            else:
                return visitor.visitChildren(self)




    def midStatement(self):

        localctx = vbaParser.MidStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 444, self.RULE_midStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2913
            self.modeSpecifier()
            self.state = 2915
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==271 or _la==278:
                self.state = 2914
                self.wsc()


            self.state = 2917
            self.match(vbaParser.LPAREN)
            self.state = 2919
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==271 or _la==278:
                self.state = 2918
                self.wsc()


            self.state = 2921
            self.stringArgument()
            self.state = 2923
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==271 or _la==278:
                self.state = 2922
                self.wsc()


            self.state = 2925
            self.match(vbaParser.COMMA)
            self.state = 2927
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==271 or _la==278:
                self.state = 2926
                self.wsc()


            self.state = 2929
            self.startMid()
            self.state = 2931
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==271 or _la==278:
                self.state = 2930
                self.wsc()


            self.state = 2938
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==240:
                self.state = 2933
                self.match(vbaParser.COMMA)
                self.state = 2935
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==271 or _la==278:
                    self.state = 2934
                    self.wsc()


                self.state = 2937
                self.length()


            self.state = 2940
            self.match(vbaParser.RPAREN)
            self.state = 2942
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==271 or _la==278:
                self.state = 2941
                self.wsc()


            self.state = 2944
            self.match(vbaParser.EQ)
            self.state = 2946
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==271 or _la==278:
                self.state = 2945
                self.wsc()


            self.state = 2948
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModeSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MID(self):
            return self.getToken(vbaParser.MID, 0)

        def MIDB(self):
            return self.getToken(vbaParser.MIDB, 0)

        def MID_D(self):
            return self.getToken(vbaParser.MID_D, 0)

        def MIDB_D(self):
            return self.getToken(vbaParser.MIDB_D, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_modeSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModeSpecifier" ):
                listener.enterModeSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModeSpecifier" ):
                listener.exitModeSpecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModeSpecifier" ):
                return visitor.visitModeSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def modeSpecifier(self):

        localctx = vbaParser.ModeSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 446, self.RULE_modeSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2950
            _la = self._input.LA(1)
            if not(((((_la - 124)) & ~0x3f) == 0 and ((1 << (_la - 124)) & 15) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def boundVariableExpression(self):
            return self.getTypedRuleContext(vbaParser.BoundVariableExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_stringArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringArgument" ):
                listener.enterStringArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringArgument" ):
                listener.exitStringArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringArgument" ):
                return visitor.visitStringArgument(self)
            else:
                return visitor.visitChildren(self)




    def stringArgument(self):

        localctx = vbaParser.StringArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 448, self.RULE_stringArgument)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2952
            self.boundVariableExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StartMidContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integerExpression(self):
            return self.getTypedRuleContext(vbaParser.IntegerExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_startMid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStartMid" ):
                listener.enterStartMid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStartMid" ):
                listener.exitStartMid(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStartMid" ):
                return visitor.visitStartMid(self)
            else:
                return visitor.visitChildren(self)




    def startMid(self):

        localctx = vbaParser.StartMidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 450, self.RULE_startMid)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2954
            self.integerExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LengthContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integerExpression(self):
            return self.getTypedRuleContext(vbaParser.IntegerExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_length

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLength" ):
                listener.enterLength(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLength" ):
                listener.exitLength(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLength" ):
                return visitor.visitLength(self)
            else:
                return visitor.visitChildren(self)




    def length(self):

        localctx = vbaParser.LengthContext(self, self._ctx, self.state)
        self.enterRule(localctx, 452, self.RULE_length)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2956
            self.integerExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LsetStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LSET(self):
            return self.getToken(vbaParser.LSET, 0)

        def boundVariableExpression(self):
            return self.getTypedRuleContext(vbaParser.BoundVariableExpressionContext,0)


        def EQ(self):
            return self.getToken(vbaParser.EQ, 0)

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_lsetStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLsetStatement" ):
                listener.enterLsetStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLsetStatement" ):
                listener.exitLsetStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLsetStatement" ):
                return visitor.visitLsetStatement(self)
            else:
                return visitor.visitChildren(self)




    def lsetStatement(self):

        localctx = vbaParser.LsetStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 454, self.RULE_lsetStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2958
            self.match(vbaParser.LSET)
            self.state = 2960
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==271 or _la==278:
                self.state = 2959
                self.wsc()


            self.state = 2962
            self.boundVariableExpression()
            self.state = 2964
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==271 or _la==278:
                self.state = 2963
                self.wsc()


            self.state = 2966
            self.match(vbaParser.EQ)
            self.state = 2968
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==271 or _la==278:
                self.state = 2967
                self.wsc()


            self.state = 2970
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RsetStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RSET(self):
            return self.getToken(vbaParser.RSET, 0)

        def boundVariableExpression(self):
            return self.getTypedRuleContext(vbaParser.BoundVariableExpressionContext,0)


        def EQ(self):
            return self.getToken(vbaParser.EQ, 0)

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_rsetStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRsetStatement" ):
                listener.enterRsetStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRsetStatement" ):
                listener.exitRsetStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRsetStatement" ):
                return visitor.visitRsetStatement(self)
            else:
                return visitor.visitChildren(self)




    def rsetStatement(self):

        localctx = vbaParser.RsetStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 456, self.RULE_rsetStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2972
            self.match(vbaParser.RSET)
            self.state = 2974
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==271 or _la==278:
                self.state = 2973
                self.wsc()


            self.state = 2976
            self.boundVariableExpression()
            self.state = 2978
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==271 or _la==278:
                self.state = 2977
                self.wsc()


            self.state = 2980
            self.match(vbaParser.EQ)
            self.state = 2982
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==271 or _la==278:
                self.state = 2981
                self.wsc()


            self.state = 2984
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LetStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lExpression(self):
            return self.getTypedRuleContext(vbaParser.LExpressionContext,0)


        def EQ(self):
            return self.getToken(vbaParser.EQ, 0)

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def LET(self):
            return self.getToken(vbaParser.LET, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_letStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLetStatement" ):
                listener.enterLetStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLetStatement" ):
                listener.exitLetStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLetStatement" ):
                return visitor.visitLetStatement(self)
            else:
                return visitor.visitChildren(self)




    def letStatement(self):

        localctx = vbaParser.LetStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 458, self.RULE_letStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2988
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==109:
                self.state = 2986
                self.match(vbaParser.LET)
                self.state = 2987
                self.wsc()


            self.state = 2990
            self.lExpression(0)
            self.state = 2992
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==271 or _la==278:
                self.state = 2991
                self.wsc()


            self.state = 2994
            self.match(vbaParser.EQ)
            self.state = 2996
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==271 or _la==278:
                self.state = 2995
                self.wsc()


            self.state = 2998
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(vbaParser.SET, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def lExpression(self):
            return self.getTypedRuleContext(vbaParser.LExpressionContext,0)


        def EQ(self):
            return self.getToken(vbaParser.EQ, 0)

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_setStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetStatement" ):
                listener.enterSetStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetStatement" ):
                listener.exitSetStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetStatement" ):
                return visitor.visitSetStatement(self)
            else:
                return visitor.visitChildren(self)




    def setStatement(self):

        localctx = vbaParser.SetStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 460, self.RULE_setStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3000
            self.match(vbaParser.SET)
            self.state = 3001
            self.wsc()
            self.state = 3002
            self.lExpression(0)
            self.state = 3004
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==271 or _la==278:
                self.state = 3003
                self.wsc()


            self.state = 3006
            self.match(vbaParser.EQ)
            self.state = 3008
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==271 or _la==278:
                self.state = 3007
                self.wsc()


            self.state = 3010
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ErrorHandlingStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def onErrorStatement(self):
            return self.getTypedRuleContext(vbaParser.OnErrorStatementContext,0)


        def resumeStatement(self):
            return self.getTypedRuleContext(vbaParser.ResumeStatementContext,0)


        def errorStatement(self):
            return self.getTypedRuleContext(vbaParser.ErrorStatementContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_errorHandlingStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterErrorHandlingStatement" ):
                listener.enterErrorHandlingStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitErrorHandlingStatement" ):
                listener.exitErrorHandlingStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitErrorHandlingStatement" ):
                return visitor.visitErrorHandlingStatement(self)
            else:
                return visitor.visitChildren(self)




    def errorHandlingStatement(self):

        localctx = vbaParser.ErrorHandlingStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 462, self.RULE_errorHandlingStatement)
        try:
            self.state = 3015
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [137]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3012
                self.onErrorStatement()
                pass
            elif token in [158]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3013
                self.resumeStatement()
                pass
            elif token in [81]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3014
                self.errorStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OnErrorStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(vbaParser.ON, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def ERROR(self):
            return self.getToken(vbaParser.ERROR, 0)

        def errorBehavior(self):
            return self.getTypedRuleContext(vbaParser.ErrorBehaviorContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_onErrorStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOnErrorStatement" ):
                listener.enterOnErrorStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOnErrorStatement" ):
                listener.exitOnErrorStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOnErrorStatement" ):
                return visitor.visitOnErrorStatement(self)
            else:
                return visitor.visitChildren(self)




    def onErrorStatement(self):

        localctx = vbaParser.OnErrorStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 464, self.RULE_onErrorStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3017
            self.match(vbaParser.ON)
            self.state = 3018
            self.wsc()
            self.state = 3019
            self.match(vbaParser.ERROR)
            self.state = 3021
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==271 or _la==278:
                self.state = 3020
                self.wsc()


            self.state = 3023
            self.errorBehavior()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ErrorBehaviorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESUME(self):
            return self.getToken(vbaParser.RESUME, 0)

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def NEXT(self):
            return self.getToken(vbaParser.NEXT, 0)

        def GOTO(self):
            return self.getToken(vbaParser.GOTO, 0)

        def statementLabel(self):
            return self.getTypedRuleContext(vbaParser.StatementLabelContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_errorBehavior

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterErrorBehavior" ):
                listener.enterErrorBehavior(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitErrorBehavior" ):
                listener.exitErrorBehavior(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitErrorBehavior" ):
                return visitor.visitErrorBehavior(self)
            else:
                return visitor.visitChildren(self)




    def errorBehavior(self):

        localctx = vbaParser.ErrorBehaviorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 466, self.RULE_errorBehavior)
        self._la = 0 # Token type
        try:
            self.state = 3034
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [158]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3025
                self.match(vbaParser.RESUME)
                self.state = 3026
                self.wsc()
                self.state = 3027
                self.match(vbaParser.NEXT)
                pass
            elif token in [94]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3029
                self.match(vbaParser.GOTO)
                self.state = 3031
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==271 or _la==278:
                    self.state = 3030
                    self.wsc()


                self.state = 3033
                self.statementLabel()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResumeStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESUME(self):
            return self.getToken(vbaParser.RESUME, 0)

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def NEXT(self):
            return self.getToken(vbaParser.NEXT, 0)

        def statementLabel(self):
            return self.getTypedRuleContext(vbaParser.StatementLabelContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_resumeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResumeStatement" ):
                listener.enterResumeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResumeStatement" ):
                listener.exitResumeStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitResumeStatement" ):
                return visitor.visitResumeStatement(self)
            else:
                return visitor.visitChildren(self)




    def resumeStatement(self):

        localctx = vbaParser.ResumeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 468, self.RULE_resumeStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3036
            self.match(vbaParser.RESUME)
            self.state = 3038
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,417,self._ctx)
            if la_ == 1:
                self.state = 3037
                self.wsc()


            self.state = 3042
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [130]:
                self.state = 3040
                self.match(vbaParser.NEXT)
                pass
            elif token in [2, 4, 8, 11, 12, 13, 29, 30, 33, 34, 35, 40, 81, 92, 105, 110, 112, 124, 125, 126, 127, 129, 135, 142, 147, 152, 154, 157, 171, 177, 212, 215, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 268, 280]:
                self.state = 3041
                self.statementLabel()
                pass
            elif token in [74, 271, 272, 273, 274, 276, 278]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ErrorStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ERROR(self):
            return self.getToken(vbaParser.ERROR, 0)

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def errorNumber(self):
            return self.getTypedRuleContext(vbaParser.ErrorNumberContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_errorStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterErrorStatement" ):
                listener.enterErrorStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitErrorStatement" ):
                listener.exitErrorStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitErrorStatement" ):
                return visitor.visitErrorStatement(self)
            else:
                return visitor.visitChildren(self)




    def errorStatement(self):

        localctx = vbaParser.ErrorStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 470, self.RULE_errorStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3044
            self.match(vbaParser.ERROR)
            self.state = 3045
            self.wsc()
            self.state = 3046
            self.errorNumber()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ErrorNumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integerExpression(self):
            return self.getTypedRuleContext(vbaParser.IntegerExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_errorNumber

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterErrorNumber" ):
                listener.enterErrorNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitErrorNumber" ):
                listener.exitErrorNumber(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitErrorNumber" ):
                return visitor.visitErrorNumber(self)
            else:
                return visitor.visitChildren(self)




    def errorNumber(self):

        localctx = vbaParser.ErrorNumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 472, self.RULE_errorNumber)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3048
            self.integerExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FileStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def openStatement(self):
            return self.getTypedRuleContext(vbaParser.OpenStatementContext,0)


        def closeStatement(self):
            return self.getTypedRuleContext(vbaParser.CloseStatementContext,0)


        def seekStatement(self):
            return self.getTypedRuleContext(vbaParser.SeekStatementContext,0)


        def lockStatement(self):
            return self.getTypedRuleContext(vbaParser.LockStatementContext,0)


        def unlockStatement(self):
            return self.getTypedRuleContext(vbaParser.UnlockStatementContext,0)


        def lineInputStatement(self):
            return self.getTypedRuleContext(vbaParser.LineInputStatementContext,0)


        def widthStatement(self):
            return self.getTypedRuleContext(vbaParser.WidthStatementContext,0)


        def printStatement(self):
            return self.getTypedRuleContext(vbaParser.PrintStatementContext,0)


        def writeStatement(self):
            return self.getTypedRuleContext(vbaParser.WriteStatementContext,0)


        def inputStatement(self):
            return self.getTypedRuleContext(vbaParser.InputStatementContext,0)


        def putStatement(self):
            return self.getTypedRuleContext(vbaParser.PutStatementContext,0)


        def getStatement(self):
            return self.getTypedRuleContext(vbaParser.GetStatementContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_fileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFileStatement" ):
                listener.enterFileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFileStatement" ):
                listener.exitFileStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFileStatement" ):
                return visitor.visitFileStatement(self)
            else:
                return visitor.visitChildren(self)




    def fileStatement(self):

        localctx = vbaParser.FileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 474, self.RULE_fileStatement)
        try:
            self.state = 3062
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [138]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3050
                self.openStatement()
                pass
            elif token in [39, 157]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3051
                self.closeStatement()
                pass
            elif token in [162]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3052
                self.seekStatement()
                pass
            elif token in [114]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3053
                self.lockStatement()
                pass
            elif token in [184]:
                self.enterOuterAlt(localctx, 5)
                self.state = 3054
                self.unlockStatement()
                pass
            elif token in [112]:
                self.enterOuterAlt(localctx, 6)
                self.state = 3055
                self.lineInputStatement()
                pass
            elif token in [215]:
                self.enterOuterAlt(localctx, 7)
                self.state = 3056
                self.widthStatement()
                pass
            elif token in [145]:
                self.enterOuterAlt(localctx, 8)
                self.state = 3057
                self.printStatement()
                pass
            elif token in [218]:
                self.enterOuterAlt(localctx, 9)
                self.state = 3058
                self.writeStatement()
                pass
            elif token in [99]:
                self.enterOuterAlt(localctx, 10)
                self.state = 3059
                self.inputStatement()
                pass
            elif token in [151]:
                self.enterOuterAlt(localctx, 11)
                self.state = 3060
                self.putStatement()
                pass
            elif token in [90]:
                self.enterOuterAlt(localctx, 12)
                self.state = 3061
                self.getStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OpenStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN(self):
            return self.getToken(vbaParser.OPEN, 0)

        def pathName(self):
            return self.getTypedRuleContext(vbaParser.PathNameContext,0)


        def AS(self):
            return self.getToken(vbaParser.AS, 0)

        def fileNumber(self):
            return self.getTypedRuleContext(vbaParser.FileNumberContext,0)


        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def modeClause(self):
            return self.getTypedRuleContext(vbaParser.ModeClauseContext,0)


        def accessClause(self):
            return self.getTypedRuleContext(vbaParser.AccessClauseContext,0)


        def lock(self):
            return self.getTypedRuleContext(vbaParser.LockContext,0)


        def lenClause(self):
            return self.getTypedRuleContext(vbaParser.LenClauseContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_openStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpenStatement" ):
                listener.enterOpenStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpenStatement" ):
                listener.exitOpenStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOpenStatement" ):
                return visitor.visitOpenStatement(self)
            else:
                return visitor.visitChildren(self)




    def openStatement(self):

        localctx = vbaParser.OpenStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 476, self.RULE_openStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3064
            self.match(vbaParser.OPEN)
            self.state = 3066
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==271 or _la==278:
                self.state = 3065
                self.wsc()


            self.state = 3068
            self.pathName()
            self.state = 3070
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,421,self._ctx)
            if la_ == 1:
                self.state = 3069
                self.wsc()


            self.state = 3073
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==88:
                self.state = 3072
                self.modeClause()


            self.state = 3076
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,423,self._ctx)
            if la_ == 1:
                self.state = 3075
                self.wsc()


            self.state = 3079
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 3078
                self.accessClause()


            self.state = 3082
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,425,self._ctx)
            if la_ == 1:
                self.state = 3081
                self.wsc()


            self.state = 3085
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==114 or _la==166:
                self.state = 3084
                self.lock()


            self.state = 3088
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==271 or _la==278:
                self.state = 3087
                self.wsc()


            self.state = 3090
            self.match(vbaParser.AS)
            self.state = 3092
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==271 or _la==278:
                self.state = 3091
                self.wsc()


            self.state = 3094
            self.fileNumber()
            self.state = 3096
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,429,self._ctx)
            if la_ == 1:
                self.state = 3095
                self.wsc()


            self.state = 3099
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==107:
                self.state = 3098
                self.lenClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PathNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_pathName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPathName" ):
                listener.enterPathName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPathName" ):
                listener.exitPathName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPathName" ):
                return visitor.visitPathName(self)
            else:
                return visitor.visitChildren(self)




    def pathName(self):

        localctx = vbaParser.PathNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 478, self.RULE_pathName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3101
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModeClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(vbaParser.FOR, 0)

        def modeOpt(self):
            return self.getTypedRuleContext(vbaParser.ModeOptContext,0)


        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_modeClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModeClause" ):
                listener.enterModeClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModeClause" ):
                listener.exitModeClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModeClause" ):
                return visitor.visitModeClause(self)
            else:
                return visitor.visitChildren(self)




    def modeClause(self):

        localctx = vbaParser.ModeClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 480, self.RULE_modeClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3103
            self.match(vbaParser.FOR)
            self.state = 3105
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==271 or _la==278:
                self.state = 3104
                self.wsc()


            self.state = 3107
            self.modeOpt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModeOptContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def APPEND(self):
            return self.getToken(vbaParser.APPEND, 0)

        def BINARY(self):
            return self.getToken(vbaParser.BINARY, 0)

        def INPUT(self):
            return self.getToken(vbaParser.INPUT, 0)

        def OUTPUT(self):
            return self.getToken(vbaParser.OUTPUT, 0)

        def RANDOM(self):
            return self.getToken(vbaParser.RANDOM, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_modeOpt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModeOpt" ):
                listener.enterModeOpt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModeOpt" ):
                listener.exitModeOpt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModeOpt" ):
                return visitor.visitModeOpt(self)
            else:
                return visitor.visitChildren(self)




    def modeOpt(self):

        localctx = vbaParser.ModeOptContext(self, self._ctx, self.state)
        self.enterRule(localctx, 482, self.RULE_modeOpt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3109
            _la = self._input.LA(1)
            if not(_la==8 or _la==13 or ((((_la - 99)) & ~0x3f) == 0 and ((1 << (_la - 99)) & 9015995347763201) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AccessClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ACCESS(self):
            return self.getToken(vbaParser.ACCESS, 0)

        def access(self):
            return self.getTypedRuleContext(vbaParser.AccessContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_accessClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAccessClause" ):
                listener.enterAccessClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAccessClause" ):
                listener.exitAccessClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAccessClause" ):
                return visitor.visitAccessClause(self)
            else:
                return visitor.visitChildren(self)




    def accessClause(self):

        localctx = vbaParser.AccessClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 484, self.RULE_accessClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3111
            self.match(vbaParser.ACCESS)
            self.state = 3112
            self.access()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AccessContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def READ(self):
            return self.getToken(vbaParser.READ, 0)

        def WRITE(self):
            return self.getToken(vbaParser.WRITE, 0)

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_access

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAccess" ):
                listener.enterAccess(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAccess" ):
                listener.exitAccess(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAccess" ):
                return visitor.visitAccess(self)
            else:
                return visitor.visitChildren(self)




    def access(self):

        localctx = vbaParser.AccessContext(self, self._ctx, self.state)
        self.enterRule(localctx, 486, self.RULE_access)
        try:
            self.state = 3120
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,432,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3114
                self.match(vbaParser.READ)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3115
                self.match(vbaParser.WRITE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3116
                self.match(vbaParser.READ)
                self.state = 3117
                self.wsc()
                self.state = 3118
                self.match(vbaParser.WRITE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHARED(self):
            return self.getToken(vbaParser.SHARED, 0)

        def LOCK(self):
            return self.getToken(vbaParser.LOCK, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def READ(self):
            return self.getToken(vbaParser.READ, 0)

        def WRITE(self):
            return self.getToken(vbaParser.WRITE, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_lock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLock" ):
                listener.enterLock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLock" ):
                listener.exitLock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLock" ):
                return visitor.visitLock(self)
            else:
                return visitor.visitChildren(self)




    def lock(self):

        localctx = vbaParser.LockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 488, self.RULE_lock)
        try:
            self.state = 3137
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,433,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3122
                self.match(vbaParser.SHARED)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3123
                self.match(vbaParser.LOCK)
                self.state = 3124
                self.wsc()
                self.state = 3125
                self.match(vbaParser.READ)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3127
                self.match(vbaParser.LOCK)
                self.state = 3128
                self.wsc()
                self.state = 3129
                self.match(vbaParser.WRITE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3131
                self.match(vbaParser.LOCK)
                self.state = 3132
                self.wsc()
                self.state = 3133
                self.match(vbaParser.READ)
                self.state = 3134
                self.wsc()
                self.state = 3135
                self.match(vbaParser.WRITE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LenClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEN(self):
            return self.getToken(vbaParser.LEN, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def EQ(self):
            return self.getToken(vbaParser.EQ, 0)

        def recLength(self):
            return self.getTypedRuleContext(vbaParser.RecLengthContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_lenClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLenClause" ):
                listener.enterLenClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLenClause" ):
                listener.exitLenClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLenClause" ):
                return visitor.visitLenClause(self)
            else:
                return visitor.visitChildren(self)




    def lenClause(self):

        localctx = vbaParser.LenClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 490, self.RULE_lenClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3139
            self.match(vbaParser.LEN)
            self.state = 3140
            self.wsc()
            self.state = 3141
            self.match(vbaParser.EQ)
            self.state = 3142
            self.wsc()
            self.state = 3143
            self.recLength()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RecLengthContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_recLength

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecLength" ):
                listener.enterRecLength(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecLength" ):
                listener.exitRecLength(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRecLength" ):
                return visitor.visitRecLength(self)
            else:
                return visitor.visitChildren(self)




    def recLength(self):

        localctx = vbaParser.RecLengthContext(self, self._ctx, self.state)
        self.enterRule(localctx, 492, self.RULE_recLength)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3145
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FileNumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def markedFileNumber(self):
            return self.getTypedRuleContext(vbaParser.MarkedFileNumberContext,0)


        def unmarkedFileNumber(self):
            return self.getTypedRuleContext(vbaParser.UnmarkedFileNumberContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_fileNumber

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFileNumber" ):
                listener.enterFileNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFileNumber" ):
                listener.exitFileNumber(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFileNumber" ):
                return visitor.visitFileNumber(self)
            else:
                return visitor.visitChildren(self)




    def fileNumber(self):

        localctx = vbaParser.FileNumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 494, self.RULE_fileNumber)
        try:
            self.state = 3149
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,434,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3147
                self.markedFileNumber()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3148
                self.unmarkedFileNumber()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MarkedFileNumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HASH(self):
            return self.getToken(vbaParser.HASH, 0)

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_markedFileNumber

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMarkedFileNumber" ):
                listener.enterMarkedFileNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMarkedFileNumber" ):
                listener.exitMarkedFileNumber(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMarkedFileNumber" ):
                return visitor.visitMarkedFileNumber(self)
            else:
                return visitor.visitChildren(self)




    def markedFileNumber(self):

        localctx = vbaParser.MarkedFileNumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 496, self.RULE_markedFileNumber)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3151
            self.match(vbaParser.HASH)
            self.state = 3152
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnmarkedFileNumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_unmarkedFileNumber

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnmarkedFileNumber" ):
                listener.enterUnmarkedFileNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnmarkedFileNumber" ):
                listener.exitUnmarkedFileNumber(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnmarkedFileNumber" ):
                return visitor.visitUnmarkedFileNumber(self)
            else:
                return visitor.visitChildren(self)




    def unmarkedFileNumber(self):

        localctx = vbaParser.UnmarkedFileNumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 498, self.RULE_unmarkedFileNumber)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3154
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CloseStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESET(self):
            return self.getToken(vbaParser.RESET, 0)

        def CLOSE(self):
            return self.getToken(vbaParser.CLOSE, 0)

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def fileNumberList(self):
            return self.getTypedRuleContext(vbaParser.FileNumberListContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_closeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCloseStatement" ):
                listener.enterCloseStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCloseStatement" ):
                listener.exitCloseStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCloseStatement" ):
                return visitor.visitCloseStatement(self)
            else:
                return visitor.visitChildren(self)




    def closeStatement(self):

        localctx = vbaParser.CloseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 500, self.RULE_closeStatement)
        self._la = 0 # Token type
        try:
            self.state = 3164
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [157]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3156
                self.match(vbaParser.RESET)
                pass
            elif token in [39]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3157
                self.match(vbaParser.CLOSE)
                self.state = 3159
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,435,self._ctx)
                if la_ == 1:
                    self.state = 3158
                    self.wsc()


                self.state = 3162
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1474994576046870) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & -2900306126593388479) != 0) or ((((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & 1848558507049479) != 0) or ((((_la - 212)) & ~0x3f) == 0 and ((1 << (_la - 212)) & 513428675589308169) != 0) or _la==280 or _la==281:
                    self.state = 3161
                    self.fileNumberList()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FileNumberListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fileNumber(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.FileNumberContext)
            else:
                return self.getTypedRuleContext(vbaParser.FileNumberContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.COMMA)
            else:
                return self.getToken(vbaParser.COMMA, i)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_fileNumberList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFileNumberList" ):
                listener.enterFileNumberList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFileNumberList" ):
                listener.exitFileNumberList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFileNumberList" ):
                return visitor.visitFileNumberList(self)
            else:
                return visitor.visitChildren(self)




    def fileNumberList(self):

        localctx = vbaParser.FileNumberListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 502, self.RULE_fileNumberList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3166
            self.fileNumber()
            self.state = 3177
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,440,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3168
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==271 or _la==278:
                        self.state = 3167
                        self.wsc()


                    self.state = 3170
                    self.match(vbaParser.COMMA)
                    self.state = 3172
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==271 or _la==278:
                        self.state = 3171
                        self.wsc()


                    self.state = 3174
                    self.fileNumber() 
                self.state = 3179
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,440,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SeekStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEEK(self):
            return self.getToken(vbaParser.SEEK, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def fileNumber(self):
            return self.getTypedRuleContext(vbaParser.FileNumberContext,0)


        def COMMA(self):
            return self.getToken(vbaParser.COMMA, 0)

        def position(self):
            return self.getTypedRuleContext(vbaParser.PositionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_seekStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSeekStatement" ):
                listener.enterSeekStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSeekStatement" ):
                listener.exitSeekStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSeekStatement" ):
                return visitor.visitSeekStatement(self)
            else:
                return visitor.visitChildren(self)




    def seekStatement(self):

        localctx = vbaParser.SeekStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 504, self.RULE_seekStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3180
            self.match(vbaParser.SEEK)
            self.state = 3181
            self.wsc()
            self.state = 3182
            self.fileNumber()
            self.state = 3184
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==271 or _la==278:
                self.state = 3183
                self.wsc()


            self.state = 3186
            self.match(vbaParser.COMMA)
            self.state = 3188
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==271 or _la==278:
                self.state = 3187
                self.wsc()


            self.state = 3190
            self.position()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PositionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_position

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPosition" ):
                listener.enterPosition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPosition" ):
                listener.exitPosition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPosition" ):
                return visitor.visitPosition(self)
            else:
                return visitor.visitChildren(self)




    def position(self):

        localctx = vbaParser.PositionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 506, self.RULE_position)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3192
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LockStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCK(self):
            return self.getToken(vbaParser.LOCK, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def fileNumber(self):
            return self.getTypedRuleContext(vbaParser.FileNumberContext,0)


        def COMMA(self):
            return self.getToken(vbaParser.COMMA, 0)

        def recordRange(self):
            return self.getTypedRuleContext(vbaParser.RecordRangeContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_lockStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLockStatement" ):
                listener.enterLockStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLockStatement" ):
                listener.exitLockStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLockStatement" ):
                return visitor.visitLockStatement(self)
            else:
                return visitor.visitChildren(self)




    def lockStatement(self):

        localctx = vbaParser.LockStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 508, self.RULE_lockStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3194
            self.match(vbaParser.LOCK)
            self.state = 3195
            self.wsc()
            self.state = 3196
            self.fileNumber()

            self.state = 3198
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==271 or _la==278:
                self.state = 3197
                self.wsc()


            self.state = 3200
            self.match(vbaParser.COMMA)
            self.state = 3202
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,444,self._ctx)
            if la_ == 1:
                self.state = 3201
                self.wsc()


            self.state = 3204
            self.recordRange()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RecordRangeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def startRecordNumber(self):
            return self.getTypedRuleContext(vbaParser.StartRecordNumberContext,0)


        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def TO(self):
            return self.getToken(vbaParser.TO, 0)

        def endRecordNumber(self):
            return self.getTypedRuleContext(vbaParser.EndRecordNumberContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_recordRange

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecordRange" ):
                listener.enterRecordRange(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecordRange" ):
                listener.exitRecordRange(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRecordRange" ):
                return visitor.visitRecordRange(self)
            else:
                return visitor.visitChildren(self)




    def recordRange(self):

        localctx = vbaParser.RecordRangeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 510, self.RULE_recordRange)
        self._la = 0 # Token type
        try:
            self.state = 3215
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,446,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3206
                self.startRecordNumber()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3208
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1474994576046870) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & -2900306126593388479) != 0) or ((((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & 1848558507049479) != 0) or ((((_la - 212)) & ~0x3f) == 0 and ((1 << (_la - 212)) & 513428675589308169) != 0) or _la==280 or _la==281:
                    self.state = 3207
                    self.startRecordNumber()


                self.state = 3210
                self.wsc()
                self.state = 3211
                self.match(vbaParser.TO)
                self.state = 3212
                self.wsc()
                self.state = 3213
                self.endRecordNumber()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StartRecordNumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_startRecordNumber

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStartRecordNumber" ):
                listener.enterStartRecordNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStartRecordNumber" ):
                listener.exitStartRecordNumber(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStartRecordNumber" ):
                return visitor.visitStartRecordNumber(self)
            else:
                return visitor.visitChildren(self)




    def startRecordNumber(self):

        localctx = vbaParser.StartRecordNumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 512, self.RULE_startRecordNumber)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3217
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EndRecordNumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_endRecordNumber

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEndRecordNumber" ):
                listener.enterEndRecordNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEndRecordNumber" ):
                listener.exitEndRecordNumber(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEndRecordNumber" ):
                return visitor.visitEndRecordNumber(self)
            else:
                return visitor.visitChildren(self)




    def endRecordNumber(self):

        localctx = vbaParser.EndRecordNumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 514, self.RULE_endRecordNumber)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3219
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnlockStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNLOCK(self):
            return self.getToken(vbaParser.UNLOCK, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def fileNumber(self):
            return self.getTypedRuleContext(vbaParser.FileNumberContext,0)


        def COMMA(self):
            return self.getToken(vbaParser.COMMA, 0)

        def recordRange(self):
            return self.getTypedRuleContext(vbaParser.RecordRangeContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_unlockStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnlockStatement" ):
                listener.enterUnlockStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnlockStatement" ):
                listener.exitUnlockStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnlockStatement" ):
                return visitor.visitUnlockStatement(self)
            else:
                return visitor.visitChildren(self)




    def unlockStatement(self):

        localctx = vbaParser.UnlockStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 516, self.RULE_unlockStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3221
            self.match(vbaParser.UNLOCK)
            self.state = 3222
            self.wsc()
            self.state = 3223
            self.fileNumber()
            self.state = 3232
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,449,self._ctx)
            if la_ == 1:
                self.state = 3225
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==271 or _la==278:
                    self.state = 3224
                    self.wsc()


                self.state = 3227
                self.match(vbaParser.COMMA)
                self.state = 3229
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,448,self._ctx)
                if la_ == 1:
                    self.state = 3228
                    self.wsc()


                self.state = 3231
                self.recordRange()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LineInputStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LINE(self):
            return self.getToken(vbaParser.LINE, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def INPUT(self):
            return self.getToken(vbaParser.INPUT, 0)

        def markedFileNumber(self):
            return self.getTypedRuleContext(vbaParser.MarkedFileNumberContext,0)


        def COMMA(self):
            return self.getToken(vbaParser.COMMA, 0)

        def variableName(self):
            return self.getTypedRuleContext(vbaParser.VariableNameContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_lineInputStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLineInputStatement" ):
                listener.enterLineInputStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLineInputStatement" ):
                listener.exitLineInputStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLineInputStatement" ):
                return visitor.visitLineInputStatement(self)
            else:
                return visitor.visitChildren(self)




    def lineInputStatement(self):

        localctx = vbaParser.LineInputStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 518, self.RULE_lineInputStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3234
            self.match(vbaParser.LINE)
            self.state = 3235
            self.wsc()
            self.state = 3236
            self.match(vbaParser.INPUT)
            self.state = 3237
            self.wsc()
            self.state = 3238
            self.markedFileNumber()
            self.state = 3240
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==271 or _la==278:
                self.state = 3239
                self.wsc()


            self.state = 3242
            self.match(vbaParser.COMMA)
            self.state = 3244
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==271 or _la==278:
                self.state = 3243
                self.wsc()


            self.state = 3246
            self.variableName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableExpression(self):
            return self.getTypedRuleContext(vbaParser.VariableExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_variableName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableName" ):
                listener.enterVariableName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableName" ):
                listener.exitVariableName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableName" ):
                return visitor.visitVariableName(self)
            else:
                return visitor.visitChildren(self)




    def variableName(self):

        localctx = vbaParser.VariableNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 520, self.RULE_variableName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3248
            self.variableExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WidthStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WIDTH(self):
            return self.getToken(vbaParser.WIDTH, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def markedFileNumber(self):
            return self.getTypedRuleContext(vbaParser.MarkedFileNumberContext,0)


        def COMMA(self):
            return self.getToken(vbaParser.COMMA, 0)

        def lineWidth(self):
            return self.getTypedRuleContext(vbaParser.LineWidthContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_widthStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWidthStatement" ):
                listener.enterWidthStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWidthStatement" ):
                listener.exitWidthStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWidthStatement" ):
                return visitor.visitWidthStatement(self)
            else:
                return visitor.visitChildren(self)




    def widthStatement(self):

        localctx = vbaParser.WidthStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 522, self.RULE_widthStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3250
            self.match(vbaParser.WIDTH)
            self.state = 3251
            self.wsc()
            self.state = 3252
            self.markedFileNumber()
            self.state = 3254
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==271 or _la==278:
                self.state = 3253
                self.wsc()


            self.state = 3256
            self.match(vbaParser.COMMA)
            self.state = 3258
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==271 or _la==278:
                self.state = 3257
                self.wsc()


            self.state = 3260
            self.lineWidth()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LineWidthContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_lineWidth

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLineWidth" ):
                listener.enterLineWidth(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLineWidth" ):
                listener.exitLineWidth(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLineWidth" ):
                return visitor.visitLineWidth(self)
            else:
                return visitor.visitChildren(self)




    def lineWidth(self):

        localctx = vbaParser.LineWidthContext(self, self._ctx, self.state)
        self.enterRule(localctx, 524, self.RULE_lineWidth)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3262
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrintStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRINT(self):
            return self.getToken(vbaParser.PRINT, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def markedFileNumber(self):
            return self.getTypedRuleContext(vbaParser.MarkedFileNumberContext,0)


        def COMMA(self):
            return self.getToken(vbaParser.COMMA, 0)

        def outputList(self):
            return self.getTypedRuleContext(vbaParser.OutputListContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_printStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrintStatement" ):
                listener.enterPrintStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrintStatement" ):
                listener.exitPrintStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrintStatement" ):
                return visitor.visitPrintStatement(self)
            else:
                return visitor.visitChildren(self)




    def printStatement(self):

        localctx = vbaParser.PrintStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 526, self.RULE_printStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3264
            self.match(vbaParser.PRINT)
            self.state = 3265
            self.wsc()
            self.state = 3266
            self.markedFileNumber()
            self.state = 3268
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==271 or _la==278:
                self.state = 3267
                self.wsc()


            self.state = 3270
            self.match(vbaParser.COMMA)
            self.state = 3272
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,455,self._ctx)
            if la_ == 1:
                self.state = 3271
                self.wsc()


            self.state = 3275
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1474994576046870) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & -2900306126593388479) != 0) or ((((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & 1857423319548423) != 0) or ((((_la - 212)) & ~0x3f) == 0 and ((1 << (_la - 212)) & 513991625811164937) != 0) or _la==280 or _la==281:
                self.state = 3274
                self.outputList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OutputListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def outputItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.OutputItemContext)
            else:
                return self.getTypedRuleContext(vbaParser.OutputItemContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_outputList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOutputList" ):
                listener.enterOutputList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOutputList" ):
                listener.exitOutputList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOutputList" ):
                return visitor.visitOutputList(self)
            else:
                return visitor.visitChildren(self)




    def outputList(self):

        localctx = vbaParser.OutputListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 528, self.RULE_outputList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3278 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3277
                self.outputItem()
                self.state = 3280 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 1474994576046870) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & -2900306126593388479) != 0) or ((((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & 1857423319548423) != 0) or ((((_la - 212)) & ~0x3f) == 0 and ((1 << (_la - 212)) & 513991625811164937) != 0) or _la==280 or _la==281):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OutputItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def outputClause(self):
            return self.getTypedRuleContext(vbaParser.OutputClauseContext,0)


        def charPosition(self):
            return self.getTypedRuleContext(vbaParser.CharPositionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_outputItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOutputItem" ):
                listener.enterOutputItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOutputItem" ):
                listener.exitOutputItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOutputItem" ):
                return visitor.visitOutputItem(self)
            else:
                return visitor.visitChildren(self)




    def outputItem(self):

        localctx = vbaParser.OutputItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 530, self.RULE_outputItem)
        try:
            self.state = 3287
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 2, 4, 8, 9, 11, 12, 13, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 42, 43, 44, 45, 48, 50, 69, 75, 81, 85, 86, 92, 99, 100, 101, 105, 106, 107, 108, 110, 112, 123, 124, 125, 126, 127, 129, 131, 132, 133, 134, 135, 142, 147, 148, 152, 154, 157, 161, 165, 169, 171, 173, 176, 177, 180, 182, 183, 212, 215, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 244, 247, 249, 251, 256, 265, 268, 269, 270, 280, 281]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3282
                self.outputClause()
                self.state = 3284
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,458,self._ctx)
                if la_ == 1:
                    self.state = 3283
                    self.charPosition()


                pass
            elif token in [240, 261]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3286
                self.charPosition()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OutputClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def spcClause(self):
            return self.getTypedRuleContext(vbaParser.SpcClauseContext,0)


        def tabClause(self):
            return self.getTypedRuleContext(vbaParser.TabClauseContext,0)


        def outputExpression(self):
            return self.getTypedRuleContext(vbaParser.OutputExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_outputClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOutputClause" ):
                listener.enterOutputClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOutputClause" ):
                listener.exitOutputClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOutputClause" ):
                return visitor.visitOutputClause(self)
            else:
                return visitor.visitChildren(self)




    def outputClause(self):

        localctx = vbaParser.OutputClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 532, self.RULE_outputClause)
        try:
            self.state = 3292
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [169]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3289
                self.spcClause()
                pass
            elif token in [176]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3290
                self.tabClause()
                pass
            elif token in [1, 2, 4, 8, 9, 11, 12, 13, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 42, 43, 44, 45, 48, 50, 69, 75, 81, 85, 86, 92, 99, 100, 101, 105, 106, 107, 108, 110, 112, 123, 124, 125, 126, 127, 129, 131, 132, 133, 134, 135, 142, 147, 148, 152, 154, 157, 161, 165, 171, 173, 177, 180, 182, 183, 212, 215, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 244, 247, 249, 251, 256, 265, 268, 269, 270, 280, 281]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3291
                self.outputExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CharPositionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMICOLON(self):
            return self.getToken(vbaParser.SEMICOLON, 0)

        def COMMA(self):
            return self.getToken(vbaParser.COMMA, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_charPosition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharPosition" ):
                listener.enterCharPosition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharPosition" ):
                listener.exitCharPosition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCharPosition" ):
                return visitor.visitCharPosition(self)
            else:
                return visitor.visitChildren(self)




    def charPosition(self):

        localctx = vbaParser.CharPositionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 534, self.RULE_charPosition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3294
            _la = self._input.LA(1)
            if not(_la==240 or _la==261):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OutputExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_outputExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOutputExpression" ):
                listener.enterOutputExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOutputExpression" ):
                listener.exitOutputExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOutputExpression" ):
                return visitor.visitOutputExpression(self)
            else:
                return visitor.visitChildren(self)




    def outputExpression(self):

        localctx = vbaParser.OutputExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 536, self.RULE_outputExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3296
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpcClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SPC(self):
            return self.getToken(vbaParser.SPC, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def LPAREN(self):
            return self.getToken(vbaParser.LPAREN, 0)

        def spcNumber(self):
            return self.getTypedRuleContext(vbaParser.SpcNumberContext,0)


        def RPAREN(self):
            return self.getToken(vbaParser.RPAREN, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_spcClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpcClause" ):
                listener.enterSpcClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpcClause" ):
                listener.exitSpcClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSpcClause" ):
                return visitor.visitSpcClause(self)
            else:
                return visitor.visitChildren(self)




    def spcClause(self):

        localctx = vbaParser.SpcClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 538, self.RULE_spcClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3298
            self.match(vbaParser.SPC)
            self.state = 3299
            self.wsc()
            self.state = 3300
            self.match(vbaParser.LPAREN)
            self.state = 3302
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==271 or _la==278:
                self.state = 3301
                self.wsc()


            self.state = 3304
            self.spcNumber()
            self.state = 3306
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==271 or _la==278:
                self.state = 3305
                self.wsc()


            self.state = 3308
            self.match(vbaParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpcNumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_spcNumber

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpcNumber" ):
                listener.enterSpcNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpcNumber" ):
                listener.exitSpcNumber(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSpcNumber" ):
                return visitor.visitSpcNumber(self)
            else:
                return visitor.visitChildren(self)




    def spcNumber(self):

        localctx = vbaParser.SpcNumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 540, self.RULE_spcNumber)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3310
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TabClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TAB(self):
            return self.getToken(vbaParser.TAB, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def LPAREN(self):
            return self.getToken(vbaParser.LPAREN, 0)

        def tabNumber(self):
            return self.getTypedRuleContext(vbaParser.TabNumberContext,0)


        def RPAREN(self):
            return self.getToken(vbaParser.RPAREN, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_tabClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTabClause" ):
                listener.enterTabClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTabClause" ):
                listener.exitTabClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTabClause" ):
                return visitor.visitTabClause(self)
            else:
                return visitor.visitChildren(self)




    def tabClause(self):

        localctx = vbaParser.TabClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 542, self.RULE_tabClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3312
            self.match(vbaParser.TAB)
            self.state = 3313
            self.wsc()
            self.state = 3314
            self.match(vbaParser.LPAREN)
            self.state = 3316
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==271 or _la==278:
                self.state = 3315
                self.wsc()


            self.state = 3318
            self.tabNumber()
            self.state = 3320
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==271 or _la==278:
                self.state = 3319
                self.wsc()


            self.state = 3322
            self.match(vbaParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TabNumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_tabNumber

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTabNumber" ):
                listener.enterTabNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTabNumber" ):
                listener.exitTabNumber(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTabNumber" ):
                return visitor.visitTabNumber(self)
            else:
                return visitor.visitChildren(self)




    def tabNumber(self):

        localctx = vbaParser.TabNumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 544, self.RULE_tabNumber)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3324
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WriteStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WRITE(self):
            return self.getToken(vbaParser.WRITE, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def markedFileNumber(self):
            return self.getTypedRuleContext(vbaParser.MarkedFileNumberContext,0)


        def COMMA(self):
            return self.getToken(vbaParser.COMMA, 0)

        def outputList(self):
            return self.getTypedRuleContext(vbaParser.OutputListContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_writeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWriteStatement" ):
                listener.enterWriteStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWriteStatement" ):
                listener.exitWriteStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWriteStatement" ):
                return visitor.visitWriteStatement(self)
            else:
                return visitor.visitChildren(self)




    def writeStatement(self):

        localctx = vbaParser.WriteStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 546, self.RULE_writeStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3326
            self.match(vbaParser.WRITE)
            self.state = 3327
            self.wsc()
            self.state = 3328
            self.markedFileNumber()
            self.state = 3330
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==271 or _la==278:
                self.state = 3329
                self.wsc()


            self.state = 3332
            self.match(vbaParser.COMMA)
            self.state = 3334
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,466,self._ctx)
            if la_ == 1:
                self.state = 3333
                self.wsc()


            self.state = 3337
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1474994576046870) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & -2900306126593388479) != 0) or ((((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & 1857423319548423) != 0) or ((((_la - 212)) & ~0x3f) == 0 and ((1 << (_la - 212)) & 513991625811164937) != 0) or _la==280 or _la==281:
                self.state = 3336
                self.outputList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InputStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INPUT(self):
            return self.getToken(vbaParser.INPUT, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def markedFileNumber(self):
            return self.getTypedRuleContext(vbaParser.MarkedFileNumberContext,0)


        def COMMA(self):
            return self.getToken(vbaParser.COMMA, 0)

        def inputList(self):
            return self.getTypedRuleContext(vbaParser.InputListContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_inputStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInputStatement" ):
                listener.enterInputStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInputStatement" ):
                listener.exitInputStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInputStatement" ):
                return visitor.visitInputStatement(self)
            else:
                return visitor.visitChildren(self)




    def inputStatement(self):

        localctx = vbaParser.InputStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 548, self.RULE_inputStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3339
            self.match(vbaParser.INPUT)
            self.state = 3340
            self.wsc()
            self.state = 3341
            self.markedFileNumber()
            self.state = 3343
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==271 or _la==278:
                self.state = 3342
                self.wsc()


            self.state = 3345
            self.match(vbaParser.COMMA)
            self.state = 3347
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==271 or _la==278:
                self.state = 3346
                self.wsc()


            self.state = 3349
            self.inputList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InputListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def inputVariable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.InputVariableContext)
            else:
                return self.getTypedRuleContext(vbaParser.InputVariableContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.COMMA)
            else:
                return self.getToken(vbaParser.COMMA, i)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_inputList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInputList" ):
                listener.enterInputList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInputList" ):
                listener.exitInputList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInputList" ):
                return visitor.visitInputList(self)
            else:
                return visitor.visitChildren(self)




    def inputList(self):

        localctx = vbaParser.InputListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 550, self.RULE_inputList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3351
            self.inputVariable()
            self.state = 3362
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,472,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3353
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==271 or _la==278:
                        self.state = 3352
                        self.wsc()


                    self.state = 3355
                    self.match(vbaParser.COMMA)
                    self.state = 3357
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==271 or _la==278:
                        self.state = 3356
                        self.wsc()


                    self.state = 3359
                    self.inputVariable() 
                self.state = 3364
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,472,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InputVariableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def boundVariableExpression(self):
            return self.getTypedRuleContext(vbaParser.BoundVariableExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_inputVariable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInputVariable" ):
                listener.enterInputVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInputVariable" ):
                listener.exitInputVariable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInputVariable" ):
                return visitor.visitInputVariable(self)
            else:
                return visitor.visitChildren(self)




    def inputVariable(self):

        localctx = vbaParser.InputVariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 552, self.RULE_inputVariable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3365
            self.boundVariableExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PutStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PUT(self):
            return self.getToken(vbaParser.PUT, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def fileNumber(self):
            return self.getTypedRuleContext(vbaParser.FileNumberContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.COMMA)
            else:
                return self.getToken(vbaParser.COMMA, i)

        def data(self):
            return self.getTypedRuleContext(vbaParser.DataContext,0)


        def recordNumber(self):
            return self.getTypedRuleContext(vbaParser.RecordNumberContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_putStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPutStatement" ):
                listener.enterPutStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPutStatement" ):
                listener.exitPutStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPutStatement" ):
                return visitor.visitPutStatement(self)
            else:
                return visitor.visitChildren(self)




    def putStatement(self):

        localctx = vbaParser.PutStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 554, self.RULE_putStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3367
            self.match(vbaParser.PUT)
            self.state = 3368
            self.wsc()
            self.state = 3369
            self.fileNumber()
            self.state = 3371
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==271 or _la==278:
                self.state = 3370
                self.wsc()


            self.state = 3373
            self.match(vbaParser.COMMA)
            self.state = 3375
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,474,self._ctx)
            if la_ == 1:
                self.state = 3374
                self.wsc()


            self.state = 3378
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1474994576046870) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & -2900306126593388479) != 0) or ((((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & 1848558507049479) != 0) or ((((_la - 212)) & ~0x3f) == 0 and ((1 << (_la - 212)) & 513428675589308169) != 0) or _la==280 or _la==281:
                self.state = 3377
                self.recordNumber()


            self.state = 3381
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==271 or _la==278:
                self.state = 3380
                self.wsc()


            self.state = 3383
            self.match(vbaParser.COMMA)
            self.state = 3384
            self.data()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RecordNumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_recordNumber

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecordNumber" ):
                listener.enterRecordNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecordNumber" ):
                listener.exitRecordNumber(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRecordNumber" ):
                return visitor.visitRecordNumber(self)
            else:
                return visitor.visitChildren(self)




    def recordNumber(self):

        localctx = vbaParser.RecordNumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 556, self.RULE_recordNumber)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3386
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_data

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterData" ):
                listener.enterData(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitData" ):
                listener.exitData(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitData" ):
                return visitor.visitData(self)
            else:
                return visitor.visitChildren(self)




    def data(self):

        localctx = vbaParser.DataContext(self, self._ctx, self.state)
        self.enterRule(localctx, 558, self.RULE_data)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3388
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GetStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GET(self):
            return self.getToken(vbaParser.GET, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def fileNumber(self):
            return self.getTypedRuleContext(vbaParser.FileNumberContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.COMMA)
            else:
                return self.getToken(vbaParser.COMMA, i)

        def variable(self):
            return self.getTypedRuleContext(vbaParser.VariableContext,0)


        def recordNumber(self):
            return self.getTypedRuleContext(vbaParser.RecordNumberContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_getStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGetStatement" ):
                listener.enterGetStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGetStatement" ):
                listener.exitGetStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGetStatement" ):
                return visitor.visitGetStatement(self)
            else:
                return visitor.visitChildren(self)




    def getStatement(self):

        localctx = vbaParser.GetStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 560, self.RULE_getStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3390
            self.match(vbaParser.GET)
            self.state = 3391
            self.wsc()
            self.state = 3392
            self.fileNumber()
            self.state = 3394
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==271 or _la==278:
                self.state = 3393
                self.wsc()


            self.state = 3396
            self.match(vbaParser.COMMA)
            self.state = 3398
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,478,self._ctx)
            if la_ == 1:
                self.state = 3397
                self.wsc()


            self.state = 3401
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1474994576046870) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & -2900306126593388479) != 0) or ((((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & 1848558507049479) != 0) or ((((_la - 212)) & ~0x3f) == 0 and ((1 << (_la - 212)) & 513428675589308169) != 0) or _la==280 or _la==281:
                self.state = 3400
                self.recordNumber()


            self.state = 3404
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==271 or _la==278:
                self.state = 3403
                self.wsc()


            self.state = 3406
            self.match(vbaParser.COMMA)
            self.state = 3408
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==271 or _la==278:
                self.state = 3407
                self.wsc()


            self.state = 3410
            self.variable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableExpression(self):
            return self.getTypedRuleContext(vbaParser.VariableExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_variable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable" ):
                listener.enterVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable" ):
                listener.exitVariable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariable" ):
                return visitor.visitVariable(self)
            else:
                return visitor.visitChildren(self)




    def variable(self):

        localctx = vbaParser.VariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 562, self.RULE_variable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3412
            self.variableExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributeStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ATTRIBUTE(self):
            return self.getToken(vbaParser.ATTRIBUTE, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def PERIOD(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.PERIOD)
            else:
                return self.getToken(vbaParser.PERIOD, i)

        def attributeDescName(self):
            return self.getTypedRuleContext(vbaParser.AttributeDescNameContext,0)


        def EQ(self):
            return self.getToken(vbaParser.EQ, 0)

        def STRINGLITERAL(self):
            return self.getToken(vbaParser.STRINGLITERAL, 0)

        def attributeUsrName(self):
            return self.getTypedRuleContext(vbaParser.AttributeUsrNameContext,0)


        def INTEGERLITERAL(self):
            return self.getToken(vbaParser.INTEGERLITERAL, 0)

        def MINUS(self):
            return self.getToken(vbaParser.MINUS, 0)

        def VB_PROCDATA(self):
            return self.getToken(vbaParser.VB_PROCDATA, 0)

        def VB_INVOKE_FUNC(self):
            return self.getToken(vbaParser.VB_INVOKE_FUNC, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_attributeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributeStatement" ):
                listener.enterAttributeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributeStatement" ):
                listener.exitAttributeStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttributeStatement" ):
                return visitor.visitAttributeStatement(self)
            else:
                return visitor.visitChildren(self)




    def attributeStatement(self):

        localctx = vbaParser.AttributeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 564, self.RULE_attributeStatement)
        self._la = 0 # Token type
        try:
            self.state = 3457
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,487,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3414
                self.match(vbaParser.ATTRIBUTE)
                self.state = 3415
                self.match(vbaParser.WS)
                self.state = 3416
                self.ambiguousIdentifier()
                self.state = 3417
                self.match(vbaParser.PERIOD)
                self.state = 3418
                self.attributeDescName()
                self.state = 3420
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==278:
                    self.state = 3419
                    self.match(vbaParser.WS)


                self.state = 3422
                self.match(vbaParser.EQ)
                self.state = 3424
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==278:
                    self.state = 3423
                    self.match(vbaParser.WS)


                self.state = 3426
                self.match(vbaParser.STRINGLITERAL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3428
                self.match(vbaParser.ATTRIBUTE)
                self.state = 3429
                self.match(vbaParser.WS)
                self.state = 3430
                self.ambiguousIdentifier()
                self.state = 3431
                self.match(vbaParser.PERIOD)
                self.state = 3432
                self.attributeUsrName()
                self.state = 3434
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==278:
                    self.state = 3433
                    self.match(vbaParser.WS)


                self.state = 3436
                self.match(vbaParser.EQ)
                self.state = 3438
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==278:
                    self.state = 3437
                    self.match(vbaParser.WS)


                self.state = 3441
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==251:
                    self.state = 3440
                    self.match(vbaParser.MINUS)


                self.state = 3443
                self.match(vbaParser.INTEGERLITERAL)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3445
                self.match(vbaParser.ATTRIBUTE)
                self.state = 3446
                self.match(vbaParser.WS)
                self.state = 3447
                self.ambiguousIdentifier()
                self.state = 3448
                self.match(vbaParser.PERIOD)
                self.state = 3449
                self.match(vbaParser.VB_PROCDATA)
                self.state = 3450
                self.match(vbaParser.PERIOD)
                self.state = 3451
                self.match(vbaParser.VB_INVOKE_FUNC)
                self.state = 3452
                self.match(vbaParser.WS)
                self.state = 3453
                self.match(vbaParser.EQ)
                self.state = 3454
                self.match(vbaParser.WS)
                self.state = 3455
                self.match(vbaParser.STRINGLITERAL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributeDescNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VB_DESCRIPTION(self):
            return self.getToken(vbaParser.VB_DESCRIPTION, 0)

        def VB_VARDESCRIPTION(self):
            return self.getToken(vbaParser.VB_VARDESCRIPTION, 0)

        def VB_MEMBERFLAGS(self):
            return self.getToken(vbaParser.VB_MEMBERFLAGS, 0)

        def VB_VARMEMBERFLAGS(self):
            return self.getToken(vbaParser.VB_VARMEMBERFLAGS, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_attributeDescName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributeDescName" ):
                listener.enterAttributeDescName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributeDescName" ):
                listener.exitAttributeDescName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttributeDescName" ):
                return visitor.visitAttributeDescName(self)
            else:
                return visitor.visitChildren(self)




    def attributeDescName(self):

        localctx = vbaParser.AttributeDescNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 566, self.RULE_attributeDescName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3459
            _la = self._input.LA(1)
            if not(((((_la - 190)) & ~0x3f) == 0 and ((1 << (_la - 190)) & 164353) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributeUsrNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VB_USERMEMID(self):
            return self.getToken(vbaParser.VB_USERMEMID, 0)

        def VB_VARUSERMEMID(self):
            return self.getToken(vbaParser.VB_VARUSERMEMID, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_attributeUsrName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributeUsrName" ):
                listener.enterAttributeUsrName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributeUsrName" ):
                listener.exitAttributeUsrName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttributeUsrName" ):
                return visitor.visitAttributeUsrName(self)
            else:
                return visitor.visitChildren(self)




    def attributeUsrName(self):

        localctx = vbaParser.AttributeUsrNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 568, self.RULE_attributeUsrName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3461
            _la = self._input.LA(1)
            if not(_la==204 or _la==209):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literalExpression(self):
            return self.getTypedRuleContext(vbaParser.LiteralExpressionContext,0)


        def parenthesizedExpression(self):
            return self.getTypedRuleContext(vbaParser.ParenthesizedExpressionContext,0)


        def typeofIsExpression(self):
            return self.getTypedRuleContext(vbaParser.TypeofIsExpressionContext,0)


        def newExpress(self):
            return self.getTypedRuleContext(vbaParser.NewExpressContext,0)


        def unaryMinusExpression(self):
            return self.getTypedRuleContext(vbaParser.UnaryMinusExpressionContext,0)


        def notOperatorExpression(self):
            return self.getTypedRuleContext(vbaParser.NotOperatorExpressionContext,0)


        def lExpression(self):
            return self.getTypedRuleContext(vbaParser.LExpressionContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(vbaParser.ExpressionContext,i)


        def POW(self):
            return self.getToken(vbaParser.POW, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def DIV(self):
            return self.getToken(vbaParser.DIV, 0)

        def MULT(self):
            return self.getToken(vbaParser.MULT, 0)

        def MOD(self):
            return self.getToken(vbaParser.MOD, 0)

        def PLUS(self):
            return self.getToken(vbaParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(vbaParser.MINUS, 0)

        def AMPERSAND(self):
            return self.getToken(vbaParser.AMPERSAND, 0)

        def IS(self):
            return self.getToken(vbaParser.IS, 0)

        def LIKE(self):
            return self.getToken(vbaParser.LIKE, 0)

        def GEQ(self):
            return self.getToken(vbaParser.GEQ, 0)

        def LEQ(self):
            return self.getToken(vbaParser.LEQ, 0)

        def GT(self):
            return self.getToken(vbaParser.GT, 0)

        def LT(self):
            return self.getToken(vbaParser.LT, 0)

        def NEQ(self):
            return self.getToken(vbaParser.NEQ, 0)

        def EQ(self):
            return self.getToken(vbaParser.EQ, 0)

        def AND(self):
            return self.getToken(vbaParser.AND, 0)

        def OR(self):
            return self.getToken(vbaParser.OR, 0)

        def XOR(self):
            return self.getToken(vbaParser.XOR, 0)

        def EQV(self):
            return self.getToken(vbaParser.EQV, 0)

        def IMP(self):
            return self.getToken(vbaParser.IMP, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = vbaParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 570
        self.enterRecursionRule(localctx, 570, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3471
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [75, 85, 133, 134, 180, 265, 268, 269, 270]:
                self.state = 3464
                self.literalExpression()
                pass
            elif token in [249]:
                self.state = 3465
                self.parenthesizedExpression()
                pass
            elif token in [182]:
                self.state = 3466
                self.typeofIsExpression()
                pass
            elif token in [131]:
                self.state = 3467
                self.newExpress()
                pass
            elif token in [251]:
                self.state = 3468
                self.unaryMinusExpression()
                pass
            elif token in [132]:
                self.state = 3469
                self.notOperatorExpression()
                pass
            elif token in [1, 2, 4, 8, 9, 11, 12, 13, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 42, 43, 44, 45, 48, 50, 69, 81, 86, 92, 99, 100, 101, 105, 106, 107, 108, 110, 112, 123, 124, 125, 126, 127, 129, 135, 142, 147, 148, 152, 154, 157, 161, 165, 171, 173, 177, 183, 212, 215, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 244, 247, 256, 280, 281]:
                self.state = 3470
                self.lExpression(0)
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 3538
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,504,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 3536
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,503,self._ctx)
                    if la_ == 1:
                        localctx = vbaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 3473
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 3475
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==271 or _la==278:
                            self.state = 3474
                            self.wsc()


                        self.state = 3477
                        self.match(vbaParser.POW)
                        self.state = 3479
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==271 or _la==278:
                            self.state = 3478
                            self.wsc()


                        self.state = 3481
                        self.expression(11)
                        pass

                    elif la_ == 2:
                        localctx = vbaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 3482
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 3484
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==271 or _la==278:
                            self.state = 3483
                            self.wsc()


                        self.state = 3486
                        _la = self._input.LA(1)
                        if not(_la==241 or _la==253):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 3488
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==271 or _la==278:
                            self.state = 3487
                            self.wsc()


                        self.state = 3490
                        self.expression(9)
                        pass

                    elif la_ == 3:
                        localctx = vbaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 3491
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 3493
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==271 or _la==278:
                            self.state = 3492
                            self.wsc()


                        self.state = 3495
                        self.match(vbaParser.MOD)
                        self.state = 3497
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==271 or _la==278:
                            self.state = 3496
                            self.wsc()


                        self.state = 3499
                        self.expression(8)
                        pass

                    elif la_ == 4:
                        localctx = vbaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 3500
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 3502
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==271 or _la==278:
                            self.state = 3501
                            self.wsc()


                        self.state = 3504
                        _la = self._input.LA(1)
                        if not(_la==251 or _la==257):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 3506
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==271 or _la==278:
                            self.state = 3505
                            self.wsc()


                        self.state = 3508
                        self.expression(7)
                        pass

                    elif la_ == 5:
                        localctx = vbaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 3509
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 3511
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==271 or _la==278:
                            self.state = 3510
                            self.wsc()


                        self.state = 3513
                        self.match(vbaParser.AMPERSAND)
                        self.state = 3515
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==271 or _la==278:
                            self.state = 3514
                            self.wsc()


                        self.state = 3517
                        self.expression(6)
                        pass

                    elif la_ == 6:
                        localctx = vbaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 3518
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 3520
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==271 or _la==278:
                            self.state = 3519
                            self.wsc()


                        self.state = 3522
                        _la = self._input.LA(1)
                        if not(_la==102 or _la==111 or ((((_la - 243)) & ~0x3f) == 0 and ((1 << (_la - 243)) & 2221) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 3524
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==271 or _la==278:
                            self.state = 3523
                            self.wsc()


                        self.state = 3526
                        self.expression(5)
                        pass

                    elif la_ == 7:
                        localctx = vbaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 3527
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 3529
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==271 or _la==278:
                            self.state = 3528
                            self.wsc()


                        self.state = 3531
                        _la = self._input.LA(1)
                        if not(_la==5 or ((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & 4611686018427518977) != 0) or _la==219):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 3533
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==271 or _la==278:
                            self.state = 3532
                            self.wsc()


                        self.state = 3535
                        self.expression(3)
                        pass

             
                self.state = 3540
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,504,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class LExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleNameExpression(self):
            return self.getTypedRuleContext(vbaParser.SimpleNameExpressionContext,0)


        def instanceExpression(self):
            return self.getTypedRuleContext(vbaParser.InstanceExpressionContext,0)


        def withExpression(self):
            return self.getTypedRuleContext(vbaParser.WithExpressionContext,0)


        def lExpression(self):
            return self.getTypedRuleContext(vbaParser.LExpressionContext,0)


        def PERIOD(self):
            return self.getToken(vbaParser.PERIOD, 0)

        def unrestrictedName(self):
            return self.getTypedRuleContext(vbaParser.UnrestrictedNameContext,0)


        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def LINE_CONTINUATION(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.LINE_CONTINUATION)
            else:
                return self.getToken(vbaParser.LINE_CONTINUATION, i)

        def LPAREN(self):
            return self.getToken(vbaParser.LPAREN, 0)

        def argumentList(self):
            return self.getTypedRuleContext(vbaParser.ArgumentListContext,0)


        def RPAREN(self):
            return self.getToken(vbaParser.RPAREN, 0)

        def EXCLAM(self):
            return self.getToken(vbaParser.EXCLAM, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_lExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLExpression" ):
                listener.enterLExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLExpression" ):
                listener.exitLExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLExpression" ):
                return visitor.visitLExpression(self)
            else:
                return visitor.visitChildren(self)



    def lExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = vbaParser.LExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 572
        self.enterRecursionRule(localctx, 572, self.RULE_lExpression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3545
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,505,self._ctx)
            if la_ == 1:
                self.state = 3542
                self.simpleNameExpression()
                pass

            elif la_ == 2:
                self.state = 3543
                self.instanceExpression()
                pass

            elif la_ == 3:
                self.state = 3544
                self.withExpression()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 3612
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,520,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 3610
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,519,self._ctx)
                    if la_ == 1:
                        localctx = vbaParser.LExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_lExpression)
                        self.state = 3547
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 3548
                        self.match(vbaParser.PERIOD)
                        self.state = 3550
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==271 or _la==278:
                            self.state = 3549
                            self.wsc()


                        self.state = 3552
                        self.unrestrictedName()
                        pass

                    elif la_ == 2:
                        localctx = vbaParser.LExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_lExpression)
                        self.state = 3553
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 3555
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,507,self._ctx)
                        if la_ == 1:
                            self.state = 3554
                            self.wsc()


                        self.state = 3557
                        self.match(vbaParser.LINE_CONTINUATION)
                        self.state = 3559
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==271 or _la==278:
                            self.state = 3558
                            self.wsc()


                        self.state = 3561
                        self.match(vbaParser.PERIOD)
                        self.state = 3563
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==271 or _la==278:
                            self.state = 3562
                            self.wsc()


                        self.state = 3565
                        self.unrestrictedName()
                        pass

                    elif la_ == 3:
                        localctx = vbaParser.LExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_lExpression)
                        self.state = 3566
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 3568
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==271 or _la==278:
                            self.state = 3567
                            self.wsc()


                        self.state = 3570
                        self.match(vbaParser.LPAREN)
                        self.state = 3572
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,511,self._ctx)
                        if la_ == 1:
                            self.state = 3571
                            self.wsc()


                        self.state = 3574
                        self.argumentList()
                        self.state = 3576
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==271 or _la==278:
                            self.state = 3575
                            self.wsc()


                        self.state = 3578
                        self.match(vbaParser.RPAREN)
                        pass

                    elif la_ == 4:
                        localctx = vbaParser.LExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_lExpression)
                        self.state = 3580
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 3581
                        self.match(vbaParser.EXCLAM)
                        self.state = 3582
                        self.unrestrictedName()
                        pass

                    elif la_ == 5:
                        localctx = vbaParser.LExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_lExpression)
                        self.state = 3583
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 3585
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,513,self._ctx)
                        if la_ == 1:
                            self.state = 3584
                            self.wsc()


                        self.state = 3587
                        self.match(vbaParser.LINE_CONTINUATION)
                        self.state = 3589
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==271 or _la==278:
                            self.state = 3588
                            self.wsc()


                        self.state = 3591
                        self.match(vbaParser.EXCLAM)
                        self.state = 3592
                        self.unrestrictedName()
                        pass

                    elif la_ == 6:
                        localctx = vbaParser.LExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_lExpression)
                        self.state = 3593
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 3595
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,515,self._ctx)
                        if la_ == 1:
                            self.state = 3594
                            self.wsc()


                        self.state = 3597
                        self.match(vbaParser.LINE_CONTINUATION)
                        self.state = 3599
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==271 or _la==278:
                            self.state = 3598
                            self.wsc()


                        self.state = 3601
                        self.match(vbaParser.EXCLAM)
                        self.state = 3603
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,517,self._ctx)
                        if la_ == 1:
                            self.state = 3602
                            self.wsc()


                        self.state = 3605
                        self.match(vbaParser.LINE_CONTINUATION)
                        self.state = 3607
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==271 or _la==278:
                            self.state = 3606
                            self.wsc()


                        self.state = 3609
                        self.unrestrictedName()
                        pass

             
                self.state = 3614
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,520,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class LiteralExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATELITERAL(self):
            return self.getToken(vbaParser.DATELITERAL, 0)

        def FLOATLITERAL(self):
            return self.getToken(vbaParser.FLOATLITERAL, 0)

        def INTEGERLITERAL(self):
            return self.getToken(vbaParser.INTEGERLITERAL, 0)

        def STRINGLITERAL(self):
            return self.getToken(vbaParser.STRINGLITERAL, 0)

        def literalIdentifier(self):
            return self.getTypedRuleContext(vbaParser.LiteralIdentifierContext,0)


        def typeSuffix(self):
            return self.getTypedRuleContext(vbaParser.TypeSuffixContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_literalExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteralExpression" ):
                listener.enterLiteralExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteralExpression" ):
                listener.exitLiteralExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteralExpression" ):
                return visitor.visitLiteralExpression(self)
            else:
                return visitor.visitChildren(self)




    def literalExpression(self):

        localctx = vbaParser.LiteralExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 574, self.RULE_literalExpression)
        try:
            self.state = 3623
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [270]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3615
                self.match(vbaParser.DATELITERAL)
                pass
            elif token in [269]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3616
                self.match(vbaParser.FLOATLITERAL)
                pass
            elif token in [268]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3617
                self.match(vbaParser.INTEGERLITERAL)
                pass
            elif token in [265]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3618
                self.match(vbaParser.STRINGLITERAL)
                pass
            elif token in [75, 85, 133, 134, 180]:
                self.enterOuterAlt(localctx, 5)
                self.state = 3619
                self.literalIdentifier()
                self.state = 3621
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,521,self._ctx)
                if la_ == 1:
                    self.state = 3620
                    self.typeSuffix()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParenthesizedExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(vbaParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(vbaParser.RPAREN, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_parenthesizedExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesizedExpression" ):
                listener.enterParenthesizedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesizedExpression" ):
                listener.exitParenthesizedExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParenthesizedExpression" ):
                return visitor.visitParenthesizedExpression(self)
            else:
                return visitor.visitChildren(self)




    def parenthesizedExpression(self):

        localctx = vbaParser.ParenthesizedExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 576, self.RULE_parenthesizedExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3625
            self.match(vbaParser.LPAREN)
            self.state = 3627
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==271 or _la==278:
                self.state = 3626
                self.wsc()


            self.state = 3629
            self.expression(0)
            self.state = 3631
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==271 or _la==278:
                self.state = 3630
                self.wsc()


            self.state = 3633
            self.match(vbaParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeofIsExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPEOF(self):
            return self.getToken(vbaParser.TYPEOF, 0)

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def IS(self):
            return self.getToken(vbaParser.IS, 0)

        def typeExpression(self):
            return self.getTypedRuleContext(vbaParser.TypeExpressionContext,0)


        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_typeofIsExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeofIsExpression" ):
                listener.enterTypeofIsExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeofIsExpression" ):
                listener.exitTypeofIsExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeofIsExpression" ):
                return visitor.visitTypeofIsExpression(self)
            else:
                return visitor.visitChildren(self)




    def typeofIsExpression(self):

        localctx = vbaParser.TypeofIsExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 578, self.RULE_typeofIsExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3635
            self.match(vbaParser.TYPEOF)
            self.state = 3637
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==271 or _la==278:
                self.state = 3636
                self.wsc()


            self.state = 3639
            self.expression(0)
            self.state = 3641
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==271 or _la==278:
                self.state = 3640
                self.wsc()


            self.state = 3643
            self.match(vbaParser.IS)
            self.state = 3645
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==271 or _la==278:
                self.state = 3644
                self.wsc()


            self.state = 3647
            self.typeExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewExpressContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEW(self):
            return self.getToken(vbaParser.NEW, 0)

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_newExpress

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewExpress" ):
                listener.enterNewExpress(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewExpress" ):
                listener.exitNewExpress(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNewExpress" ):
                return visitor.visitNewExpress(self)
            else:
                return visitor.visitChildren(self)




    def newExpress(self):

        localctx = vbaParser.NewExpressContext(self, self._ctx, self.state)
        self.enterRule(localctx, 580, self.RULE_newExpress)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3649
            self.match(vbaParser.NEW)
            self.state = 3651
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==271 or _la==278:
                self.state = 3650
                self.wsc()


            self.state = 3653
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NotOperatorExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(vbaParser.NOT, 0)

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_notOperatorExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNotOperatorExpression" ):
                listener.enterNotOperatorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNotOperatorExpression" ):
                listener.exitNotOperatorExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNotOperatorExpression" ):
                return visitor.visitNotOperatorExpression(self)
            else:
                return visitor.visitChildren(self)




    def notOperatorExpression(self):

        localctx = vbaParser.NotOperatorExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 582, self.RULE_notOperatorExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3655
            self.match(vbaParser.NOT)
            self.state = 3657
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==271 or _la==278:
                self.state = 3656
                self.wsc()


            self.state = 3659
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnaryMinusExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINUS(self):
            return self.getToken(vbaParser.MINUS, 0)

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_unaryMinusExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryMinusExpression" ):
                listener.enterUnaryMinusExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryMinusExpression" ):
                listener.exitUnaryMinusExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryMinusExpression" ):
                return visitor.visitUnaryMinusExpression(self)
            else:
                return visitor.visitChildren(self)




    def unaryMinusExpression(self):

        localctx = vbaParser.UnaryMinusExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 584, self.RULE_unaryMinusExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3661
            self.match(vbaParser.MINUS)
            self.state = 3663
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==271 or _la==278:
                self.state = 3662
                self.wsc()


            self.state = 3665
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleNameExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(vbaParser.NameContext,0)


        def reservedName(self):
            return self.getTypedRuleContext(vbaParser.ReservedNameContext,0)


        def specialForm(self):
            return self.getTypedRuleContext(vbaParser.SpecialFormContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_simpleNameExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleNameExpression" ):
                listener.enterSimpleNameExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleNameExpression" ):
                listener.exitSimpleNameExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleNameExpression" ):
                return visitor.visitSimpleNameExpression(self)
            else:
                return visitor.visitChildren(self)




    def simpleNameExpression(self):

        localctx = vbaParser.SimpleNameExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 586, self.RULE_simpleNameExpression)
        try:
            self.state = 3670
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,531,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3667
                self.name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3668
                self.reservedName()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3669
                self.specialForm()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InstanceExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ME(self):
            return self.getToken(vbaParser.ME, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_instanceExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInstanceExpression" ):
                listener.enterInstanceExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInstanceExpression" ):
                listener.exitInstanceExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInstanceExpression" ):
                return visitor.visitInstanceExpression(self)
            else:
                return visitor.visitChildren(self)




    def instanceExpression(self):

        localctx = vbaParser.InstanceExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 588, self.RULE_instanceExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3672
            self.match(vbaParser.ME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MemberAccessExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lExpression(self):
            return self.getTypedRuleContext(vbaParser.LExpressionContext,0)


        def PERIOD(self):
            return self.getToken(vbaParser.PERIOD, 0)

        def unrestrictedName(self):
            return self.getTypedRuleContext(vbaParser.UnrestrictedNameContext,0)


        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def LINE_CONTINUATION(self):
            return self.getToken(vbaParser.LINE_CONTINUATION, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_memberAccessExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberAccessExpression" ):
                listener.enterMemberAccessExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberAccessExpression" ):
                listener.exitMemberAccessExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMemberAccessExpression" ):
                return visitor.visitMemberAccessExpression(self)
            else:
                return visitor.visitChildren(self)




    def memberAccessExpression(self):

        localctx = vbaParser.MemberAccessExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 590, self.RULE_memberAccessExpression)
        self._la = 0 # Token type
        try:
            self.state = 3695
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,536,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3674
                self.lExpression(0)
                self.state = 3675
                self.match(vbaParser.PERIOD)
                self.state = 3677
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==271 or _la==278:
                    self.state = 3676
                    self.wsc()


                self.state = 3679
                self.unrestrictedName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3681
                self.lExpression(0)
                self.state = 3683
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,533,self._ctx)
                if la_ == 1:
                    self.state = 3682
                    self.wsc()


                self.state = 3685
                self.match(vbaParser.LINE_CONTINUATION)
                self.state = 3687
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==271 or _la==278:
                    self.state = 3686
                    self.wsc()


                self.state = 3689
                self.match(vbaParser.PERIOD)
                self.state = 3691
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==271 or _la==278:
                    self.state = 3690
                    self.wsc()


                self.state = 3693
                self.unrestrictedName()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lExpression(self):
            return self.getTypedRuleContext(vbaParser.LExpressionContext,0)


        def LPAREN(self):
            return self.getToken(vbaParser.LPAREN, 0)

        def argumentList(self):
            return self.getTypedRuleContext(vbaParser.ArgumentListContext,0)


        def RPAREN(self):
            return self.getToken(vbaParser.RPAREN, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_indexExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexExpression" ):
                listener.enterIndexExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexExpression" ):
                listener.exitIndexExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexExpression" ):
                return visitor.visitIndexExpression(self)
            else:
                return visitor.visitChildren(self)




    def indexExpression(self):

        localctx = vbaParser.IndexExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 592, self.RULE_indexExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3697
            self.lExpression(0)
            self.state = 3699
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==271 or _la==278:
                self.state = 3698
                self.wsc()


            self.state = 3701
            self.match(vbaParser.LPAREN)
            self.state = 3703
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,538,self._ctx)
            if la_ == 1:
                self.state = 3702
                self.wsc()


            self.state = 3705
            self.argumentList()
            self.state = 3707
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==271 or _la==278:
                self.state = 3706
                self.wsc()


            self.state = 3709
            self.match(vbaParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def positionalOrNamedArgumentList(self):
            return self.getTypedRuleContext(vbaParser.PositionalOrNamedArgumentListContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_argumentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgumentList" ):
                listener.enterArgumentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgumentList" ):
                listener.exitArgumentList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgumentList" ):
                return visitor.visitArgumentList(self)
            else:
                return visitor.visitChildren(self)




    def argumentList(self):

        localctx = vbaParser.ArgumentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 594, self.RULE_argumentList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3712
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,540,self._ctx)
            if la_ == 1:
                self.state = 3711
                self.positionalOrNamedArgumentList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PositionalOrNamedArgumentListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requiredPositionalArgument(self):
            return self.getTypedRuleContext(vbaParser.RequiredPositionalArgumentContext,0)


        def positionalArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.PositionalArgumentContext)
            else:
                return self.getTypedRuleContext(vbaParser.PositionalArgumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.COMMA)
            else:
                return self.getToken(vbaParser.COMMA, i)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def namedArgumentList(self):
            return self.getTypedRuleContext(vbaParser.NamedArgumentListContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_positionalOrNamedArgumentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPositionalOrNamedArgumentList" ):
                listener.enterPositionalOrNamedArgumentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPositionalOrNamedArgumentList" ):
                listener.exitPositionalOrNamedArgumentList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPositionalOrNamedArgumentList" ):
                return visitor.visitPositionalOrNamedArgumentList(self)
            else:
                return visitor.visitChildren(self)




    def positionalOrNamedArgumentList(self):

        localctx = vbaParser.PositionalOrNamedArgumentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 596, self.RULE_positionalOrNamedArgumentList)
        self._la = 0 # Token type
        try:
            self.state = 3742
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,547,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3724
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,543,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3714
                        self.positionalArgument()
                        self.state = 3716
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==271 or _la==278:
                            self.state = 3715
                            self.wsc()


                        self.state = 3718
                        self.match(vbaParser.COMMA)
                        self.state = 3720
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,542,self._ctx)
                        if la_ == 1:
                            self.state = 3719
                            self.wsc()

                 
                    self.state = 3726
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,543,self._ctx)

                self.state = 3727
                self.requiredPositionalArgument()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3738
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,546,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3728
                        self.positionalArgument()
                        self.state = 3730
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==271 or _la==278:
                            self.state = 3729
                            self.wsc()


                        self.state = 3732
                        self.match(vbaParser.COMMA)
                        self.state = 3734
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,545,self._ctx)
                        if la_ == 1:
                            self.state = 3733
                            self.wsc()

                 
                    self.state = 3740
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,546,self._ctx)

                self.state = 3741
                self.namedArgumentList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PositionalArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argumentExpression(self):
            return self.getTypedRuleContext(vbaParser.ArgumentExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_positionalArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPositionalArgument" ):
                listener.enterPositionalArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPositionalArgument" ):
                listener.exitPositionalArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPositionalArgument" ):
                return visitor.visitPositionalArgument(self)
            else:
                return visitor.visitChildren(self)




    def positionalArgument(self):

        localctx = vbaParser.PositionalArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 598, self.RULE_positionalArgument)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3745
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1474994576112414) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & -2900306126593388479) != 0) or ((((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & 1848558507049479) != 0) or ((((_la - 212)) & ~0x3f) == 0 and ((1 << (_la - 212)) & 513428675589308169) != 0) or _la==280 or _la==281:
                self.state = 3744
                self.argumentExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RequiredPositionalArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argumentExpression(self):
            return self.getTypedRuleContext(vbaParser.ArgumentExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_requiredPositionalArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRequiredPositionalArgument" ):
                listener.enterRequiredPositionalArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRequiredPositionalArgument" ):
                listener.exitRequiredPositionalArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRequiredPositionalArgument" ):
                return visitor.visitRequiredPositionalArgument(self)
            else:
                return visitor.visitChildren(self)




    def requiredPositionalArgument(self):

        localctx = vbaParser.RequiredPositionalArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 600, self.RULE_requiredPositionalArgument)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3747
            self.argumentExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedArgumentListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namedArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.NamedArgumentContext)
            else:
                return self.getTypedRuleContext(vbaParser.NamedArgumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.COMMA)
            else:
                return self.getToken(vbaParser.COMMA, i)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_namedArgumentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedArgumentList" ):
                listener.enterNamedArgumentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedArgumentList" ):
                listener.exitNamedArgumentList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamedArgumentList" ):
                return visitor.visitNamedArgumentList(self)
            else:
                return visitor.visitChildren(self)




    def namedArgumentList(self):

        localctx = vbaParser.NamedArgumentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 602, self.RULE_namedArgumentList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3749
            self.namedArgument()
            self.state = 3760
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,551,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3751
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==271 or _la==278:
                        self.state = 3750
                        self.wsc()


                    self.state = 3753
                    self.match(vbaParser.COMMA)
                    self.state = 3755
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==271 or _la==278:
                        self.state = 3754
                        self.wsc()


                    self.state = 3757
                    self.namedArgument() 
                self.state = 3762
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,551,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unrestrictedName(self):
            return self.getTypedRuleContext(vbaParser.UnrestrictedNameContext,0)


        def ASSIGN(self):
            return self.getToken(vbaParser.ASSIGN, 0)

        def argumentExpression(self):
            return self.getTypedRuleContext(vbaParser.ArgumentExpressionContext,0)


        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_namedArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedArgument" ):
                listener.enterNamedArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedArgument" ):
                listener.exitNamedArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamedArgument" ):
                return visitor.visitNamedArgument(self)
            else:
                return visitor.visitChildren(self)




    def namedArgument(self):

        localctx = vbaParser.NamedArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 604, self.RULE_namedArgument)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3763
            self.unrestrictedName()
            self.state = 3765
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==271 or _la==278:
                self.state = 3764
                self.wsc()


            self.state = 3767
            self.match(vbaParser.ASSIGN)
            self.state = 3769
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==271 or _la==278:
                self.state = 3768
                self.wsc()


            self.state = 3771
            self.argumentExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def BYVAL(self):
            return self.getToken(vbaParser.BYVAL, 0)

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def addressofExpression(self):
            return self.getTypedRuleContext(vbaParser.AddressofExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_argumentExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgumentExpression" ):
                listener.enterArgumentExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgumentExpression" ):
                listener.exitArgumentExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgumentExpression" ):
                return visitor.visitArgumentExpression(self)
            else:
                return visitor.visitChildren(self)




    def argumentExpression(self):

        localctx = vbaParser.ArgumentExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 606, self.RULE_argumentExpression)
        self._la = 0 # Token type
        try:
            self.state = 3779
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 2, 4, 8, 9, 11, 12, 13, 16, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 42, 43, 44, 45, 48, 50, 69, 75, 81, 85, 86, 92, 99, 100, 101, 105, 106, 107, 108, 110, 112, 123, 124, 125, 126, 127, 129, 131, 132, 133, 134, 135, 142, 147, 148, 152, 154, 157, 161, 165, 171, 173, 177, 180, 182, 183, 212, 215, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 244, 247, 249, 251, 256, 265, 268, 269, 270, 280, 281]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3775
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==16:
                    self.state = 3773
                    self.match(vbaParser.BYVAL)
                    self.state = 3774
                    self.wsc()


                self.state = 3777
                self.expression(0)
                pass
            elif token in [3]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3778
                self.addressofExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DictionaryAccessExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lExpression(self):
            return self.getTypedRuleContext(vbaParser.LExpressionContext,0)


        def EXCLAM(self):
            return self.getToken(vbaParser.EXCLAM, 0)

        def unrestrictedName(self):
            return self.getTypedRuleContext(vbaParser.UnrestrictedNameContext,0)


        def LINE_CONTINUATION(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.LINE_CONTINUATION)
            else:
                return self.getToken(vbaParser.LINE_CONTINUATION, i)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_dictionaryAccessExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDictionaryAccessExpression" ):
                listener.enterDictionaryAccessExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDictionaryAccessExpression" ):
                listener.exitDictionaryAccessExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDictionaryAccessExpression" ):
                return visitor.visitDictionaryAccessExpression(self)
            else:
                return visitor.visitChildren(self)




    def dictionaryAccessExpression(self):

        localctx = vbaParser.DictionaryAccessExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 608, self.RULE_dictionaryAccessExpression)
        self._la = 0 # Token type
        try:
            self.state = 3814
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,562,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3781
                self.lExpression(0)
                self.state = 3782
                self.match(vbaParser.EXCLAM)
                self.state = 3783
                self.unrestrictedName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3785
                self.lExpression(0)
                self.state = 3787
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,556,self._ctx)
                if la_ == 1:
                    self.state = 3786
                    self.wsc()


                self.state = 3789
                self.match(vbaParser.LINE_CONTINUATION)
                self.state = 3791
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==271 or _la==278:
                    self.state = 3790
                    self.wsc()


                self.state = 3793
                self.match(vbaParser.EXCLAM)
                self.state = 3794
                self.unrestrictedName()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3796
                self.lExpression(0)
                self.state = 3798
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,558,self._ctx)
                if la_ == 1:
                    self.state = 3797
                    self.wsc()


                self.state = 3800
                self.match(vbaParser.LINE_CONTINUATION)
                self.state = 3802
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==271 or _la==278:
                    self.state = 3801
                    self.wsc()


                self.state = 3804
                self.match(vbaParser.EXCLAM)
                self.state = 3806
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,560,self._ctx)
                if la_ == 1:
                    self.state = 3805
                    self.wsc()


                self.state = 3808
                self.match(vbaParser.LINE_CONTINUATION)
                self.state = 3810
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==271 or _la==278:
                    self.state = 3809
                    self.wsc()


                self.state = 3812
                self.unrestrictedName()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def withMemberAccessExpression(self):
            return self.getTypedRuleContext(vbaParser.WithMemberAccessExpressionContext,0)


        def withDictionaryAccessExpression(self):
            return self.getTypedRuleContext(vbaParser.WithDictionaryAccessExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_withExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWithExpression" ):
                listener.enterWithExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWithExpression" ):
                listener.exitWithExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWithExpression" ):
                return visitor.visitWithExpression(self)
            else:
                return visitor.visitChildren(self)




    def withExpression(self):

        localctx = vbaParser.WithExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 610, self.RULE_withExpression)
        try:
            self.state = 3818
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [256]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3816
                self.withMemberAccessExpression()
                pass
            elif token in [244]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3817
                self.withDictionaryAccessExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithMemberAccessExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PERIOD(self):
            return self.getToken(vbaParser.PERIOD, 0)

        def unrestrictedName(self):
            return self.getTypedRuleContext(vbaParser.UnrestrictedNameContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_withMemberAccessExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWithMemberAccessExpression" ):
                listener.enterWithMemberAccessExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWithMemberAccessExpression" ):
                listener.exitWithMemberAccessExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWithMemberAccessExpression" ):
                return visitor.visitWithMemberAccessExpression(self)
            else:
                return visitor.visitChildren(self)




    def withMemberAccessExpression(self):

        localctx = vbaParser.WithMemberAccessExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 612, self.RULE_withMemberAccessExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3820
            self.match(vbaParser.PERIOD)
            self.state = 3821
            self.unrestrictedName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithDictionaryAccessExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCLAM(self):
            return self.getToken(vbaParser.EXCLAM, 0)

        def unrestrictedName(self):
            return self.getTypedRuleContext(vbaParser.UnrestrictedNameContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_withDictionaryAccessExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWithDictionaryAccessExpression" ):
                listener.enterWithDictionaryAccessExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWithDictionaryAccessExpression" ):
                listener.exitWithDictionaryAccessExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWithDictionaryAccessExpression" ):
                return visitor.visitWithDictionaryAccessExpression(self)
            else:
                return visitor.visitChildren(self)




    def withDictionaryAccessExpression(self):

        localctx = vbaParser.WithDictionaryAccessExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 614, self.RULE_withDictionaryAccessExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3823
            self.match(vbaParser.EXCLAM)
            self.state = 3824
            self.unrestrictedName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_constantExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantExpression" ):
                listener.enterConstantExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantExpression" ):
                listener.exitConstantExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstantExpression" ):
                return visitor.visitConstantExpression(self)
            else:
                return visitor.visitChildren(self)




    def constantExpression(self):

        localctx = vbaParser.ConstantExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 616, self.RULE_constantExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3826
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CcExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_ccExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCcExpression" ):
                listener.enterCcExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCcExpression" ):
                listener.exitCcExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCcExpression" ):
                return visitor.visitCcExpression(self)
            else:
                return visitor.visitChildren(self)




    def ccExpression(self):

        localctx = vbaParser.CcExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 618, self.RULE_ccExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3828
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_booleanExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanExpression" ):
                listener.enterBooleanExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanExpression" ):
                listener.exitBooleanExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBooleanExpression" ):
                return visitor.visitBooleanExpression(self)
            else:
                return visitor.visitChildren(self)




    def booleanExpression(self):

        localctx = vbaParser.BooleanExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 620, self.RULE_booleanExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3830
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntegerExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_integerExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntegerExpression" ):
                listener.enterIntegerExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntegerExpression" ):
                listener.exitIntegerExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntegerExpression" ):
                return visitor.visitIntegerExpression(self)
            else:
                return visitor.visitChildren(self)




    def integerExpression(self):

        localctx = vbaParser.IntegerExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 622, self.RULE_integerExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3832
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lExpression(self):
            return self.getTypedRuleContext(vbaParser.LExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_variableExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableExpression" ):
                listener.enterVariableExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableExpression" ):
                listener.exitVariableExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableExpression" ):
                return visitor.visitVariableExpression(self)
            else:
                return visitor.visitChildren(self)




    def variableExpression(self):

        localctx = vbaParser.VariableExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 624, self.RULE_variableExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3834
            self.lExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BoundVariableExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lExpression(self):
            return self.getTypedRuleContext(vbaParser.LExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_boundVariableExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoundVariableExpression" ):
                listener.enterBoundVariableExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoundVariableExpression" ):
                listener.exitBoundVariableExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBoundVariableExpression" ):
                return visitor.visitBoundVariableExpression(self)
            else:
                return visitor.visitChildren(self)




    def boundVariableExpression(self):

        localctx = vbaParser.BoundVariableExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 626, self.RULE_boundVariableExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3836
            self.lExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def builtinType(self):
            return self.getTypedRuleContext(vbaParser.BuiltinTypeContext,0)


        def definedTypeExpression(self):
            return self.getTypedRuleContext(vbaParser.DefinedTypeExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_typeExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeExpression" ):
                listener.enterTypeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeExpression" ):
                listener.exitTypeExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeExpression" ):
                return visitor.visitTypeExpression(self)
            else:
                return visitor.visitChildren(self)




    def typeExpression(self):

        localctx = vbaParser.TypeExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 628, self.RULE_typeExpression)
        try:
            self.state = 3840
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,564,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3838
                self.builtinType()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3839
                self.definedTypeExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefinedTypeExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleNameExpression(self):
            return self.getTypedRuleContext(vbaParser.SimpleNameExpressionContext,0)


        def memberAccessExpression(self):
            return self.getTypedRuleContext(vbaParser.MemberAccessExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_definedTypeExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefinedTypeExpression" ):
                listener.enterDefinedTypeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefinedTypeExpression" ):
                listener.exitDefinedTypeExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefinedTypeExpression" ):
                return visitor.visitDefinedTypeExpression(self)
            else:
                return visitor.visitChildren(self)




    def definedTypeExpression(self):

        localctx = vbaParser.DefinedTypeExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 630, self.RULE_definedTypeExpression)
        try:
            self.state = 3844
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,565,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3842
                self.simpleNameExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3843
                self.memberAccessExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AddressofExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADDRESSOF(self):
            return self.getToken(vbaParser.ADDRESSOF, 0)

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def procedurePointerExpression(self):
            return self.getTypedRuleContext(vbaParser.ProcedurePointerExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_addressofExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAddressofExpression" ):
                listener.enterAddressofExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAddressofExpression" ):
                listener.exitAddressofExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAddressofExpression" ):
                return visitor.visitAddressofExpression(self)
            else:
                return visitor.visitChildren(self)




    def addressofExpression(self):

        localctx = vbaParser.AddressofExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 632, self.RULE_addressofExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3846
            self.match(vbaParser.ADDRESSOF)
            self.state = 3847
            self.wsc()
            self.state = 3848
            self.procedurePointerExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcedurePointerExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleNameExpression(self):
            return self.getTypedRuleContext(vbaParser.SimpleNameExpressionContext,0)


        def memberAccessExpression(self):
            return self.getTypedRuleContext(vbaParser.MemberAccessExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_procedurePointerExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedurePointerExpression" ):
                listener.enterProcedurePointerExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedurePointerExpression" ):
                listener.exitProcedurePointerExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProcedurePointerExpression" ):
                return visitor.visitProcedurePointerExpression(self)
            else:
                return visitor.visitChildren(self)




    def procedurePointerExpression(self):

        localctx = vbaParser.ProcedurePointerExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 634, self.RULE_procedurePointerExpression)
        try:
            self.state = 3852
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,566,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3850
                self.simpleNameExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3851
                self.memberAccessExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WscContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def LINE_CONTINUATION(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.LINE_CONTINUATION)
            else:
                return self.getToken(vbaParser.LINE_CONTINUATION, i)

        def getRuleIndex(self):
            return vbaParser.RULE_wsc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWsc" ):
                listener.enterWsc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWsc" ):
                listener.exitWsc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWsc" ):
                return visitor.visitWsc(self)
            else:
                return visitor.visitChildren(self)




    def wsc(self):

        localctx = vbaParser.WscContext(self, self._ctx, self.state)
        self.enterRule(localctx, 636, self.RULE_wsc)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3855 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 3854
                    _la = self._input.LA(1)
                    if not(_la==271 or _la==278):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()

                else:
                    raise NoViableAltException(self)
                self.state = 3857 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,567,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EndOfLineContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEWLINE(self):
            return self.getToken(vbaParser.NEWLINE, 0)

        def commentBody(self):
            return self.getTypedRuleContext(vbaParser.CommentBodyContext,0)


        def remStatement(self):
            return self.getTypedRuleContext(vbaParser.RemStatementContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def getRuleIndex(self):
            return vbaParser.RULE_endOfLine

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEndOfLine" ):
                listener.enterEndOfLine(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEndOfLine" ):
                listener.exitEndOfLine(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEndOfLine" ):
                return visitor.visitEndOfLine(self)
            else:
                return visitor.visitChildren(self)




    def endOfLine(self):

        localctx = vbaParser.EndOfLineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 638, self.RULE_endOfLine)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3860
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==278:
                self.state = 3859
                self.match(vbaParser.WS)


            self.state = 3865
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [272]:
                self.state = 3862
                self.match(vbaParser.NEWLINE)
                pass
            elif token in [274]:
                self.state = 3863
                self.commentBody()
                pass
            elif token in [273]:
                self.state = 3864
                self.remStatement()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 3868
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,570,self._ctx)
            if la_ == 1:
                self.state = 3867
                self.match(vbaParser.WS)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EndOfLineNoWsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEWLINE(self):
            return self.getToken(vbaParser.NEWLINE, 0)

        def commentBody(self):
            return self.getTypedRuleContext(vbaParser.CommentBodyContext,0)


        def remStatement(self):
            return self.getTypedRuleContext(vbaParser.RemStatementContext,0)


        def WS(self):
            return self.getToken(vbaParser.WS, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_endOfLineNoWs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEndOfLineNoWs" ):
                listener.enterEndOfLineNoWs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEndOfLineNoWs" ):
                listener.exitEndOfLineNoWs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEndOfLineNoWs" ):
                return visitor.visitEndOfLineNoWs(self)
            else:
                return visitor.visitChildren(self)




    def endOfLineNoWs(self):

        localctx = vbaParser.EndOfLineNoWsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 640, self.RULE_endOfLineNoWs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3871
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==278:
                self.state = 3870
                self.match(vbaParser.WS)


            self.state = 3876
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [272]:
                self.state = 3873
                self.match(vbaParser.NEWLINE)
                pass
            elif token in [274]:
                self.state = 3874
                self.commentBody()
                pass
            elif token in [273]:
                self.state = 3875
                self.remStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EndOfStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def endOfLine(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfLineContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfLineContext,i)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.COLON)
            else:
                return self.getToken(vbaParser.COLON, i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def getRuleIndex(self):
            return vbaParser.RULE_endOfStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEndOfStatement" ):
                listener.enterEndOfStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEndOfStatement" ):
                listener.exitEndOfStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEndOfStatement" ):
                return visitor.visitEndOfStatement(self)
            else:
                return visitor.visitChildren(self)




    def endOfStatement(self):

        localctx = vbaParser.EndOfStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 642, self.RULE_endOfStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3886 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 3886
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,575,self._ctx)
                    if la_ == 1:
                        self.state = 3878
                        self.endOfLine()
                        pass

                    elif la_ == 2:
                        self.state = 3880
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==278:
                            self.state = 3879
                            self.match(vbaParser.WS)


                        self.state = 3882
                        self.match(vbaParser.COLON)
                        self.state = 3884
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,574,self._ctx)
                        if la_ == 1:
                            self.state = 3883
                            self.match(vbaParser.WS)


                        pass



                else:
                    raise NoViableAltException(self)
                self.state = 3888 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,576,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EndOfStatementNoWsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def endOfLineNoWs(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfLineNoWsContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfLineNoWsContext,i)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.COLON)
            else:
                return self.getToken(vbaParser.COLON, i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def getRuleIndex(self):
            return vbaParser.RULE_endOfStatementNoWs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEndOfStatementNoWs" ):
                listener.enterEndOfStatementNoWs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEndOfStatementNoWs" ):
                listener.exitEndOfStatementNoWs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEndOfStatementNoWs" ):
                return visitor.visitEndOfStatementNoWs(self)
            else:
                return visitor.visitChildren(self)




    def endOfStatementNoWs(self):

        localctx = vbaParser.EndOfStatementNoWsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 644, self.RULE_endOfStatementNoWs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3895 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3895
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,578,self._ctx)
                if la_ == 1:
                    self.state = 3890
                    self.endOfLineNoWs()
                    pass

                elif la_ == 2:
                    self.state = 3892
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==278:
                        self.state = 3891
                        self.match(vbaParser.WS)


                    self.state = 3894
                    self.match(vbaParser.COLON)
                    pass


                self.state = 3897 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 272)) & ~0x3f) == 0 and ((1 << (_la - 272)) & 87) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommentBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMENT(self):
            return self.getToken(vbaParser.COMMENT, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_commentBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommentBody" ):
                listener.enterCommentBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommentBody" ):
                listener.exitCommentBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCommentBody" ):
                return visitor.visitCommentBody(self)
            else:
                return visitor.visitChildren(self)




    def commentBody(self):

        localctx = vbaParser.CommentBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 646, self.RULE_commentBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3899
            self.match(vbaParser.COMMENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReservedIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statementKeyword(self):
            return self.getTypedRuleContext(vbaParser.StatementKeywordContext,0)


        def markerKeyword(self):
            return self.getTypedRuleContext(vbaParser.MarkerKeywordContext,0)


        def operatorIdentifier(self):
            return self.getTypedRuleContext(vbaParser.OperatorIdentifierContext,0)


        def specialForm(self):
            return self.getTypedRuleContext(vbaParser.SpecialFormContext,0)


        def reservedName(self):
            return self.getTypedRuleContext(vbaParser.ReservedNameContext,0)


        def reservedTypeIdentifier(self):
            return self.getTypedRuleContext(vbaParser.ReservedTypeIdentifierContext,0)


        def literalIdentifier(self):
            return self.getTypedRuleContext(vbaParser.LiteralIdentifierContext,0)


        def remKeyword(self):
            return self.getTypedRuleContext(vbaParser.RemKeywordContext,0)


        def reservedForImplementationUse(self):
            return self.getTypedRuleContext(vbaParser.ReservedForImplementationUseContext,0)


        def futureReserved(self):
            return self.getTypedRuleContext(vbaParser.FutureReservedContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_reservedIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReservedIdentifier" ):
                listener.enterReservedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReservedIdentifier" ):
                listener.exitReservedIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReservedIdentifier" ):
                return visitor.visitReservedIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def reservedIdentifier(self):

        localctx = vbaParser.ReservedIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 648, self.RULE_reservedIdentifier)
        try:
            self.state = 3911
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,580,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3901
                self.statementKeyword()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3902
                self.markerKeyword()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3903
                self.operatorIdentifier()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3904
                self.specialForm()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3905
                self.reservedName()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3906
                self.reservedTypeIdentifier()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 3907
                self.literalIdentifier()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 3908
                self.remKeyword()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 3909
                self.reservedForImplementationUse()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 3910
                self.futureReserved()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AmbiguousIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(vbaParser.IDENTIFIER, 0)

        def ambiguousKeyword(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousKeywordContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_ambiguousIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAmbiguousIdentifier" ):
                listener.enterAmbiguousIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAmbiguousIdentifier" ):
                listener.exitAmbiguousIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAmbiguousIdentifier" ):
                return visitor.visitAmbiguousIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def ambiguousIdentifier(self):

        localctx = vbaParser.AmbiguousIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 650, self.RULE_ambiguousIdentifier)
        try:
            self.state = 3915
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [280]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3913
                self.match(vbaParser.IDENTIFIER)
                pass
            elif token in [2, 4, 8, 11, 12, 13, 29, 30, 33, 34, 35, 40, 81, 92, 105, 110, 112, 124, 125, 126, 127, 129, 135, 142, 147, 152, 154, 157, 171, 177, 212, 215, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3914
                self.ambiguousKeyword()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALL(self):
            return self.getToken(vbaParser.CALL, 0)

        def CASE(self):
            return self.getToken(vbaParser.CASE, 0)

        def CLOSE(self):
            return self.getToken(vbaParser.CLOSE, 0)

        def CONST(self):
            return self.getToken(vbaParser.CONST, 0)

        def DECLARE(self):
            return self.getToken(vbaParser.DECLARE, 0)

        def DEFBOOL(self):
            return self.getToken(vbaParser.DEFBOOL, 0)

        def DEFBYTE(self):
            return self.getToken(vbaParser.DEFBYTE, 0)

        def DEFCUR(self):
            return self.getToken(vbaParser.DEFCUR, 0)

        def DEFDATE(self):
            return self.getToken(vbaParser.DEFDATE, 0)

        def DEFDBL(self):
            return self.getToken(vbaParser.DEFDBL, 0)

        def DEFINT(self):
            return self.getToken(vbaParser.DEFINT, 0)

        def DEFLNG(self):
            return self.getToken(vbaParser.DEFLNG, 0)

        def DEFLNGLNG(self):
            return self.getToken(vbaParser.DEFLNGLNG, 0)

        def DEFLNGPTR(self):
            return self.getToken(vbaParser.DEFLNGPTR, 0)

        def DEFOBJ(self):
            return self.getToken(vbaParser.DEFOBJ, 0)

        def DEFSNG(self):
            return self.getToken(vbaParser.DEFSNG, 0)

        def DEFSTR(self):
            return self.getToken(vbaParser.DEFSTR, 0)

        def DEFVAR(self):
            return self.getToken(vbaParser.DEFVAR, 0)

        def DIM(self):
            return self.getToken(vbaParser.DIM, 0)

        def DO(self):
            return self.getToken(vbaParser.DO, 0)

        def ELSE(self):
            return self.getToken(vbaParser.ELSE, 0)

        def ELSEIF(self):
            return self.getToken(vbaParser.ELSEIF, 0)

        def END(self):
            return self.getToken(vbaParser.END, 0)

        def ENDIF(self):
            return self.getToken(vbaParser.ENDIF, 0)

        def ENUM(self):
            return self.getToken(vbaParser.ENUM, 0)

        def ERASE(self):
            return self.getToken(vbaParser.ERASE, 0)

        def EVENT(self):
            return self.getToken(vbaParser.EVENT, 0)

        def EXIT(self):
            return self.getToken(vbaParser.EXIT, 0)

        def FOR(self):
            return self.getToken(vbaParser.FOR, 0)

        def FRIEND(self):
            return self.getToken(vbaParser.FRIEND, 0)

        def FUNCTION(self):
            return self.getToken(vbaParser.FUNCTION, 0)

        def GET(self):
            return self.getToken(vbaParser.GET, 0)

        def GLOBAL(self):
            return self.getToken(vbaParser.GLOBAL, 0)

        def GOSUB(self):
            return self.getToken(vbaParser.GOSUB, 0)

        def GOTO(self):
            return self.getToken(vbaParser.GOTO, 0)

        def IF(self):
            return self.getToken(vbaParser.IF, 0)

        def IMPLEMENTS(self):
            return self.getToken(vbaParser.IMPLEMENTS, 0)

        def INPUT(self):
            return self.getToken(vbaParser.INPUT, 0)

        def LET(self):
            return self.getToken(vbaParser.LET, 0)

        def LOCK(self):
            return self.getToken(vbaParser.LOCK, 0)

        def LOOP(self):
            return self.getToken(vbaParser.LOOP, 0)

        def LSET(self):
            return self.getToken(vbaParser.LSET, 0)

        def NEXT(self):
            return self.getToken(vbaParser.NEXT, 0)

        def ON(self):
            return self.getToken(vbaParser.ON, 0)

        def OPEN(self):
            return self.getToken(vbaParser.OPEN, 0)

        def OPTION(self):
            return self.getToken(vbaParser.OPTION, 0)

        def PRINT(self):
            return self.getToken(vbaParser.PRINT, 0)

        def PRIVATE(self):
            return self.getToken(vbaParser.PRIVATE, 0)

        def PUBLIC(self):
            return self.getToken(vbaParser.PUBLIC, 0)

        def PUT(self):
            return self.getToken(vbaParser.PUT, 0)

        def RAISEEVENT(self):
            return self.getToken(vbaParser.RAISEEVENT, 0)

        def REDIM(self):
            return self.getToken(vbaParser.REDIM, 0)

        def RESUME(self):
            return self.getToken(vbaParser.RESUME, 0)

        def RETURN(self):
            return self.getToken(vbaParser.RETURN, 0)

        def RSET(self):
            return self.getToken(vbaParser.RSET, 0)

        def SEEK(self):
            return self.getToken(vbaParser.SEEK, 0)

        def SELECT(self):
            return self.getToken(vbaParser.SELECT, 0)

        def SET(self):
            return self.getToken(vbaParser.SET, 0)

        def STATIC(self):
            return self.getToken(vbaParser.STATIC, 0)

        def STOP(self):
            return self.getToken(vbaParser.STOP, 0)

        def SUB(self):
            return self.getToken(vbaParser.SUB, 0)

        def TYPE(self):
            return self.getToken(vbaParser.TYPE, 0)

        def UNLOCK(self):
            return self.getToken(vbaParser.UNLOCK, 0)

        def WEND(self):
            return self.getToken(vbaParser.WEND, 0)

        def WHILE(self):
            return self.getToken(vbaParser.WHILE, 0)

        def WITH(self):
            return self.getToken(vbaParser.WITH, 0)

        def WRITE(self):
            return self.getToken(vbaParser.WRITE, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_statementKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatementKeyword" ):
                listener.enterStatementKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatementKeyword" ):
                listener.exitStatementKeyword(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatementKeyword" ):
                return visitor.visitStatementKeyword(self)
            else:
                return visitor.visitChildren(self)




    def statementKeyword(self):

        localctx = vbaParser.StatementKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 652, self.RULE_statementKeyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3917
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & -294983026810552320) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 433506695475197471) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & 20306912242402177) != 0) or ((((_la - 213)) & ~0x3f) == 0 and ((1 << (_la - 213)) & 43) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RemKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REM(self):
            return self.getToken(vbaParser.REM, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_remKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRemKeyword" ):
                listener.enterRemKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRemKeyword" ):
                listener.exitRemKeyword(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRemKeyword" ):
                return visitor.visitRemKeyword(self)
            else:
                return visitor.visitChildren(self)




    def remKeyword(self):

        localctx = vbaParser.RemKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 654, self.RULE_remKeyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3919
            self.match(vbaParser.REM)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MarkerKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANY(self):
            return self.getToken(vbaParser.ANY, 0)

        def AS(self):
            return self.getToken(vbaParser.AS, 0)

        def BYREF(self):
            return self.getToken(vbaParser.BYREF, 0)

        def BYVAL(self):
            return self.getToken(vbaParser.BYVAL, 0)

        def CASE(self):
            return self.getToken(vbaParser.CASE, 0)

        def EACH(self):
            return self.getToken(vbaParser.EACH, 0)

        def ELSE(self):
            return self.getToken(vbaParser.ELSE, 0)

        def IN(self):
            return self.getToken(vbaParser.IN, 0)

        def NEW(self):
            return self.getToken(vbaParser.NEW, 0)

        def SHARED(self):
            return self.getToken(vbaParser.SHARED, 0)

        def UNTIL(self):
            return self.getToken(vbaParser.UNTIL, 0)

        def WITHEVENTS(self):
            return self.getToken(vbaParser.WITHEVENTS, 0)

        def WRITE(self):
            return self.getToken(vbaParser.WRITE, 0)

        def OPTIONAL(self):
            return self.getToken(vbaParser.OPTIONAL, 0)

        def PARAMARRAY(self):
            return self.getToken(vbaParser.PARAMARRAY, 0)

        def PRESERVE(self):
            return self.getToken(vbaParser.PRESERVE, 0)

        def SPC(self):
            return self.getToken(vbaParser.SPC, 0)

        def TAB(self):
            return self.getToken(vbaParser.TAB, 0)

        def THEN(self):
            return self.getToken(vbaParser.THEN, 0)

        def TO(self):
            return self.getToken(vbaParser.TO, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_markerKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMarkerKeyword" ):
                listener.enterMarkerKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMarkerKeyword" ):
                listener.exitMarkerKeyword(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMarkerKeyword" ):
                return visitor.visitMarkerKeyword(self)
            else:
                return visitor.visitChildren(self)




    def markerKeyword(self):

        localctx = vbaParser.MarkerKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 656, self.RULE_markerKeyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3921
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 2294848) != 0) or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 576460752370532355) != 0) or ((((_la - 140)) & ~0x3f) == 0 and ((1 << (_la - 140)) & 36078329266201) != 0) or _la==217 or _la==218):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OperatorIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADDRESSOF(self):
            return self.getToken(vbaParser.ADDRESSOF, 0)

        def AND(self):
            return self.getToken(vbaParser.AND, 0)

        def EQV(self):
            return self.getToken(vbaParser.EQV, 0)

        def IMP(self):
            return self.getToken(vbaParser.IMP, 0)

        def IS(self):
            return self.getToken(vbaParser.IS, 0)

        def LIKE(self):
            return self.getToken(vbaParser.LIKE, 0)

        def NEW(self):
            return self.getToken(vbaParser.NEW, 0)

        def MOD(self):
            return self.getToken(vbaParser.MOD, 0)

        def NOT(self):
            return self.getToken(vbaParser.NOT, 0)

        def OR(self):
            return self.getToken(vbaParser.OR, 0)

        def TYPEOF(self):
            return self.getToken(vbaParser.TYPEOF, 0)

        def XOR(self):
            return self.getToken(vbaParser.XOR, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_operatorIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperatorIdentifier" ):
                listener.enterOperatorIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperatorIdentifier" ):
                listener.exitOperatorIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOperatorIdentifier" ):
                return visitor.visitOperatorIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def operatorIdentifier(self):

        localctx = vbaParser.OperatorIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 658, self.RULE_operatorIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3923
            _la = self._input.LA(1)
            if not(_la==3 or _la==5 or ((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & 4625759771566407681) != 0) or _la==182 or _la==219):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReservedNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ABS(self):
            return self.getToken(vbaParser.ABS, 0)

        def CBOOL(self):
            return self.getToken(vbaParser.CBOOL, 0)

        def CBYTE(self):
            return self.getToken(vbaParser.CBYTE, 0)

        def CCUR(self):
            return self.getToken(vbaParser.CCUR, 0)

        def CDATE(self):
            return self.getToken(vbaParser.CDATE, 0)

        def CDBL(self):
            return self.getToken(vbaParser.CDBL, 0)

        def CDEC(self):
            return self.getToken(vbaParser.CDEC, 0)

        def CINT(self):
            return self.getToken(vbaParser.CINT, 0)

        def CLNG(self):
            return self.getToken(vbaParser.CLNG, 0)

        def CLNGLNG(self):
            return self.getToken(vbaParser.CLNGLNG, 0)

        def CLNGPTR(self):
            return self.getToken(vbaParser.CLNGPTR, 0)

        def CSNG(self):
            return self.getToken(vbaParser.CSNG, 0)

        def CSTR(self):
            return self.getToken(vbaParser.CSTR, 0)

        def CVAR(self):
            return self.getToken(vbaParser.CVAR, 0)

        def CVERR(self):
            return self.getToken(vbaParser.CVERR, 0)

        def DATE(self):
            return self.getToken(vbaParser.DATE, 0)

        def DEBUG(self):
            return self.getToken(vbaParser.DEBUG, 0)

        def DOEVENTS(self):
            return self.getToken(vbaParser.DOEVENTS, 0)

        def FIX(self):
            return self.getToken(vbaParser.FIX, 0)

        def INT(self):
            return self.getToken(vbaParser.INT, 0)

        def LEN(self):
            return self.getToken(vbaParser.LEN, 0)

        def LENB(self):
            return self.getToken(vbaParser.LENB, 0)

        def ME(self):
            return self.getToken(vbaParser.ME, 0)

        def PSET(self):
            return self.getToken(vbaParser.PSET, 0)

        def SCALE(self):
            return self.getToken(vbaParser.SCALE, 0)

        def SGN(self):
            return self.getToken(vbaParser.SGN, 0)

        def STRING(self):
            return self.getToken(vbaParser.STRING, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_reservedName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReservedName" ):
                listener.enterReservedName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReservedName" ):
                listener.exitReservedName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReservedName" ):
                return visitor.visitReservedName(self)
            else:
                return visitor.visitChildren(self)




    def reservedName(self):

        localctx = vbaParser.ReservedNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 660, self.RULE_reservedName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3925
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 1473829029281794) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 18015227438301185) != 0) or ((((_la - 148)) & ~0x3f) == 0 and ((1 << (_la - 148)) & 33693697) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpecialFormContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARRAY(self):
            return self.getToken(vbaParser.ARRAY, 0)

        def CIRCLE(self):
            return self.getToken(vbaParser.CIRCLE, 0)

        def INPUT(self):
            return self.getToken(vbaParser.INPUT, 0)

        def INPUTB(self):
            return self.getToken(vbaParser.INPUTB, 0)

        def LBOUND(self):
            return self.getToken(vbaParser.LBOUND, 0)

        def SCALE(self):
            return self.getToken(vbaParser.SCALE, 0)

        def UBOUND(self):
            return self.getToken(vbaParser.UBOUND, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_specialForm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpecialForm" ):
                listener.enterSpecialForm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpecialForm" ):
                listener.exitSpecialForm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSpecialForm" ):
                return visitor.visitSpecialForm(self)
            else:
                return visitor.visitChildren(self)




    def specialForm(self):

        localctx = vbaParser.SpecialFormContext(self, self._ctx, self.state)
        self.enterRule(localctx, 662, self.RULE_specialForm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3927
            _la = self._input.LA(1)
            if not(_la==9 or _la==32 or ((((_la - 99)) & ~0x3f) == 0 and ((1 << (_la - 99)) & 4611686018427388035) != 0) or _la==183):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReservedTypeIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BOOLEAN(self):
            return self.getToken(vbaParser.BOOLEAN, 0)

        def BYTE(self):
            return self.getToken(vbaParser.BYTE, 0)

        def CURRENCY(self):
            return self.getToken(vbaParser.CURRENCY, 0)

        def DATE(self):
            return self.getToken(vbaParser.DATE, 0)

        def DOUBLE(self):
            return self.getToken(vbaParser.DOUBLE, 0)

        def INTEGER(self):
            return self.getToken(vbaParser.INTEGER, 0)

        def LONG(self):
            return self.getToken(vbaParser.LONG, 0)

        def LONGLONG(self):
            return self.getToken(vbaParser.LONGLONG, 0)

        def LONGPTR(self):
            return self.getToken(vbaParser.LONGPTR, 0)

        def SINGLE(self):
            return self.getToken(vbaParser.SINGLE, 0)

        def STRING(self):
            return self.getToken(vbaParser.STRING, 0)

        def VARIANT(self):
            return self.getToken(vbaParser.VARIANT, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_reservedTypeIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReservedTypeIdentifier" ):
                listener.enterReservedTypeIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReservedTypeIdentifier" ):
                listener.exitReservedTypeIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReservedTypeIdentifier" ):
                return visitor.visitReservedTypeIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def reservedTypeIdentifier(self):

        localctx = vbaParser.ReservedTypeIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 664, self.RULE_reservedTypeIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3929
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 351843721166848) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & 738880403800065) != 0) or ((((_la - 167)) & ~0x3f) == 0 and ((1 << (_la - 167)) & 8796093022273) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReservedTypeIdentifierBContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BOOLEAN_B(self):
            return self.getToken(vbaParser.BOOLEAN_B, 0)

        def BYTE_B(self):
            return self.getToken(vbaParser.BYTE_B, 0)

        def CURRENCY_B(self):
            return self.getToken(vbaParser.CURRENCY_B, 0)

        def DATE_B(self):
            return self.getToken(vbaParser.DATE_B, 0)

        def DOUBLE_B(self):
            return self.getToken(vbaParser.DOUBLE_B, 0)

        def INTEGER_B(self):
            return self.getToken(vbaParser.INTEGER_B, 0)

        def LONG_B(self):
            return self.getToken(vbaParser.LONG_B, 0)

        def LONGLONG_B(self):
            return self.getToken(vbaParser.LONGLONG_B, 0)

        def LONGPTR_B(self):
            return self.getToken(vbaParser.LONGPTR_B, 0)

        def SINGLE_B(self):
            return self.getToken(vbaParser.SINGLE_B, 0)

        def STRING_B(self):
            return self.getToken(vbaParser.STRING_B, 0)

        def VARIANT_B(self):
            return self.getToken(vbaParser.VARIANT_B, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_reservedTypeIdentifierB

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReservedTypeIdentifierB" ):
                listener.enterReservedTypeIdentifierB(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReservedTypeIdentifierB" ):
                listener.exitReservedTypeIdentifierB(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReservedTypeIdentifierB" ):
                return visitor.visitReservedTypeIdentifierB(self)
            else:
                return visitor.visitChildren(self)




    def reservedTypeIdentifierB(self):

        localctx = vbaParser.ReservedTypeIdentifierBContext(self, self._ctx, self.state)
        self.enterRule(localctx, 666, self.RULE_reservedTypeIdentifierB)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3931
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 703687442333696) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 738880403800065) != 0) or ((((_la - 168)) & ~0x3f) == 0 and ((1 << (_la - 168)) & 8796093022273) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeableReservedNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATE(self):
            return self.getToken(vbaParser.DATE, 0)

        def STRING(self):
            return self.getToken(vbaParser.STRING, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_typeableReservedName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeableReservedName" ):
                listener.enterTypeableReservedName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeableReservedName" ):
                listener.exitTypeableReservedName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeableReservedName" ):
                return visitor.visitTypeableReservedName(self)
            else:
                return visitor.visitChildren(self)




    def typeableReservedName(self):

        localctx = vbaParser.TypeableReservedNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 668, self.RULE_typeableReservedName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3933
            _la = self._input.LA(1)
            if not(_la==48 or _la==173):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def booleanLiteralIdentifier(self):
            return self.getTypedRuleContext(vbaParser.BooleanLiteralIdentifierContext,0)


        def objectLiteralIdentifier(self):
            return self.getTypedRuleContext(vbaParser.ObjectLiteralIdentifierContext,0)


        def variantLiteralIdentifier(self):
            return self.getTypedRuleContext(vbaParser.VariantLiteralIdentifierContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_literalIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteralIdentifier" ):
                listener.enterLiteralIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteralIdentifier" ):
                listener.exitLiteralIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteralIdentifier" ):
                return visitor.visitLiteralIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def literalIdentifier(self):

        localctx = vbaParser.LiteralIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 670, self.RULE_literalIdentifier)
        try:
            self.state = 3938
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [85, 180]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3935
                self.booleanLiteralIdentifier()
                pass
            elif token in [133]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3936
                self.objectLiteralIdentifier()
                pass
            elif token in [75, 134]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3937
                self.variantLiteralIdentifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanLiteralIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(vbaParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(vbaParser.FALSE, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_booleanLiteralIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanLiteralIdentifier" ):
                listener.enterBooleanLiteralIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanLiteralIdentifier" ):
                listener.exitBooleanLiteralIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBooleanLiteralIdentifier" ):
                return visitor.visitBooleanLiteralIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def booleanLiteralIdentifier(self):

        localctx = vbaParser.BooleanLiteralIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 672, self.RULE_booleanLiteralIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3940
            _la = self._input.LA(1)
            if not(_la==85 or _la==180):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObjectLiteralIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOTHING(self):
            return self.getToken(vbaParser.NOTHING, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_objectLiteralIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectLiteralIdentifier" ):
                listener.enterObjectLiteralIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectLiteralIdentifier" ):
                listener.exitObjectLiteralIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitObjectLiteralIdentifier" ):
                return visitor.visitObjectLiteralIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def objectLiteralIdentifier(self):

        localctx = vbaParser.ObjectLiteralIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 674, self.RULE_objectLiteralIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3942
            self.match(vbaParser.NOTHING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariantLiteralIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EMPTY_X(self):
            return self.getToken(vbaParser.EMPTY_X, 0)

        def NULL_(self):
            return self.getToken(vbaParser.NULL_, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_variantLiteralIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariantLiteralIdentifier" ):
                listener.enterVariantLiteralIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariantLiteralIdentifier" ):
                listener.exitVariantLiteralIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariantLiteralIdentifier" ):
                return visitor.visitVariantLiteralIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def variantLiteralIdentifier(self):

        localctx = vbaParser.VariantLiteralIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 676, self.RULE_variantLiteralIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3944
            _la = self._input.LA(1)
            if not(_la==75 or _la==134):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReservedForImplementationUseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ATTRIBUTE(self):
            return self.getToken(vbaParser.ATTRIBUTE, 0)

        def LINEINPUT(self):
            return self.getToken(vbaParser.LINEINPUT, 0)

        def VB_BASE(self):
            return self.getToken(vbaParser.VB_BASE, 0)

        def VB_CONTROL(self):
            return self.getToken(vbaParser.VB_CONTROL, 0)

        def VB_CREATABLE(self):
            return self.getToken(vbaParser.VB_CREATABLE, 0)

        def VB_CUSTOMIZABLE(self):
            return self.getToken(vbaParser.VB_CUSTOMIZABLE, 0)

        def VB_DESCRIPTION(self):
            return self.getToken(vbaParser.VB_DESCRIPTION, 0)

        def VB_EXPOSED(self):
            return self.getToken(vbaParser.VB_EXPOSED, 0)

        def VB_EXT_KEY(self):
            return self.getToken(vbaParser.VB_EXT_KEY, 0)

        def VB_GLOBALNAMESPACE(self):
            return self.getToken(vbaParser.VB_GLOBALNAMESPACE, 0)

        def VB_HELPID(self):
            return self.getToken(vbaParser.VB_HELPID, 0)

        def VB_INVOKE_FUNC(self):
            return self.getToken(vbaParser.VB_INVOKE_FUNC, 0)

        def VB_INVOKE_PROPERTY(self):
            return self.getToken(vbaParser.VB_INVOKE_PROPERTY, 0)

        def VB_INVOKE_PROPERTYPUT(self):
            return self.getToken(vbaParser.VB_INVOKE_PROPERTYPUT, 0)

        def VB_INVOKE_PROPERTYPUTREF(self):
            return self.getToken(vbaParser.VB_INVOKE_PROPERTYPUTREF, 0)

        def VB_MEMBERFLAGS(self):
            return self.getToken(vbaParser.VB_MEMBERFLAGS, 0)

        def VB_NAME(self):
            return self.getToken(vbaParser.VB_NAME, 0)

        def VB_PREDECLAREDID(self):
            return self.getToken(vbaParser.VB_PREDECLAREDID, 0)

        def VB_PROCDATA(self):
            return self.getToken(vbaParser.VB_PROCDATA, 0)

        def VB_TEMPLATEDERIVED(self):
            return self.getToken(vbaParser.VB_TEMPLATEDERIVED, 0)

        def VB_USERMEMID(self):
            return self.getToken(vbaParser.VB_USERMEMID, 0)

        def VB_VARDESCRIPTION(self):
            return self.getToken(vbaParser.VB_VARDESCRIPTION, 0)

        def VB_VARHELPID(self):
            return self.getToken(vbaParser.VB_VARHELPID, 0)

        def VB_VARMEMBERFLAGS(self):
            return self.getToken(vbaParser.VB_VARMEMBERFLAGS, 0)

        def VB_VARPROCDATA(self):
            return self.getToken(vbaParser.VB_VARPROCDATA, 0)

        def VB_VARUSERMEMID(self):
            return self.getToken(vbaParser.VB_VARUSERMEMID, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_reservedForImplementationUse

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReservedForImplementationUse" ):
                listener.enterReservedForImplementationUse(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReservedForImplementationUse" ):
                listener.exitReservedForImplementationUse(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReservedForImplementationUse" ):
                return visitor.visitReservedForImplementationUse(self)
            else:
                return visitor.visitChildren(self)




    def reservedForImplementationUse(self):

        localctx = vbaParser.ReservedForImplementationUseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 678, self.RULE_reservedForImplementationUse)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3946
            _la = self._input.LA(1)
            if not(_la==7 or _la==113 or ((((_la - 186)) & ~0x3f) == 0 and ((1 << (_la - 186)) & 16777215) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FutureReservedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CDECL(self):
            return self.getToken(vbaParser.CDECL, 0)

        def DECIMAL(self):
            return self.getToken(vbaParser.DECIMAL, 0)

        def DEFDEC(self):
            return self.getToken(vbaParser.DEFDEC, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_futureReserved

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFutureReserved" ):
                listener.enterFutureReserved(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFutureReserved" ):
                listener.exitFutureReserved(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFutureReserved" ):
                return visitor.visitFutureReserved(self)
            else:
                return visitor.visitChildren(self)




    def futureReserved(self):

        localctx = vbaParser.FutureReservedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 680, self.RULE_futureReserved)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3948
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 292733976047517696) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BuiltinTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def reservedTypeIdentifier(self):
            return self.getTypedRuleContext(vbaParser.ReservedTypeIdentifierContext,0)


        def reservedTypeIdentifierB(self):
            return self.getTypedRuleContext(vbaParser.ReservedTypeIdentifierBContext,0)


        def OBJECT(self):
            return self.getToken(vbaParser.OBJECT, 0)

        def OBJECT_B(self):
            return self.getToken(vbaParser.OBJECT_B, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_builtinType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBuiltinType" ):
                listener.enterBuiltinType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBuiltinType" ):
                listener.exitBuiltinType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBuiltinType" ):
                return visitor.visitBuiltinType(self)
            else:
                return visitor.visitChildren(self)




    def builtinType(self):

        localctx = vbaParser.BuiltinTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 682, self.RULE_builtinType)
        try:
            self.state = 3954
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [14, 18, 46, 48, 70, 103, 115, 117, 119, 167, 173, 210]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3950
                self.reservedTypeIdentifier()
                pass
            elif token in [15, 19, 47, 49, 71, 104, 116, 118, 120, 168, 174, 211]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3951
                self.reservedTypeIdentifierB()
                pass
            elif token in [135]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3952
                self.match(vbaParser.OBJECT)
                pass
            elif token in [136]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3953
                self.match(vbaParser.OBJECT_B)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypedNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def typeSuffix(self):
            return self.getTypedRuleContext(vbaParser.TypeSuffixContext,0)


        def typeableReservedName(self):
            return self.getTypedRuleContext(vbaParser.TypeableReservedNameContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_typedName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypedName" ):
                listener.enterTypedName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypedName" ):
                listener.exitTypedName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypedName" ):
                return visitor.visitTypedName(self)
            else:
                return visitor.visitChildren(self)




    def typedName(self):

        localctx = vbaParser.TypedNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 684, self.RULE_typedName)
        try:
            self.state = 3962
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2, 4, 8, 11, 12, 13, 29, 30, 33, 34, 35, 40, 81, 92, 105, 110, 112, 124, 125, 126, 127, 129, 135, 142, 147, 152, 154, 157, 171, 177, 212, 215, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 280]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3956
                self.ambiguousIdentifier()
                self.state = 3957
                self.typeSuffix()
                pass
            elif token in [48, 173]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3959
                self.typeableReservedName()
                self.state = 3960
                self.typeSuffix()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeSuffixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AMPERSAND(self):
            return self.getToken(vbaParser.AMPERSAND, 0)

        def PERCENT(self):
            return self.getToken(vbaParser.PERCENT, 0)

        def HASH(self):
            return self.getToken(vbaParser.HASH, 0)

        def EXCLAM(self):
            return self.getToken(vbaParser.EXCLAM, 0)

        def ASPERAND(self):
            return self.getToken(vbaParser.ASPERAND, 0)

        def Dollar(self):
            return self.getToken(vbaParser.Dollar, 0)

        def POW(self):
            return self.getToken(vbaParser.POW, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_typeSuffix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeSuffix" ):
                listener.enterTypeSuffix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeSuffix" ):
                listener.exitTypeSuffix(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeSuffix" ):
                return visitor.visitTypeSuffix(self)
            else:
                return visitor.visitChildren(self)




    def typeSuffix(self):

        localctx = vbaParser.TypeSuffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 686, self.RULE_typeSuffix)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3964
            _la = self._input.LA(1)
            if not(((((_la - 237)) & ~0x3f) == 0 and ((1 << (_la - 237)) & 4457635) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AmbiguousKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ACCESS(self):
            return self.getToken(vbaParser.ACCESS, 0)

        def ALIAS(self):
            return self.getToken(vbaParser.ALIAS, 0)

        def APPACTIVATE(self):
            return self.getToken(vbaParser.APPACTIVATE, 0)

        def APPEND(self):
            return self.getToken(vbaParser.APPEND, 0)

        def BASE(self):
            return self.getToken(vbaParser.BASE, 0)

        def BEEP(self):
            return self.getToken(vbaParser.BEEP, 0)

        def BEGIN(self):
            return self.getToken(vbaParser.BEGIN, 0)

        def BINARY(self):
            return self.getToken(vbaParser.BINARY, 0)

        def CLASS(self):
            return self.getToken(vbaParser.CLASS, 0)

        def CHDIR(self):
            return self.getToken(vbaParser.CHDIR, 0)

        def CHDRIVE(self):
            return self.getToken(vbaParser.CHDRIVE, 0)

        def CLASS_INITIALIZE(self):
            return self.getToken(vbaParser.CLASS_INITIALIZE, 0)

        def CLASS_TERMINATE(self):
            return self.getToken(vbaParser.CLASS_TERMINATE, 0)

        def COLLECTION(self):
            return self.getToken(vbaParser.COLLECTION, 0)

        def COMPARE(self):
            return self.getToken(vbaParser.COMPARE, 0)

        def DATABASE(self):
            return self.getToken(vbaParser.DATABASE, 0)

        def DELETESETTING(self):
            return self.getToken(vbaParser.DELETESETTING, 0)

        def ERROR(self):
            return self.getToken(vbaParser.ERROR, 0)

        def FILECOPY(self):
            return self.getToken(vbaParser.FILECOPY, 0)

        def GO(self):
            return self.getToken(vbaParser.GO, 0)

        def KILL(self):
            return self.getToken(vbaParser.KILL, 0)

        def LOAD(self):
            return self.getToken(vbaParser.LOAD, 0)

        def LIB(self):
            return self.getToken(vbaParser.LIB, 0)

        def LINE(self):
            return self.getToken(vbaParser.LINE, 0)

        def MID(self):
            return self.getToken(vbaParser.MID, 0)

        def MIDB(self):
            return self.getToken(vbaParser.MIDB, 0)

        def MID_D(self):
            return self.getToken(vbaParser.MID_D, 0)

        def MIDB_D(self):
            return self.getToken(vbaParser.MIDB_D, 0)

        def MKDIR(self):
            return self.getToken(vbaParser.MKDIR, 0)

        def MODULE(self):
            return self.getToken(vbaParser.MODULE, 0)

        def NAME(self):
            return self.getToken(vbaParser.NAME, 0)

        def OBJECT(self):
            return self.getToken(vbaParser.OBJECT, 0)

        def OUTPUT(self):
            return self.getToken(vbaParser.OUTPUT, 0)

        def PROPERTY(self):
            return self.getToken(vbaParser.PROPERTY, 0)

        def RANDOM(self):
            return self.getToken(vbaParser.RANDOM, 0)

        def RANDOMIZE(self):
            return self.getToken(vbaParser.RANDOMIZE, 0)

        def READ(self):
            return self.getToken(vbaParser.READ, 0)

        def RESET(self):
            return self.getToken(vbaParser.RESET, 0)

        def RMDIR(self):
            return self.getToken(vbaParser.RMDIR, 0)

        def SAVEPICTURE(self):
            return self.getToken(vbaParser.SAVEPICTURE, 0)

        def SAVESETTING(self):
            return self.getToken(vbaParser.SAVESETTING, 0)

        def SENDKEYS(self):
            return self.getToken(vbaParser.SENDKEYS, 0)

        def SETATTR(self):
            return self.getToken(vbaParser.SETATTR, 0)

        def STEP(self):
            return self.getToken(vbaParser.STEP, 0)

        def TEXT(self):
            return self.getToken(vbaParser.TEXT, 0)

        def TIME(self):
            return self.getToken(vbaParser.TIME, 0)

        def UNLOAD(self):
            return self.getToken(vbaParser.UNLOAD, 0)

        def VERSION(self):
            return self.getToken(vbaParser.VERSION, 0)

        def WIDTH(self):
            return self.getToken(vbaParser.WIDTH, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_ambiguousKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAmbiguousKeyword" ):
                listener.enterAmbiguousKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAmbiguousKeyword" ):
                listener.exitAmbiguousKeyword(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAmbiguousKeyword" ):
                return visitor.visitAmbiguousKeyword(self)
            else:
                return visitor.visitChildren(self)




    def ambiguousKeyword(self):

        localctx = vbaParser.AmbiguousKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 688, self.RULE_ambiguousKeyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3966
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 1161251797268) != 0) or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & 2324270826796353537) != 0) or ((((_la - 147)) & ~0x3f) == 0 and ((1 << (_la - 147)) & 1090520225) != 0) or ((((_la - 212)) & ~0x3f) == 0 and ((1 << (_la - 212)) & 33554185) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[285] = self.expression_sempred
        self._predicates[286] = self.lExpression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 2)
         

    def lExpression_sempred(self, localctx:LExpressionContext, predIndex:int):
            if predIndex == 7:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 2)
         




