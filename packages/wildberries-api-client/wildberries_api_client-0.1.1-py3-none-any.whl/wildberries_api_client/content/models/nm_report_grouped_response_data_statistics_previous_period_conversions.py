# coding: utf-8

"""
    Seller API Content

    Queries limits: <dd>Maximum of 100 requests per minute to all Content methods are allowed.</dd> <br> Public API for Content is designed for server-to-server data synchronization between Wildberries and Suppliers. <br> You download data from Wildberries to your computing resources for further operating it. <br> <code>It is not allowed to use the Content API as an external database. If you exceed the requests limits, access to the API will be restricted.</code> <br> <br> <br>   # noqa: E501

    OpenAPI spec version: 2.18
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NmReportGroupedResponseDataStatisticsPreviousPeriodConversions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'add_to_cart_percent': 'float',
        'cart_to_order_percent': 'float',
        'buyouts_percent': 'float'
    }

    attribute_map = {
        'add_to_cart_percent': 'addToCartPercent',
        'cart_to_order_percent': 'cartToOrderPercent',
        'buyouts_percent': 'buyoutsPercent'
    }

    def __init__(self, add_to_cart_percent=None, cart_to_order_percent=None, buyouts_percent=None):  # noqa: E501
        """NmReportGroupedResponseDataStatisticsPreviousPeriodConversions - a model defined in Swagger"""  # noqa: E501
        self._add_to_cart_percent = None
        self._cart_to_order_percent = None
        self._buyouts_percent = None
        self.discriminator = None
        if add_to_cart_percent is not None:
            self.add_to_cart_percent = add_to_cart_percent
        if cart_to_order_percent is not None:
            self.cart_to_order_percent = cart_to_order_percent
        if buyouts_percent is not None:
            self.buyouts_percent = buyouts_percent

    @property
    def add_to_cart_percent(self):
        """Gets the add_to_cart_percent of this NmReportGroupedResponseDataStatisticsPreviousPeriodConversions.  # noqa: E501

        Conversion to cart, % (What percentage of visitors, who opened the product card, added the product to the cart)  # noqa: E501

        :return: The add_to_cart_percent of this NmReportGroupedResponseDataStatisticsPreviousPeriodConversions.  # noqa: E501
        :rtype: float
        """
        return self._add_to_cart_percent

    @add_to_cart_percent.setter
    def add_to_cart_percent(self, add_to_cart_percent):
        """Sets the add_to_cart_percent of this NmReportGroupedResponseDataStatisticsPreviousPeriodConversions.

        Conversion to cart, % (What percentage of visitors, who opened the product card, added the product to the cart)  # noqa: E501

        :param add_to_cart_percent: The add_to_cart_percent of this NmReportGroupedResponseDataStatisticsPreviousPeriodConversions.  # noqa: E501
        :type: float
        """

        self._add_to_cart_percent = add_to_cart_percent

    @property
    def cart_to_order_percent(self):
        """Gets the cart_to_order_percent of this NmReportGroupedResponseDataStatisticsPreviousPeriodConversions.  # noqa: E501

        Conversion to order, % (What percentage of visitors, who added the product to the cart, placed an order)  # noqa: E501

        :return: The cart_to_order_percent of this NmReportGroupedResponseDataStatisticsPreviousPeriodConversions.  # noqa: E501
        :rtype: float
        """
        return self._cart_to_order_percent

    @cart_to_order_percent.setter
    def cart_to_order_percent(self, cart_to_order_percent):
        """Sets the cart_to_order_percent of this NmReportGroupedResponseDataStatisticsPreviousPeriodConversions.

        Conversion to order, % (What percentage of visitors, who added the product to the cart, placed an order)  # noqa: E501

        :param cart_to_order_percent: The cart_to_order_percent of this NmReportGroupedResponseDataStatisticsPreviousPeriodConversions.  # noqa: E501
        :type: float
        """

        self._cart_to_order_percent = cart_to_order_percent

    @property
    def buyouts_percent(self):
        """Gets the buyouts_percent of this NmReportGroupedResponseDataStatisticsPreviousPeriodConversions.  # noqa: E501

        Buyout percentage, % (What percentage of visitors, who ordered the product, actually purchased it. Excluding products still being delivered to the buyer)  # noqa: E501

        :return: The buyouts_percent of this NmReportGroupedResponseDataStatisticsPreviousPeriodConversions.  # noqa: E501
        :rtype: float
        """
        return self._buyouts_percent

    @buyouts_percent.setter
    def buyouts_percent(self, buyouts_percent):
        """Sets the buyouts_percent of this NmReportGroupedResponseDataStatisticsPreviousPeriodConversions.

        Buyout percentage, % (What percentage of visitors, who ordered the product, actually purchased it. Excluding products still being delivered to the buyer)  # noqa: E501

        :param buyouts_percent: The buyouts_percent of this NmReportGroupedResponseDataStatisticsPreviousPeriodConversions.  # noqa: E501
        :type: float
        """

        self._buyouts_percent = buyouts_percent

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NmReportGroupedResponseDataStatisticsPreviousPeriodConversions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NmReportGroupedResponseDataStatisticsPreviousPeriodConversions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
