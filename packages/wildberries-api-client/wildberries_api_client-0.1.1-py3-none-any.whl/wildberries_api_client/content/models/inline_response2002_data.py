# coding: utf-8

"""
    Seller API Content

    Queries limits: <dd>Maximum of 100 requests per minute to all Content methods are allowed.</dd> <br> Public API for Content is designed for server-to-server data synchronization between Wildberries and Suppliers. <br> You download data from Wildberries to your computing resources for further operating it. <br> <code>It is not allowed to use the Content API as an external database. If you exceed the requests limits, access to the API will be restricted.</code> <br> <br> <br>   # noqa: E501

    OpenAPI spec version: 2.18
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse2002Data(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'object': 'str',
        'object_id': 'int',
        'vendor_code': 'str',
        'update_at': 'str',
        'errors': 'list[str]'
    }

    attribute_map = {
        'object': 'object',
        'object_id': 'objectID',
        'vendor_code': 'vendorCode',
        'update_at': 'updateAt',
        'errors': 'errors'
    }

    def __init__(self, object=None, object_id=None, vendor_code=None, update_at=None, errors=None):  # noqa: E501
        """InlineResponse2002Data - a model defined in Swagger"""  # noqa: E501
        self._object = None
        self._object_id = None
        self._vendor_code = None
        self._update_at = None
        self._errors = None
        self.discriminator = None
        if object is not None:
            self.object = object
        if object_id is not None:
            self.object_id = object_id
        if vendor_code is not None:
            self.vendor_code = vendor_code
        if update_at is not None:
            self.update_at = update_at
        if errors is not None:
            self.errors = errors

    @property
    def object(self):
        """Gets the object of this InlineResponse2002Data.  # noqa: E501

        Category for which the product card was created with the given nomenclature  # noqa: E501

        :return: The object of this InlineResponse2002Data.  # noqa: E501
        :rtype: str
        """
        return self._object

    @object.setter
    def object(self, object):
        """Sets the object of this InlineResponse2002Data.

        Category for which the product card was created with the given nomenclature  # noqa: E501

        :param object: The object of this InlineResponse2002Data.  # noqa: E501
        :type: str
        """

        self._object = object

    @property
    def object_id(self):
        """Gets the object_id of this InlineResponse2002Data.  # noqa: E501

        Product ID  # noqa: E501

        :return: The object_id of this InlineResponse2002Data.  # noqa: E501
        :rtype: int
        """
        return self._object_id

    @object_id.setter
    def object_id(self, object_id):
        """Sets the object_id of this InlineResponse2002Data.

        Product ID  # noqa: E501

        :param object_id: The object_id of this InlineResponse2002Data.  # noqa: E501
        :type: int
        """

        self._object_id = object_id

    @property
    def vendor_code(self):
        """Gets the vendor_code of this InlineResponse2002Data.  # noqa: E501

        Supplier's article  # noqa: E501

        :return: The vendor_code of this InlineResponse2002Data.  # noqa: E501
        :rtype: str
        """
        return self._vendor_code

    @vendor_code.setter
    def vendor_code(self, vendor_code):
        """Sets the vendor_code of this InlineResponse2002Data.

        Supplier's article  # noqa: E501

        :param vendor_code: The vendor_code of this InlineResponse2002Data.  # noqa: E501
        :type: str
        """

        self._vendor_code = vendor_code

    @property
    def update_at(self):
        """Gets the update_at of this InlineResponse2002Data.  # noqa: E501

        The date and time of creating product card with specified nomenclature request  # noqa: E501

        :return: The update_at of this InlineResponse2002Data.  # noqa: E501
        :rtype: str
        """
        return self._update_at

    @update_at.setter
    def update_at(self, update_at):
        """Sets the update_at of this InlineResponse2002Data.

        The date and time of creating product card with specified nomenclature request  # noqa: E501

        :param update_at: The update_at of this InlineResponse2002Data.  # noqa: E501
        :type: str
        """

        self._update_at = update_at

    @property
    def errors(self):
        """Gets the errors of this InlineResponse2002Data.  # noqa: E501

        List of errors due to which the request to create a product card with a given nomenclature is not processed   # noqa: E501

        :return: The errors of this InlineResponse2002Data.  # noqa: E501
        :rtype: list[str]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this InlineResponse2002Data.

        List of errors due to which the request to create a product card with a given nomenclature is not processed   # noqa: E501

        :param errors: The errors of this InlineResponse2002Data.  # noqa: E501
        :type: list[str]
        """

        self._errors = errors

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2002Data, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2002Data):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
