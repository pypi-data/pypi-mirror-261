# coding: utf-8

"""
    Seller API Promotion

    Synchronization from the database runs every 3 minutes.  <br>The status is changed once per 1 minute. During this interval the last status change action will be saved. <br>The bid change takes place once in 30 seconds. Within this interval the last action to change the bid will be saved.   # noqa: E501

    OpenAPI spec version: 2.20
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20024(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'total_views': 'int',
        'total_clicks': 'int',
        'total_orders': 'int',
        'total_sum': 'int',
        'dates': 'list[InlineResponse20024Dates]'
    }

    attribute_map = {
        'total_views': 'totalViews',
        'total_clicks': 'totalClicks',
        'total_orders': 'totalOrders',
        'total_sum': 'totalSum',
        'dates': 'dates'
    }

    def __init__(self, total_views=None, total_clicks=None, total_orders=None, total_sum=None, dates=None):  # noqa: E501
        """InlineResponse20024 - a model defined in Swagger"""  # noqa: E501
        self._total_views = None
        self._total_clicks = None
        self._total_orders = None
        self._total_sum = None
        self._dates = None
        self.discriminator = None
        if total_views is not None:
            self.total_views = total_views
        if total_clicks is not None:
            self.total_clicks = total_clicks
        if total_orders is not None:
            self.total_orders = total_orders
        if total_sum is not None:
            self.total_sum = total_sum
        if dates is not None:
            self.dates = dates

    @property
    def total_views(self):
        """Gets the total_views of this InlineResponse20024.  # noqa: E501

        Total number of views  # noqa: E501

        :return: The total_views of this InlineResponse20024.  # noqa: E501
        :rtype: int
        """
        return self._total_views

    @total_views.setter
    def total_views(self, total_views):
        """Sets the total_views of this InlineResponse20024.

        Total number of views  # noqa: E501

        :param total_views: The total_views of this InlineResponse20024.  # noqa: E501
        :type: int
        """

        self._total_views = total_views

    @property
    def total_clicks(self):
        """Gets the total_clicks of this InlineResponse20024.  # noqa: E501

        Total number of clicks  # noqa: E501

        :return: The total_clicks of this InlineResponse20024.  # noqa: E501
        :rtype: int
        """
        return self._total_clicks

    @total_clicks.setter
    def total_clicks(self, total_clicks):
        """Sets the total_clicks of this InlineResponse20024.

        Total number of clicks  # noqa: E501

        :param total_clicks: The total_clicks of this InlineResponse20024.  # noqa: E501
        :type: int
        """

        self._total_clicks = total_clicks

    @property
    def total_orders(self):
        """Gets the total_orders of this InlineResponse20024.  # noqa: E501

        Total number of orders  # noqa: E501

        :return: The total_orders of this InlineResponse20024.  # noqa: E501
        :rtype: int
        """
        return self._total_orders

    @total_orders.setter
    def total_orders(self, total_orders):
        """Sets the total_orders of this InlineResponse20024.

        Total number of orders  # noqa: E501

        :param total_orders: The total_orders of this InlineResponse20024.  # noqa: E501
        :type: int
        """

        self._total_orders = total_orders

    @property
    def total_sum(self):
        """Gets the total_sum of this InlineResponse20024.  # noqa: E501

        Total expenses, RUB.  # noqa: E501

        :return: The total_sum of this InlineResponse20024.  # noqa: E501
        :rtype: int
        """
        return self._total_sum

    @total_sum.setter
    def total_sum(self, total_sum):
        """Sets the total_sum of this InlineResponse20024.

        Total expenses, RUB.  # noqa: E501

        :param total_sum: The total_sum of this InlineResponse20024.  # noqa: E501
        :type: int
        """

        self._total_sum = total_sum

    @property
    def dates(self):
        """Gets the dates of this InlineResponse20024.  # noqa: E501

        Statistics dataset  # noqa: E501

        :return: The dates of this InlineResponse20024.  # noqa: E501
        :rtype: list[InlineResponse20024Dates]
        """
        return self._dates

    @dates.setter
    def dates(self, dates):
        """Sets the dates of this InlineResponse20024.

        Statistics dataset  # noqa: E501

        :param dates: The dates of this InlineResponse20024.  # noqa: E501
        :type: list[InlineResponse20024Dates]
        """

        self._dates = dates

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20024, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20024):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
