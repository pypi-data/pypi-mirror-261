# coding: utf-8

"""
    Seller API Promotion

    Synchronization from the database runs every 3 minutes.  <br>The status is changed once per 1 minute. During this interval the last status change action will be saved. <br>The bid change takes place once in 30 seconds. Within this interval the last action to change the bid will be saved.   # noqa: E501

    OpenAPI spec version: 2.20
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from wildberries_api_client.promotion.api_client import ApiClient


class PromotionApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def adv_v0_advert_get(self, id, **kwargs):  # noqa: E501
        """Information about campaign.  # noqa: E501

        Get information about single campaign. <br> `Important`: To display the `params` structure for a campaign with status <b>4</b>, click the \"Apply changes\" button in the WB.Promotion cabinet after creating a campaign. <br>A maximum of 300 requests per minute is allowed.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v0_advert_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Campaign ID (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.adv_v0_advert_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.adv_v0_advert_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def adv_v0_advert_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Information about campaign.  # noqa: E501

        Get information about single campaign. <br> `Important`: To display the `params` structure for a campaign with status <b>4</b>, click the \"Apply changes\" button in the WB.Promotion cabinet after creating a campaign. <br>A maximum of 300 requests per minute is allowed.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v0_advert_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Campaign ID (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method adv_v0_advert_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `adv_v0_advert_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/adv/v0/advert', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def adv_v0_adverts_get(self, **kwargs):  # noqa: E501
        """List of campaigns  # noqa: E501

        The method allows to get a list of campaigns.<br>A maximum of 300 requests per minute is allowed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v0_adverts_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int status: <dl> <dt>Campaign status:</dt> <dd><code>-1</code> - campaign in the process of removing <span class=\"new\">new</span></dd> <dd><code>4</code> - ready to start</dd> <dd><code>7</code> - is over</dd> <dd><code>8</code> - refused</dd> <dd><code>9</code> - active</dd> <dd><code>11</code> - paused</dd> </dl> Campaign in the process of removing.  The status means that the campaign has been deleted and in 3-10 minutes it will disappear from the method response. 
        :param int type: <dl> <dt>Type of campaign:</dt> <dd><code>4</code> - campaign in catalogue</dd> <dd><code>5</code> - campaign in content</dd> <dd><code>6</code> - campaign in search</dd> <dd><code>7</code> - campaign on main page recommendations</dd> <dd><code>8</code> - automatic campaign </dd> <dd><code>9</code> - search + catalogue </dd> </dl> 
        :param int limit: Number of campaigns in response
        :param int offset: Offset from first campaign
        :param str order: <dl> <dt>order:</dt> <dd><code>create</code> (campaign create date)</dd> <dd><code>change</code> (campaign last update date)</dd> <dd><code>id</code> (campaign identifier)</dd> </dl> <br>Example: <code>**/adv/v0/adverts?type=6&limit=5&offset=10&<b>order=change</b>&direction=asc**</code> 
        :param str direction: <dl> <dt>Order:</dt> <dd><code>desc</code> (descending)</dd> <dd><code>asc</code> (ascending)</dd> </dl> <br>Example: <code>**/adv/v0/adverts?type=6&limit=5&offset=10&order=change&<b>direction=asc</b>**</code> 
        :return: list[InlineResponse2002]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.adv_v0_adverts_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.adv_v0_adverts_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def adv_v0_adverts_get_with_http_info(self, **kwargs):  # noqa: E501
        """List of campaigns  # noqa: E501

        The method allows to get a list of campaigns.<br>A maximum of 300 requests per minute is allowed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v0_adverts_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int status: <dl> <dt>Campaign status:</dt> <dd><code>-1</code> - campaign in the process of removing <span class=\"new\">new</span></dd> <dd><code>4</code> - ready to start</dd> <dd><code>7</code> - is over</dd> <dd><code>8</code> - refused</dd> <dd><code>9</code> - active</dd> <dd><code>11</code> - paused</dd> </dl> Campaign in the process of removing.  The status means that the campaign has been deleted and in 3-10 minutes it will disappear from the method response. 
        :param int type: <dl> <dt>Type of campaign:</dt> <dd><code>4</code> - campaign in catalogue</dd> <dd><code>5</code> - campaign in content</dd> <dd><code>6</code> - campaign in search</dd> <dd><code>7</code> - campaign on main page recommendations</dd> <dd><code>8</code> - automatic campaign </dd> <dd><code>9</code> - search + catalogue </dd> </dl> 
        :param int limit: Number of campaigns in response
        :param int offset: Offset from first campaign
        :param str order: <dl> <dt>order:</dt> <dd><code>create</code> (campaign create date)</dd> <dd><code>change</code> (campaign last update date)</dd> <dd><code>id</code> (campaign identifier)</dd> </dl> <br>Example: <code>**/adv/v0/adverts?type=6&limit=5&offset=10&<b>order=change</b>&direction=asc**</code> 
        :param str direction: <dl> <dt>Order:</dt> <dd><code>desc</code> (descending)</dd> <dd><code>asc</code> (ascending)</dd> </dl> <br>Example: <code>**/adv/v0/adverts?type=6&limit=5&offset=10&order=change&<b>direction=asc</b>**</code> 
        :return: list[InlineResponse2002]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['status', 'type', 'limit', 'offset', 'order', 'direction']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method adv_v0_adverts_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501
        if 'direction' in params:
            query_params.append(('direction', params['direction']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/adv/v0/adverts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[InlineResponse2002]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def adv_v0_count_get(self, **kwargs):  # noqa: E501
        """Get campaign  # noqa: E501

        Get amount of campaigns of supplier  <br>5 requests per second are allowed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v0_count_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.adv_v0_count_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.adv_v0_count_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def adv_v0_count_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get campaign  # noqa: E501

        Get amount of campaigns of supplier  <br>5 requests per second are allowed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v0_count_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method adv_v0_count_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/adv/v0/count', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2001',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def adv_v0_delete_get(self, id, **kwargs):  # noqa: E501
        """Removing a campaign  # noqa: E501

        The method allows to remove campaigns in the status <b>4 - ready to launch</b>. <span class=\"newM\">new</span><br> 5 requests per second are allowed.<br>  After removing, the campaign will be in <b>-1</b> status for a while.<br> It takes between 3 and 10 minutes to completely remove a campaign.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v0_delete_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Campaign ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.adv_v0_delete_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.adv_v0_delete_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def adv_v0_delete_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Removing a campaign  # noqa: E501

        The method allows to remove campaigns in the status <b>4 - ready to launch</b>. <span class=\"newM\">new</span><br> 5 requests per second are allowed.<br>  After removing, the campaign will be in <b>-1</b> status for a while.<br> It takes between 3 and 10 minutes to completely remove a campaign.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v0_delete_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Campaign ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method adv_v0_delete_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `adv_v0_delete_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/adv/v0/delete', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def adv_v1_save_ad_post(self, body, **kwargs):  # noqa: E501
        """Creating automatic campaign  # noqa: E501

        The method allows to create an automatic campaign.<br> Executes 1 request in 20 seconds.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v1_save_ad_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1SaveadBody body: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.adv_v1_save_ad_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.adv_v1_save_ad_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def adv_v1_save_ad_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Creating automatic campaign  # noqa: E501

        The method allows to create an automatic campaign.<br> Executes 1 request in 20 seconds.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v1_save_ad_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1SaveadBody body: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method adv_v1_save_ad_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `adv_v1_save_ad_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/adv/v1/save-ad', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def adv_v1_search_save_ad_post(self, body, **kwargs):  # noqa: E501
        """Creating a Search Campaign  # noqa: E501

        The method allows to create search campaigns.<span class=\"newM\">new</span><br> A maximum of 1 requests per minute is allowed. <br> <br> Operating Procedure: <ol>   <li>Get the list of items using the method <b>\"List of items for the search campaign\"</b>.</li>   <li>By the <code>id</code> of the desired item from the first step, get the items that are available using the <b>\"List items for search campaign\"</b> method.</li>   <li>Then add the required products to the request body of this method.</li> </ol>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v1_search_save_ad_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SearchSaveadBody body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.adv_v1_search_save_ad_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.adv_v1_search_save_ad_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def adv_v1_search_save_ad_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Creating a Search Campaign  # noqa: E501

        The method allows to create search campaigns.<span class=\"newM\">new</span><br> A maximum of 1 requests per minute is allowed. <br> <br> Operating Procedure: <ol>   <li>Get the list of items using the method <b>\"List of items for the search campaign\"</b>.</li>   <li>By the <code>id</code> of the desired item from the first step, get the items that are available using the <b>\"List items for search campaign\"</b> method.</li>   <li>Then add the required products to the request body of this method.</li> </ol>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v1_search_save_ad_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SearchSaveadBody body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method adv_v1_search_save_ad_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `adv_v1_search_save_ad_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/adv/v1/search/save-ad', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def adv_v2_seacat_save_ad_post(self, **kwargs):  # noqa: E501
        """Create Search + Catalogue campaign  # noqa: E501

        Creates Search + Catalogue campaign. <span class=\"newM\">new</span><br>   Maximum 5 requests per minute   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v2_seacat_save_ad_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SeacatSaveadBody body:
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.adv_v2_seacat_save_ad_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.adv_v2_seacat_save_ad_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def adv_v2_seacat_save_ad_post_with_http_info(self, **kwargs):  # noqa: E501
        """Create Search + Catalogue campaign  # noqa: E501

        Creates Search + Catalogue campaign. <span class=\"newM\">new</span><br>   Maximum 5 requests per minute   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v2_seacat_save_ad_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SeacatSaveadBody body:
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method adv_v2_seacat_save_ad_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/adv/v2/seacat/save-ad', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
