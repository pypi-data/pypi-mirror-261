# coding: utf-8

"""
    Seller API Feedbacks and Questions

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.18
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from wildberries_api_client.feedbacks_questions.api_client import ApiClient


class FeedbacksApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def api_v1_feedback_get(self, id, **kwargs):  # noqa: E501
        """Get the feedback using by id  # noqa: E501

        The method allows you to get a feedback using by it ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_feedback_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Feedback ID (required)
        :return: InlineResponse20017
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_feedback_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_feedback_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def api_v1_feedback_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get the feedback using by id  # noqa: E501

        The method allows you to get a feedback using by it ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_feedback_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Feedback ID (required)
        :return: InlineResponse20017
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_feedback_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `api_v1_feedback_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/feedback', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20017',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_feedbacks_archive_get(self, take, skip, **kwargs):  # noqa: E501
        """List of archived feedbacks  # noqa: E501

        The method allows you to get a list of archived feedbacks. <br> A feedback becomes archived if it's answered or not answered within 30 days from the date of its publication.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_feedbacks_archive_get(take, skip, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int take: Number of feedbacks (max. 5 000) (required)
        :param int skip: Number of feedbacks for skip (required)
        :param int nm_id: WB article
        :param str order: Sorting of feedbacks by date (dateAsc/dateDesc)
        :return: InlineResponse20014
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_feedbacks_archive_get_with_http_info(take, skip, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_feedbacks_archive_get_with_http_info(take, skip, **kwargs)  # noqa: E501
            return data

    def api_v1_feedbacks_archive_get_with_http_info(self, take, skip, **kwargs):  # noqa: E501
        """List of archived feedbacks  # noqa: E501

        The method allows you to get a list of archived feedbacks. <br> A feedback becomes archived if it's answered or not answered within 30 days from the date of its publication.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_feedbacks_archive_get_with_http_info(take, skip, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int take: Number of feedbacks (max. 5 000) (required)
        :param int skip: Number of feedbacks for skip (required)
        :param int nm_id: WB article
        :param str order: Sorting of feedbacks by date (dateAsc/dateDesc)
        :return: InlineResponse20014
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['take', 'skip', 'nm_id', 'order']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_feedbacks_archive_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'take' is set
        if ('take' not in params or
                params['take'] is None):
            raise ValueError("Missing the required parameter `take` when calling `api_v1_feedbacks_archive_get`")  # noqa: E501
        # verify the required parameter 'skip' is set
        if ('skip' not in params or
                params['skip'] is None):
            raise ValueError("Missing the required parameter `skip` when calling `api_v1_feedbacks_archive_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'nm_id' in params:
            query_params.append(('nmId', params['nm_id']))  # noqa: E501
        if 'take' in params:
            query_params.append(('take', params['take']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/feedbacks/archive', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20014',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_feedbacks_count_get(self, **kwargs):  # noqa: E501
        """Number of reviews  # noqa: E501

        The method allows to get the number of reviews.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_feedbacks_count_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int date_from: The start date of the period in Unix timestamp format
        :param int date_to: The end date of the period in Unix timestamp format
        :param bool is_answered: Processed feedbacks (`true`) or unprocessed feedbacks (`false`). If a query parameter is not specified, processed feedbacks s will be returned. 
        :return: InlineResponse20016
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_feedbacks_count_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_feedbacks_count_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v1_feedbacks_count_get_with_http_info(self, **kwargs):  # noqa: E501
        """Number of reviews  # noqa: E501

        The method allows to get the number of reviews.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_feedbacks_count_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int date_from: The start date of the period in Unix timestamp format
        :param int date_to: The end date of the period in Unix timestamp format
        :param bool is_answered: Processed feedbacks (`true`) or unprocessed feedbacks (`false`). If a query parameter is not specified, processed feedbacks s will be returned. 
        :return: InlineResponse20016
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['date_from', 'date_to', 'is_answered']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_feedbacks_count_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'date_from' in params:
            query_params.append(('dateFrom', params['date_from']))  # noqa: E501
        if 'date_to' in params:
            query_params.append(('dateTo', params['date_to']))  # noqa: E501
        if 'is_answered' in params:
            query_params.append(('isAnswered', params['is_answered']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/feedbacks/count', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20016',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_feedbacks_count_unanswered_get(self, **kwargs):  # noqa: E501
        """Unanswered feedbacks  # noqa: E501

        The method allows you to get the number of unanswered feedbacks for today, for all time and get an estimate of all reviews.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_feedbacks_count_unanswered_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_feedbacks_count_unanswered_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_feedbacks_count_unanswered_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v1_feedbacks_count_unanswered_get_with_http_info(self, **kwargs):  # noqa: E501
        """Unanswered feedbacks  # noqa: E501

        The method allows you to get the number of unanswered feedbacks for today, for all time and get an estimate of all reviews.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_feedbacks_count_unanswered_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_feedbacks_count_unanswered_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/feedbacks/count-unanswered', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2008',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_feedbacks_get(self, is_answered, take, skip, **kwargs):  # noqa: E501
        """Feedbacks list  # noqa: E501

        The method allows you to get a list of feedbacks by the specified parameters with pagination and sorting.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_feedbacks_get(is_answered, take, skip, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool is_answered: Answered feedbacks (`true`) or unanswered reviews (`false`) (required)
        :param int take: Number of feedbacks (max. 5 000) (required)
        :param int skip: Number of feedbacks for skip (max. 199990) (required)
        :param int nm_id: WB article
        :param str order: Sorting of feedbacks by date (dateAsc/dateDesc)
        :param int date_from: The start date of the period in Unix timestamp format
        :param int date_to: The end date of the period in Unix timestamp format
        :return: InlineResponse20012
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_feedbacks_get_with_http_info(is_answered, take, skip, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_feedbacks_get_with_http_info(is_answered, take, skip, **kwargs)  # noqa: E501
            return data

    def api_v1_feedbacks_get_with_http_info(self, is_answered, take, skip, **kwargs):  # noqa: E501
        """Feedbacks list  # noqa: E501

        The method allows you to get a list of feedbacks by the specified parameters with pagination and sorting.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_feedbacks_get_with_http_info(is_answered, take, skip, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool is_answered: Answered feedbacks (`true`) or unanswered reviews (`false`) (required)
        :param int take: Number of feedbacks (max. 5 000) (required)
        :param int skip: Number of feedbacks for skip (max. 199990) (required)
        :param int nm_id: WB article
        :param str order: Sorting of feedbacks by date (dateAsc/dateDesc)
        :param int date_from: The start date of the period in Unix timestamp format
        :param int date_to: The end date of the period in Unix timestamp format
        :return: InlineResponse20012
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['is_answered', 'take', 'skip', 'nm_id', 'order', 'date_from', 'date_to']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_feedbacks_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'is_answered' is set
        if ('is_answered' not in params or
                params['is_answered'] is None):
            raise ValueError("Missing the required parameter `is_answered` when calling `api_v1_feedbacks_get`")  # noqa: E501
        # verify the required parameter 'take' is set
        if ('take' not in params or
                params['take'] is None):
            raise ValueError("Missing the required parameter `take` when calling `api_v1_feedbacks_get`")  # noqa: E501
        # verify the required parameter 'skip' is set
        if ('skip' not in params or
                params['skip'] is None):
            raise ValueError("Missing the required parameter `skip` when calling `api_v1_feedbacks_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'is_answered' in params:
            query_params.append(('isAnswered', params['is_answered']))  # noqa: E501
        if 'nm_id' in params:
            query_params.append(('nmId', params['nm_id']))  # noqa: E501
        if 'take' in params:
            query_params.append(('take', params['take']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501
        if 'date_from' in params:
            query_params.append(('dateFrom', params['date_from']))  # noqa: E501
        if 'date_to' in params:
            query_params.append(('dateTo', params['date_to']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/feedbacks', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20012',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_feedbacks_patch(self, **kwargs):  # noqa: E501
        """Working with feedback  # noqa: E501

        <dl> <dt>Depending on the request body, you can:</dt> <dd>View feedback.</dd> <dd>Reply to feedback or edit the answer.</dd> </dl> <b>It is possible to edit a response to a feedback within 2 months (60 days), after the response has been submitted and only once.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_feedbacks_patch(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1FeedbacksBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_feedbacks_patch_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_feedbacks_patch_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v1_feedbacks_patch_with_http_info(self, **kwargs):  # noqa: E501
        """Working with feedback  # noqa: E501

        <dl> <dt>Depending on the request body, you can:</dt> <dd>View feedback.</dd> <dd>Reply to feedback or edit the answer.</dd> </dl> <b>It is possible to edit a response to a feedback within 2 months (60 days), after the response has been submitted and only once.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_feedbacks_patch_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1FeedbacksBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_feedbacks_patch" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/feedbacks', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_feedbacks_products_rating_get(self, subject_id, **kwargs):  # noqa: E501
        """Average product rating by parent category  # noqa: E501

        The method allows you to get the average rating of products for the parent category.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_feedbacks_products_rating_get(subject_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int subject_id: Product category id (required)
        :return: InlineResponse20010
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_feedbacks_products_rating_get_with_http_info(subject_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_feedbacks_products_rating_get_with_http_info(subject_id, **kwargs)  # noqa: E501
            return data

    def api_v1_feedbacks_products_rating_get_with_http_info(self, subject_id, **kwargs):  # noqa: E501
        """Average product rating by parent category  # noqa: E501

        The method allows you to get the average rating of products for the parent category.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_feedbacks_products_rating_get_with_http_info(subject_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int subject_id: Product category id (required)
        :return: InlineResponse20010
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['subject_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_feedbacks_products_rating_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'subject_id' is set
        if ('subject_id' not in params or
                params['subject_id'] is None):
            raise ValueError("Missing the required parameter `subject_id` when calling `api_v1_feedbacks_products_rating_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'subject_id' in params:
            query_params.append(('subjectId', params['subject_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/feedbacks/products/rating', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20010',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_feedbacks_products_rating_nmid_get(self, nm_id, **kwargs):  # noqa: E501
        """Average rate of product by WB article  # noqa: E501

        The method allows you to get average rate of product by WB article.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_feedbacks_products_rating_nmid_get(nm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int nm_id: WB article (required)
        :return: InlineResponse20015
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_feedbacks_products_rating_nmid_get_with_http_info(nm_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_feedbacks_products_rating_nmid_get_with_http_info(nm_id, **kwargs)  # noqa: E501
            return data

    def api_v1_feedbacks_products_rating_nmid_get_with_http_info(self, nm_id, **kwargs):  # noqa: E501
        """Average rate of product by WB article  # noqa: E501

        The method allows you to get average rate of product by WB article.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_feedbacks_products_rating_nmid_get_with_http_info(nm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int nm_id: WB article (required)
        :return: InlineResponse20015
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['nm_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_feedbacks_products_rating_nmid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'nm_id' is set
        if ('nm_id' not in params or
                params['nm_id'] is None):
            raise ValueError("Missing the required parameter `nm_id` when calling `api_v1_feedbacks_products_rating_nmid_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'nm_id' in params:
            query_params.append(('nmId', params['nm_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/feedbacks/products/rating/nmid', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20015',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_feedbacks_products_rating_top_get(self, subject_id, **kwargs):  # noqa: E501
        """Products with the highest and lowest average ratings by parent category  # noqa: E501

        The method that allows you to get list of two products with the highest and the lowest average rating by parent category  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_feedbacks_products_rating_top_get(subject_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int subject_id: Product category id (required)
        :return: InlineResponse20011
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_feedbacks_products_rating_top_get_with_http_info(subject_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_feedbacks_products_rating_top_get_with_http_info(subject_id, **kwargs)  # noqa: E501
            return data

    def api_v1_feedbacks_products_rating_top_get_with_http_info(self, subject_id, **kwargs):  # noqa: E501
        """Products with the highest and lowest average ratings by parent category  # noqa: E501

        The method that allows you to get list of two products with the highest and the lowest average rating by parent category  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_feedbacks_products_rating_top_get_with_http_info(subject_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int subject_id: Product category id (required)
        :return: InlineResponse20011
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['subject_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_feedbacks_products_rating_top_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'subject_id' is set
        if ('subject_id' not in params or
                params['subject_id'] is None):
            raise ValueError("Missing the required parameter `subject_id` when calling `api_v1_feedbacks_products_rating_top_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'subject_id' in params:
            query_params.append(('subjectId', params['subject_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/feedbacks/products/rating/top', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20011',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_feedbacks_report_get(self, **kwargs):  # noqa: E501
        """Receive feedbacks in XLSX format  # noqa: E501

        The method allows you to get an XLSX file with feedbacks encoded in BASE64. <br>  It is possible to get 5000 reviews per request. <br> At the moment a total of 200 000 recent reviews are available to get.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_feedbacks_report_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool is_answered: Unanswered(`false`) or in archive(`true`)
        :param int skip: Number of feedbacks for skip (max. 20 000)
        :param int date_from: The start date of the period in Unix timestamp format <span class=\"newM\">new</span><br>
        :param int date_to: The end date of the period in Unix timestamp format <span class=\"newM\">new</span><br>
        :param str order: Sorting of feedbacks by date (dateAsc/dateDesc) <span class=\"newM\">new</span><br>
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_feedbacks_report_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_feedbacks_report_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v1_feedbacks_report_get_with_http_info(self, **kwargs):  # noqa: E501
        """Receive feedbacks in XLSX format  # noqa: E501

        The method allows you to get an XLSX file with feedbacks encoded in BASE64. <br>  It is possible to get 5000 reviews per request. <br> At the moment a total of 200 000 recent reviews are available to get.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_feedbacks_report_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool is_answered: Unanswered(`false`) or in archive(`true`)
        :param int skip: Number of feedbacks for skip (max. 20 000)
        :param int date_from: The start date of the period in Unix timestamp format <span class=\"newM\">new</span><br>
        :param int date_to: The end date of the period in Unix timestamp format <span class=\"newM\">new</span><br>
        :param str order: Sorting of feedbacks by date (dateAsc/dateDesc) <span class=\"newM\">new</span><br>
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['is_answered', 'skip', 'date_from', 'date_to', 'order']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_feedbacks_report_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'is_answered' in params:
            query_params.append(('isAnswered', params['is_answered']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'date_from' in params:
            query_params.append(('dateFrom', params['date_from']))  # noqa: E501
        if 'date_to' in params:
            query_params.append(('dateTo', params['date_to']))  # noqa: E501
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/feedbacks/report', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20013',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_parent_subjects_get(self, **kwargs):  # noqa: E501
        """Parent categories of products  # noqa: E501

        The method allows you to get a list of parent categories of products that the seller has.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_parent_subjects_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_parent_subjects_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_parent_subjects_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v1_parent_subjects_get_with_http_info(self, **kwargs):  # noqa: E501
        """Parent categories of products  # noqa: E501

        The method allows you to get a list of parent categories of products that the seller has.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_parent_subjects_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_parent_subjects_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/parent-subjects', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2009',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
