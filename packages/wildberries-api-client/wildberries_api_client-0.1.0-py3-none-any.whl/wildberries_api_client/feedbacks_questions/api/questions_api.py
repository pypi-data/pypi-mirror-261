# coding: utf-8

"""
    Seller API Feedbacks and Questions

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.18
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from feedbacks_questions.api_client import ApiClient


class QuestionsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def api_v1_new_feedbacks_questions_get(self, **kwargs):  # noqa: E501
        """Unseen feedbacks and questions  # noqa: E501

        The method displays information about the seller's unseen feedbacks and questions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_new_feedbacks_questions_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_new_feedbacks_questions_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_new_feedbacks_questions_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v1_new_feedbacks_questions_get_with_http_info(self, **kwargs):  # noqa: E501
        """Unseen feedbacks and questions  # noqa: E501

        The method displays information about the seller's unseen feedbacks and questions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_new_feedbacks_questions_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_new_feedbacks_questions_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/new-feedbacks-questions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2001',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_question_get(self, id, **kwargs):  # noqa: E501
        """Get the question using by id  # noqa: E501

        The method allows you to get a qustion using by it ID. <br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_question_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: question ID (required)
        :return: InlineResponse2007
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_question_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_question_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def api_v1_question_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get the question using by id  # noqa: E501

        The method allows you to get a qustion using by it ID. <br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_question_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: question ID (required)
        :return: InlineResponse2007
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_question_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `api_v1_question_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/question', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2007',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_questions_count_get(self, **kwargs):  # noqa: E501
        """Number of questions  # noqa: E501

        The method allows to get the number of questions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_questions_count_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int date_from: The start date of the period in Unix timestamp format
        :param int date_to: The end date of the period in Unix timestamp format
        :param bool is_answered: Processed questions (`true`) or unprocessed questions (`false`).<br> If a query parameter is not specified, processed feedbacks s will be returned. 
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_questions_count_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_questions_count_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v1_questions_count_get_with_http_info(self, **kwargs):  # noqa: E501
        """Number of questions  # noqa: E501

        The method allows to get the number of questions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_questions_count_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int date_from: The start date of the period in Unix timestamp format
        :param int date_to: The end date of the period in Unix timestamp format
        :param bool is_answered: Processed questions (`true`) or unprocessed questions (`false`).<br> If a query parameter is not specified, processed feedbacks s will be returned. 
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['date_from', 'date_to', 'is_answered']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_questions_count_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'date_from' in params:
            query_params.append(('dateFrom', params['date_from']))  # noqa: E501
        if 'date_to' in params:
            query_params.append(('dateTo', params['date_to']))  # noqa: E501
        if 'is_answered' in params:
            query_params.append(('isAnswered', params['is_answered']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/questions/count', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2006',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_questions_count_unanswered_get(self, **kwargs):  # noqa: E501
        """Unanswered questions  # noqa: E501

        The method allows you to get the number of unanswered questions for today and for all time.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_questions_count_unanswered_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_questions_count_unanswered_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_questions_count_unanswered_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v1_questions_count_unanswered_get_with_http_info(self, **kwargs):  # noqa: E501
        """Unanswered questions  # noqa: E501

        The method allows you to get the number of unanswered questions for today and for all time.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_questions_count_unanswered_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_questions_count_unanswered_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/questions/count-unanswered', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_questions_get(self, is_answered, take, skip, **kwargs):  # noqa: E501
        """Question list  # noqa: E501

        The method allows you to get a list of questions by the specified parameters with pagination and sorting.<br> It is possible to get a maximum of 10,000 questions per query.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_questions_get(is_answered, take, skip, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool is_answered: Answered questions (`true`) or unanswered questions(`false`)  (required)
        :param int take: Number of requested questions (the maximum possible value for the parameter is 10,000,  and the total amount of `take` and `skip` parameters must not exceed 10,000)  (required)
        :param int skip: Number of questions to skip (maximum possible value for the parameter is 10,000,  and the total amount of `take` and `skip` parameters must not exceed 10,000)  (required)
        :param int nm_id: WB article
        :param str order: Sorting questions by date (`dateAsc`/`dateDesc`)
        :param int date_from: The start date of the period in Unix timestamp format
        :param int date_to: The end date of the period in Unix timestamp format
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_questions_get_with_http_info(is_answered, take, skip, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_questions_get_with_http_info(is_answered, take, skip, **kwargs)  # noqa: E501
            return data

    def api_v1_questions_get_with_http_info(self, is_answered, take, skip, **kwargs):  # noqa: E501
        """Question list  # noqa: E501

        The method allows you to get a list of questions by the specified parameters with pagination and sorting.<br> It is possible to get a maximum of 10,000 questions per query.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_questions_get_with_http_info(is_answered, take, skip, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool is_answered: Answered questions (`true`) or unanswered questions(`false`)  (required)
        :param int take: Number of requested questions (the maximum possible value for the parameter is 10,000,  and the total amount of `take` and `skip` parameters must not exceed 10,000)  (required)
        :param int skip: Number of questions to skip (maximum possible value for the parameter is 10,000,  and the total amount of `take` and `skip` parameters must not exceed 10,000)  (required)
        :param int nm_id: WB article
        :param str order: Sorting questions by date (`dateAsc`/`dateDesc`)
        :param int date_from: The start date of the period in Unix timestamp format
        :param int date_to: The end date of the period in Unix timestamp format
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['is_answered', 'take', 'skip', 'nm_id', 'order', 'date_from', 'date_to']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_questions_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'is_answered' is set
        if ('is_answered' not in params or
                params['is_answered'] is None):
            raise ValueError("Missing the required parameter `is_answered` when calling `api_v1_questions_get`")  # noqa: E501
        # verify the required parameter 'take' is set
        if ('take' not in params or
                params['take'] is None):
            raise ValueError("Missing the required parameter `take` when calling `api_v1_questions_get`")  # noqa: E501
        # verify the required parameter 'skip' is set
        if ('skip' not in params or
                params['skip'] is None):
            raise ValueError("Missing the required parameter `skip` when calling `api_v1_questions_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'is_answered' in params:
            query_params.append(('isAnswered', params['is_answered']))  # noqa: E501
        if 'nm_id' in params:
            query_params.append(('nmId', params['nm_id']))  # noqa: E501
        if 'take' in params:
            query_params.append(('take', params['take']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501
        if 'date_from' in params:
            query_params.append(('dateFrom', params['date_from']))  # noqa: E501
        if 'date_to' in params:
            query_params.append(('dateTo', params['date_to']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/questions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2003',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_questions_patch(self, **kwargs):  # noqa: E501
        """Working with questions  # noqa: E501

        <dl> <dt>Depending on the request body, you can:</dt> <dd>View question.</dd> <dd>Reject question.</dd> <dd>Answer question or edit the answer.</dd> </dl> <b>It is possible to edit a response to a question within 2 months (60 days), after the response has been submitted and only once.</b>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_questions_patch(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1QuestionsBody body:
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_questions_patch_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_questions_patch_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v1_questions_patch_with_http_info(self, **kwargs):  # noqa: E501
        """Working with questions  # noqa: E501

        <dl> <dt>Depending on the request body, you can:</dt> <dd>View question.</dd> <dd>Reject question.</dd> <dd>Answer question or edit the answer.</dd> </dl> <b>It is possible to edit a response to a question within 2 months (60 days), after the response has been submitted and only once.</b>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_questions_patch_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1QuestionsBody body:
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_questions_patch" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/questions', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2004',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_questions_products_rating_get(self, **kwargs):  # noqa: E501
        """Products most frequently asked about  # noqa: E501

        The method allows you to get the products that are often asked about.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_questions_products_rating_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int size: Number of requested products (max. 100)
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_questions_products_rating_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_questions_products_rating_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v1_questions_products_rating_get_with_http_info(self, **kwargs):  # noqa: E501
        """Products most frequently asked about  # noqa: E501

        The method allows you to get the products that are often asked about.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_questions_products_rating_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int size: Number of requested products (max. 100)
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_questions_products_rating_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/questions/products/rating', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2002',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_questions_report_get(self, **kwargs):  # noqa: E501
        """Receive questions in XLSX format  # noqa: E501

        Receive questions in XLSX format.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_questions_report_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool is_answered: Processed questions (`true`) or unprocessed questions (`false`) 
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_questions_report_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_questions_report_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v1_questions_report_get_with_http_info(self, **kwargs):  # noqa: E501
        """Receive questions in XLSX format  # noqa: E501

        Receive questions in XLSX format.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_questions_report_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool is_answered: Processed questions (`true`) or unprocessed questions (`false`) 
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['is_answered']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_questions_report_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'is_answered' in params:
            query_params.append(('isAnswered', params['is_answered']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/questions/report', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2005',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
