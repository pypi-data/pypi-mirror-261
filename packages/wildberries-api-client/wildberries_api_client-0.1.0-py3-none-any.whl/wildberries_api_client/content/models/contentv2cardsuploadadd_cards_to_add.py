# coding: utf-8

"""
    Seller API Content

    Queries limits: <dd>Maximum of 100 requests per minute to all Content methods are allowed.</dd> <br> Public API for Content is designed for server-to-server data synchronization between Wildberries and Suppliers. <br> You download data from Wildberries to your computing resources for further operating it. <br> <code>It is not allowed to use the Content API as an external database. If you exceed the requests limits, access to the API will be restricted.</code> <br> <br> <br>   # noqa: E501

    OpenAPI spec version: 2.18
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Contentv2cardsuploadaddCardsToAdd(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'brand': 'str',
        'vendor_code': 'str',
        'title': 'str',
        'description': 'str',
        'dimensions': 'Contentv2cardsuploadDimensions',
        'characteristics': 'list[Contentv2cardsupdateCharacteristics]',
        'sizes': 'list[Contentv2cardsuploadaddSizes]'
    }

    attribute_map = {
        'brand': 'brand',
        'vendor_code': 'vendorCode',
        'title': 'title',
        'description': 'description',
        'dimensions': 'dimensions',
        'characteristics': 'characteristics',
        'sizes': 'sizes'
    }

    def __init__(self, brand=None, vendor_code=None, title=None, description=None, dimensions=None, characteristics=None, sizes=None):  # noqa: E501
        """Contentv2cardsuploadaddCardsToAdd - a model defined in Swagger"""  # noqa: E501
        self._brand = None
        self._vendor_code = None
        self._title = None
        self._description = None
        self._dimensions = None
        self._characteristics = None
        self._sizes = None
        self.discriminator = None
        if brand is not None:
            self.brand = brand
        self.vendor_code = vendor_code
        if title is not None:
            self.title = title
        if description is not None:
            self.description = description
        if dimensions is not None:
            self.dimensions = dimensions
        if characteristics is not None:
            self.characteristics = characteristics
        if sizes is not None:
            self.sizes = sizes

    @property
    def brand(self):
        """Gets the brand of this Contentv2cardsuploadaddCardsToAdd.  # noqa: E501

        Brand  # noqa: E501

        :return: The brand of this Contentv2cardsuploadaddCardsToAdd.  # noqa: E501
        :rtype: str
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this Contentv2cardsuploadaddCardsToAdd.

        Brand  # noqa: E501

        :param brand: The brand of this Contentv2cardsuploadaddCardsToAdd.  # noqa: E501
        :type: str
        """

        self._brand = brand

    @property
    def vendor_code(self):
        """Gets the vendor_code of this Contentv2cardsuploadaddCardsToAdd.  # noqa: E501

        Seller's article  # noqa: E501

        :return: The vendor_code of this Contentv2cardsuploadaddCardsToAdd.  # noqa: E501
        :rtype: str
        """
        return self._vendor_code

    @vendor_code.setter
    def vendor_code(self, vendor_code):
        """Sets the vendor_code of this Contentv2cardsuploadaddCardsToAdd.

        Seller's article  # noqa: E501

        :param vendor_code: The vendor_code of this Contentv2cardsuploadaddCardsToAdd.  # noqa: E501
        :type: str
        """
        if vendor_code is None:
            raise ValueError("Invalid value for `vendor_code`, must not be `None`")  # noqa: E501

        self._vendor_code = vendor_code

    @property
    def title(self):
        """Gets the title of this Contentv2cardsuploadaddCardsToAdd.  # noqa: E501

        Product title  # noqa: E501

        :return: The title of this Contentv2cardsuploadaddCardsToAdd.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Contentv2cardsuploadaddCardsToAdd.

        Product title  # noqa: E501

        :param title: The title of this Contentv2cardsuploadaddCardsToAdd.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def description(self):
        """Gets the description of this Contentv2cardsuploadaddCardsToAdd.  # noqa: E501

        Product description  # noqa: E501

        :return: The description of this Contentv2cardsuploadaddCardsToAdd.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Contentv2cardsuploadaddCardsToAdd.

        Product description  # noqa: E501

        :param description: The description of this Contentv2cardsuploadaddCardsToAdd.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def dimensions(self):
        """Gets the dimensions of this Contentv2cardsuploadaddCardsToAdd.  # noqa: E501


        :return: The dimensions of this Contentv2cardsuploadaddCardsToAdd.  # noqa: E501
        :rtype: Contentv2cardsuploadDimensions
        """
        return self._dimensions

    @dimensions.setter
    def dimensions(self, dimensions):
        """Sets the dimensions of this Contentv2cardsuploadaddCardsToAdd.


        :param dimensions: The dimensions of this Contentv2cardsuploadaddCardsToAdd.  # noqa: E501
        :type: Contentv2cardsuploadDimensions
        """

        self._dimensions = dimensions

    @property
    def characteristics(self):
        """Gets the characteristics of this Contentv2cardsuploadaddCardsToAdd.  # noqa: E501

        Product characteristics  # noqa: E501

        :return: The characteristics of this Contentv2cardsuploadaddCardsToAdd.  # noqa: E501
        :rtype: list[Contentv2cardsupdateCharacteristics]
        """
        return self._characteristics

    @characteristics.setter
    def characteristics(self, characteristics):
        """Sets the characteristics of this Contentv2cardsuploadaddCardsToAdd.

        Product characteristics  # noqa: E501

        :param characteristics: The characteristics of this Contentv2cardsuploadaddCardsToAdd.  # noqa: E501
        :type: list[Contentv2cardsupdateCharacteristics]
        """

        self._characteristics = characteristics

    @property
    def sizes(self):
        """Gets the sizes of this Contentv2cardsuploadaddCardsToAdd.  # noqa: E501

        Product sizes. <br>  If the product has sizes but you send empty parameter, it is generated automatically with values: `techSize` = \"A\", `wbSize` = \"1\" and some random barcode.   # noqa: E501

        :return: The sizes of this Contentv2cardsuploadaddCardsToAdd.  # noqa: E501
        :rtype: list[Contentv2cardsuploadaddSizes]
        """
        return self._sizes

    @sizes.setter
    def sizes(self, sizes):
        """Sets the sizes of this Contentv2cardsuploadaddCardsToAdd.

        Product sizes. <br>  If the product has sizes but you send empty parameter, it is generated automatically with values: `techSize` = \"A\", `wbSize` = \"1\" and some random barcode.   # noqa: E501

        :param sizes: The sizes of this Contentv2cardsuploadaddCardsToAdd.  # noqa: E501
        :type: list[Contentv2cardsuploadaddSizes]
        """

        self._sizes = sizes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Contentv2cardsuploadaddCardsToAdd, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Contentv2cardsuploadaddCardsToAdd):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
