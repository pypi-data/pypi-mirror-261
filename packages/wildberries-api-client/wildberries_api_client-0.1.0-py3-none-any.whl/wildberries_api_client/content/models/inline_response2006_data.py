# coding: utf-8

"""
    Seller API Content

    Queries limits: <dd>Maximum of 100 requests per minute to all Content methods are allowed.</dd> <br> Public API for Content is designed for server-to-server data synchronization between Wildberries and Suppliers. <br> You download data from Wildberries to your computing resources for further operating it. <br> <code>It is not allowed to use the Content API as an external database. If you exceed the requests limits, access to the API will be restricted.</code> <br> <br> <br>   # noqa: E501

    OpenAPI spec version: 2.18
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse2006Data(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'subject_name': 'str',
        'name': 'str',
        'required': 'bool',
        'unit_name': 'str',
        'max_count': 'int',
        'popular': 'bool',
        'charc_type': 'int'
    }

    attribute_map = {
        'subject_name': 'subjectName',
        'name': 'name',
        'required': 'required',
        'unit_name': 'unitName',
        'max_count': 'maxCount',
        'popular': 'popular',
        'charc_type': 'charcType'
    }

    def __init__(self, subject_name=None, name=None, required=None, unit_name=None, max_count=None, popular=None, charc_type=None):  # noqa: E501
        """InlineResponse2006Data - a model defined in Swagger"""  # noqa: E501
        self._subject_name = None
        self._name = None
        self._required = None
        self._unit_name = None
        self._max_count = None
        self._popular = None
        self._charc_type = None
        self.discriminator = None
        if subject_name is not None:
            self.subject_name = subject_name
        if name is not None:
            self.name = name
        if required is not None:
            self.required = required
        if unit_name is not None:
            self.unit_name = unit_name
        if max_count is not None:
            self.max_count = max_count
        if popular is not None:
            self.popular = popular
        if charc_type is not None:
            self.charc_type = charc_type

    @property
    def subject_name(self):
        """Gets the subject_name of this InlineResponse2006Data.  # noqa: E501

        Subcategory name  # noqa: E501

        :return: The subject_name of this InlineResponse2006Data.  # noqa: E501
        :rtype: str
        """
        return self._subject_name

    @subject_name.setter
    def subject_name(self, subject_name):
        """Sets the subject_name of this InlineResponse2006Data.

        Subcategory name  # noqa: E501

        :param subject_name: The subject_name of this InlineResponse2006Data.  # noqa: E501
        :type: str
        """

        self._subject_name = subject_name

    @property
    def name(self):
        """Gets the name of this InlineResponse2006Data.  # noqa: E501

        Characteristic name  # noqa: E501

        :return: The name of this InlineResponse2006Data.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse2006Data.

        Characteristic name  # noqa: E501

        :param name: The name of this InlineResponse2006Data.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def required(self):
        """Gets the required of this InlineResponse2006Data.  # noqa: E501

        Characteristic required  # noqa: E501

        :return: The required of this InlineResponse2006Data.  # noqa: E501
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this InlineResponse2006Data.

        Characteristic required  # noqa: E501

        :param required: The required of this InlineResponse2006Data.  # noqa: E501
        :type: bool
        """

        self._required = required

    @property
    def unit_name(self):
        """Gets the unit_name of this InlineResponse2006Data.  # noqa: E501

        Unit (sm, gr and others)  # noqa: E501

        :return: The unit_name of this InlineResponse2006Data.  # noqa: E501
        :rtype: str
        """
        return self._unit_name

    @unit_name.setter
    def unit_name(self, unit_name):
        """Sets the unit_name of this InlineResponse2006Data.

        Unit (sm, gr and others)  # noqa: E501

        :param unit_name: The unit_name of this InlineResponse2006Data.  # noqa: E501
        :type: str
        """

        self._unit_name = unit_name

    @property
    def max_count(self):
        """Gets the max_count of this InlineResponse2006Data.  # noqa: E501

        Max count of values that can be assigned to this characteristic. <br>zero means no limit.   # noqa: E501

        :return: The max_count of this InlineResponse2006Data.  # noqa: E501
        :rtype: int
        """
        return self._max_count

    @max_count.setter
    def max_count(self, max_count):
        """Sets the max_count of this InlineResponse2006Data.

        Max count of values that can be assigned to this characteristic. <br>zero means no limit.   # noqa: E501

        :param max_count: The max_count of this InlineResponse2006Data.  # noqa: E501
        :type: int
        """

        self._max_count = max_count

    @property
    def popular(self):
        """Gets the popular of this InlineResponse2006Data.  # noqa: E501

        The characteristic is popular with users  # noqa: E501

        :return: The popular of this InlineResponse2006Data.  # noqa: E501
        :rtype: bool
        """
        return self._popular

    @popular.setter
    def popular(self, popular):
        """Sets the popular of this InlineResponse2006Data.

        The characteristic is popular with users  # noqa: E501

        :param popular: The popular of this InlineResponse2006Data.  # noqa: E501
        :type: bool
        """

        self._popular = popular

    @property
    def charc_type(self):
        """Gets the charc_type of this InlineResponse2006Data.  # noqa: E501

        Characteristic type (1 and 0 - string or list of strings; 4 - number or list of numbers  # noqa: E501

        :return: The charc_type of this InlineResponse2006Data.  # noqa: E501
        :rtype: int
        """
        return self._charc_type

    @charc_type.setter
    def charc_type(self, charc_type):
        """Sets the charc_type of this InlineResponse2006Data.

        Characteristic type (1 and 0 - string or list of strings; 4 - number or list of numbers  # noqa: E501

        :param charc_type: The charc_type of this InlineResponse2006Data.  # noqa: E501
        :type: int
        """

        self._charc_type = charc_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2006Data, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2006Data):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
