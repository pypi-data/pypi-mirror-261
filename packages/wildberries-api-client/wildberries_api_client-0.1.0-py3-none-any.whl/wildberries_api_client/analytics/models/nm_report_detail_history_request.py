# coding: utf-8

"""
    Seller API Analytics

    **The service provides a public API for obtaining analytical data.**  Analytical data in the source is stored for the past year. When selecting a start date earlier than a year ago, an error will be returned, so the maximum number of days in aggregations is 365.  Also, in the data where information about the previous period is provided: 1. In `previousPeriod`, the data is for the same period as in `selectedPeriod`. 2. If the start date of `previousPeriod` is earlier than a year ago from the current date, it will be adjusted as follows:  `previousPeriod.start = current date - 365 days.`  #### Time Zones  IANA format, the current list can be viewed [here](https://nodatime.org/TimeZones). <br> <br> <br>   # noqa: E501

    OpenAPI spec version: 2.18
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NmReportDetailHistoryRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'nm_i_ds': 'list[int]',
        'period': 'NmReportDetailHistoryRequestPeriod',
        'timezone': 'str',
        'aggregation_level': 'str'
    }

    attribute_map = {
        'nm_i_ds': 'nmIDs',
        'period': 'period',
        'timezone': 'timezone',
        'aggregation_level': 'aggregationLevel'
    }

    def __init__(self, nm_i_ds=None, period=None, timezone=None, aggregation_level=None):  # noqa: E501
        """NmReportDetailHistoryRequest - a model defined in Swagger"""  # noqa: E501
        self._nm_i_ds = None
        self._period = None
        self._timezone = None
        self._aggregation_level = None
        self.discriminator = None
        self.nm_i_ds = nm_i_ds
        self.period = period
        if timezone is not None:
            self.timezone = timezone
        if aggregation_level is not None:
            self.aggregation_level = aggregation_level

    @property
    def nm_i_ds(self):
        """Gets the nm_i_ds of this NmReportDetailHistoryRequest.  # noqa: E501

        WB article (max. 20)  # noqa: E501

        :return: The nm_i_ds of this NmReportDetailHistoryRequest.  # noqa: E501
        :rtype: list[int]
        """
        return self._nm_i_ds

    @nm_i_ds.setter
    def nm_i_ds(self, nm_i_ds):
        """Sets the nm_i_ds of this NmReportDetailHistoryRequest.

        WB article (max. 20)  # noqa: E501

        :param nm_i_ds: The nm_i_ds of this NmReportDetailHistoryRequest.  # noqa: E501
        :type: list[int]
        """
        if nm_i_ds is None:
            raise ValueError("Invalid value for `nm_i_ds`, must not be `None`")  # noqa: E501

        self._nm_i_ds = nm_i_ds

    @property
    def period(self):
        """Gets the period of this NmReportDetailHistoryRequest.  # noqa: E501


        :return: The period of this NmReportDetailHistoryRequest.  # noqa: E501
        :rtype: NmReportDetailHistoryRequestPeriod
        """
        return self._period

    @period.setter
    def period(self, period):
        """Sets the period of this NmReportDetailHistoryRequest.


        :param period: The period of this NmReportDetailHistoryRequest.  # noqa: E501
        :type: NmReportDetailHistoryRequestPeriod
        """
        if period is None:
            raise ValueError("Invalid value for `period`, must not be `None`")  # noqa: E501

        self._period = period

    @property
    def timezone(self):
        """Gets the timezone of this NmReportDetailHistoryRequest.  # noqa: E501

        Timezone.<br> If not specified, the default is Europe/Moscow.   # noqa: E501

        :return: The timezone of this NmReportDetailHistoryRequest.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this NmReportDetailHistoryRequest.

        Timezone.<br> If not specified, the default is Europe/Moscow.   # noqa: E501

        :param timezone: The timezone of this NmReportDetailHistoryRequest.  # noqa: E501
        :type: str
        """

        self._timezone = timezone

    @property
    def aggregation_level(self):
        """Gets the aggregation_level of this NmReportDetailHistoryRequest.  # noqa: E501

        Aggregation Type. If not specified, the default is aggregation by days. <br> Available aggregation levels: `day`, `week`, `month`.   # noqa: E501

        :return: The aggregation_level of this NmReportDetailHistoryRequest.  # noqa: E501
        :rtype: str
        """
        return self._aggregation_level

    @aggregation_level.setter
    def aggregation_level(self, aggregation_level):
        """Sets the aggregation_level of this NmReportDetailHistoryRequest.

        Aggregation Type. If not specified, the default is aggregation by days. <br> Available aggregation levels: `day`, `week`, `month`.   # noqa: E501

        :param aggregation_level: The aggregation_level of this NmReportDetailHistoryRequest.  # noqa: E501
        :type: str
        """

        self._aggregation_level = aggregation_level

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NmReportDetailHistoryRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NmReportDetailHistoryRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
