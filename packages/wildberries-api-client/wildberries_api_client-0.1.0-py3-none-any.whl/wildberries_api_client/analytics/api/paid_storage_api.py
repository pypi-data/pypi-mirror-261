# coding: utf-8

"""
    Seller API Analytics

    **The service provides a public API for obtaining analytical data.**  Analytical data in the source is stored for the past year. When selecting a start date earlier than a year ago, an error will be returned, so the maximum number of days in aggregations is 365.  Also, in the data where information about the previous period is provided: 1. In `previousPeriod`, the data is for the same period as in `selectedPeriod`. 2. If the start date of `previousPeriod` is earlier than a year ago from the current date, it will be adjusted as follows:  `previousPeriod.start = current date - 365 days.`  #### Time Zones  IANA format, the current list can be viewed [here](https://nodatime.org/TimeZones). <br> <br> <br>   # noqa: E501

    OpenAPI spec version: 2.18
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from analytics.api_client import ApiClient


class PaidStorageApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def api_v1_paid_storage_get(self, **kwargs):  # noqa: E501
        """Generate the report  # noqa: E501

        Create a task to generate a report. Maximum report period — 8 days. Maximum 1 request per minute   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_paid_storage_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str date_from: Start of the report period, RFC3339 format. Date or date and time, for example:    * `2019-06-20`   * `2019-06-20T23:59:59`   * `2019-06-20T00:00:00.12345`   * `2017-03-25T00:00:00` 
        :param str date_to: End of the report period, RFC3339 format. Date or date and time, for example:    * `2019-06-20`   * `2019-06-20T23:59:59`   * `2019-06-20T00:00:00.12345`   * `2017-03-25T00:00:00` 
        :return: CreateTaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_paid_storage_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_paid_storage_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v1_paid_storage_get_with_http_info(self, **kwargs):  # noqa: E501
        """Generate the report  # noqa: E501

        Create a task to generate a report. Maximum report period — 8 days. Maximum 1 request per minute   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_paid_storage_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str date_from: Start of the report period, RFC3339 format. Date or date and time, for example:    * `2019-06-20`   * `2019-06-20T23:59:59`   * `2019-06-20T00:00:00.12345`   * `2017-03-25T00:00:00` 
        :param str date_to: End of the report period, RFC3339 format. Date or date and time, for example:    * `2019-06-20`   * `2019-06-20T23:59:59`   * `2019-06-20T00:00:00.12345`   * `2017-03-25T00:00:00` 
        :return: CreateTaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['date_from', 'date_to']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_paid_storage_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'date_from' in params:
            query_params.append(('dateFrom', params['date_from']))  # noqa: E501
        if 'date_to' in params:
            query_params.append(('dateTo', params['date_to']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/paid_storage', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateTaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_paid_storage_tasks_task_id_download_get(self, task_id, **kwargs):  # noqa: E501
        """Get the report  # noqa: E501

        Returns the report by task ID. Maximum 1 request per minute  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_paid_storage_tasks_task_id_download_get(task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str task_id: Task ID  (required)
        :return: ResponsePaidStorage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_paid_storage_tasks_task_id_download_get_with_http_info(task_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_paid_storage_tasks_task_id_download_get_with_http_info(task_id, **kwargs)  # noqa: E501
            return data

    def api_v1_paid_storage_tasks_task_id_download_get_with_http_info(self, task_id, **kwargs):  # noqa: E501
        """Get the report  # noqa: E501

        Returns the report by task ID. Maximum 1 request per minute  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_paid_storage_tasks_task_id_download_get_with_http_info(task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str task_id: Task ID  (required)
        :return: ResponsePaidStorage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['task_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_paid_storage_tasks_task_id_download_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'task_id' is set
        if ('task_id' not in params or
                params['task_id'] is None):
            raise ValueError("Missing the required parameter `task_id` when calling `api_v1_paid_storage_tasks_task_id_download_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'task_id' in params:
            path_params['task_id'] = params['task_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/paid_storage/tasks/{task_id}/download', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponsePaidStorage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_paid_storage_tasks_task_id_status_get(self, task_id, **kwargs):  # noqa: E501
        """Check the status  # noqa: E501

        Returns the status of task. Maximum 1 request per minute  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_paid_storage_tasks_task_id_status_get(task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str task_id: Task ID  (required)
        :return: GetTasksResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_paid_storage_tasks_task_id_status_get_with_http_info(task_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_paid_storage_tasks_task_id_status_get_with_http_info(task_id, **kwargs)  # noqa: E501
            return data

    def api_v1_paid_storage_tasks_task_id_status_get_with_http_info(self, task_id, **kwargs):  # noqa: E501
        """Check the status  # noqa: E501

        Returns the status of task. Maximum 1 request per minute  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_paid_storage_tasks_task_id_status_get_with_http_info(task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str task_id: Task ID  (required)
        :return: GetTasksResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['task_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_paid_storage_tasks_task_id_status_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'task_id' is set
        if ('task_id' not in params or
                params['task_id'] is None):
            raise ValueError("Missing the required parameter `task_id` when calling `api_v1_paid_storage_tasks_task_id_status_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'task_id' in params:
            path_params['task_id'] = params['task_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/paid_storage/tasks/{task_id}/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetTasksResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
