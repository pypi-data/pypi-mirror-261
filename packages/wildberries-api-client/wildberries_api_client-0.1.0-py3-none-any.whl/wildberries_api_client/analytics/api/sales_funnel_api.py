# coding: utf-8

"""
    Seller API Analytics

    **The service provides a public API for obtaining analytical data.**  Analytical data in the source is stored for the past year. When selecting a start date earlier than a year ago, an error will be returned, so the maximum number of days in aggregations is 365.  Also, in the data where information about the previous period is provided: 1. In `previousPeriod`, the data is for the same period as in `selectedPeriod`. 2. If the start date of `previousPeriod` is earlier than a year ago from the current date, it will be adjusted as follows:  `previousPeriod.start = current date - 365 days.`  #### Time Zones  IANA format, the current list can be viewed [here](https://nodatime.org/TimeZones). <br> <br> <br>   # noqa: E501

    OpenAPI spec version: 2.18
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from analytics.api_client import ApiClient


class SalesFunnelApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def content_v1_analytics_nm_report_detail_history_post(self, body, **kwargs):  # noqa: E501
        """Retrieving product card statistics by days/weeks/months for selected nmID(s)  # noqa: E501

        Retrieving product card statistics by days/weeks/months for selected `nmID`(s). <br> <b>3 requests per minute are allowed.</b>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_v1_analytics_nm_report_detail_history_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NmReportDetailHistoryRequest body: (required)
        :return: NmReportDetailHistoryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.content_v1_analytics_nm_report_detail_history_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.content_v1_analytics_nm_report_detail_history_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def content_v1_analytics_nm_report_detail_history_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Retrieving product card statistics by days/weeks/months for selected nmID(s)  # noqa: E501

        Retrieving product card statistics by days/weeks/months for selected `nmID`(s). <br> <b>3 requests per minute are allowed.</b>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_v1_analytics_nm_report_detail_history_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NmReportDetailHistoryRequest body: (required)
        :return: NmReportDetailHistoryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method content_v1_analytics_nm_report_detail_history_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `content_v1_analytics_nm_report_detail_history_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/content/v1/analytics/nm-report/detail/history', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NmReportDetailHistoryResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def content_v1_analytics_nm_report_detail_post(self, body, **kwargs):  # noqa: E501
        """Retrieving product card (PC) statistics for a selected period, based on nmID/items/brands/tags.  # noqa: E501

        Retrieving statistics for product cards (PC) for a selected period, based on nmID/items/brands/tags.<br> The fields `brandNames`, `objectIDs`, `tagIDs`, `nmIDs` can be empty, in which case statistics for all product cards from the seller are included in the response.<br> When multiple fields are selected, the response includes data for cards that have all the selected fields. Pagination is supported. <br> <b>3 requests per minute are allowed.</b>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_v1_analytics_nm_report_detail_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NmReportDetailRequest body: (required)
        :return: NmReportDetailResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.content_v1_analytics_nm_report_detail_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.content_v1_analytics_nm_report_detail_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def content_v1_analytics_nm_report_detail_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Retrieving product card (PC) statistics for a selected period, based on nmID/items/brands/tags.  # noqa: E501

        Retrieving statistics for product cards (PC) for a selected period, based on nmID/items/brands/tags.<br> The fields `brandNames`, `objectIDs`, `tagIDs`, `nmIDs` can be empty, in which case statistics for all product cards from the seller are included in the response.<br> When multiple fields are selected, the response includes data for cards that have all the selected fields. Pagination is supported. <br> <b>3 requests per minute are allowed.</b>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_v1_analytics_nm_report_detail_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NmReportDetailRequest body: (required)
        :return: NmReportDetailResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method content_v1_analytics_nm_report_detail_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `content_v1_analytics_nm_report_detail_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/content/v1/analytics/nm-report/detail', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NmReportDetailResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def content_v1_analytics_nm_report_grouped_history_post(self, body, **kwargs):  # noqa: E501
        """Retrieving product card statistics by days/weeks/months for a period, grouped by items, brands, and tags  # noqa: E501

        Retrieving product card statistics by days/weeks/months for a period, grouped by items, brands, and tags.<br> The fields `brandNames`, `objectIDs`, `tagIDs` can be left empty, in which case grouping is done for all seller's product cards.<br> In the request, the product, brand, and tag count should not exceed 16. <br> <b>3 requests per minute are allowed.</b>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_v1_analytics_nm_report_grouped_history_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NmReportGroupedHistoryRequest body: (required)
        :return: NmReportGroupedHistoryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.content_v1_analytics_nm_report_grouped_history_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.content_v1_analytics_nm_report_grouped_history_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def content_v1_analytics_nm_report_grouped_history_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Retrieving product card statistics by days/weeks/months for a period, grouped by items, brands, and tags  # noqa: E501

        Retrieving product card statistics by days/weeks/months for a period, grouped by items, brands, and tags.<br> The fields `brandNames`, `objectIDs`, `tagIDs` can be left empty, in which case grouping is done for all seller's product cards.<br> In the request, the product, brand, and tag count should not exceed 16. <br> <b>3 requests per minute are allowed.</b>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_v1_analytics_nm_report_grouped_history_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NmReportGroupedHistoryRequest body: (required)
        :return: NmReportGroupedHistoryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method content_v1_analytics_nm_report_grouped_history_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `content_v1_analytics_nm_report_grouped_history_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/content/v1/analytics/nm-report/grouped/history', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NmReportGroupedHistoryResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def content_v1_analytics_nm_report_grouped_post(self, body, **kwargs):  # noqa: E501
        """Retrieving product card statistics for a period, grouped by items, brands, and tags  # noqa: E501

        Retrieving statistics for product cards for a period, grouped by items, brands, and tags.<br> The fields `brandNames`, `objectIDs`, `tagIDs` can be left empty, in which case grouping is done for all product cards from the seller. <br> <b>3 requests per minute are allowed.</b>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_v1_analytics_nm_report_grouped_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NmReportGroupedRequest body: (required)
        :return: NmReportGroupedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.content_v1_analytics_nm_report_grouped_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.content_v1_analytics_nm_report_grouped_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def content_v1_analytics_nm_report_grouped_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Retrieving product card statistics for a period, grouped by items, brands, and tags  # noqa: E501

        Retrieving statistics for product cards for a period, grouped by items, brands, and tags.<br> The fields `brandNames`, `objectIDs`, `tagIDs` can be left empty, in which case grouping is done for all product cards from the seller. <br> <b>3 requests per minute are allowed.</b>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_v1_analytics_nm_report_grouped_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NmReportGroupedRequest body: (required)
        :return: NmReportGroupedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method content_v1_analytics_nm_report_grouped_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `content_v1_analytics_nm_report_grouped_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/content/v1/analytics/nm-report/grouped', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NmReportGroupedResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
