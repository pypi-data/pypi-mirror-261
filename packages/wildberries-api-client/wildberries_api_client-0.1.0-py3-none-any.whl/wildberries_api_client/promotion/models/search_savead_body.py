# coding: utf-8

"""
    Seller API Promotion

    Synchronization from the database runs every 3 minutes.  <br>The status is changed once per 1 minute. During this interval the last status change action will be saved. <br>The bid change takes place once in 30 seconds. Within this interval the last action to change the bid will be saved.   # noqa: E501

    OpenAPI spec version: 2.20
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SearchSaveadBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'campaign_name': 'str',
        'groups': 'list[Advv1searchsaveadGroups]'
    }

    attribute_map = {
        'campaign_name': 'campaignName',
        'groups': 'groups'
    }

    def __init__(self, campaign_name=None, groups=None):  # noqa: E501
        """SearchSaveadBody - a model defined in Swagger"""  # noqa: E501
        self._campaign_name = None
        self._groups = None
        self.discriminator = None
        self.campaign_name = campaign_name
        if groups is not None:
            self.groups = groups

    @property
    def campaign_name(self):
        """Gets the campaign_name of this SearchSaveadBody.  # noqa: E501

        Campaign name (max. 128 characters)  # noqa: E501

        :return: The campaign_name of this SearchSaveadBody.  # noqa: E501
        :rtype: str
        """
        return self._campaign_name

    @campaign_name.setter
    def campaign_name(self, campaign_name):
        """Sets the campaign_name of this SearchSaveadBody.

        Campaign name (max. 128 characters)  # noqa: E501

        :param campaign_name: The campaign_name of this SearchSaveadBody.  # noqa: E501
        :type: str
        """
        if campaign_name is None:
            raise ValueError("Invalid value for `campaign_name`, must not be `None`")  # noqa: E501

        self._campaign_name = campaign_name

    @property
    def groups(self):
        """Gets the groups of this SearchSaveadBody.  # noqa: E501

        The promoted Items. <br> It is possible to add items only with the same subject to the same group.<br> There is no limit to the number of groups in a request.   # noqa: E501

        :return: The groups of this SearchSaveadBody.  # noqa: E501
        :rtype: list[Advv1searchsaveadGroups]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this SearchSaveadBody.

        The promoted Items. <br> It is possible to add items only with the same subject to the same group.<br> There is no limit to the number of groups in a request.   # noqa: E501

        :param groups: The groups of this SearchSaveadBody.  # noqa: E501
        :type: list[Advv1searchsaveadGroups]
        """

        self._groups = groups

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SearchSaveadBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SearchSaveadBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
