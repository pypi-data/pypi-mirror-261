# coding: utf-8

"""
    Seller API Promotion

    Synchronization from the database runs every 3 minutes.  <br>The status is changed once per 1 minute. During this interval the last status change action will be saved. <br>The bid change takes place once in 30 seconds. Within this interval the last action to change the bid will be saved.   # noqa: E501

    OpenAPI spec version: 2.20
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse2003Adverts(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'int',
        'status': 'int',
        'count': 'int'
    }

    attribute_map = {
        'type': 'type',
        'status': 'status',
        'count': 'count'
    }

    def __init__(self, type=None, status=None, count=None):  # noqa: E501
        """InlineResponse2003Adverts - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._status = None
        self._count = None
        self.discriminator = None
        if type is not None:
            self.type = type
        if status is not None:
            self.status = status
        if count is not None:
            self.count = count

    @property
    def type(self):
        """Gets the type of this InlineResponse2003Adverts.  # noqa: E501

        <dl> <dt>Media campaign type:</dt> <dd><code>1</code> — daily basis</dd> <dd><code>2</code> — views basis</dd> </dl>   # noqa: E501

        :return: The type of this InlineResponse2003Adverts.  # noqa: E501
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InlineResponse2003Adverts.

        <dl> <dt>Media campaign type:</dt> <dd><code>1</code> — daily basis</dd> <dd><code>2</code> — views basis</dd> </dl>   # noqa: E501

        :param type: The type of this InlineResponse2003Adverts.  # noqa: E501
        :type: int
        """

        self._type = type

    @property
    def status(self):
        """Gets the status of this InlineResponse2003Adverts.  # noqa: E501

        <dl> <dt>Media campaign status:</dt>   <dd><code>1</code> — template</dd>   <dd><code>2</code> — moderation   <dd><code>3</code> — rejected (with the possibility to resubmit for moderation)</dd>   <dd><code>4</code> — approved</dd>   <dd><code>5</code> — planned</dd>   <dd><code>6</code> — running</dd>   <dd><code>7</code> — completed</dd>   <dd><code>8</code> — refused</dd>   <dd><code>9</code> — paused by seller</dd>   <dd><code>10</code> — paused by daily limit</dd>   <dd><code>11</code> — paused by budget limit</dd> </dl>   # noqa: E501

        :return: The status of this InlineResponse2003Adverts.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InlineResponse2003Adverts.

        <dl> <dt>Media campaign status:</dt>   <dd><code>1</code> — template</dd>   <dd><code>2</code> — moderation   <dd><code>3</code> — rejected (with the possibility to resubmit for moderation)</dd>   <dd><code>4</code> — approved</dd>   <dd><code>5</code> — planned</dd>   <dd><code>6</code> — running</dd>   <dd><code>7</code> — completed</dd>   <dd><code>8</code> — refused</dd>   <dd><code>9</code> — paused by seller</dd>   <dd><code>10</code> — paused by daily limit</dd>   <dd><code>11</code> — paused by budget limit</dd> </dl>   # noqa: E501

        :param status: The status of this InlineResponse2003Adverts.  # noqa: E501
        :type: int
        """

        self._status = status

    @property
    def count(self):
        """Gets the count of this InlineResponse2003Adverts.  # noqa: E501

        Number of media campaigns  # noqa: E501

        :return: The count of this InlineResponse2003Adverts.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this InlineResponse2003Adverts.

        Number of media campaigns  # noqa: E501

        :param count: The count of this InlineResponse2003Adverts.  # noqa: E501
        :type: int
        """

        self._count = count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2003Adverts, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2003Adverts):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
