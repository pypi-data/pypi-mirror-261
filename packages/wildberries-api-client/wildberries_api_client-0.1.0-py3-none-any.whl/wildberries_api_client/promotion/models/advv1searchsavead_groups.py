# coding: utf-8

"""
    Seller API Promotion

    Synchronization from the database runs every 3 minutes.  <br>The status is changed once per 1 minute. During this interval the last status change action will be saved. <br>The bid change takes place once in 30 seconds. Within this interval the last action to change the bid will be saved.   # noqa: E501

    OpenAPI spec version: 2.20
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Advv1searchsaveadGroups(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'nms': 'list[int]',
        'key_word': 'str',
        'subject_id': 'int'
    }

    attribute_map = {
        'nms': 'nms',
        'key_word': 'key_word',
        'subject_id': 'subjectId'
    }

    def __init__(self, nms=None, key_word=None, subject_id=None):  # noqa: E501
        """Advv1searchsaveadGroups - a model defined in Swagger"""  # noqa: E501
        self._nms = None
        self._key_word = None
        self._subject_id = None
        self.discriminator = None
        self.nms = nms
        self.key_word = key_word
        self.subject_id = subject_id

    @property
    def nms(self):
        """Gets the nms of this Advv1searchsaveadGroups.  # noqa: E501

        WB articles.  Max. 50 <code>nm</code> per group.   # noqa: E501

        :return: The nms of this Advv1searchsaveadGroups.  # noqa: E501
        :rtype: list[int]
        """
        return self._nms

    @nms.setter
    def nms(self, nms):
        """Sets the nms of this Advv1searchsaveadGroups.

        WB articles.  Max. 50 <code>nm</code> per group.   # noqa: E501

        :param nms: The nms of this Advv1searchsaveadGroups.  # noqa: E501
        :type: list[int]
        """
        if nms is None:
            raise ValueError("Invalid value for `nms`, must not be `None`")  # noqa: E501

        self._nms = nms

    @property
    def key_word(self):
        """Gets the key_word of this Advv1searchsaveadGroups.  # noqa: E501

        Subject name  # noqa: E501

        :return: The key_word of this Advv1searchsaveadGroups.  # noqa: E501
        :rtype: str
        """
        return self._key_word

    @key_word.setter
    def key_word(self, key_word):
        """Sets the key_word of this Advv1searchsaveadGroups.

        Subject name  # noqa: E501

        :param key_word: The key_word of this Advv1searchsaveadGroups.  # noqa: E501
        :type: str
        """
        if key_word is None:
            raise ValueError("Invalid value for `key_word`, must not be `None`")  # noqa: E501

        self._key_word = key_word

    @property
    def subject_id(self):
        """Gets the subject_id of this Advv1searchsaveadGroups.  # noqa: E501

        Subject ID  # noqa: E501

        :return: The subject_id of this Advv1searchsaveadGroups.  # noqa: E501
        :rtype: int
        """
        return self._subject_id

    @subject_id.setter
    def subject_id(self, subject_id):
        """Sets the subject_id of this Advv1searchsaveadGroups.

        Subject ID  # noqa: E501

        :param subject_id: The subject_id of this Advv1searchsaveadGroups.  # noqa: E501
        :type: int
        """
        if subject_id is None:
            raise ValueError("Invalid value for `subject_id`, must not be `None`")  # noqa: E501

        self._subject_id = subject_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Advv1searchsaveadGroups, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Advv1searchsaveadGroups):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
