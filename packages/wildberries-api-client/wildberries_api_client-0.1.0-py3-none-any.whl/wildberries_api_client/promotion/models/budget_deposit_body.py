# coding: utf-8

"""
    Seller API Promotion

    Synchronization from the database runs every 3 minutes.  <br>The status is changed once per 1 minute. During this interval the last status change action will be saved. <br>The bid change takes place once in 30 seconds. Within this interval the last action to change the bid will be saved.   # noqa: E501

    OpenAPI spec version: 2.20
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BudgetDepositBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sum': 'int',
        'type': 'int',
        '_return': 'bool'
    }

    attribute_map = {
        'sum': 'sum',
        'type': 'type',
        '_return': 'return'
    }

    def __init__(self, sum=None, type=None, _return=None):  # noqa: E501
        """BudgetDepositBody - a model defined in Swagger"""  # noqa: E501
        self._sum = None
        self._type = None
        self.__return = None
        self.discriminator = None
        if sum is not None:
            self.sum = sum
        if type is not None:
            self.type = type
        if _return is not None:
            self._return = _return

    @property
    def sum(self):
        """Gets the sum of this BudgetDepositBody.  # noqa: E501

        Top-up amount (min. 500 ₽)  # noqa: E501

        :return: The sum of this BudgetDepositBody.  # noqa: E501
        :rtype: int
        """
        return self._sum

    @sum.setter
    def sum(self, sum):
        """Sets the sum of this BudgetDepositBody.

        Top-up amount (min. 500 ₽)  # noqa: E501

        :param sum: The sum of this BudgetDepositBody.  # noqa: E501
        :type: int
        """

        self._sum = sum

    @property
    def type(self):
        """Gets the type of this BudgetDepositBody.  # noqa: E501

        <dl> <dt>Type of top-up source:</dt> <dd>`0` - balance</dd> <dd>`1` - net</dd> <dd>`3` - card</dd> </dl>   # noqa: E501

        :return: The type of this BudgetDepositBody.  # noqa: E501
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this BudgetDepositBody.

        <dl> <dt>Type of top-up source:</dt> <dd>`0` - balance</dd> <dd>`1` - net</dd> <dd>`3` - card</dd> </dl>   # noqa: E501

        :param type: The type of this BudgetDepositBody.  # noqa: E501
        :type: int
        """

        self._type = type

    @property
    def _return(self):
        """Gets the _return of this BudgetDepositBody.  # noqa: E501

        Response return flag (`true` means updated campaign budget size will be returned in the response, `false` or empty means nothing will be returned).  # noqa: E501

        :return: The _return of this BudgetDepositBody.  # noqa: E501
        :rtype: bool
        """
        return self.__return

    @_return.setter
    def _return(self, _return):
        """Sets the _return of this BudgetDepositBody.

        Response return flag (`true` means updated campaign budget size will be returned in the response, `false` or empty means nothing will be returned).  # noqa: E501

        :param _return: The _return of this BudgetDepositBody.  # noqa: E501
        :type: bool
        """

        self.__return = _return

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BudgetDepositBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BudgetDepositBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
