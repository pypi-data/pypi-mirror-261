# coding: utf-8

"""
    Seller API Promotion

    Synchronization from the database runs every 3 minutes.  <br>The status is changed once per 1 minute. During this interval the last status change action will be saved. <br>The bid change takes place once in 30 seconds. Within this interval the last action to change the bid will be saved.   # noqa: E501

    OpenAPI spec version: 2.20
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse2008(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'balance': 'int',
        'net': 'int',
        'bonus': 'int'
    }

    attribute_map = {
        'balance': 'balance',
        'net': 'net',
        'bonus': 'bonus'
    }

    def __init__(self, balance=None, net=None, bonus=None):  # noqa: E501
        """InlineResponse2008 - a model defined in Swagger"""  # noqa: E501
        self._balance = None
        self._net = None
        self._bonus = None
        self.discriminator = None
        if balance is not None:
            self.balance = balance
        if net is not None:
            self.net = net
        if bonus is not None:
            self.bonus = bonus

    @property
    def balance(self):
        """Gets the balance of this InlineResponse2008.  # noqa: E501

        Account, russian ruble  # noqa: E501

        :return: The balance of this InlineResponse2008.  # noqa: E501
        :rtype: int
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this InlineResponse2008.

        Account, russian ruble  # noqa: E501

        :param balance: The balance of this InlineResponse2008.  # noqa: E501
        :type: int
        """

        self._balance = balance

    @property
    def net(self):
        """Gets the net of this InlineResponse2008.  # noqa: E501

        Balance, russian ruble  # noqa: E501

        :return: The net of this InlineResponse2008.  # noqa: E501
        :rtype: int
        """
        return self._net

    @net.setter
    def net(self, net):
        """Sets the net of this InlineResponse2008.

        Balance, russian ruble  # noqa: E501

        :param net: The net of this InlineResponse2008.  # noqa: E501
        :type: int
        """

        self._net = net

    @property
    def bonus(self):
        """Gets the bonus of this InlineResponse2008.  # noqa: E501

        Bonuses, russian ruble  # noqa: E501

        :return: The bonus of this InlineResponse2008.  # noqa: E501
        :rtype: int
        """
        return self._bonus

    @bonus.setter
    def bonus(self, bonus):
        """Sets the bonus of this InlineResponse2008.

        Bonuses, russian ruble  # noqa: E501

        :param bonus: The bonus of this InlineResponse2008.  # noqa: E501
        :type: int
        """

        self._bonus = bonus

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2008, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2008):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
