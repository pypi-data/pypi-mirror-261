# coding: utf-8

"""
    Seller API Analytics

    **The service provides a public API for obtaining analytical data.**  Analytical data in the source is stored for the past year. When selecting a start date earlier than a year ago, an error will be returned, so the maximum number of days in aggregations is 365.  Also, in the data where information about the previous period is provided: 1. In `previousPeriod`, the data is for the same period as in `selectedPeriod`. 2. If the start date of `previousPeriod` is earlier than a year ago from the current date, it will be adjusted as follows:  `previousPeriod.start = current date - 365 days.`  #### Time Zones  IANA format, the current list can be viewed [here](https://nodatime.org/TimeZones). <br> <br> <br>   # noqa: E501

    OpenAPI spec version: 2.18
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NmReportGroupedHistoryResponseHistory(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dt': 'date',
        'open_card_count': 'int',
        'add_to_cart_count': 'int',
        'orders_count': 'int',
        'orders_sum_rub': 'int',
        'buyouts_count': 'int',
        'buyouts_sum_rub': 'int',
        'buyout_percent': 'int',
        'add_to_cart_conversion': 'int',
        'cart_to_order_conversion': 'int'
    }

    attribute_map = {
        'dt': 'dt',
        'open_card_count': 'openCardCount',
        'add_to_cart_count': 'addToCartCount',
        'orders_count': 'ordersCount',
        'orders_sum_rub': 'ordersSumRub',
        'buyouts_count': 'buyoutsCount',
        'buyouts_sum_rub': 'buyoutsSumRub',
        'buyout_percent': 'buyoutPercent',
        'add_to_cart_conversion': 'addToCartConversion',
        'cart_to_order_conversion': 'cartToOrderConversion'
    }

    def __init__(self, dt=None, open_card_count=None, add_to_cart_count=None, orders_count=None, orders_sum_rub=None, buyouts_count=None, buyouts_sum_rub=None, buyout_percent=None, add_to_cart_conversion=None, cart_to_order_conversion=None):  # noqa: E501
        """NmReportGroupedHistoryResponseHistory - a model defined in Swagger"""  # noqa: E501
        self._dt = None
        self._open_card_count = None
        self._add_to_cart_count = None
        self._orders_count = None
        self._orders_sum_rub = None
        self._buyouts_count = None
        self._buyouts_sum_rub = None
        self._buyout_percent = None
        self._add_to_cart_conversion = None
        self._cart_to_order_conversion = None
        self.discriminator = None
        if dt is not None:
            self.dt = dt
        if open_card_count is not None:
            self.open_card_count = open_card_count
        if add_to_cart_count is not None:
            self.add_to_cart_count = add_to_cart_count
        if orders_count is not None:
            self.orders_count = orders_count
        if orders_sum_rub is not None:
            self.orders_sum_rub = orders_sum_rub
        if buyouts_count is not None:
            self.buyouts_count = buyouts_count
        if buyouts_sum_rub is not None:
            self.buyouts_sum_rub = buyouts_sum_rub
        if buyout_percent is not None:
            self.buyout_percent = buyout_percent
        if add_to_cart_conversion is not None:
            self.add_to_cart_conversion = add_to_cart_conversion
        if cart_to_order_conversion is not None:
            self.cart_to_order_conversion = cart_to_order_conversion

    @property
    def dt(self):
        """Gets the dt of this NmReportGroupedHistoryResponseHistory.  # noqa: E501


        :return: The dt of this NmReportGroupedHistoryResponseHistory.  # noqa: E501
        :rtype: date
        """
        return self._dt

    @dt.setter
    def dt(self, dt):
        """Sets the dt of this NmReportGroupedHistoryResponseHistory.


        :param dt: The dt of this NmReportGroupedHistoryResponseHistory.  # noqa: E501
        :type: date
        """

        self._dt = dt

    @property
    def open_card_count(self):
        """Gets the open_card_count of this NmReportGroupedHistoryResponseHistory.  # noqa: E501

        Number of clicks on the product card  # noqa: E501

        :return: The open_card_count of this NmReportGroupedHistoryResponseHistory.  # noqa: E501
        :rtype: int
        """
        return self._open_card_count

    @open_card_count.setter
    def open_card_count(self, open_card_count):
        """Sets the open_card_count of this NmReportGroupedHistoryResponseHistory.

        Number of clicks on the product card  # noqa: E501

        :param open_card_count: The open_card_count of this NmReportGroupedHistoryResponseHistory.  # noqa: E501
        :type: int
        """

        self._open_card_count = open_card_count

    @property
    def add_to_cart_count(self):
        """Gets the add_to_cart_count of this NmReportGroupedHistoryResponseHistory.  # noqa: E501

        Added to cart, pieces  # noqa: E501

        :return: The add_to_cart_count of this NmReportGroupedHistoryResponseHistory.  # noqa: E501
        :rtype: int
        """
        return self._add_to_cart_count

    @add_to_cart_count.setter
    def add_to_cart_count(self, add_to_cart_count):
        """Sets the add_to_cart_count of this NmReportGroupedHistoryResponseHistory.

        Added to cart, pieces  # noqa: E501

        :param add_to_cart_count: The add_to_cart_count of this NmReportGroupedHistoryResponseHistory.  # noqa: E501
        :type: int
        """

        self._add_to_cart_count = add_to_cart_count

    @property
    def orders_count(self):
        """Gets the orders_count of this NmReportGroupedHistoryResponseHistory.  # noqa: E501

        Number of ordered items, pieces  # noqa: E501

        :return: The orders_count of this NmReportGroupedHistoryResponseHistory.  # noqa: E501
        :rtype: int
        """
        return self._orders_count

    @orders_count.setter
    def orders_count(self, orders_count):
        """Sets the orders_count of this NmReportGroupedHistoryResponseHistory.

        Number of ordered items, pieces  # noqa: E501

        :param orders_count: The orders_count of this NmReportGroupedHistoryResponseHistory.  # noqa: E501
        :type: int
        """

        self._orders_count = orders_count

    @property
    def orders_sum_rub(self):
        """Gets the orders_sum_rub of this NmReportGroupedHistoryResponseHistory.  # noqa: E501

        Ordered amount in rubles  # noqa: E501

        :return: The orders_sum_rub of this NmReportGroupedHistoryResponseHistory.  # noqa: E501
        :rtype: int
        """
        return self._orders_sum_rub

    @orders_sum_rub.setter
    def orders_sum_rub(self, orders_sum_rub):
        """Sets the orders_sum_rub of this NmReportGroupedHistoryResponseHistory.

        Ordered amount in rubles  # noqa: E501

        :param orders_sum_rub: The orders_sum_rub of this NmReportGroupedHistoryResponseHistory.  # noqa: E501
        :type: int
        """

        self._orders_sum_rub = orders_sum_rub

    @property
    def buyouts_count(self):
        """Gets the buyouts_count of this NmReportGroupedHistoryResponseHistory.  # noqa: E501

        Number of purchased items, pieces  # noqa: E501

        :return: The buyouts_count of this NmReportGroupedHistoryResponseHistory.  # noqa: E501
        :rtype: int
        """
        return self._buyouts_count

    @buyouts_count.setter
    def buyouts_count(self, buyouts_count):
        """Sets the buyouts_count of this NmReportGroupedHistoryResponseHistory.

        Number of purchased items, pieces  # noqa: E501

        :param buyouts_count: The buyouts_count of this NmReportGroupedHistoryResponseHistory.  # noqa: E501
        :type: int
        """

        self._buyouts_count = buyouts_count

    @property
    def buyouts_sum_rub(self):
        """Gets the buyouts_sum_rub of this NmReportGroupedHistoryResponseHistory.  # noqa: E501

        Purchase amount in rubles  # noqa: E501

        :return: The buyouts_sum_rub of this NmReportGroupedHistoryResponseHistory.  # noqa: E501
        :rtype: int
        """
        return self._buyouts_sum_rub

    @buyouts_sum_rub.setter
    def buyouts_sum_rub(self, buyouts_sum_rub):
        """Sets the buyouts_sum_rub of this NmReportGroupedHistoryResponseHistory.

        Purchase amount in rubles  # noqa: E501

        :param buyouts_sum_rub: The buyouts_sum_rub of this NmReportGroupedHistoryResponseHistory.  # noqa: E501
        :type: int
        """

        self._buyouts_sum_rub = buyouts_sum_rub

    @property
    def buyout_percent(self):
        """Gets the buyout_percent of this NmReportGroupedHistoryResponseHistory.  # noqa: E501

        Buyout percentage, % (What percentage of visitors, who ordered the product, actually purchased it. Excluding products still being delivered to the buyer)  # noqa: E501

        :return: The buyout_percent of this NmReportGroupedHistoryResponseHistory.  # noqa: E501
        :rtype: int
        """
        return self._buyout_percent

    @buyout_percent.setter
    def buyout_percent(self, buyout_percent):
        """Sets the buyout_percent of this NmReportGroupedHistoryResponseHistory.

        Buyout percentage, % (What percentage of visitors, who ordered the product, actually purchased it. Excluding products still being delivered to the buyer)  # noqa: E501

        :param buyout_percent: The buyout_percent of this NmReportGroupedHistoryResponseHistory.  # noqa: E501
        :type: int
        """

        self._buyout_percent = buyout_percent

    @property
    def add_to_cart_conversion(self):
        """Gets the add_to_cart_conversion of this NmReportGroupedHistoryResponseHistory.  # noqa: E501

        Conversion to cart, % (What percentage of visitors, who opened the product card, added the product to the cart)  # noqa: E501

        :return: The add_to_cart_conversion of this NmReportGroupedHistoryResponseHistory.  # noqa: E501
        :rtype: int
        """
        return self._add_to_cart_conversion

    @add_to_cart_conversion.setter
    def add_to_cart_conversion(self, add_to_cart_conversion):
        """Sets the add_to_cart_conversion of this NmReportGroupedHistoryResponseHistory.

        Conversion to cart, % (What percentage of visitors, who opened the product card, added the product to the cart)  # noqa: E501

        :param add_to_cart_conversion: The add_to_cart_conversion of this NmReportGroupedHistoryResponseHistory.  # noqa: E501
        :type: int
        """

        self._add_to_cart_conversion = add_to_cart_conversion

    @property
    def cart_to_order_conversion(self):
        """Gets the cart_to_order_conversion of this NmReportGroupedHistoryResponseHistory.  # noqa: E501

        Conversion to order, % (What percentage of visitors, who added the product to the cart, placed an order)  # noqa: E501

        :return: The cart_to_order_conversion of this NmReportGroupedHistoryResponseHistory.  # noqa: E501
        :rtype: int
        """
        return self._cart_to_order_conversion

    @cart_to_order_conversion.setter
    def cart_to_order_conversion(self, cart_to_order_conversion):
        """Sets the cart_to_order_conversion of this NmReportGroupedHistoryResponseHistory.

        Conversion to order, % (What percentage of visitors, who added the product to the cart, placed an order)  # noqa: E501

        :param cart_to_order_conversion: The cart_to_order_conversion of this NmReportGroupedHistoryResponseHistory.  # noqa: E501
        :type: int
        """

        self._cart_to_order_conversion = cart_to_order_conversion

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NmReportGroupedHistoryResponseHistory, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NmReportGroupedHistoryResponseHistory):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
