# coding: utf-8

"""
    Seller API Analytics

    **The service provides a public API for obtaining analytical data.**  Analytical data in the source is stored for the past year. When selecting a start date earlier than a year ago, an error will be returned, so the maximum number of days in aggregations is 365.  Also, in the data where information about the previous period is provided: 1. In `previousPeriod`, the data is for the same period as in `selectedPeriod`. 2. If the start date of `previousPeriod` is earlier than a year ago from the current date, it will be adjusted as follows:  `previousPeriod.start = current date - 365 days.`  #### Time Zones  IANA format, the current list can be viewed [here](https://nodatime.org/TimeZones). <br> <br> <br>   # noqa: E501

    OpenAPI spec version: 2.18
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NmReportDetailResponseDataObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'statistics': 'NmReportDetailResponseDataObjectStatistics',
        'previous_period': 'NmReportDetailResponseDataObjectPreviousPeriod',
        'period_comparison': 'NmReportDetailResponseDataObjectPeriodComparison'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'statistics': 'statistics',
        'previous_period': 'previousPeriod',
        'period_comparison': 'periodComparison'
    }

    def __init__(self, id=None, name=None, statistics=None, previous_period=None, period_comparison=None):  # noqa: E501
        """NmReportDetailResponseDataObject - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._statistics = None
        self._previous_period = None
        self._period_comparison = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if statistics is not None:
            self.statistics = statistics
        if previous_period is not None:
            self.previous_period = previous_period
        if period_comparison is not None:
            self.period_comparison = period_comparison

    @property
    def id(self):
        """Gets the id of this NmReportDetailResponseDataObject.  # noqa: E501

        Item Identifier  # noqa: E501

        :return: The id of this NmReportDetailResponseDataObject.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NmReportDetailResponseDataObject.

        Item Identifier  # noqa: E501

        :param id: The id of this NmReportDetailResponseDataObject.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this NmReportDetailResponseDataObject.  # noqa: E501

        Item Name  # noqa: E501

        :return: The name of this NmReportDetailResponseDataObject.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NmReportDetailResponseDataObject.

        Item Name  # noqa: E501

        :param name: The name of this NmReportDetailResponseDataObject.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def statistics(self):
        """Gets the statistics of this NmReportDetailResponseDataObject.  # noqa: E501


        :return: The statistics of this NmReportDetailResponseDataObject.  # noqa: E501
        :rtype: NmReportDetailResponseDataObjectStatistics
        """
        return self._statistics

    @statistics.setter
    def statistics(self, statistics):
        """Sets the statistics of this NmReportDetailResponseDataObject.


        :param statistics: The statistics of this NmReportDetailResponseDataObject.  # noqa: E501
        :type: NmReportDetailResponseDataObjectStatistics
        """

        self._statistics = statistics

    @property
    def previous_period(self):
        """Gets the previous_period of this NmReportDetailResponseDataObject.  # noqa: E501


        :return: The previous_period of this NmReportDetailResponseDataObject.  # noqa: E501
        :rtype: NmReportDetailResponseDataObjectPreviousPeriod
        """
        return self._previous_period

    @previous_period.setter
    def previous_period(self, previous_period):
        """Sets the previous_period of this NmReportDetailResponseDataObject.


        :param previous_period: The previous_period of this NmReportDetailResponseDataObject.  # noqa: E501
        :type: NmReportDetailResponseDataObjectPreviousPeriod
        """

        self._previous_period = previous_period

    @property
    def period_comparison(self):
        """Gets the period_comparison of this NmReportDetailResponseDataObject.  # noqa: E501


        :return: The period_comparison of this NmReportDetailResponseDataObject.  # noqa: E501
        :rtype: NmReportDetailResponseDataObjectPeriodComparison
        """
        return self._period_comparison

    @period_comparison.setter
    def period_comparison(self, period_comparison):
        """Sets the period_comparison of this NmReportDetailResponseDataObject.


        :param period_comparison: The period_comparison of this NmReportDetailResponseDataObject.  # noqa: E501
        :type: NmReportDetailResponseDataObjectPeriodComparison
        """

        self._period_comparison = period_comparison

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NmReportDetailResponseDataObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NmReportDetailResponseDataObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
