# coding: utf-8

"""
    Seller API Analytics

    **The service provides a public API for obtaining analytical data.**  Analytical data in the source is stored for the past year. When selecting a start date earlier than a year ago, an error will be returned, so the maximum number of days in aggregations is 365.  Also, in the data where information about the previous period is provided: 1. In `previousPeriod`, the data is for the same period as in `selectedPeriod`. 2. If the start date of `previousPeriod` is earlier than a year ago from the current date, it will be adjusted as follows:  `previousPeriod.start = current date - 365 days.`  #### Time Zones  IANA format, the current list can be viewed [here](https://nodatime.org/TimeZones). <br> <br> <br>   # noqa: E501

    OpenAPI spec version: 2.18
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NmReportDetailRequestOrderBy(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'field': 'str',
        'mode': 'str'
    }

    attribute_map = {
        'field': 'field',
        'mode': 'mode'
    }

    def __init__(self, field=None, mode=None):  # noqa: E501
        """NmReportDetailRequestOrderBy - a model defined in Swagger"""  # noqa: E501
        self._field = None
        self._mode = None
        self.discriminator = None
        if field is not None:
            self.field = field
        if mode is not None:
            self.mode = mode

    @property
    def field(self):
        """Gets the field of this NmReportDetailRequestOrderBy.  # noqa: E501

        Sort type  # noqa: E501

        :return: The field of this NmReportDetailRequestOrderBy.  # noqa: E501
        :rtype: str
        """
        return self._field

    @field.setter
    def field(self, field):
        """Sets the field of this NmReportDetailRequestOrderBy.

        Sort type  # noqa: E501

        :param field: The field of this NmReportDetailRequestOrderBy.  # noqa: E501
        :type: str
        """

        self._field = field

    @property
    def mode(self):
        """Gets the mode of this NmReportDetailRequestOrderBy.  # noqa: E501

        `asc` - ascending, `desc` - descending   # noqa: E501

        :return: The mode of this NmReportDetailRequestOrderBy.  # noqa: E501
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this NmReportDetailRequestOrderBy.

        `asc` - ascending, `desc` - descending   # noqa: E501

        :param mode: The mode of this NmReportDetailRequestOrderBy.  # noqa: E501
        :type: str
        """

        self._mode = mode

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NmReportDetailRequestOrderBy, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NmReportDetailRequestOrderBy):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
