# coding: utf-8

"""
    Seller API Content

    Queries limits: <dd>Maximum of 100 requests per minute to all Content methods are allowed.</dd> <br> Public API for Content is designed for server-to-server data synchronization between Wildberries and Suppliers. <br> You download data from Wildberries to your computing resources for further operating it. <br> <code>It is not allowed to use the Content API as an external database. If you exceed the requests limits, access to the API will be restricted.</code> <br> <br> <br>   # noqa: E501

    OpenAPI spec version: 2.18
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from wildberries_api_client.content.api_client import ApiClient


class ConfiguratorApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def content_v1_directory_tnved_get(self, **kwargs):  # noqa: E501
        """HS code  # noqa: E501

        Method provides list of HS codes by category name and filter by HS code.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_v1_directory_tnved_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_name: Search by category name
        :param str tnveds_like: Search by HS code. <b>This parameter only works in conjunction with the objectName parameter.</b>
        :param str locale: Language of `subjectName` and `name` (ru, en, zh)  
        :return: InlineResponse20011
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.content_v1_directory_tnved_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.content_v1_directory_tnved_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def content_v1_directory_tnved_get_with_http_info(self, **kwargs):  # noqa: E501
        """HS code  # noqa: E501

        Method provides list of HS codes by category name and filter by HS code.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_v1_directory_tnved_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_name: Search by category name
        :param str tnveds_like: Search by HS code. <b>This parameter only works in conjunction with the objectName parameter.</b>
        :param str locale: Language of `subjectName` and `name` (ru, en, zh)  
        :return: InlineResponse20011
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_name', 'tnveds_like', 'locale']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method content_v1_directory_tnved_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'object_name' in params:
            query_params.append(('objectName', params['object_name']))  # noqa: E501
        if 'tnveds_like' in params:
            query_params.append(('tnvedsLike', params['tnveds_like']))  # noqa: E501
        if 'locale' in params:
            query_params.append(('locale', params['locale']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/content/v1/directory/tnved', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20011',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def content_v2_directory_colors_get(self, **kwargs):  # noqa: E501
        """Color  # noqa: E501

        Provides values of color characteristic.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_v2_directory_colors_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str locale: Language of `subjectName` and `name` (ru, en, zh)  
        :return: InlineResponse2007
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.content_v2_directory_colors_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.content_v2_directory_colors_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def content_v2_directory_colors_get_with_http_info(self, **kwargs):  # noqa: E501
        """Color  # noqa: E501

        Provides values of color characteristic.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_v2_directory_colors_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str locale: Language of `subjectName` and `name` (ru, en, zh)  
        :return: InlineResponse2007
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['locale']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method content_v2_directory_colors_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'locale' in params:
            query_params.append(('locale', params['locale']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/content/v2/directory/colors', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2007',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def content_v2_directory_countries_get(self, **kwargs):  # noqa: E501
        """Country of origin  # noqa: E501

        Provides value of characteristic country of origin.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_v2_directory_countries_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str locale: Language of `subjectName` and `name` (ru, en, zh)  
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.content_v2_directory_countries_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.content_v2_directory_countries_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def content_v2_directory_countries_get_with_http_info(self, **kwargs):  # noqa: E501
        """Country of origin  # noqa: E501

        Provides value of characteristic country of origin.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_v2_directory_countries_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str locale: Language of `subjectName` and `name` (ru, en, zh)  
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['locale']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method content_v2_directory_countries_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'locale' in params:
            query_params.append(('locale', params['locale']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/content/v2/directory/countries', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2009',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def content_v2_directory_kinds_get(self, **kwargs):  # noqa: E501
        """Gender  # noqa: E501

        Provides values of sex characteristic.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_v2_directory_kinds_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str locale: Language of `subjectName` and `name` (ru, en, zh)  
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.content_v2_directory_kinds_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.content_v2_directory_kinds_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def content_v2_directory_kinds_get_with_http_info(self, **kwargs):  # noqa: E501
        """Gender  # noqa: E501

        Provides values of sex characteristic.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_v2_directory_kinds_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str locale: Language of `subjectName` and `name` (ru, en, zh)  
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['locale']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method content_v2_directory_kinds_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'locale' in params:
            query_params.append(('locale', params['locale']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/content/v2/directory/kinds', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2008',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def content_v2_directory_seasons_get(self, **kwargs):  # noqa: E501
        """Season  # noqa: E501

        Provide values of season characteristic.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_v2_directory_seasons_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str locale: Language of `subjectName` and `name` (ru, en, zh)  
        :return: InlineResponse20010
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.content_v2_directory_seasons_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.content_v2_directory_seasons_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def content_v2_directory_seasons_get_with_http_info(self, **kwargs):  # noqa: E501
        """Season  # noqa: E501

        Provide values of season characteristic.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_v2_directory_seasons_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str locale: Language of `subjectName` and `name` (ru, en, zh)  
        :return: InlineResponse20010
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['locale']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method content_v2_directory_seasons_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'locale' in params:
            query_params.append(('locale', params['locale']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/content/v2/directory/seasons', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20010',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def content_v2_object_all_get(self, **kwargs):  # noqa: E501
        """Product category list  # noqa: E501

        Using this method, you can get a list of product categories by a text filter (category name). <br> <br> To get a list of all categories, you need to specify “top” parameter bigger than available quantity of categories (eg `top=8000`) <br> <br> As of `03/27/2023`, there are `7440` categories in the list. The number of available categories may change.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_v2_object_all_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name:
        :param int limit:
        :param str locale:
        :param int offset:
        :param int parent_id:
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.content_v2_object_all_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.content_v2_object_all_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def content_v2_object_all_get_with_http_info(self, **kwargs):  # noqa: E501
        """Product category list  # noqa: E501

        Using this method, you can get a list of product categories by a text filter (category name). <br> <br> To get a list of all categories, you need to specify “top” parameter bigger than available quantity of categories (eg `top=8000`) <br> <br> As of `03/27/2023`, there are `7440` categories in the list. The number of available categories may change.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_v2_object_all_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name:
        :param int limit:
        :param str locale:
        :param int offset:
        :param int parent_id:
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'limit', 'locale', 'offset', 'parent_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method content_v2_object_all_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'locale' in params:
            query_params.append(('locale', params['locale']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'parent_id' in params:
            query_params.append(('parentID', params['parent_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/content/v2/object/all', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2005',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def content_v2_object_charcs_subject_id_get(self, subject_id, **kwargs):  # noqa: E501
        """Subcategory  # noqa: E501

        Returns subcategory characteristics to create product card    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_v2_object_charcs_subject_id_get(subject_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int subject_id: Subcategory ID (required)
        :param str locale: Language of `subjectName` and `name` (ru, en, zh)
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.content_v2_object_charcs_subject_id_get_with_http_info(subject_id, **kwargs)  # noqa: E501
        else:
            (data) = self.content_v2_object_charcs_subject_id_get_with_http_info(subject_id, **kwargs)  # noqa: E501
            return data

    def content_v2_object_charcs_subject_id_get_with_http_info(self, subject_id, **kwargs):  # noqa: E501
        """Subcategory  # noqa: E501

        Returns subcategory characteristics to create product card    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_v2_object_charcs_subject_id_get_with_http_info(subject_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int subject_id: Subcategory ID (required)
        :param str locale: Language of `subjectName` and `name` (ru, en, zh)
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['subject_id', 'locale']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method content_v2_object_charcs_subject_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'subject_id' is set
        if ('subject_id' not in params or
                params['subject_id'] is None):
            raise ValueError("Missing the required parameter `subject_id` when calling `content_v2_object_charcs_subject_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'subject_id' in params:
            path_params['subjectId'] = params['subject_id']  # noqa: E501

        query_params = []
        if 'locale' in params:
            query_params.append(('locale', params['locale']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/content/v2/object/charcs/{subjectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2006',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def content_v2_object_parent_all_get(self, **kwargs):  # noqa: E501
        """Parent categories list  # noqa: E501

        Method provides list of all parent categories of products.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_v2_object_parent_all_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str locale: Product name language (ru, en, zh)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.content_v2_object_parent_all_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.content_v2_object_parent_all_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def content_v2_object_parent_all_get_with_http_info(self, **kwargs):  # noqa: E501
        """Parent categories list  # noqa: E501

        Method provides list of all parent categories of products.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_v2_object_parent_all_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str locale: Product name language (ru, en, zh)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['locale']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method content_v2_object_parent_all_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'locale' in params:
            query_params.append(('locale', params['locale']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/content/v2/object/parent/all', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2004',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
