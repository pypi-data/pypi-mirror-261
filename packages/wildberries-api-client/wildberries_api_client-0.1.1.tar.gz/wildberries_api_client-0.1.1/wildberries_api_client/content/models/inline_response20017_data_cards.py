# coding: utf-8

"""
    Seller API Content

    Queries limits: <dd>Maximum of 100 requests per minute to all Content methods are allowed.</dd> <br> Public API for Content is designed for server-to-server data synchronization between Wildberries and Suppliers. <br> You download data from Wildberries to your computing resources for further operating it. <br> <code>It is not allowed to use the Content API as an external database. If you exceed the requests limits, access to the API will be restricted.</code> <br> <br> <br>   # noqa: E501

    OpenAPI spec version: 2.18
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20017DataCards(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'nm_id': 'int',
        'object_id': 'int',
        'vendor_code': 'str',
        'object': 'str',
        'brand': 'str',
        'update_at': 'str',
        'colors': 'list[str]',
        'media_files': 'list[str]',
        'sizes': 'list[InlineResponse20017DataSizes]'
    }

    attribute_map = {
        'nm_id': 'nmID',
        'object_id': 'objectID',
        'vendor_code': 'vendorCode',
        'object': 'object',
        'brand': 'brand',
        'update_at': 'updateAt',
        'colors': 'colors',
        'media_files': 'mediaFiles',
        'sizes': 'sizes'
    }

    def __init__(self, nm_id=None, object_id=None, vendor_code=None, object=None, brand=None, update_at=None, colors=None, media_files=None, sizes=None):  # noqa: E501
        """InlineResponse20017DataCards - a model defined in Swagger"""  # noqa: E501
        self._nm_id = None
        self._object_id = None
        self._vendor_code = None
        self._object = None
        self._brand = None
        self._update_at = None
        self._colors = None
        self._media_files = None
        self._sizes = None
        self.discriminator = None
        if nm_id is not None:
            self.nm_id = nm_id
        if object_id is not None:
            self.object_id = object_id
        if vendor_code is not None:
            self.vendor_code = vendor_code
        if object is not None:
            self.object = object
        if brand is not None:
            self.brand = brand
        if update_at is not None:
            self.update_at = update_at
        if colors is not None:
            self.colors = colors
        if media_files is not None:
            self.media_files = media_files
        if sizes is not None:
            self.sizes = sizes

    @property
    def nm_id(self):
        """Gets the nm_id of this InlineResponse20017DataCards.  # noqa: E501

        WB article  # noqa: E501

        :return: The nm_id of this InlineResponse20017DataCards.  # noqa: E501
        :rtype: int
        """
        return self._nm_id

    @nm_id.setter
    def nm_id(self, nm_id):
        """Sets the nm_id of this InlineResponse20017DataCards.

        WB article  # noqa: E501

        :param nm_id: The nm_id of this InlineResponse20017DataCards.  # noqa: E501
        :type: int
        """

        self._nm_id = nm_id

    @property
    def object_id(self):
        """Gets the object_id of this InlineResponse20017DataCards.  # noqa: E501

        Product ID  # noqa: E501

        :return: The object_id of this InlineResponse20017DataCards.  # noqa: E501
        :rtype: int
        """
        return self._object_id

    @object_id.setter
    def object_id(self, object_id):
        """Sets the object_id of this InlineResponse20017DataCards.

        Product ID  # noqa: E501

        :param object_id: The object_id of this InlineResponse20017DataCards.  # noqa: E501
        :type: int
        """

        self._object_id = object_id

    @property
    def vendor_code(self):
        """Gets the vendor_code of this InlineResponse20017DataCards.  # noqa: E501

        Supplier's article  # noqa: E501

        :return: The vendor_code of this InlineResponse20017DataCards.  # noqa: E501
        :rtype: str
        """
        return self._vendor_code

    @vendor_code.setter
    def vendor_code(self, vendor_code):
        """Sets the vendor_code of this InlineResponse20017DataCards.

        Supplier's article  # noqa: E501

        :param vendor_code: The vendor_code of this InlineResponse20017DataCards.  # noqa: E501
        :type: str
        """

        self._vendor_code = vendor_code

    @property
    def object(self):
        """Gets the object of this InlineResponse20017DataCards.  # noqa: E501

        The category for which the product card was created with this nomenclature  # noqa: E501

        :return: The object of this InlineResponse20017DataCards.  # noqa: E501
        :rtype: str
        """
        return self._object

    @object.setter
    def object(self, object):
        """Sets the object of this InlineResponse20017DataCards.

        The category for which the product card was created with this nomenclature  # noqa: E501

        :param object: The object of this InlineResponse20017DataCards.  # noqa: E501
        :type: str
        """

        self._object = object

    @property
    def brand(self):
        """Gets the brand of this InlineResponse20017DataCards.  # noqa: E501

        Brand  # noqa: E501

        :return: The brand of this InlineResponse20017DataCards.  # noqa: E501
        :rtype: str
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this InlineResponse20017DataCards.

        Brand  # noqa: E501

        :param brand: The brand of this InlineResponse20017DataCards.  # noqa: E501
        :type: str
        """

        self._brand = brand

    @property
    def update_at(self):
        """Gets the update_at of this InlineResponse20017DataCards.  # noqa: E501

        The date of update  # noqa: E501

        :return: The update_at of this InlineResponse20017DataCards.  # noqa: E501
        :rtype: str
        """
        return self._update_at

    @update_at.setter
    def update_at(self, update_at):
        """Sets the update_at of this InlineResponse20017DataCards.

        The date of update  # noqa: E501

        :param update_at: The update_at of this InlineResponse20017DataCards.  # noqa: E501
        :type: str
        """

        self._update_at = update_at

    @property
    def colors(self):
        """Gets the colors of this InlineResponse20017DataCards.  # noqa: E501

        Nomenclature color  # noqa: E501

        :return: The colors of this InlineResponse20017DataCards.  # noqa: E501
        :rtype: list[str]
        """
        return self._colors

    @colors.setter
    def colors(self, colors):
        """Sets the colors of this InlineResponse20017DataCards.

        Nomenclature color  # noqa: E501

        :param colors: The colors of this InlineResponse20017DataCards.  # noqa: E501
        :type: list[str]
        """

        self._colors = colors

    @property
    def media_files(self):
        """Gets the media_files of this InlineResponse20017DataCards.  # noqa: E501

        Media files of the nomenclature. <br>A photo whose URL ends with <b>1.jpg</b> is the main one in the product card.   # noqa: E501

        :return: The media_files of this InlineResponse20017DataCards.  # noqa: E501
        :rtype: list[str]
        """
        return self._media_files

    @media_files.setter
    def media_files(self, media_files):
        """Sets the media_files of this InlineResponse20017DataCards.

        Media files of the nomenclature. <br>A photo whose URL ends with <b>1.jpg</b> is the main one in the product card.   # noqa: E501

        :param media_files: The media_files of this InlineResponse20017DataCards.  # noqa: E501
        :type: list[str]
        """

        self._media_files = media_files

    @property
    def sizes(self):
        """Gets the sizes of this InlineResponse20017DataCards.  # noqa: E501

        Array of sizes for the nomenclature (for dimensionless goods you still need to pass this array with one element and zero size, but with price and barcode)   # noqa: E501

        :return: The sizes of this InlineResponse20017DataCards.  # noqa: E501
        :rtype: list[InlineResponse20017DataSizes]
        """
        return self._sizes

    @sizes.setter
    def sizes(self, sizes):
        """Sets the sizes of this InlineResponse20017DataCards.

        Array of sizes for the nomenclature (for dimensionless goods you still need to pass this array with one element and zero size, but with price and barcode)   # noqa: E501

        :param sizes: The sizes of this InlineResponse20017DataCards.  # noqa: E501
        :type: list[InlineResponse20017DataSizes]
        """

        self._sizes = sizes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20017DataCards, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20017DataCards):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
