# coding: utf-8

"""
    Seller API Promotion

    Synchronization from the database runs every 3 minutes.  <br>The status is changed once per 1 minute. During this interval the last status change action will be saved. <br>The bid change takes place once in 30 seconds. Within this interval the last action to change the bid will be saved.   # noqa: E501

    OpenAPI spec version: 2.20
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from wildberries_api_client.promotion.api_client import ApiClient


class MediaApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def adv_v1_advert_get(self, id, **kwargs):  # noqa: E501
        """Information about media campaign  # noqa: E501

        The method allows to get information about a single media campaign   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v1_advert_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Media campaign ID (required)
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.adv_v1_advert_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.adv_v1_advert_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def adv_v1_advert_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Information about media campaign  # noqa: E501

        The method allows to get information about a single media campaign   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v1_advert_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Media campaign ID (required)
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method adv_v1_advert_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `adv_v1_advert_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/adv/v1/advert', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2005',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def adv_v1_adverts_get(self, **kwargs):  # noqa: E501
        """List of media campaigns  # noqa: E501

        The method allows to get the list of media campaigns of the seller   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v1_adverts_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int status: <dl> <dt>Media campaign status:</dt>   <dd><code>1</code> — template</dd>   <dd><code>2</code> — moderation   <dd><code>3</code> — rejected (with the possibility to resubmit for moderation)</dd>   <dd><code>4</code> — approved</dd>   <dd><code>5</code> — planned</dd>   <dd><code>6</code> — running</dd>   <dd><code>7</code> — completed</dd>   <dd><code>8</code> — refused</dd>   <dd><code>9</code> — paused by seller</dd>   <dd><code>10</code> — paused by daily limit</dd>   <dd><code>11</code> — paused by budget limit</dd> </dl> 
        :param int type: <dl> <dt>Media campaign type:</dt> <dd><code>1</code> — daily basis</dd> <dd><code>2</code> — views basis</dd> </dl> 
        :param int limit: Number of campaigns in the response
        :param int offset: Offset relative to the first media campaign
        :param str order: <dl> <dt>The order in which the response is displayed:</dt> <dd><code>create</code> — by time of media campaign creation</dd> <dd><code>id</code> — by ID of media campaign creation</dd> </dl> 
        :param str direction: <dl> <dt>Sorting order:</dt> <dd><code>desc</code> — upward</dd> <dd><code>asc</code> — smaller to largerу</dd>             </dl> 
        :return: list[InlineResponse2004]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.adv_v1_adverts_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.adv_v1_adverts_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def adv_v1_adverts_get_with_http_info(self, **kwargs):  # noqa: E501
        """List of media campaigns  # noqa: E501

        The method allows to get the list of media campaigns of the seller   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v1_adverts_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int status: <dl> <dt>Media campaign status:</dt>   <dd><code>1</code> — template</dd>   <dd><code>2</code> — moderation   <dd><code>3</code> — rejected (with the possibility to resubmit for moderation)</dd>   <dd><code>4</code> — approved</dd>   <dd><code>5</code> — planned</dd>   <dd><code>6</code> — running</dd>   <dd><code>7</code> — completed</dd>   <dd><code>8</code> — refused</dd>   <dd><code>9</code> — paused by seller</dd>   <dd><code>10</code> — paused by daily limit</dd>   <dd><code>11</code> — paused by budget limit</dd> </dl> 
        :param int type: <dl> <dt>Media campaign type:</dt> <dd><code>1</code> — daily basis</dd> <dd><code>2</code> — views basis</dd> </dl> 
        :param int limit: Number of campaigns in the response
        :param int offset: Offset relative to the first media campaign
        :param str order: <dl> <dt>The order in which the response is displayed:</dt> <dd><code>create</code> — by time of media campaign creation</dd> <dd><code>id</code> — by ID of media campaign creation</dd> </dl> 
        :param str direction: <dl> <dt>Sorting order:</dt> <dd><code>desc</code> — upward</dd> <dd><code>asc</code> — smaller to largerу</dd>             </dl> 
        :return: list[InlineResponse2004]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['status', 'type', 'limit', 'offset', 'order', 'direction']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method adv_v1_adverts_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501
        if 'direction' in params:
            query_params.append(('direction', params['direction']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/adv/v1/adverts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[InlineResponse2004]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def adv_v1_count_get(self, **kwargs):  # noqa: E501
        """Getting media campaigns  # noqa: E501

        The method allows to get the number of media campaigns of a seller   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v1_count_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.adv_v1_count_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.adv_v1_count_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def adv_v1_count_get_with_http_info(self, **kwargs):  # noqa: E501
        """Getting media campaigns  # noqa: E501

        The method allows to get the number of media campaigns of a seller   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v1_count_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method adv_v1_count_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/adv/v1/count', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2003',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def adv_v1_stats_post(self, body, **kwargs):  # noqa: E501
        """Media Campaign Statistics  # noqa: E501

        The method allows to get statistics of media campaigns. <span class=\"newM\">new</span>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v1_stats_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1StatsBody body: (required)
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.adv_v1_stats_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.adv_v1_stats_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def adv_v1_stats_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Media Campaign Statistics  # noqa: E501

        The method allows to get statistics of media campaigns. <span class=\"newM\">new</span>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v1_stats_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1StatsBody body: (required)
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method adv_v1_stats_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `adv_v1_stats_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/adv/v1/stats', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[object]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
