# coding: utf-8

"""
    Seller API Promotion

    Synchronization from the database runs every 3 minutes.  <br>The status is changed once per 1 minute. During this interval the last status change action will be saved. <br>The bid change takes place once in 30 seconds. Within this interval the last action to change the bid will be saved.   # noqa: E501

    OpenAPI spec version: 2.20
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from wildberries_api_client.promotion.api_client import ApiClient


class BidsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def adv_v0_allcpm_post(self, body, type, **kwargs):  # noqa: E501
        """List of rates by type of campaign placement  # noqa: E501

        The method allows to get a list of bids by type of campaign placement.<br> It is not possible to change the bid using this method. <br>5 requests per second are allowed.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v0_allcpm_post(body, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V0AllcpmBody body: (required)
        :param int type: <dl>   <dt>Type of campaign:</dt>   <dd><code>4</code> - campaign in catalogue</dd>   <dd><code>5</code> - campaign in content</dd>   <dd><code>6</code> - campaign in search</dd>   <dd><code>7</code> - campaign on main page recommendations</dd> </dl>  (required)
        :return: list[InlineResponse2007]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.adv_v0_allcpm_post_with_http_info(body, type, **kwargs)  # noqa: E501
        else:
            (data) = self.adv_v0_allcpm_post_with_http_info(body, type, **kwargs)  # noqa: E501
            return data

    def adv_v0_allcpm_post_with_http_info(self, body, type, **kwargs):  # noqa: E501
        """List of rates by type of campaign placement  # noqa: E501

        The method allows to get a list of bids by type of campaign placement.<br> It is not possible to change the bid using this method. <br>5 requests per second are allowed.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v0_allcpm_post_with_http_info(body, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V0AllcpmBody body: (required)
        :param int type: <dl>   <dt>Type of campaign:</dt>   <dd><code>4</code> - campaign in catalogue</dd>   <dd><code>5</code> - campaign in content</dd>   <dd><code>6</code> - campaign in search</dd>   <dd><code>7</code> - campaign on main page recommendations</dd> </dl>  (required)
        :return: list[InlineResponse2007]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method adv_v0_allcpm_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `adv_v0_allcpm_post`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `adv_v0_allcpm_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/adv/v0/allcpm', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[InlineResponse2007]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def adv_v0_cpm_get(self, type, param, **kwargs):  # noqa: E501
        """Prices list  # noqa: E501

        Prices list. <br>List is sorted in descending order. <br>5 requests per second are allowed.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v0_cpm_get(type, param, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int type: <dl>   <dt>Type of campaign:</dt>   <dd><code>4</code> - campaign in catalogue</dd>   <dd><code>5</code> - campaign in content</dd>   <dd><code>6</code> - campaign in search</dd>   <dd><code>7</code> - campaign on main page recommendations</dd> </dl>  (required)
        :param int param: Request type to choose campaigns with active prices. <br>Should be `menuId`, `subjectId` or `setId` depending on campaign type. <br>You can get it by using method Information about campaign.  (required)
        :return: list[InlineResponse2006]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.adv_v0_cpm_get_with_http_info(type, param, **kwargs)  # noqa: E501
        else:
            (data) = self.adv_v0_cpm_get_with_http_info(type, param, **kwargs)  # noqa: E501
            return data

    def adv_v0_cpm_get_with_http_info(self, type, param, **kwargs):  # noqa: E501
        """Prices list  # noqa: E501

        Prices list. <br>List is sorted in descending order. <br>5 requests per second are allowed.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v0_cpm_get_with_http_info(type, param, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int type: <dl>   <dt>Type of campaign:</dt>   <dd><code>4</code> - campaign in catalogue</dd>   <dd><code>5</code> - campaign in content</dd>   <dd><code>6</code> - campaign in search</dd>   <dd><code>7</code> - campaign on main page recommendations</dd> </dl>  (required)
        :param int param: Request type to choose campaigns with active prices. <br>Should be `menuId`, `subjectId` or `setId` depending on campaign type. <br>You can get it by using method Information about campaign.  (required)
        :return: list[InlineResponse2006]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['type', 'param']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method adv_v0_cpm_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `adv_v0_cpm_get`")  # noqa: E501
        # verify the required parameter 'param' is set
        if ('param' not in params or
                params['param'] is None):
            raise ValueError("Missing the required parameter `param` when calling `adv_v0_cpm_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'param' in params:
            query_params.append(('param', params['param']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/adv/v0/cpm', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[InlineResponse2006]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def adv_v0_cpm_post(self, body, **kwargs):  # noqa: E501
        """Campaign price update  # noqa: E501

        Campaign price update<br> The changed bid will appear in the campaign information within 3 minutes.<br> A maximum of 300 requests per minute is allowed.<br> <br> `Important!` If the rate to be set is less than the allowable rate, the status code 422 (Rate size not changed) will be returned.<br> Information about changes to the minimum rate is published in the News section, on the Seller Portal.<br> <br>  `Important!` The procedure for filling in the parameters `type`, `instrument`, `param` when changing the rate for a campaign with type 9 (search + catalogue): <br> For 'type' it is necessary to specify the value 9 (always). <br> A value of 4 or 6 should be specified for 'instrument', depending on whether the rate is to be changed in the catalogue or in the search. <br> For 'param' it is necessary to specify the value of the <b>id</b> field from the <b>subject</b> structure response of the \"Information about campaign\" method, regardless of whether the rate is changed in the catalogue or in the search. <br><br>  `Important!` If only Search is available in the Search + Catalogue campaign, it will not be possible to set a bid in the Catalogue (`instrument` = 4). Status code 422 will be received in response.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v0_cpm_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V0CpmBody body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.adv_v0_cpm_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.adv_v0_cpm_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def adv_v0_cpm_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Campaign price update  # noqa: E501

        Campaign price update<br> The changed bid will appear in the campaign information within 3 minutes.<br> A maximum of 300 requests per minute is allowed.<br> <br> `Important!` If the rate to be set is less than the allowable rate, the status code 422 (Rate size not changed) will be returned.<br> Information about changes to the minimum rate is published in the News section, on the Seller Portal.<br> <br>  `Important!` The procedure for filling in the parameters `type`, `instrument`, `param` when changing the rate for a campaign with type 9 (search + catalogue): <br> For 'type' it is necessary to specify the value 9 (always). <br> A value of 4 or 6 should be specified for 'instrument', depending on whether the rate is to be changed in the catalogue or in the search. <br> For 'param' it is necessary to specify the value of the <b>id</b> field from the <b>subject</b> structure response of the \"Information about campaign\" method, regardless of whether the rate is changed in the catalogue or in the search. <br><br>  `Important!` If only Search is available in the Search + Catalogue campaign, it will not be possible to set a bid in the Catalogue (`instrument` = 4). Status code 422 will be received in response.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v0_cpm_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V0CpmBody body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method adv_v0_cpm_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `adv_v0_cpm_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/adv/v0/cpm', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
