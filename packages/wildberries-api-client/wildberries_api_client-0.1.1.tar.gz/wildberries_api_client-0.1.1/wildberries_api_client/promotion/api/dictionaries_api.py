# coding: utf-8

"""
    Seller API Promotion

    Synchronization from the database runs every 3 minutes.  <br>The status is changed once per 1 minute. During this interval the last status change action will be saved. <br>The bid change takes place once in 30 seconds. Within this interval the last action to change the bid will be saved.   # noqa: E501

    OpenAPI spec version: 2.20
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from wildberries_api_client.promotion.api_client import ApiClient


class DictionariesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def adv_v0_params_menu_get(self, **kwargs):  # noqa: E501
        """Dictionary of menuId parameter values  # noqa: E501

        The method allows to get a list of values for the <code>menuId</code> parameter. <br>5 requests per second are allowed.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v0_params_menu_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The ID of the menu where the campaign is placed (for a directory campaign). <br> Takes the value of the `menuId` parameter from the campaign. <br> An empty parameter will return the entire list of existing values. 
        :return: list[InlineResponse20014]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.adv_v0_params_menu_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.adv_v0_params_menu_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def adv_v0_params_menu_get_with_http_info(self, **kwargs):  # noqa: E501
        """Dictionary of menuId parameter values  # noqa: E501

        The method allows to get a list of values for the <code>menuId</code> parameter. <br>5 requests per second are allowed.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v0_params_menu_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The ID of the menu where the campaign is placed (for a directory campaign). <br> Takes the value of the `menuId` parameter from the campaign. <br> An empty parameter will return the entire list of existing values. 
        :return: list[InlineResponse20014]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method adv_v0_params_menu_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/adv/v0/params/menu', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[InlineResponse20014]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def adv_v0_params_set_get(self, **kwargs):  # noqa: E501
        """The setId parameter value dictionary  # noqa: E501

        The method allows to get a list of values for the <code>setId</code> parameter.<br> 5 requests per second are allowed.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v0_params_set_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Item and gender combination identifier (for campaigns in the product card). <br> Takes the value of the `setId` parameter from the campaign <br> An empty parameter will return the entire list of existing values. 
        :return: list[InlineResponse20015]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.adv_v0_params_set_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.adv_v0_params_set_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def adv_v0_params_set_get_with_http_info(self, **kwargs):  # noqa: E501
        """The setId parameter value dictionary  # noqa: E501

        The method allows to get a list of values for the <code>setId</code> parameter.<br> 5 requests per second are allowed.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v0_params_set_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Item and gender combination identifier (for campaigns in the product card). <br> Takes the value of the `setId` parameter from the campaign <br> An empty parameter will return the entire list of existing values. 
        :return: list[InlineResponse20015]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method adv_v0_params_set_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/adv/v0/params/set', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[InlineResponse20015]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def adv_v0_params_subject_get(self, **kwargs):  # noqa: E501
        """Dictionary of the subjectId parameter values  # noqa: E501

        The method allows to get a list of <code>subjectId</code> parameter values.<br> <br>5 requests per second are allowed.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v0_params_subject_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The ID of the object group for which the campaign is created (for search and recommendation campaigns). <br> Takes the value of the `subjectId` parameter from the campaign. <br> An empty parameter will return the entire list of existing values. 
        :return: list[InlineResponse20013]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.adv_v0_params_subject_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.adv_v0_params_subject_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def adv_v0_params_subject_get_with_http_info(self, **kwargs):  # noqa: E501
        """Dictionary of the subjectId parameter values  # noqa: E501

        The method allows to get a list of <code>subjectId</code> parameter values.<br> <br>5 requests per second are allowed.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v0_params_subject_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The ID of the object group for which the campaign is created (for search and recommendation campaigns). <br> Takes the value of the `subjectId` parameter from the campaign. <br> An empty parameter will return the entire list of existing values. 
        :return: list[InlineResponse20013]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method adv_v0_params_subject_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/adv/v0/params/subject', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[InlineResponse20013]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def adv_v1_supplier_nms_get(self, subject, **kwargs):  # noqa: E501
        """Getting the list of vendor's nomenclatures by item  # noqa: E501

        The method allows to get the list of WB Articles (`nmId`) of the vendor by item ID. <span class=\"newM\">new</span><br> A maximum of 60 requests per minute is allowed.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v1_supplier_nms_get(subject, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int subject: Item ID (max. 1 value) (required)
        :return: list[InlineResponse20018]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.adv_v1_supplier_nms_get_with_http_info(subject, **kwargs)  # noqa: E501
        else:
            (data) = self.adv_v1_supplier_nms_get_with_http_info(subject, **kwargs)  # noqa: E501
            return data

    def adv_v1_supplier_nms_get_with_http_info(self, subject, **kwargs):  # noqa: E501
        """Getting the list of vendor's nomenclatures by item  # noqa: E501

        The method allows to get the list of WB Articles (`nmId`) of the vendor by item ID. <span class=\"newM\">new</span><br> A maximum of 60 requests per minute is allowed.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v1_supplier_nms_get_with_http_info(subject, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int subject: Item ID (max. 1 value) (required)
        :return: list[InlineResponse20018]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['subject']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method adv_v1_supplier_nms_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'subject' is set
        if ('subject' not in params or
                params['subject'] is None):
            raise ValueError("Missing the required parameter `subject` when calling `adv_v1_supplier_nms_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'subject' in params:
            query_params.append(('subject', params['subject']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/adv/v1/supplier/nms', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[InlineResponse20018]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def adv_v1_supplier_subjects_get(self, **kwargs):  # noqa: E501
        """Subjects (subcategories) for campaigns  # noqa: E501

        Returns subjects nomenclatures from which are available for all campaigns. Maximum 1 request per 12 seconds.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v1_supplier_subjects_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[InlineResponse20016]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.adv_v1_supplier_subjects_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.adv_v1_supplier_subjects_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def adv_v1_supplier_subjects_get_with_http_info(self, **kwargs):  # noqa: E501
        """Subjects (subcategories) for campaigns  # noqa: E501

        Returns subjects nomenclatures from which are available for all campaigns. Maximum 1 request per 12 seconds.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v1_supplier_subjects_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[InlineResponse20016]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method adv_v1_supplier_subjects_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/adv/v1/supplier/subjects', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[InlineResponse20016]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def adv_v2_supplier_nms_post(self, **kwargs):  # noqa: E501
        """Nomenclatures for campaigns  # noqa: E501

        Returns nomenclatures that are available for all campaigns.  <span class=\"newM\">new</span><br> Maximum 5 requests per minute   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v2_supplier_nms_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] body: ID of subjects (subcategories) to get nomenclatures
        :return: list[InlineResponse20017]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.adv_v2_supplier_nms_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.adv_v2_supplier_nms_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def adv_v2_supplier_nms_post_with_http_info(self, **kwargs):  # noqa: E501
        """Nomenclatures for campaigns  # noqa: E501

        Returns nomenclatures that are available for all campaigns.  <span class=\"newM\">new</span><br> Maximum 5 requests per minute   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v2_supplier_nms_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] body: ID of subjects (subcategories) to get nomenclatures
        :return: list[InlineResponse20017]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method adv_v2_supplier_nms_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/adv/v2/supplier/nms', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[InlineResponse20017]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
