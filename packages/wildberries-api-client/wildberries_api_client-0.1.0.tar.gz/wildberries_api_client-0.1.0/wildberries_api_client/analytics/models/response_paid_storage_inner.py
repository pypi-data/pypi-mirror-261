# coding: utf-8

"""
    Seller API Analytics

    **The service provides a public API for obtaining analytical data.**  Analytical data in the source is stored for the past year. When selecting a start date earlier than a year ago, an error will be returned, so the maximum number of days in aggregations is 365.  Also, in the data where information about the previous period is provided: 1. In `previousPeriod`, the data is for the same period as in `selectedPeriod`. 2. If the start date of `previousPeriod` is earlier than a year ago from the current date, it will be adjusted as follows:  `previousPeriod.start = current date - 365 days.`  #### Time Zones  IANA format, the current list can be viewed [here](https://nodatime.org/TimeZones). <br> <br> <br>   # noqa: E501

    OpenAPI spec version: 2.18
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ResponsePaidStorageInner(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_date': 'str',
        'log_warehouse_coef': 'int',
        'office_id': 'int',
        'warehouse': 'str',
        'warehouse_coef': 'float',
        'gi_id': 'int',
        'chrt_id': 'int',
        'size': 'str',
        'barcode': 'str',
        'subject': 'str',
        'brand': 'str',
        'vendor_code': 'str',
        'nm_id': 'int',
        'volume': 'float',
        'calc_type': 'str',
        'warehouse_price': 'float',
        'barcodes_count': 'int',
        'pallet_place_code': 'int',
        'pallet_count': 'float'
    }

    attribute_map = {
        '_date': 'date',
        'log_warehouse_coef': 'logWarehouseCoef',
        'office_id': 'officeId',
        'warehouse': 'warehouse',
        'warehouse_coef': 'warehouseCoef',
        'gi_id': 'giId',
        'chrt_id': 'chrtId',
        'size': 'size',
        'barcode': 'barcode',
        'subject': 'subject',
        'brand': 'brand',
        'vendor_code': 'vendorCode',
        'nm_id': 'nmId',
        'volume': 'volume',
        'calc_type': 'calcType',
        'warehouse_price': 'warehousePrice',
        'barcodes_count': 'barcodesCount',
        'pallet_place_code': 'palletPlaceCode',
        'pallet_count': 'palletCount'
    }

    def __init__(self, _date=None, log_warehouse_coef=None, office_id=None, warehouse=None, warehouse_coef=None, gi_id=None, chrt_id=None, size=None, barcode=None, subject=None, brand=None, vendor_code=None, nm_id=None, volume=None, calc_type=None, warehouse_price=None, barcodes_count=None, pallet_place_code=None, pallet_count=None):  # noqa: E501
        """ResponsePaidStorageInner - a model defined in Swagger"""  # noqa: E501
        self.__date = None
        self._log_warehouse_coef = None
        self._office_id = None
        self._warehouse = None
        self._warehouse_coef = None
        self._gi_id = None
        self._chrt_id = None
        self._size = None
        self._barcode = None
        self._subject = None
        self._brand = None
        self._vendor_code = None
        self._nm_id = None
        self._volume = None
        self._calc_type = None
        self._warehouse_price = None
        self._barcodes_count = None
        self._pallet_place_code = None
        self._pallet_count = None
        self.discriminator = None
        if _date is not None:
            self._date = _date
        if log_warehouse_coef is not None:
            self.log_warehouse_coef = log_warehouse_coef
        if office_id is not None:
            self.office_id = office_id
        if warehouse is not None:
            self.warehouse = warehouse
        if warehouse_coef is not None:
            self.warehouse_coef = warehouse_coef
        if gi_id is not None:
            self.gi_id = gi_id
        if chrt_id is not None:
            self.chrt_id = chrt_id
        if size is not None:
            self.size = size
        if barcode is not None:
            self.barcode = barcode
        if subject is not None:
            self.subject = subject
        if brand is not None:
            self.brand = brand
        if vendor_code is not None:
            self.vendor_code = vendor_code
        if nm_id is not None:
            self.nm_id = nm_id
        if volume is not None:
            self.volume = volume
        if calc_type is not None:
            self.calc_type = calc_type
        if warehouse_price is not None:
            self.warehouse_price = warehouse_price
        if barcodes_count is not None:
            self.barcodes_count = barcodes_count
        if pallet_place_code is not None:
            self.pallet_place_code = pallet_place_code
        if pallet_count is not None:
            self.pallet_count = pallet_count

    @property
    def _date(self):
        """Gets the _date of this ResponsePaidStorageInner.  # noqa: E501

        Date  # noqa: E501

        :return: The _date of this ResponsePaidStorageInner.  # noqa: E501
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this ResponsePaidStorageInner.

        Date  # noqa: E501

        :param _date: The _date of this ResponsePaidStorageInner.  # noqa: E501
        :type: str
        """

        self.__date = _date

    @property
    def log_warehouse_coef(self):
        """Gets the log_warehouse_coef of this ResponsePaidStorageInner.  # noqa: E501

        Logistics and storage coefficient  # noqa: E501

        :return: The log_warehouse_coef of this ResponsePaidStorageInner.  # noqa: E501
        :rtype: int
        """
        return self._log_warehouse_coef

    @log_warehouse_coef.setter
    def log_warehouse_coef(self, log_warehouse_coef):
        """Sets the log_warehouse_coef of this ResponsePaidStorageInner.

        Logistics and storage coefficient  # noqa: E501

        :param log_warehouse_coef: The log_warehouse_coef of this ResponsePaidStorageInner.  # noqa: E501
        :type: int
        """

        self._log_warehouse_coef = log_warehouse_coef

    @property
    def office_id(self):
        """Gets the office_id of this ResponsePaidStorageInner.  # noqa: E501

        Warehouse ID  # noqa: E501

        :return: The office_id of this ResponsePaidStorageInner.  # noqa: E501
        :rtype: int
        """
        return self._office_id

    @office_id.setter
    def office_id(self, office_id):
        """Sets the office_id of this ResponsePaidStorageInner.

        Warehouse ID  # noqa: E501

        :param office_id: The office_id of this ResponsePaidStorageInner.  # noqa: E501
        :type: int
        """

        self._office_id = office_id

    @property
    def warehouse(self):
        """Gets the warehouse of this ResponsePaidStorageInner.  # noqa: E501

        Warehouse name  # noqa: E501

        :return: The warehouse of this ResponsePaidStorageInner.  # noqa: E501
        :rtype: str
        """
        return self._warehouse

    @warehouse.setter
    def warehouse(self, warehouse):
        """Sets the warehouse of this ResponsePaidStorageInner.

        Warehouse name  # noqa: E501

        :param warehouse: The warehouse of this ResponsePaidStorageInner.  # noqa: E501
        :type: str
        """

        self._warehouse = warehouse

    @property
    def warehouse_coef(self):
        """Gets the warehouse_coef of this ResponsePaidStorageInner.  # noqa: E501

        Warehouse coefficient  # noqa: E501

        :return: The warehouse_coef of this ResponsePaidStorageInner.  # noqa: E501
        :rtype: float
        """
        return self._warehouse_coef

    @warehouse_coef.setter
    def warehouse_coef(self, warehouse_coef):
        """Sets the warehouse_coef of this ResponsePaidStorageInner.

        Warehouse coefficient  # noqa: E501

        :param warehouse_coef: The warehouse_coef of this ResponsePaidStorageInner.  # noqa: E501
        :type: float
        """

        self._warehouse_coef = warehouse_coef

    @property
    def gi_id(self):
        """Gets the gi_id of this ResponsePaidStorageInner.  # noqa: E501

        Shipment ID  # noqa: E501

        :return: The gi_id of this ResponsePaidStorageInner.  # noqa: E501
        :rtype: int
        """
        return self._gi_id

    @gi_id.setter
    def gi_id(self, gi_id):
        """Sets the gi_id of this ResponsePaidStorageInner.

        Shipment ID  # noqa: E501

        :param gi_id: The gi_id of this ResponsePaidStorageInner.  # noqa: E501
        :type: int
        """

        self._gi_id = gi_id

    @property
    def chrt_id(self):
        """Gets the chrt_id of this ResponsePaidStorageInner.  # noqa: E501

        Size ID  # noqa: E501

        :return: The chrt_id of this ResponsePaidStorageInner.  # noqa: E501
        :rtype: int
        """
        return self._chrt_id

    @chrt_id.setter
    def chrt_id(self, chrt_id):
        """Sets the chrt_id of this ResponsePaidStorageInner.

        Size ID  # noqa: E501

        :param chrt_id: The chrt_id of this ResponsePaidStorageInner.  # noqa: E501
        :type: int
        """

        self._chrt_id = chrt_id

    @property
    def size(self):
        """Gets the size of this ResponsePaidStorageInner.  # noqa: E501

        Size (`techSize` in product card)  # noqa: E501

        :return: The size of this ResponsePaidStorageInner.  # noqa: E501
        :rtype: str
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this ResponsePaidStorageInner.

        Size (`techSize` in product card)  # noqa: E501

        :param size: The size of this ResponsePaidStorageInner.  # noqa: E501
        :type: str
        """

        self._size = size

    @property
    def barcode(self):
        """Gets the barcode of this ResponsePaidStorageInner.  # noqa: E501

        Barcode  # noqa: E501

        :return: The barcode of this ResponsePaidStorageInner.  # noqa: E501
        :rtype: str
        """
        return self._barcode

    @barcode.setter
    def barcode(self, barcode):
        """Sets the barcode of this ResponsePaidStorageInner.

        Barcode  # noqa: E501

        :param barcode: The barcode of this ResponsePaidStorageInner.  # noqa: E501
        :type: str
        """

        self._barcode = barcode

    @property
    def subject(self):
        """Gets the subject of this ResponsePaidStorageInner.  # noqa: E501

        Subject (subcategory)  # noqa: E501

        :return: The subject of this ResponsePaidStorageInner.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this ResponsePaidStorageInner.

        Subject (subcategory)  # noqa: E501

        :param subject: The subject of this ResponsePaidStorageInner.  # noqa: E501
        :type: str
        """

        self._subject = subject

    @property
    def brand(self):
        """Gets the brand of this ResponsePaidStorageInner.  # noqa: E501

        Brand  # noqa: E501

        :return: The brand of this ResponsePaidStorageInner.  # noqa: E501
        :rtype: str
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this ResponsePaidStorageInner.

        Brand  # noqa: E501

        :param brand: The brand of this ResponsePaidStorageInner.  # noqa: E501
        :type: str
        """

        self._brand = brand

    @property
    def vendor_code(self):
        """Gets the vendor_code of this ResponsePaidStorageInner.  # noqa: E501

        Seller's article  # noqa: E501

        :return: The vendor_code of this ResponsePaidStorageInner.  # noqa: E501
        :rtype: str
        """
        return self._vendor_code

    @vendor_code.setter
    def vendor_code(self, vendor_code):
        """Sets the vendor_code of this ResponsePaidStorageInner.

        Seller's article  # noqa: E501

        :param vendor_code: The vendor_code of this ResponsePaidStorageInner.  # noqa: E501
        :type: str
        """

        self._vendor_code = vendor_code

    @property
    def nm_id(self):
        """Gets the nm_id of this ResponsePaidStorageInner.  # noqa: E501

        Wildberries article  # noqa: E501

        :return: The nm_id of this ResponsePaidStorageInner.  # noqa: E501
        :rtype: int
        """
        return self._nm_id

    @nm_id.setter
    def nm_id(self, nm_id):
        """Sets the nm_id of this ResponsePaidStorageInner.

        Wildberries article  # noqa: E501

        :param nm_id: The nm_id of this ResponsePaidStorageInner.  # noqa: E501
        :type: int
        """

        self._nm_id = nm_id

    @property
    def volume(self):
        """Gets the volume of this ResponsePaidStorageInner.  # noqa: E501

        Product volume  # noqa: E501

        :return: The volume of this ResponsePaidStorageInner.  # noqa: E501
        :rtype: float
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this ResponsePaidStorageInner.

        Product volume  # noqa: E501

        :param volume: The volume of this ResponsePaidStorageInner.  # noqa: E501
        :type: float
        """

        self._volume = volume

    @property
    def calc_type(self):
        """Gets the calc_type of this ResponsePaidStorageInner.  # noqa: E501

        Calculation type  # noqa: E501

        :return: The calc_type of this ResponsePaidStorageInner.  # noqa: E501
        :rtype: str
        """
        return self._calc_type

    @calc_type.setter
    def calc_type(self, calc_type):
        """Sets the calc_type of this ResponsePaidStorageInner.

        Calculation type  # noqa: E501

        :param calc_type: The calc_type of this ResponsePaidStorageInner.  # noqa: E501
        :type: str
        """

        self._calc_type = calc_type

    @property
    def warehouse_price(self):
        """Gets the warehouse_price of this ResponsePaidStorageInner.  # noqa: E501

        Storage price  # noqa: E501

        :return: The warehouse_price of this ResponsePaidStorageInner.  # noqa: E501
        :rtype: float
        """
        return self._warehouse_price

    @warehouse_price.setter
    def warehouse_price(self, warehouse_price):
        """Sets the warehouse_price of this ResponsePaidStorageInner.

        Storage price  # noqa: E501

        :param warehouse_price: The warehouse_price of this ResponsePaidStorageInner.  # noqa: E501
        :type: float
        """

        self._warehouse_price = warehouse_price

    @property
    def barcodes_count(self):
        """Gets the barcodes_count of this ResponsePaidStorageInner.  # noqa: E501

        Chargeable  product units in the warehouse, in the last 24 hours  # noqa: E501

        :return: The barcodes_count of this ResponsePaidStorageInner.  # noqa: E501
        :rtype: int
        """
        return self._barcodes_count

    @barcodes_count.setter
    def barcodes_count(self, barcodes_count):
        """Sets the barcodes_count of this ResponsePaidStorageInner.

        Chargeable  product units in the warehouse, in the last 24 hours  # noqa: E501

        :param barcodes_count: The barcodes_count of this ResponsePaidStorageInner.  # noqa: E501
        :type: int
        """

        self._barcodes_count = barcodes_count

    @property
    def pallet_place_code(self):
        """Gets the pallet_place_code of this ResponsePaidStorageInner.  # noqa: E501

        Pallet place code  # noqa: E501

        :return: The pallet_place_code of this ResponsePaidStorageInner.  # noqa: E501
        :rtype: int
        """
        return self._pallet_place_code

    @pallet_place_code.setter
    def pallet_place_code(self, pallet_place_code):
        """Sets the pallet_place_code of this ResponsePaidStorageInner.

        Pallet place code  # noqa: E501

        :param pallet_place_code: The pallet_place_code of this ResponsePaidStorageInner.  # noqa: E501
        :type: int
        """

        self._pallet_place_code = pallet_place_code

    @property
    def pallet_count(self):
        """Gets the pallet_count of this ResponsePaidStorageInner.  # noqa: E501

        Количество палет  # noqa: E501

        :return: The pallet_count of this ResponsePaidStorageInner.  # noqa: E501
        :rtype: float
        """
        return self._pallet_count

    @pallet_count.setter
    def pallet_count(self, pallet_count):
        """Sets the pallet_count of this ResponsePaidStorageInner.

        Количество палет  # noqa: E501

        :param pallet_count: The pallet_count of this ResponsePaidStorageInner.  # noqa: E501
        :type: float
        """

        self._pallet_count = pallet_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ResponsePaidStorageInner, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResponsePaidStorageInner):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
