# coding: utf-8

"""
    Seller API Content

    Queries limits: <dd>Maximum of 100 requests per minute to all Content methods are allowed.</dd> <br> Public API for Content is designed for server-to-server data synchronization between Wildberries and Suppliers. <br> You download data from Wildberries to your computing resources for further operating it. <br> <code>It is not allowed to use the Content API as an external database. If you exceed the requests limits, access to the API will be restricted.</code> <br> <br> <br>   # noqa: E501

    OpenAPI spec version: 2.18
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from content.api_client import ApiClient


class MediaFilesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def content_v2_media_file_post(self, uploadfile, x_vendor_code, x_photo_number, **kwargs):  # noqa: E501
        """Adding media content to the product card  # noqa: E501

        The method allows you to upload and add one media file per request, to the nomenclature in the product card. <br>Media files requirements: <br>`Photo`: minimum resolution - 700x900. <br>The maximum allowable number of images in the product card is 30. <br>Acceptable image formats are jpg and png. <br>The minimum image quality level is 65%. <br>`Video`: maximum size 50 mb. MOV, MP4 formats. <br>The maximum allowable number of videos in the product card is 1.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_v2_media_file_post(uploadfile, x_vendor_code, x_photo_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uploadfile: (required)
        :param str x_vendor_code: Supplier's article (required)
        :param int x_photo_number: The number of the media file to download. <b>Begins from 1</b>.<br> When uploading a video, always set the value to 1. <br>To add an image to those already uploaded to the nomenclature, the number of the media file must be greater than the number of media files uploaded to the nomenclature..  (required)
        :return: InlineResponse20012
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.content_v2_media_file_post_with_http_info(uploadfile, x_vendor_code, x_photo_number, **kwargs)  # noqa: E501
        else:
            (data) = self.content_v2_media_file_post_with_http_info(uploadfile, x_vendor_code, x_photo_number, **kwargs)  # noqa: E501
            return data

    def content_v2_media_file_post_with_http_info(self, uploadfile, x_vendor_code, x_photo_number, **kwargs):  # noqa: E501
        """Adding media content to the product card  # noqa: E501

        The method allows you to upload and add one media file per request, to the nomenclature in the product card. <br>Media files requirements: <br>`Photo`: minimum resolution - 700x900. <br>The maximum allowable number of images in the product card is 30. <br>Acceptable image formats are jpg and png. <br>The minimum image quality level is 65%. <br>`Video`: maximum size 50 mb. MOV, MP4 formats. <br>The maximum allowable number of videos in the product card is 1.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_v2_media_file_post_with_http_info(uploadfile, x_vendor_code, x_photo_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uploadfile: (required)
        :param str x_vendor_code: Supplier's article (required)
        :param int x_photo_number: The number of the media file to download. <b>Begins from 1</b>.<br> When uploading a video, always set the value to 1. <br>To add an image to those already uploaded to the nomenclature, the number of the media file must be greater than the number of media files uploaded to the nomenclature..  (required)
        :return: InlineResponse20012
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uploadfile', 'x_vendor_code', 'x_photo_number']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method content_v2_media_file_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uploadfile' is set
        if ('uploadfile' not in params or
                params['uploadfile'] is None):
            raise ValueError("Missing the required parameter `uploadfile` when calling `content_v2_media_file_post`")  # noqa: E501
        # verify the required parameter 'x_vendor_code' is set
        if ('x_vendor_code' not in params or
                params['x_vendor_code'] is None):
            raise ValueError("Missing the required parameter `x_vendor_code` when calling `content_v2_media_file_post`")  # noqa: E501
        # verify the required parameter 'x_photo_number' is set
        if ('x_photo_number' not in params or
                params['x_photo_number'] is None):
            raise ValueError("Missing the required parameter `x_photo_number` when calling `content_v2_media_file_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_vendor_code' in params:
            header_params['X-Vendor-Code'] = params['x_vendor_code']  # noqa: E501
        if 'x_photo_number' in params:
            header_params['X-Photo-Number'] = params['x_photo_number']  # noqa: E501

        form_params = []
        local_var_files = {}
        if 'uploadfile' in params:
            local_var_files['uploadfile'] = params['uploadfile']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/content/v2/media/file', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20012',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def content_v2_media_save_post(self, body, **kwargs):  # noqa: E501
        """Changing the media content of the product card  # noqa: E501

        The method allows you to change the order of images or delete media files with nomenclature in product card, as well as upload images to the nomenclature from third-party resources by URL. <br>The current images will be replaced by those transferred in the data array. <br> <br>Media files requirements: <br>`Photo`: minimum resolution - 700x900. <br>The maximum allowable number of images in the product card is 30. <br>Acceptable image formats are jpg and png. <br>The minimum image quality level is 65%. <br>  <br>If at least one image in the request does not meet the requirements for media files, then even with the 200 response code no image will be loaded into the product card.<br>  <br>`IMPORTANT:` The contents of the `data` array completely replace the contents of the `mediaFiles` array in the product card. <br>In case of addition of photos to the already existing ones in the product card, it is necessary to transfer all links to the photos and videos already contained in the product card together with the new ones in the request. Otherwise, only the transferred photos will remain in the card.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_v2_media_save_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MediaSaveBody1 body: (required)
        :return: InlineResponse20012
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.content_v2_media_save_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.content_v2_media_save_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def content_v2_media_save_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Changing the media content of the product card  # noqa: E501

        The method allows you to change the order of images or delete media files with nomenclature in product card, as well as upload images to the nomenclature from third-party resources by URL. <br>The current images will be replaced by those transferred in the data array. <br> <br>Media files requirements: <br>`Photo`: minimum resolution - 700x900. <br>The maximum allowable number of images in the product card is 30. <br>Acceptable image formats are jpg and png. <br>The minimum image quality level is 65%. <br>  <br>If at least one image in the request does not meet the requirements for media files, then even with the 200 response code no image will be loaded into the product card.<br>  <br>`IMPORTANT:` The contents of the `data` array completely replace the contents of the `mediaFiles` array in the product card. <br>In case of addition of photos to the already existing ones in the product card, it is necessary to transfer all links to the photos and videos already contained in the product card together with the new ones in the request. Otherwise, only the transferred photos will remain in the card.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_v2_media_save_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MediaSaveBody1 body: (required)
        :return: InlineResponse20012
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method content_v2_media_save_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `content_v2_media_save_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/content/v2/media/save', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20012',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def content_v3_media_file_post(self, uploadfile, x_nm_id, x_photo_number, **kwargs):  # noqa: E501
        """Add media files  # noqa: E501

        Adds one media file for the product (nomenclature).  Requirements to images:     * maximum images for each product (nomenclature) — 30,   * minimal resolution – 700 × 900 pixels,   * minimal quality — 65%,   * formats — JPG, PNG, BMP, GIF, WebP.   Requirements video:     * maximum video for each product (nomenclature),   * maximum size — 50 MB;   * formats — MOV, MP4.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_v3_media_file_post(uploadfile, x_nm_id, x_photo_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uploadfile: (required)
        :param str x_nm_id: Wildberries article (required)
        :param int x_photo_number: Number of media file, starting from `1`. To add the video set `1`.  To add the image to the uploaded ones, set file the number more then number of uploaded files.  (required)
        :return: InlineResponse20012
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.content_v3_media_file_post_with_http_info(uploadfile, x_nm_id, x_photo_number, **kwargs)  # noqa: E501
        else:
            (data) = self.content_v3_media_file_post_with_http_info(uploadfile, x_nm_id, x_photo_number, **kwargs)  # noqa: E501
            return data

    def content_v3_media_file_post_with_http_info(self, uploadfile, x_nm_id, x_photo_number, **kwargs):  # noqa: E501
        """Add media files  # noqa: E501

        Adds one media file for the product (nomenclature).  Requirements to images:     * maximum images for each product (nomenclature) — 30,   * minimal resolution – 700 × 900 pixels,   * minimal quality — 65%,   * formats — JPG, PNG, BMP, GIF, WebP.   Requirements video:     * maximum video for each product (nomenclature),   * maximum size — 50 MB;   * formats — MOV, MP4.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_v3_media_file_post_with_http_info(uploadfile, x_nm_id, x_photo_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uploadfile: (required)
        :param str x_nm_id: Wildberries article (required)
        :param int x_photo_number: Number of media file, starting from `1`. To add the video set `1`.  To add the image to the uploaded ones, set file the number more then number of uploaded files.  (required)
        :return: InlineResponse20012
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uploadfile', 'x_nm_id', 'x_photo_number']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method content_v3_media_file_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uploadfile' is set
        if ('uploadfile' not in params or
                params['uploadfile'] is None):
            raise ValueError("Missing the required parameter `uploadfile` when calling `content_v3_media_file_post`")  # noqa: E501
        # verify the required parameter 'x_nm_id' is set
        if ('x_nm_id' not in params or
                params['x_nm_id'] is None):
            raise ValueError("Missing the required parameter `x_nm_id` when calling `content_v3_media_file_post`")  # noqa: E501
        # verify the required parameter 'x_photo_number' is set
        if ('x_photo_number' not in params or
                params['x_photo_number'] is None):
            raise ValueError("Missing the required parameter `x_photo_number` when calling `content_v3_media_file_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_nm_id' in params:
            header_params['X-Nm-Id'] = params['x_nm_id']  # noqa: E501
        if 'x_photo_number' in params:
            header_params['X-Photo-Number'] = params['x_photo_number']  # noqa: E501

        form_params = []
        local_var_files = {}
        if 'uploadfile' in params:
            local_var_files['uploadfile'] = params['uploadfile']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/content/v3/media/file', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20012',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def content_v3_media_save_post(self, body, **kwargs):  # noqa: E501
        """Edit media files  # noqa: E501

        Edits product (nomenclature) media files.  **Attention**. New media files (`data`) replace old ones (`mediaFiles`). To add new files, set links both to new and old files.   Requirements to images:     * maximum images for each product (nomenclature) — 30,   * minimal resolution – 700 × 900 pixels,   * minimal quality — 65%,   * formats — JPG, PNG, BMP, GIF, WebP.   Requirements video:     * maximum video for each product (nomenclature),   * maximum size — 50 MB;   * formats — MOV, MP4.   If one or several images do not meet the requirements, no images will be uploaded even if you have the success response (200).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_v3_media_save_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MediaSaveBody body: (required)
        :return: InlineResponse20012
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.content_v3_media_save_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.content_v3_media_save_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def content_v3_media_save_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Edit media files  # noqa: E501

        Edits product (nomenclature) media files.  **Attention**. New media files (`data`) replace old ones (`mediaFiles`). To add new files, set links both to new and old files.   Requirements to images:     * maximum images for each product (nomenclature) — 30,   * minimal resolution – 700 × 900 pixels,   * minimal quality — 65%,   * formats — JPG, PNG, BMP, GIF, WebP.   Requirements video:     * maximum video for each product (nomenclature),   * maximum size — 50 MB;   * formats — MOV, MP4.   If one or several images do not meet the requirements, no images will be uploaded even if you have the success response (200).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_v3_media_save_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MediaSaveBody body: (required)
        :return: InlineResponse20012
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method content_v3_media_save_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `content_v3_media_save_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/content/v3/media/save', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20012',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
