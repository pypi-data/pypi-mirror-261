# coding: utf-8

"""
    Statistics

    Methods to get different reports. For Paid storage report, send a request to generate it, and then a request to get it. other report are available immediately, without pre-generation.   # noqa: E501

    OpenAPI spec version: 2.18
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SalesItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_date': 'datetime',
        'last_change_date': 'datetime',
        'warehouse_name': 'str',
        'country_name': 'str',
        'oblast_okrug_name': 'str',
        'region_name': 'str',
        'supplier_article': 'str',
        'nm_id': 'int',
        'barcode': 'str',
        'category': 'str',
        'subject': 'str',
        'brand': 'str',
        'tech_size': 'str',
        'income_id': 'int',
        'is_supply': 'bool',
        'is_realization': 'bool',
        'total_price': 'float',
        'discount_percent': 'int',
        'spp': 'float',
        'for_pay': 'float',
        'finished_price': 'float',
        'price_with_disc': 'float',
        'sale_id': 'str',
        'order_type': 'str',
        'sticker': 'str',
        'g_number': 'str',
        'odid': 'int',
        'srid': 'str'
    }

    attribute_map = {
        '_date': 'date',
        'last_change_date': 'lastChangeDate',
        'warehouse_name': 'warehouseName',
        'country_name': 'countryName',
        'oblast_okrug_name': 'oblastOkrugName',
        'region_name': 'regionName',
        'supplier_article': 'supplierArticle',
        'nm_id': 'nmId',
        'barcode': 'barcode',
        'category': 'category',
        'subject': 'subject',
        'brand': 'brand',
        'tech_size': 'techSize',
        'income_id': 'incomeID',
        'is_supply': 'isSupply',
        'is_realization': 'isRealization',
        'total_price': 'totalPrice',
        'discount_percent': 'discountPercent',
        'spp': 'spp',
        'for_pay': 'forPay',
        'finished_price': 'finishedPrice',
        'price_with_disc': 'priceWithDisc',
        'sale_id': 'saleID',
        'order_type': 'orderType',
        'sticker': 'sticker',
        'g_number': 'gNumber',
        'odid': 'odid',
        'srid': 'srid'
    }

    def __init__(self, _date=None, last_change_date=None, warehouse_name=None, country_name=None, oblast_okrug_name=None, region_name=None, supplier_article=None, nm_id=None, barcode=None, category=None, subject=None, brand=None, tech_size=None, income_id=None, is_supply=None, is_realization=None, total_price=None, discount_percent=None, spp=None, for_pay=None, finished_price=None, price_with_disc=None, sale_id=None, order_type=None, sticker=None, g_number=None, odid=None, srid=None):  # noqa: E501
        """SalesItem - a model defined in Swagger"""  # noqa: E501
        self.__date = None
        self._last_change_date = None
        self._warehouse_name = None
        self._country_name = None
        self._oblast_okrug_name = None
        self._region_name = None
        self._supplier_article = None
        self._nm_id = None
        self._barcode = None
        self._category = None
        self._subject = None
        self._brand = None
        self._tech_size = None
        self._income_id = None
        self._is_supply = None
        self._is_realization = None
        self._total_price = None
        self._discount_percent = None
        self._spp = None
        self._for_pay = None
        self._finished_price = None
        self._price_with_disc = None
        self._sale_id = None
        self._order_type = None
        self._sticker = None
        self._g_number = None
        self._odid = None
        self._srid = None
        self.discriminator = None
        if _date is not None:
            self._date = _date
        if last_change_date is not None:
            self.last_change_date = last_change_date
        if warehouse_name is not None:
            self.warehouse_name = warehouse_name
        if country_name is not None:
            self.country_name = country_name
        if oblast_okrug_name is not None:
            self.oblast_okrug_name = oblast_okrug_name
        if region_name is not None:
            self.region_name = region_name
        if supplier_article is not None:
            self.supplier_article = supplier_article
        if nm_id is not None:
            self.nm_id = nm_id
        if barcode is not None:
            self.barcode = barcode
        if category is not None:
            self.category = category
        if subject is not None:
            self.subject = subject
        if brand is not None:
            self.brand = brand
        if tech_size is not None:
            self.tech_size = tech_size
        if income_id is not None:
            self.income_id = income_id
        if is_supply is not None:
            self.is_supply = is_supply
        if is_realization is not None:
            self.is_realization = is_realization
        if total_price is not None:
            self.total_price = total_price
        if discount_percent is not None:
            self.discount_percent = discount_percent
        if spp is not None:
            self.spp = spp
        if for_pay is not None:
            self.for_pay = for_pay
        if finished_price is not None:
            self.finished_price = finished_price
        if price_with_disc is not None:
            self.price_with_disc = price_with_disc
        if sale_id is not None:
            self.sale_id = sale_id
        if order_type is not None:
            self.order_type = order_type
        if sticker is not None:
            self.sticker = sticker
        if g_number is not None:
            self.g_number = g_number
        if odid is not None:
            self.odid = odid
        if srid is not None:
            self.srid = srid

    @property
    def _date(self):
        """Gets the _date of this SalesItem.  # noqa: E501

        Date and time of sale. This field equals to `dateFrom` in request if `flag`=1. If the time zone is not specified, then Moscow time (UTC+3) is taken.  # noqa: E501

        :return: The _date of this SalesItem.  # noqa: E501
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this SalesItem.

        Date and time of sale. This field equals to `dateFrom` in request if `flag`=1. If the time zone is not specified, then Moscow time (UTC+3) is taken.  # noqa: E501

        :param _date: The _date of this SalesItem.  # noqa: E501
        :type: datetime
        """

        self.__date = _date

    @property
    def last_change_date(self):
        """Gets the last_change_date of this SalesItem.  # noqa: E501

        Date and time of refreshing info of service. This field corresponds to the `dateFrom` parameter in the request if the `flag`=0 parameter exist or not specified. If the time zone is not specified, then Moscow time (UTC+3) is taken.  # noqa: E501

        :return: The last_change_date of this SalesItem.  # noqa: E501
        :rtype: datetime
        """
        return self._last_change_date

    @last_change_date.setter
    def last_change_date(self, last_change_date):
        """Sets the last_change_date of this SalesItem.

        Date and time of refreshing info of service. This field corresponds to the `dateFrom` parameter in the request if the `flag`=0 parameter exist or not specified. If the time zone is not specified, then Moscow time (UTC+3) is taken.  # noqa: E501

        :param last_change_date: The last_change_date of this SalesItem.  # noqa: E501
        :type: datetime
        """

        self._last_change_date = last_change_date

    @property
    def warehouse_name(self):
        """Gets the warehouse_name of this SalesItem.  # noqa: E501

        Shipping warehouse  # noqa: E501

        :return: The warehouse_name of this SalesItem.  # noqa: E501
        :rtype: str
        """
        return self._warehouse_name

    @warehouse_name.setter
    def warehouse_name(self, warehouse_name):
        """Sets the warehouse_name of this SalesItem.

        Shipping warehouse  # noqa: E501

        :param warehouse_name: The warehouse_name of this SalesItem.  # noqa: E501
        :type: str
        """

        self._warehouse_name = warehouse_name

    @property
    def country_name(self):
        """Gets the country_name of this SalesItem.  # noqa: E501

        Country  # noqa: E501

        :return: The country_name of this SalesItem.  # noqa: E501
        :rtype: str
        """
        return self._country_name

    @country_name.setter
    def country_name(self, country_name):
        """Sets the country_name of this SalesItem.

        Country  # noqa: E501

        :param country_name: The country_name of this SalesItem.  # noqa: E501
        :type: str
        """

        self._country_name = country_name

    @property
    def oblast_okrug_name(self):
        """Gets the oblast_okrug_name of this SalesItem.  # noqa: E501

        Area  # noqa: E501

        :return: The oblast_okrug_name of this SalesItem.  # noqa: E501
        :rtype: str
        """
        return self._oblast_okrug_name

    @oblast_okrug_name.setter
    def oblast_okrug_name(self, oblast_okrug_name):
        """Sets the oblast_okrug_name of this SalesItem.

        Area  # noqa: E501

        :param oblast_okrug_name: The oblast_okrug_name of this SalesItem.  # noqa: E501
        :type: str
        """

        self._oblast_okrug_name = oblast_okrug_name

    @property
    def region_name(self):
        """Gets the region_name of this SalesItem.  # noqa: E501

        Region  # noqa: E501

        :return: The region_name of this SalesItem.  # noqa: E501
        :rtype: str
        """
        return self._region_name

    @region_name.setter
    def region_name(self, region_name):
        """Sets the region_name of this SalesItem.

        Region  # noqa: E501

        :param region_name: The region_name of this SalesItem.  # noqa: E501
        :type: str
        """

        self._region_name = region_name

    @property
    def supplier_article(self):
        """Gets the supplier_article of this SalesItem.  # noqa: E501

        Supplier article  # noqa: E501

        :return: The supplier_article of this SalesItem.  # noqa: E501
        :rtype: str
        """
        return self._supplier_article

    @supplier_article.setter
    def supplier_article(self, supplier_article):
        """Sets the supplier_article of this SalesItem.

        Supplier article  # noqa: E501

        :param supplier_article: The supplier_article of this SalesItem.  # noqa: E501
        :type: str
        """

        self._supplier_article = supplier_article

    @property
    def nm_id(self):
        """Gets the nm_id of this SalesItem.  # noqa: E501

        WB article  # noqa: E501

        :return: The nm_id of this SalesItem.  # noqa: E501
        :rtype: int
        """
        return self._nm_id

    @nm_id.setter
    def nm_id(self, nm_id):
        """Sets the nm_id of this SalesItem.

        WB article  # noqa: E501

        :param nm_id: The nm_id of this SalesItem.  # noqa: E501
        :type: int
        """

        self._nm_id = nm_id

    @property
    def barcode(self):
        """Gets the barcode of this SalesItem.  # noqa: E501

        Barcode  # noqa: E501

        :return: The barcode of this SalesItem.  # noqa: E501
        :rtype: str
        """
        return self._barcode

    @barcode.setter
    def barcode(self, barcode):
        """Sets the barcode of this SalesItem.

        Barcode  # noqa: E501

        :param barcode: The barcode of this SalesItem.  # noqa: E501
        :type: str
        """

        self._barcode = barcode

    @property
    def category(self):
        """Gets the category of this SalesItem.  # noqa: E501

        Category  # noqa: E501

        :return: The category of this SalesItem.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this SalesItem.

        Category  # noqa: E501

        :param category: The category of this SalesItem.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def subject(self):
        """Gets the subject of this SalesItem.  # noqa: E501

        Subject  # noqa: E501

        :return: The subject of this SalesItem.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this SalesItem.

        Subject  # noqa: E501

        :param subject: The subject of this SalesItem.  # noqa: E501
        :type: str
        """

        self._subject = subject

    @property
    def brand(self):
        """Gets the brand of this SalesItem.  # noqa: E501

        Brand  # noqa: E501

        :return: The brand of this SalesItem.  # noqa: E501
        :rtype: str
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this SalesItem.

        Brand  # noqa: E501

        :param brand: The brand of this SalesItem.  # noqa: E501
        :type: str
        """

        self._brand = brand

    @property
    def tech_size(self):
        """Gets the tech_size of this SalesItem.  # noqa: E501

        Product size  # noqa: E501

        :return: The tech_size of this SalesItem.  # noqa: E501
        :rtype: str
        """
        return self._tech_size

    @tech_size.setter
    def tech_size(self, tech_size):
        """Sets the tech_size of this SalesItem.

        Product size  # noqa: E501

        :param tech_size: The tech_size of this SalesItem.  # noqa: E501
        :type: str
        """

        self._tech_size = tech_size

    @property
    def income_id(self):
        """Gets the income_id of this SalesItem.  # noqa: E501

        Supply number  # noqa: E501

        :return: The income_id of this SalesItem.  # noqa: E501
        :rtype: int
        """
        return self._income_id

    @income_id.setter
    def income_id(self, income_id):
        """Sets the income_id of this SalesItem.

        Supply number  # noqa: E501

        :param income_id: The income_id of this SalesItem.  # noqa: E501
        :type: int
        """

        self._income_id = income_id

    @property
    def is_supply(self):
        """Gets the is_supply of this SalesItem.  # noqa: E501

        Supply contract  # noqa: E501

        :return: The is_supply of this SalesItem.  # noqa: E501
        :rtype: bool
        """
        return self._is_supply

    @is_supply.setter
    def is_supply(self, is_supply):
        """Sets the is_supply of this SalesItem.

        Supply contract  # noqa: E501

        :param is_supply: The is_supply of this SalesItem.  # noqa: E501
        :type: bool
        """

        self._is_supply = is_supply

    @property
    def is_realization(self):
        """Gets the is_realization of this SalesItem.  # noqa: E501

        Implementation contract  # noqa: E501

        :return: The is_realization of this SalesItem.  # noqa: E501
        :rtype: bool
        """
        return self._is_realization

    @is_realization.setter
    def is_realization(self, is_realization):
        """Sets the is_realization of this SalesItem.

        Implementation contract  # noqa: E501

        :param is_realization: The is_realization of this SalesItem.  # noqa: E501
        :type: bool
        """

        self._is_realization = is_realization

    @property
    def total_price(self):
        """Gets the total_price of this SalesItem.  # noqa: E501

        Price without discounts  # noqa: E501

        :return: The total_price of this SalesItem.  # noqa: E501
        :rtype: float
        """
        return self._total_price

    @total_price.setter
    def total_price(self, total_price):
        """Sets the total_price of this SalesItem.

        Price without discounts  # noqa: E501

        :param total_price: The total_price of this SalesItem.  # noqa: E501
        :type: float
        """

        self._total_price = total_price

    @property
    def discount_percent(self):
        """Gets the discount_percent of this SalesItem.  # noqa: E501

        Seller's discount  # noqa: E501

        :return: The discount_percent of this SalesItem.  # noqa: E501
        :rtype: int
        """
        return self._discount_percent

    @discount_percent.setter
    def discount_percent(self, discount_percent):
        """Sets the discount_percent of this SalesItem.

        Seller's discount  # noqa: E501

        :param discount_percent: The discount_percent of this SalesItem.  # noqa: E501
        :type: int
        """

        self._discount_percent = discount_percent

    @property
    def spp(self):
        """Gets the spp of this SalesItem.  # noqa: E501

        WB discount  # noqa: E501

        :return: The spp of this SalesItem.  # noqa: E501
        :rtype: float
        """
        return self._spp

    @spp.setter
    def spp(self, spp):
        """Sets the spp of this SalesItem.

        WB discount  # noqa: E501

        :param spp: The spp of this SalesItem.  # noqa: E501
        :type: float
        """

        self._spp = spp

    @property
    def for_pay(self):
        """Gets the for_pay of this SalesItem.  # noqa: E501

        To transfer to the supplier  # noqa: E501

        :return: The for_pay of this SalesItem.  # noqa: E501
        :rtype: float
        """
        return self._for_pay

    @for_pay.setter
    def for_pay(self, for_pay):
        """Sets the for_pay of this SalesItem.

        To transfer to the supplier  # noqa: E501

        :param for_pay: The for_pay of this SalesItem.  # noqa: E501
        :type: float
        """

        self._for_pay = for_pay

    @property
    def finished_price(self):
        """Gets the finished_price of this SalesItem.  # noqa: E501

        The actual price including all discounts (to be charged to the buyer)  # noqa: E501

        :return: The finished_price of this SalesItem.  # noqa: E501
        :rtype: float
        """
        return self._finished_price

    @finished_price.setter
    def finished_price(self, finished_price):
        """Sets the finished_price of this SalesItem.

        The actual price including all discounts (to be charged to the buyer)  # noqa: E501

        :param finished_price: The finished_price of this SalesItem.  # noqa: E501
        :type: float
        """

        self._finished_price = finished_price

    @property
    def price_with_disc(self):
        """Gets the price_with_disc of this SalesItem.  # noqa: E501

        Price with seller's discount, from which the amount to be transferred to the seller is calculated according to the following formula `forPay` (= `totalPrice` * (1 - `discountPercent`/100))  # noqa: E501

        :return: The price_with_disc of this SalesItem.  # noqa: E501
        :rtype: float
        """
        return self._price_with_disc

    @price_with_disc.setter
    def price_with_disc(self, price_with_disc):
        """Sets the price_with_disc of this SalesItem.

        Price with seller's discount, from which the amount to be transferred to the seller is calculated according to the following formula `forPay` (= `totalPrice` * (1 - `discountPercent`/100))  # noqa: E501

        :param price_with_disc: The price_with_disc of this SalesItem.  # noqa: E501
        :type: float
        """

        self._price_with_disc = price_with_disc

    @property
    def sale_id(self):
        """Gets the sale_id of this SalesItem.  # noqa: E501

        The unique ID of the sale/refund. <ul>  <li> `SXXXXXXXXXX` — sale  <li> `RXXXXXXXXXX` — refund  </ul>   # noqa: E501

        :return: The sale_id of this SalesItem.  # noqa: E501
        :rtype: str
        """
        return self._sale_id

    @sale_id.setter
    def sale_id(self, sale_id):
        """Sets the sale_id of this SalesItem.

        The unique ID of the sale/refund. <ul>  <li> `SXXXXXXXXXX` — sale  <li> `RXXXXXXXXXX` — refund  </ul>   # noqa: E501

        :param sale_id: The sale_id of this SalesItem.  # noqa: E501
        :type: str
        """

        self._sale_id = sale_id

    @property
    def order_type(self):
        """Gets the order_type of this SalesItem.  # noqa: E501

        Order type <ul> <li> `Клиентский` - an order received from a customer <li> `Возврат Брака` - return the item to the seller <li> `Принудительный возврат` - return the goods to the seller <li> `Возврат обезлички` - return the item to the seller <li> `Возврат Неверного Вложения` - return the item to the seller <li> `Возврат Продавца` - return the goods to the seller          </ul>   # noqa: E501

        :return: The order_type of this SalesItem.  # noqa: E501
        :rtype: str
        """
        return self._order_type

    @order_type.setter
    def order_type(self, order_type):
        """Sets the order_type of this SalesItem.

        Order type <ul> <li> `Клиентский` - an order received from a customer <li> `Возврат Брака` - return the item to the seller <li> `Принудительный возврат` - return the goods to the seller <li> `Возврат обезлички` - return the item to the seller <li> `Возврат Неверного Вложения` - return the item to the seller <li> `Возврат Продавца` - return the goods to the seller          </ul>   # noqa: E501

        :param order_type: The order_type of this SalesItem.  # noqa: E501
        :type: str
        """

        self._order_type = order_type

    @property
    def sticker(self):
        """Gets the sticker of this SalesItem.  # noqa: E501

        sticker ID  # noqa: E501

        :return: The sticker of this SalesItem.  # noqa: E501
        :rtype: str
        """
        return self._sticker

    @sticker.setter
    def sticker(self, sticker):
        """Sets the sticker of this SalesItem.

        sticker ID  # noqa: E501

        :param sticker: The sticker of this SalesItem.  # noqa: E501
        :type: str
        """

        self._sticker = sticker

    @property
    def g_number(self):
        """Gets the g_number of this SalesItem.  # noqa: E501

        Order number  # noqa: E501

        :return: The g_number of this SalesItem.  # noqa: E501
        :rtype: str
        """
        return self._g_number

    @g_number.setter
    def g_number(self, g_number):
        """Sets the g_number of this SalesItem.

        Order number  # noqa: E501

        :param g_number: The g_number of this SalesItem.  # noqa: E501
        :type: str
        """

        self._g_number = g_number

    @property
    def odid(self):
        """Gets the odid of this SalesItem.  # noqa: E501

        The unique ID of the order item  # noqa: E501

        :return: The odid of this SalesItem.  # noqa: E501
        :rtype: int
        """
        return self._odid

    @odid.setter
    def odid(self, odid):
        """Sets the odid of this SalesItem.

        The unique ID of the order item  # noqa: E501

        :param odid: The odid of this SalesItem.  # noqa: E501
        :type: int
        """

        self._odid = odid

    @property
    def srid(self):
        """Gets the srid of this SalesItem.  # noqa: E501

        Unique order ID. <br> Note for those working with Marketplace API: `srid` equals `rid` in response of orders methods.   # noqa: E501

        :return: The srid of this SalesItem.  # noqa: E501
        :rtype: str
        """
        return self._srid

    @srid.setter
    def srid(self, srid):
        """Sets the srid of this SalesItem.

        Unique order ID. <br> Note for those working with Marketplace API: `srid` equals `rid` in response of orders methods.   # noqa: E501

        :param srid: The srid of this SalesItem.  # noqa: E501
        :type: str
        """

        self._srid = srid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SalesItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SalesItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
