# coding: utf-8

"""
    Seller API Promotion

    Synchronization from the database runs every 3 minutes.  <br>The status is changed once per 1 minute. During this interval the last status change action will be saved. <br>The bid change takes place once in 30 seconds. Within this interval the last action to change the bid will be saved.   # noqa: E501

    OpenAPI spec version: 2.20
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20012(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        '_date': 'str',
        'sum': 'int',
        'type': 'int',
        'status_id': 'int',
        'card_status': 'str'
    }

    attribute_map = {
        'id': 'id',
        '_date': 'date',
        'sum': 'sum',
        'type': 'type',
        'status_id': 'statusId',
        'card_status': 'cardStatus'
    }

    def __init__(self, id=None, _date=None, sum=None, type=None, status_id=None, card_status=None):  # noqa: E501
        """InlineResponse20012 - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self.__date = None
        self._sum = None
        self._type = None
        self._status_id = None
        self._card_status = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if _date is not None:
            self._date = _date
        if sum is not None:
            self.sum = sum
        if type is not None:
            self.type = type
        if status_id is not None:
            self.status_id = status_id
        if card_status is not None:
            self.card_status = card_status

    @property
    def id(self):
        """Gets the id of this InlineResponse20012.  # noqa: E501

        Payment ID  # noqa: E501

        :return: The id of this InlineResponse20012.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse20012.

        Payment ID  # noqa: E501

        :param id: The id of this InlineResponse20012.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def _date(self):
        """Gets the _date of this InlineResponse20012.  # noqa: E501

        Payment date  # noqa: E501

        :return: The _date of this InlineResponse20012.  # noqa: E501
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this InlineResponse20012.

        Payment date  # noqa: E501

        :param _date: The _date of this InlineResponse20012.  # noqa: E501
        :type: str
        """

        self.__date = _date

    @property
    def sum(self):
        """Gets the sum of this InlineResponse20012.  # noqa: E501

        Payment amount  # noqa: E501

        :return: The sum of this InlineResponse20012.  # noqa: E501
        :rtype: int
        """
        return self._sum

    @sum.setter
    def sum(self, sum):
        """Sets the sum of this InlineResponse20012.

        Payment amount  # noqa: E501

        :param sum: The sum of this InlineResponse20012.  # noqa: E501
        :type: int
        """

        self._sum = sum

    @property
    def type(self):
        """Gets the type of this InlineResponse20012.  # noqa: E501

        <dl> <dt>Type of charge-off source:</dt> <dd>`0` - balance</dd> <dd>`1` - net</dd> <dd>`3` - card</dd> Type of charge-off source: </dl>   # noqa: E501

        :return: The type of this InlineResponse20012.  # noqa: E501
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InlineResponse20012.

        <dl> <dt>Type of charge-off source:</dt> <dd>`0` - balance</dd> <dd>`1` - net</dd> <dd>`3` - card</dd> Type of charge-off source: </dl>   # noqa: E501

        :param type: The type of this InlineResponse20012.  # noqa: E501
        :type: int
        """

        self._type = type

    @property
    def status_id(self):
        """Gets the status_id of this InlineResponse20012.  # noqa: E501

        <dl> <dt>Status:</dt> <dd>`0` - means error</dd> <dd>`1` - means processed</dd> </dl>   # noqa: E501

        :return: The status_id of this InlineResponse20012.  # noqa: E501
        :rtype: int
        """
        return self._status_id

    @status_id.setter
    def status_id(self, status_id):
        """Sets the status_id of this InlineResponse20012.

        <dl> <dt>Status:</dt> <dd>`0` - means error</dd> <dd>`1` - means processed</dd> </dl>   # noqa: E501

        :param status_id: The status_id of this InlineResponse20012.  # noqa: E501
        :type: int
        """

        self._status_id = status_id

    @property
    def card_status(self):
        """Gets the card_status of this InlineResponse20012.  # noqa: E501

        <dl> <dt>Transaction status (when paying by card):</dt> <dd><b>success</b> - means success</dd> <dd><b>fail</b> - means not success</dd> <dd><b>pending</b> - means waiting for response</dd> <dd><b>unknown</b> - means unknown</dd> </dl>   # noqa: E501

        :return: The card_status of this InlineResponse20012.  # noqa: E501
        :rtype: str
        """
        return self._card_status

    @card_status.setter
    def card_status(self, card_status):
        """Sets the card_status of this InlineResponse20012.

        <dl> <dt>Transaction status (when paying by card):</dt> <dd><b>success</b> - means success</dd> <dd><b>fail</b> - means not success</dd> <dd><b>pending</b> - means waiting for response</dd> <dd><b>unknown</b> - means unknown</dd> </dl>   # noqa: E501

        :param card_status: The card_status of this InlineResponse20012.  # noqa: E501
        :type: str
        """

        self._card_status = card_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20012, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20012):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
