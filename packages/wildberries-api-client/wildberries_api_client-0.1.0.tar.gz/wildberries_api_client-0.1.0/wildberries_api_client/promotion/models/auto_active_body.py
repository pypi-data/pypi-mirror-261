# coding: utf-8

"""
    Seller API Promotion

    Synchronization from the database runs every 3 minutes.  <br>The status is changed once per 1 minute. During this interval the last status change action will be saved. <br>The bid change takes place once in 30 seconds. Within this interval the last action to change the bid will be saved.   # noqa: E501

    OpenAPI spec version: 2.20
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AutoActiveBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'recom': 'bool',
        'booster': 'bool',
        'carousel': 'bool'
    }

    attribute_map = {
        'recom': 'recom',
        'booster': 'booster',
        'carousel': 'carousel'
    }

    def __init__(self, recom=None, booster=None, carousel=None):  # noqa: E501
        """AutoActiveBody - a model defined in Swagger"""  # noqa: E501
        self._recom = None
        self._booster = None
        self._carousel = None
        self.discriminator = None
        if recom is not None:
            self.recom = recom
        if booster is not None:
            self.booster = booster
        if carousel is not None:
            self.carousel = carousel

    @property
    def recom(self):
        """Gets the recom of this AutoActiveBody.  # noqa: E501

        Recommendations on the homepage (`false` means disabled, `true` means enabled)  # noqa: E501

        :return: The recom of this AutoActiveBody.  # noqa: E501
        :rtype: bool
        """
        return self._recom

    @recom.setter
    def recom(self, recom):
        """Sets the recom of this AutoActiveBody.

        Recommendations on the homepage (`false` means disabled, `true` means enabled)  # noqa: E501

        :param recom: The recom of this AutoActiveBody.  # noqa: E501
        :type: bool
        """

        self._recom = recom

    @property
    def booster(self):
        """Gets the booster of this AutoActiveBody.  # noqa: E501

        Search/Catalogue (`false` means disabled, `true` means enabled)  # noqa: E501

        :return: The booster of this AutoActiveBody.  # noqa: E501
        :rtype: bool
        """
        return self._booster

    @booster.setter
    def booster(self, booster):
        """Sets the booster of this AutoActiveBody.

        Search/Catalogue (`false` means disabled, `true` means enabled)  # noqa: E501

        :param booster: The booster of this AutoActiveBody.  # noqa: E501
        :type: bool
        """

        self._booster = booster

    @property
    def carousel(self):
        """Gets the carousel of this AutoActiveBody.  # noqa: E501

        Product card (`false` means disabled, `true` means enabled)  # noqa: E501

        :return: The carousel of this AutoActiveBody.  # noqa: E501
        :rtype: bool
        """
        return self._carousel

    @carousel.setter
    def carousel(self, carousel):
        """Sets the carousel of this AutoActiveBody.

        Product card (`false` means disabled, `true` means enabled)  # noqa: E501

        :param carousel: The carousel of this AutoActiveBody.  # noqa: E501
        :type: bool
        """

        self._carousel = carousel

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AutoActiveBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AutoActiveBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
