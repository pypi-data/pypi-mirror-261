# coding: utf-8

"""
    Seller API Promotion

    Synchronization from the database runs every 3 minutes.  <br>The status is changed once per 1 minute. During this interval the last status change action will be saved. <br>The bid change takes place once in 30 seconds. Within this interval the last action to change the bid will be saved.   # noqa: E501

    OpenAPI spec version: 2.20
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V0CpmBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'advert_id': 'int',
        'type': 'int',
        'cpm': 'int',
        'param': 'int'
    }

    attribute_map = {
        'advert_id': 'advertId',
        'type': 'type',
        'cpm': 'cpm',
        'param': 'param'
    }

    def __init__(self, advert_id=None, type=None, cpm=None, param=None):  # noqa: E501
        """V0CpmBody - a model defined in Swagger"""  # noqa: E501
        self._advert_id = None
        self._type = None
        self._cpm = None
        self._param = None
        self.discriminator = None
        self.advert_id = advert_id
        self.type = type
        self.cpm = cpm
        self.param = param

    @property
    def advert_id(self):
        """Gets the advert_id of this V0CpmBody.  # noqa: E501

        Campaign ID  # noqa: E501

        :return: The advert_id of this V0CpmBody.  # noqa: E501
        :rtype: int
        """
        return self._advert_id

    @advert_id.setter
    def advert_id(self, advert_id):
        """Sets the advert_id of this V0CpmBody.

        Campaign ID  # noqa: E501

        :param advert_id: The advert_id of this V0CpmBody.  # noqa: E501
        :type: int
        """
        if advert_id is None:
            raise ValueError("Invalid value for `advert_id`, must not be `None`")  # noqa: E501

        self._advert_id = advert_id

    @property
    def type(self):
        """Gets the type of this V0CpmBody.  # noqa: E501

        <dl> <dt>Campaign type to change the price:</dt> <dd><code>5</code> - campaign in content</dd> <dd><code>6</code> - campaign in search</dd> <dd><code>7</code> - campaign on main page recommendations</dd> </dl>   # noqa: E501

        :return: The type of this V0CpmBody.  # noqa: E501
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this V0CpmBody.

        <dl> <dt>Campaign type to change the price:</dt> <dd><code>5</code> - campaign in content</dd> <dd><code>6</code> - campaign in search</dd> <dd><code>7</code> - campaign on main page recommendations</dd> </dl>   # noqa: E501

        :param type: The type of this V0CpmBody.  # noqa: E501
        :type: int
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = [5, 6, 7]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def cpm(self):
        """Gets the cpm of this V0CpmBody.  # noqa: E501

        New price  # noqa: E501

        :return: The cpm of this V0CpmBody.  # noqa: E501
        :rtype: int
        """
        return self._cpm

    @cpm.setter
    def cpm(self, cpm):
        """Sets the cpm of this V0CpmBody.

        New price  # noqa: E501

        :param cpm: The cpm of this V0CpmBody.  # noqa: E501
        :type: int
        """
        if cpm is None:
            raise ValueError("Invalid value for `cpm`, must not be `None`")  # noqa: E501

        self._cpm = cpm

    @property
    def param(self):
        """Gets the param of this V0CpmBody.  # noqa: E501

        Parameter, for which the update will take effect (options: `subjectId` or `setId` depending on campaign type)   # noqa: E501

        :return: The param of this V0CpmBody.  # noqa: E501
        :rtype: int
        """
        return self._param

    @param.setter
    def param(self, param):
        """Sets the param of this V0CpmBody.

        Parameter, for which the update will take effect (options: `subjectId` or `setId` depending on campaign type)   # noqa: E501

        :param param: The param of this V0CpmBody.  # noqa: E501
        :type: int
        """
        if param is None:
            raise ValueError("Invalid value for `param`, must not be `None`")  # noqa: E501

        self._param = param

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V0CpmBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V0CpmBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
