# coding: utf-8

"""
    Seller API Marketplace

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.18
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from marketplace.api_client import ApiClient


class SuppliesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def api_v3_supplies_get(self, limit, next, **kwargs):  # noqa: E501
        """Get a supplies list  # noqa: E501

        Returns the supply list.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_supplies_get(limit, next, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: Pagination parameter. Sets the limit for the amount of data returned. (required)
        :param int next: Pagination parameter. Sets the value from which to retrieve the next batch. It should start at 0 to get the full list of data. For the subsequent requests, you must take the value from the `next` field in the response. (required)
        :return: InlineResponse2007
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v3_supplies_get_with_http_info(limit, next, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v3_supplies_get_with_http_info(limit, next, **kwargs)  # noqa: E501
            return data

    def api_v3_supplies_get_with_http_info(self, limit, next, **kwargs):  # noqa: E501
        """Get a supplies list  # noqa: E501

        Returns the supply list.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_supplies_get_with_http_info(limit, next, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: Pagination parameter. Sets the limit for the amount of data returned. (required)
        :param int next: Pagination parameter. Sets the value from which to retrieve the next batch. It should start at 0 to get the full list of data. For the subsequent requests, you must take the value from the `next` field in the response. (required)
        :return: InlineResponse2007
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit', 'next']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v3_supplies_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'limit' is set
        if ('limit' not in params or
                params['limit'] is None):
            raise ValueError("Missing the required parameter `limit` when calling `api_v3_supplies_get`")  # noqa: E501
        # verify the required parameter 'next' is set
        if ('next' not in params or
                params['next'] is None):
            raise ValueError("Missing the required parameter `next` when calling `api_v3_supplies_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'next' in params:
            query_params.append(('next', params['next']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/supplies', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2007',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v3_supplies_post(self, body, **kwargs):  # noqa: E501
        """Create a new supply  # noqa: E501

        **Supplies limitations**:  - Supplies applicable only for orders in the FBS (Fulfillment by Seller) delivery. - All orders added to supply automatically transferred from the **new** status to the **confirm** status. - Please note that if you will **cancel** (“Cancelled by the seller”) the order, we will automatically remove it from the supply. - A supply can only be assembled from assembly jobs (orders) with the same dimensional type (cargoType). A new supply does not have a dimensional attribute. When the first order is added to a supply, the supply acquires the dimensional attribute of that order.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_supplies_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V3SuppliesBody body: (required)
        :return: InlineResponse201
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v3_supplies_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v3_supplies_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def api_v3_supplies_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create a new supply  # noqa: E501

        **Supplies limitations**:  - Supplies applicable only for orders in the FBS (Fulfillment by Seller) delivery. - All orders added to supply automatically transferred from the **new** status to the **confirm** status. - Please note that if you will **cancel** (“Cancelled by the seller”) the order, we will automatically remove it from the supply. - A supply can only be assembled from assembly jobs (orders) with the same dimensional type (cargoType). A new supply does not have a dimensional attribute. When the first order is added to a supply, the supply acquires the dimensional attribute of that order.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_supplies_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V3SuppliesBody body: (required)
        :return: InlineResponse201
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v3_supplies_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `api_v3_supplies_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/supplies', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse201',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v3_supplies_supply_id_barcode_get(self, supply_id, type, **kwargs):  # noqa: E501
        """Get the supply QR code  # noqa: E501

        Returns the QR code in svg, zplv (vertical), zplh (horizontal), png. <br> Available only after the supply has been transferred to the delivery. Available dimensions: <dd>580x400 px   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_supplies_supply_id_barcode_get(supply_id, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str supply_id: Supply ID (required)
        :param str type: Sticker format (required)
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v3_supplies_supply_id_barcode_get_with_http_info(supply_id, type, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v3_supplies_supply_id_barcode_get_with_http_info(supply_id, type, **kwargs)  # noqa: E501
            return data

    def api_v3_supplies_supply_id_barcode_get_with_http_info(self, supply_id, type, **kwargs):  # noqa: E501
        """Get the supply QR code  # noqa: E501

        Returns the QR code in svg, zplv (vertical), zplh (horizontal), png. <br> Available only after the supply has been transferred to the delivery. Available dimensions: <dd>580x400 px   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_supplies_supply_id_barcode_get_with_http_info(supply_id, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str supply_id: Supply ID (required)
        :param str type: Sticker format (required)
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['supply_id', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v3_supplies_supply_id_barcode_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'supply_id' is set
        if ('supply_id' not in params or
                params['supply_id'] is None):
            raise ValueError("Missing the required parameter `supply_id` when calling `api_v3_supplies_supply_id_barcode_get`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `api_v3_supplies_supply_id_barcode_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'supply_id' in params:
            path_params['supplyId'] = params['supply_id']  # noqa: E501

        query_params = []
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/supplies/{supplyId}/barcode', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2009',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v3_supplies_supply_id_delete(self, supply_id, **kwargs):  # noqa: E501
        """Delete the supply  # noqa: E501

        Deleted the supply if it is active and does not contain any orders.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_supplies_supply_id_delete(supply_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str supply_id: Supply ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v3_supplies_supply_id_delete_with_http_info(supply_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v3_supplies_supply_id_delete_with_http_info(supply_id, **kwargs)  # noqa: E501
            return data

    def api_v3_supplies_supply_id_delete_with_http_info(self, supply_id, **kwargs):  # noqa: E501
        """Delete the supply  # noqa: E501

        Deleted the supply if it is active and does not contain any orders.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_supplies_supply_id_delete_with_http_info(supply_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str supply_id: Supply ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['supply_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v3_supplies_supply_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'supply_id' is set
        if ('supply_id' not in params or
                params['supply_id'] is None):
            raise ValueError("Missing the required parameter `supply_id` when calling `api_v3_supplies_supply_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'supply_id' in params:
            path_params['supplyId'] = params['supply_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/supplies/{supplyId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v3_supplies_supply_id_deliver_patch(self, supply_id, **kwargs):  # noqa: E501
        """Move the supply to the delivery  # noqa: E501

        Closes the delivery and moves all orders to **complete** (“In Delivery”) status. You cannot add any orders to the supply after it is closed. You can transfer the supply to delivery only if it contains at least one order and no empty boxes.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_supplies_supply_id_deliver_patch(supply_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str supply_id: Supply ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v3_supplies_supply_id_deliver_patch_with_http_info(supply_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v3_supplies_supply_id_deliver_patch_with_http_info(supply_id, **kwargs)  # noqa: E501
            return data

    def api_v3_supplies_supply_id_deliver_patch_with_http_info(self, supply_id, **kwargs):  # noqa: E501
        """Move the supply to the delivery  # noqa: E501

        Closes the delivery and moves all orders to **complete** (“In Delivery”) status. You cannot add any orders to the supply after it is closed. You can transfer the supply to delivery only if it contains at least one order and no empty boxes.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_supplies_supply_id_deliver_patch_with_http_info(supply_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str supply_id: Supply ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['supply_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v3_supplies_supply_id_deliver_patch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'supply_id' is set
        if ('supply_id' not in params or
                params['supply_id'] is None):
            raise ValueError("Missing the required parameter `supply_id` when calling `api_v3_supplies_supply_id_deliver_patch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'supply_id' in params:
            path_params['supplyId'] = params['supply_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/supplies/{supplyId}/deliver', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v3_supplies_supply_id_get(self, supply_id, **kwargs):  # noqa: E501
        """Get supply details  # noqa: E501

        Returns supply details.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_supplies_supply_id_get(supply_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str supply_id: Supply ID (required)
        :return: Supply
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v3_supplies_supply_id_get_with_http_info(supply_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v3_supplies_supply_id_get_with_http_info(supply_id, **kwargs)  # noqa: E501
            return data

    def api_v3_supplies_supply_id_get_with_http_info(self, supply_id, **kwargs):  # noqa: E501
        """Get supply details  # noqa: E501

        Returns supply details.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_supplies_supply_id_get_with_http_info(supply_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str supply_id: Supply ID (required)
        :return: Supply
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['supply_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v3_supplies_supply_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'supply_id' is set
        if ('supply_id' not in params or
                params['supply_id'] is None):
            raise ValueError("Missing the required parameter `supply_id` when calling `api_v3_supplies_supply_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'supply_id' in params:
            path_params['supplyId'] = params['supply_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/supplies/{supplyId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Supply',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v3_supplies_supply_id_orders_get(self, supply_id, **kwargs):  # noqa: E501
        """Get the supply orders  # noqa: E501

        Returns orders assigned to the supply.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_supplies_supply_id_orders_get(supply_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str supply_id: Supply ID (required)
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v3_supplies_supply_id_orders_get_with_http_info(supply_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v3_supplies_supply_id_orders_get_with_http_info(supply_id, **kwargs)  # noqa: E501
            return data

    def api_v3_supplies_supply_id_orders_get_with_http_info(self, supply_id, **kwargs):  # noqa: E501
        """Get the supply orders  # noqa: E501

        Returns orders assigned to the supply.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_supplies_supply_id_orders_get_with_http_info(supply_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str supply_id: Supply ID (required)
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['supply_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v3_supplies_supply_id_orders_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'supply_id' is set
        if ('supply_id' not in params or
                params['supply_id'] is None):
            raise ValueError("Missing the required parameter `supply_id` when calling `api_v3_supplies_supply_id_orders_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'supply_id' in params:
            path_params['supplyId'] = params['supply_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/supplies/{supplyId}/orders', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2008',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v3_supplies_supply_id_orders_order_id_patch(self, supply_id, order_id, **kwargs):  # noqa: E501
        """Add the order to the supply  # noqa: E501

        Adds an order to a supply and moves it to **confirm** status. <br> It can also move the order between active supplies. Or from a closed to an active supply, if the order requires reshipment. <br> <br>   `Important!` <br> It is possible to add an assembly job of any dimensioned type to an empty delivery. <br> After adding the first task, the delivery acquires the dimensional type of this task, see the value of the `cargo Type` field in the response of the <b>\"Get supply details\"</b> method. <br> After that, you can only add tasks to a delivery whose dimension type corresponds to that of the delivery.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_supplies_supply_id_orders_order_id_patch(supply_id, order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str supply_id: Supply ID (required)
        :param int order_id: Order ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v3_supplies_supply_id_orders_order_id_patch_with_http_info(supply_id, order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v3_supplies_supply_id_orders_order_id_patch_with_http_info(supply_id, order_id, **kwargs)  # noqa: E501
            return data

    def api_v3_supplies_supply_id_orders_order_id_patch_with_http_info(self, supply_id, order_id, **kwargs):  # noqa: E501
        """Add the order to the supply  # noqa: E501

        Adds an order to a supply and moves it to **confirm** status. <br> It can also move the order between active supplies. Or from a closed to an active supply, if the order requires reshipment. <br> <br>   `Important!` <br> It is possible to add an assembly job of any dimensioned type to an empty delivery. <br> After adding the first task, the delivery acquires the dimensional type of this task, see the value of the `cargo Type` field in the response of the <b>\"Get supply details\"</b> method. <br> After that, you can only add tasks to a delivery whose dimension type corresponds to that of the delivery.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_supplies_supply_id_orders_order_id_patch_with_http_info(supply_id, order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str supply_id: Supply ID (required)
        :param int order_id: Order ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['supply_id', 'order_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v3_supplies_supply_id_orders_order_id_patch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'supply_id' is set
        if ('supply_id' not in params or
                params['supply_id'] is None):
            raise ValueError("Missing the required parameter `supply_id` when calling `api_v3_supplies_supply_id_orders_order_id_patch`")  # noqa: E501
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params or
                params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `api_v3_supplies_supply_id_orders_order_id_patch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'supply_id' in params:
            path_params['supplyId'] = params['supply_id']  # noqa: E501
        if 'order_id' in params:
            path_params['orderId'] = params['order_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/supplies/{supplyId}/orders/{orderId}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v3_supplies_supply_id_trbx_delete(self, supply_id, **kwargs):  # noqa: E501
        """Delete boxes from the supply  # noqa: E501

        Removes orders from the listed delivery boxes and deletes the boxes. Available only while the supply is being assembled.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_supplies_supply_id_trbx_delete(supply_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str supply_id: Supply ID (required)
        :param SupplyIdTrbxBody1 body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v3_supplies_supply_id_trbx_delete_with_http_info(supply_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v3_supplies_supply_id_trbx_delete_with_http_info(supply_id, **kwargs)  # noqa: E501
            return data

    def api_v3_supplies_supply_id_trbx_delete_with_http_info(self, supply_id, **kwargs):  # noqa: E501
        """Delete boxes from the supply  # noqa: E501

        Removes orders from the listed delivery boxes and deletes the boxes. Available only while the supply is being assembled.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_supplies_supply_id_trbx_delete_with_http_info(supply_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str supply_id: Supply ID (required)
        :param SupplyIdTrbxBody1 body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['supply_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v3_supplies_supply_id_trbx_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'supply_id' is set
        if ('supply_id' not in params or
                params['supply_id'] is None):
            raise ValueError("Missing the required parameter `supply_id` when calling `api_v3_supplies_supply_id_trbx_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'supply_id' in params:
            path_params['supplyId'] = params['supply_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/supplies/{supplyId}/trbx', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v3_supplies_supply_id_trbx_get(self, supply_id, **kwargs):  # noqa: E501
        """Get supply boxes list  # noqa: E501

        Returns supply boxes list with assigned orders.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_supplies_supply_id_trbx_get(supply_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str supply_id: Supply ID (required)
        :return: InlineResponse20010
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v3_supplies_supply_id_trbx_get_with_http_info(supply_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v3_supplies_supply_id_trbx_get_with_http_info(supply_id, **kwargs)  # noqa: E501
            return data

    def api_v3_supplies_supply_id_trbx_get_with_http_info(self, supply_id, **kwargs):  # noqa: E501
        """Get supply boxes list  # noqa: E501

        Returns supply boxes list with assigned orders.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_supplies_supply_id_trbx_get_with_http_info(supply_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str supply_id: Supply ID (required)
        :return: InlineResponse20010
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['supply_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v3_supplies_supply_id_trbx_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'supply_id' is set
        if ('supply_id' not in params or
                params['supply_id'] is None):
            raise ValueError("Missing the required parameter `supply_id` when calling `api_v3_supplies_supply_id_trbx_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'supply_id' in params:
            path_params['supplyId'] = params['supply_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/supplies/{supplyId}/trbx', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20010',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v3_supplies_supply_id_trbx_post(self, supply_id, **kwargs):  # noqa: E501
        """Add boxes to the supply  # noqa: E501

        Adds the required number of boxes to the supply. Available only while the supply is being assembled.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_supplies_supply_id_trbx_post(supply_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str supply_id: Supply ID (required)
        :param SupplyIdTrbxBody body:
        :return: InlineResponse2011
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v3_supplies_supply_id_trbx_post_with_http_info(supply_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v3_supplies_supply_id_trbx_post_with_http_info(supply_id, **kwargs)  # noqa: E501
            return data

    def api_v3_supplies_supply_id_trbx_post_with_http_info(self, supply_id, **kwargs):  # noqa: E501
        """Add boxes to the supply  # noqa: E501

        Adds the required number of boxes to the supply. Available only while the supply is being assembled.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_supplies_supply_id_trbx_post_with_http_info(supply_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str supply_id: Supply ID (required)
        :param SupplyIdTrbxBody body:
        :return: InlineResponse2011
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['supply_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v3_supplies_supply_id_trbx_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'supply_id' is set
        if ('supply_id' not in params or
                params['supply_id'] is None):
            raise ValueError("Missing the required parameter `supply_id` when calling `api_v3_supplies_supply_id_trbx_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'supply_id' in params:
            path_params['supplyId'] = params['supply_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/supplies/{supplyId}/trbx', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2011',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v3_supplies_supply_id_trbx_stickers_post(self, type, supply_id, **kwargs):  # noqa: E501
        """Get the supply box QR code stickers  # noqa: E501

        Returns QR-code stickers in svg, zplv (vertical), zplh (horizontal), png.<br> Available only if there are orders in the box. <dt>Stickers dimensions: 580x400 px</dt>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_supplies_supply_id_trbx_stickers_post(type, supply_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str type: Sticker format (required)
        :param str supply_id: Supply ID (required)
        :param TrbxStickersBody body:
        :return: InlineResponse20011
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v3_supplies_supply_id_trbx_stickers_post_with_http_info(type, supply_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v3_supplies_supply_id_trbx_stickers_post_with_http_info(type, supply_id, **kwargs)  # noqa: E501
            return data

    def api_v3_supplies_supply_id_trbx_stickers_post_with_http_info(self, type, supply_id, **kwargs):  # noqa: E501
        """Get the supply box QR code stickers  # noqa: E501

        Returns QR-code stickers in svg, zplv (vertical), zplh (horizontal), png.<br> Available only if there are orders in the box. <dt>Stickers dimensions: 580x400 px</dt>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_supplies_supply_id_trbx_stickers_post_with_http_info(type, supply_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str type: Sticker format (required)
        :param str supply_id: Supply ID (required)
        :param TrbxStickersBody body:
        :return: InlineResponse20011
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['type', 'supply_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v3_supplies_supply_id_trbx_stickers_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `api_v3_supplies_supply_id_trbx_stickers_post`")  # noqa: E501
        # verify the required parameter 'supply_id' is set
        if ('supply_id' not in params or
                params['supply_id'] is None):
            raise ValueError("Missing the required parameter `supply_id` when calling `api_v3_supplies_supply_id_trbx_stickers_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'supply_id' in params:
            path_params['supplyId'] = params['supply_id']  # noqa: E501

        query_params = []
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/supplies/{supplyId}/trbx/stickers', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20011',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v3_supplies_supply_id_trbx_trbx_id_orders_order_id_delete(self, supply_id, trbx_id, order_id, **kwargs):  # noqa: E501
        """Delete order from the box  # noqa: E501

        Deletes order from the supply box. Available only while the supply is being assembled.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_supplies_supply_id_trbx_trbx_id_orders_order_id_delete(supply_id, trbx_id, order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str supply_id: Supply ID (required)
        :param str trbx_id: Box ID (required)
        :param int order_id: Order ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v3_supplies_supply_id_trbx_trbx_id_orders_order_id_delete_with_http_info(supply_id, trbx_id, order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v3_supplies_supply_id_trbx_trbx_id_orders_order_id_delete_with_http_info(supply_id, trbx_id, order_id, **kwargs)  # noqa: E501
            return data

    def api_v3_supplies_supply_id_trbx_trbx_id_orders_order_id_delete_with_http_info(self, supply_id, trbx_id, order_id, **kwargs):  # noqa: E501
        """Delete order from the box  # noqa: E501

        Deletes order from the supply box. Available only while the supply is being assembled.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_supplies_supply_id_trbx_trbx_id_orders_order_id_delete_with_http_info(supply_id, trbx_id, order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str supply_id: Supply ID (required)
        :param str trbx_id: Box ID (required)
        :param int order_id: Order ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['supply_id', 'trbx_id', 'order_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v3_supplies_supply_id_trbx_trbx_id_orders_order_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'supply_id' is set
        if ('supply_id' not in params or
                params['supply_id'] is None):
            raise ValueError("Missing the required parameter `supply_id` when calling `api_v3_supplies_supply_id_trbx_trbx_id_orders_order_id_delete`")  # noqa: E501
        # verify the required parameter 'trbx_id' is set
        if ('trbx_id' not in params or
                params['trbx_id'] is None):
            raise ValueError("Missing the required parameter `trbx_id` when calling `api_v3_supplies_supply_id_trbx_trbx_id_orders_order_id_delete`")  # noqa: E501
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params or
                params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `api_v3_supplies_supply_id_trbx_trbx_id_orders_order_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'supply_id' in params:
            path_params['supplyId'] = params['supply_id']  # noqa: E501
        if 'trbx_id' in params:
            path_params['trbxId'] = params['trbx_id']  # noqa: E501
        if 'order_id' in params:
            path_params['orderId'] = params['order_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/supplies/{supplyId}/trbx/{trbxId}/orders/{orderId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v3_supplies_supply_id_trbx_trbx_id_patch(self, supply_id, trbx_id, **kwargs):  # noqa: E501
        """Add orders to the box  # noqa: E501

        Add orders to the supply box. Available only while the supply is being assembled.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_supplies_supply_id_trbx_trbx_id_patch(supply_id, trbx_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str supply_id: Supply ID (required)
        :param str trbx_id: Box ID (required)
        :param TrbxTrbxIdBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v3_supplies_supply_id_trbx_trbx_id_patch_with_http_info(supply_id, trbx_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v3_supplies_supply_id_trbx_trbx_id_patch_with_http_info(supply_id, trbx_id, **kwargs)  # noqa: E501
            return data

    def api_v3_supplies_supply_id_trbx_trbx_id_patch_with_http_info(self, supply_id, trbx_id, **kwargs):  # noqa: E501
        """Add orders to the box  # noqa: E501

        Add orders to the supply box. Available only while the supply is being assembled.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_supplies_supply_id_trbx_trbx_id_patch_with_http_info(supply_id, trbx_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str supply_id: Supply ID (required)
        :param str trbx_id: Box ID (required)
        :param TrbxTrbxIdBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['supply_id', 'trbx_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v3_supplies_supply_id_trbx_trbx_id_patch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'supply_id' is set
        if ('supply_id' not in params or
                params['supply_id'] is None):
            raise ValueError("Missing the required parameter `supply_id` when calling `api_v3_supplies_supply_id_trbx_trbx_id_patch`")  # noqa: E501
        # verify the required parameter 'trbx_id' is set
        if ('trbx_id' not in params or
                params['trbx_id'] is None):
            raise ValueError("Missing the required parameter `trbx_id` when calling `api_v3_supplies_supply_id_trbx_trbx_id_patch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'supply_id' in params:
            path_params['supplyId'] = params['supply_id']  # noqa: E501
        if 'trbx_id' in params:
            path_params['trbxId'] = params['trbx_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/supplies/{supplyId}/trbx/{trbxId}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
