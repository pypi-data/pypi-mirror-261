# coding: utf-8

"""
    Seller API Marketplace

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.18
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from marketplace.api_client import ApiClient


class OrdersApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def api_v3_files_orders_external_stickers_post(self, **kwargs):  # noqa: E501
        """Get a list of links to stickers that are required for cross-bordering  # noqa: E501

        Returns a list of links to stickers that are required for cross-bordering.  **Method limitations**: - You cannot request more than 100 stickers at a time (no more than 100 order IDs in a request). - The method returns stickers only for orders that are in assembly (in **confirm** status).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_files_orders_external_stickers_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OrdersExternalstickersBody body:
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v3_files_orders_external_stickers_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v3_files_orders_external_stickers_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v3_files_orders_external_stickers_post_with_http_info(self, **kwargs):  # noqa: E501
        """Get a list of links to stickers that are required for cross-bordering  # noqa: E501

        Returns a list of links to stickers that are required for cross-bordering.  **Method limitations**: - You cannot request more than 100 stickers at a time (no more than 100 order IDs in a request). - The method returns stickers only for orders that are in assembly (in **confirm** status).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_files_orders_external_stickers_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OrdersExternalstickersBody body:
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v3_files_orders_external_stickers_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/files/orders/external-stickers', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2006',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v3_orders_get(self, limit, next, **kwargs):  # noqa: E501
        """Get orders  # noqa: E501

        This method returns orders information without current status. <br> The order data returned in this method does not change. <br> We recommend using it to get historical data.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_orders_get(limit, next, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: Pagination parameter. Sets the limit for the amount of data returned. (required)
        :param int next: Pagination parameter. Sets the value from which to retrieve the next batch. It should start at 0 to get the full list of data. For the subsequent requests, you must take the value from the `next` field in the response. (required)
        :param int date_from: Period start date in Unix timestamp format. Optional parameter.
        :param int date_to: Period end date in Unix timestamp format. Optional parameter.
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v3_orders_get_with_http_info(limit, next, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v3_orders_get_with_http_info(limit, next, **kwargs)  # noqa: E501
            return data

    def api_v3_orders_get_with_http_info(self, limit, next, **kwargs):  # noqa: E501
        """Get orders  # noqa: E501

        This method returns orders information without current status. <br> The order data returned in this method does not change. <br> We recommend using it to get historical data.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_orders_get_with_http_info(limit, next, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: Pagination parameter. Sets the limit for the amount of data returned. (required)
        :param int next: Pagination parameter. Sets the value from which to retrieve the next batch. It should start at 0 to get the full list of data. For the subsequent requests, you must take the value from the `next` field in the response. (required)
        :param int date_from: Period start date in Unix timestamp format. Optional parameter.
        :param int date_to: Period end date in Unix timestamp format. Optional parameter.
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit', 'next', 'date_from', 'date_to']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v3_orders_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'limit' is set
        if ('limit' not in params or
                params['limit'] is None):
            raise ValueError("Missing the required parameter `limit` when calling `api_v3_orders_get`")  # noqa: E501
        # verify the required parameter 'next' is set
        if ('next' not in params or
                params['next'] is None):
            raise ValueError("Missing the required parameter `next` when calling `api_v3_orders_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'next' in params:
            query_params.append(('next', params['next']))  # noqa: E501
        if 'date_from' in params:
            query_params.append(('dateFrom', params['date_from']))  # noqa: E501
        if 'date_to' in params:
            query_params.append(('dateTo', params['date_to']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/orders', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2002',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v3_orders_new_get(self, **kwargs):  # noqa: E501
        """Get new orders  # noqa: E501

        Returns a list of all new orders.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_orders_new_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v3_orders_new_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v3_orders_new_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v3_orders_new_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get new orders  # noqa: E501

        Returns a list of all new orders.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_orders_new_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v3_orders_new_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/orders/new', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2001',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v3_orders_order_id_cancel_patch(self, order_id, **kwargs):  # noqa: E501
        """Cancel the order  # noqa: E501

        Moves the order to **cancel** (\"Canceled by the supplier\") status.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_orders_order_id_cancel_patch(order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int order_id: Order ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v3_orders_order_id_cancel_patch_with_http_info(order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v3_orders_order_id_cancel_patch_with_http_info(order_id, **kwargs)  # noqa: E501
            return data

    def api_v3_orders_order_id_cancel_patch_with_http_info(self, order_id, **kwargs):  # noqa: E501
        """Cancel the order  # noqa: E501

        Moves the order to **cancel** (\"Canceled by the supplier\") status.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_orders_order_id_cancel_patch_with_http_info(order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int order_id: Order ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['order_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v3_orders_order_id_cancel_patch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params or
                params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `api_v3_orders_order_id_cancel_patch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'order_id' in params:
            path_params['orderId'] = params['order_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/orders/{orderId}/cancel', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v3_orders_order_id_meta_delete(self, order_id, **kwargs):  # noqa: E501
        """Delete order metadata  # noqa: E501

        Removes all order metadata values for the passed key. Possible metadata is **imei**, **uin**, **gtin**, **sgtin**.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_orders_order_id_meta_delete(order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int order_id: Order ID (required)
        :param str key: Name of the metadata to remove (**imei**, **uin**, **gtin**)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v3_orders_order_id_meta_delete_with_http_info(order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v3_orders_order_id_meta_delete_with_http_info(order_id, **kwargs)  # noqa: E501
            return data

    def api_v3_orders_order_id_meta_delete_with_http_info(self, order_id, **kwargs):  # noqa: E501
        """Delete order metadata  # noqa: E501

        Removes all order metadata values for the passed key. Possible metadata is **imei**, **uin**, **gtin**, **sgtin**.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_orders_order_id_meta_delete_with_http_info(order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int order_id: Order ID (required)
        :param str key: Name of the metadata to remove (**imei**, **uin**, **gtin**)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['order_id', 'key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v3_orders_order_id_meta_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params or
                params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `api_v3_orders_order_id_meta_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'order_id' in params:
            path_params['orderId'] = params['order_id']  # noqa: E501

        query_params = []
        if 'key' in params:
            query_params.append(('key', params['key']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/orders/{orderId}/meta', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v3_orders_order_id_meta_get(self, order_id, **kwargs):  # noqa: E501
        """Get order metadata  # noqa: E501

        Returns order metadata. Possible metadata is **imei**, **uin**, **gtin**, **sgtin**. <br>The method response returns the metadata available for the assembly job. Empty response means there is no metadata available for the order.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_orders_order_id_meta_get(order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int order_id: Order ID (required)
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v3_orders_order_id_meta_get_with_http_info(order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v3_orders_order_id_meta_get_with_http_info(order_id, **kwargs)  # noqa: E501
            return data

    def api_v3_orders_order_id_meta_get_with_http_info(self, order_id, **kwargs):  # noqa: E501
        """Get order metadata  # noqa: E501

        Returns order metadata. Possible metadata is **imei**, **uin**, **gtin**, **sgtin**. <br>The method response returns the metadata available for the assembly job. Empty response means there is no metadata available for the order.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_orders_order_id_meta_get_with_http_info(order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int order_id: Order ID (required)
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['order_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v3_orders_order_id_meta_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params or
                params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `api_v3_orders_order_id_meta_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'order_id' in params:
            path_params['orderId'] = params['order_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/orders/{orderId}/meta', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2005',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v3_orders_order_id_meta_gtin_put(self, order_id, **kwargs):  # noqa: E501
        """Add GTIN to the order  # noqa: E501

        Sets the GTIN for the order. The order can only have one GTIN. You can add the code only for orders in the `confirmed` status.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_orders_order_id_meta_gtin_put(order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int order_id: Order ID (required)
        :param MetaGtinBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v3_orders_order_id_meta_gtin_put_with_http_info(order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v3_orders_order_id_meta_gtin_put_with_http_info(order_id, **kwargs)  # noqa: E501
            return data

    def api_v3_orders_order_id_meta_gtin_put_with_http_info(self, order_id, **kwargs):  # noqa: E501
        """Add GTIN to the order  # noqa: E501

        Sets the GTIN for the order. The order can only have one GTIN. You can add the code only for orders in the `confirmed` status.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_orders_order_id_meta_gtin_put_with_http_info(order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int order_id: Order ID (required)
        :param MetaGtinBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['order_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v3_orders_order_id_meta_gtin_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params or
                params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `api_v3_orders_order_id_meta_gtin_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'order_id' in params:
            path_params['orderId'] = params['order_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/orders/{orderId}/meta/gtin', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v3_orders_order_id_meta_imei_put(self, order_id, **kwargs):  # noqa: E501
        """Add IMEI to the order  # noqa: E501

        Sets the IMEI for the order. The order can have only one IMEI. You can add the code only for orders in the `confirmed` status.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_orders_order_id_meta_imei_put(order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int order_id: Order ID (required)
        :param MetaImeiBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v3_orders_order_id_meta_imei_put_with_http_info(order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v3_orders_order_id_meta_imei_put_with_http_info(order_id, **kwargs)  # noqa: E501
            return data

    def api_v3_orders_order_id_meta_imei_put_with_http_info(self, order_id, **kwargs):  # noqa: E501
        """Add IMEI to the order  # noqa: E501

        Sets the IMEI for the order. The order can have only one IMEI. You can add the code only for orders in the `confirmed` status.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_orders_order_id_meta_imei_put_with_http_info(order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int order_id: Order ID (required)
        :param MetaImeiBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['order_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v3_orders_order_id_meta_imei_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params or
                params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `api_v3_orders_order_id_meta_imei_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'order_id' in params:
            path_params['orderId'] = params['order_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/orders/{orderId}/meta/imei', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v3_orders_order_id_meta_sgtin_put(self, order_id, **kwargs):  # noqa: E501
        """Add Data Matrix code to the order  # noqa: E501

        The method allows to assign a Data Matrix code (Chestny ZNAK) to an assembly task. The assembly task cannot have more than 24 codes. You can add a code only for orders in the confirmed status. <span class=\"newM\">new</span>  <br> <br> The uploaded Data Matrix Codes can be retrieved using the GET method <b>/api/v3/orders/{orderId}/meta</b> <br> For more information about Data Matrix Codes please check: https://chestnyznak.ru/en/ <br>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_orders_order_id_meta_sgtin_put(order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int order_id: Order ID (required)
        :param MetaSgtinBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v3_orders_order_id_meta_sgtin_put_with_http_info(order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v3_orders_order_id_meta_sgtin_put_with_http_info(order_id, **kwargs)  # noqa: E501
            return data

    def api_v3_orders_order_id_meta_sgtin_put_with_http_info(self, order_id, **kwargs):  # noqa: E501
        """Add Data Matrix code to the order  # noqa: E501

        The method allows to assign a Data Matrix code (Chestny ZNAK) to an assembly task. The assembly task cannot have more than 24 codes. You can add a code only for orders in the confirmed status. <span class=\"newM\">new</span>  <br> <br> The uploaded Data Matrix Codes can be retrieved using the GET method <b>/api/v3/orders/{orderId}/meta</b> <br> For more information about Data Matrix Codes please check: https://chestnyznak.ru/en/ <br>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_orders_order_id_meta_sgtin_put_with_http_info(order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int order_id: Order ID (required)
        :param MetaSgtinBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['order_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v3_orders_order_id_meta_sgtin_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params or
                params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `api_v3_orders_order_id_meta_sgtin_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'order_id' in params:
            path_params['orderId'] = params['order_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/orders/{orderId}/meta/sgtin', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v3_orders_order_id_meta_uin_put(self, order_id, **kwargs):  # noqa: E501
        """Add UIN (unique identification number) to the order  # noqa: E501

        Sets the UIN for the order. The order can only have one UIN. You can add the code only for orders in the `confirmed` status.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_orders_order_id_meta_uin_put(order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int order_id: Order ID (required)
        :param MetaUinBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v3_orders_order_id_meta_uin_put_with_http_info(order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v3_orders_order_id_meta_uin_put_with_http_info(order_id, **kwargs)  # noqa: E501
            return data

    def api_v3_orders_order_id_meta_uin_put_with_http_info(self, order_id, **kwargs):  # noqa: E501
        """Add UIN (unique identification number) to the order  # noqa: E501

        Sets the UIN for the order. The order can only have one UIN. You can add the code only for orders in the `confirmed` status.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_orders_order_id_meta_uin_put_with_http_info(order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int order_id: Order ID (required)
        :param MetaUinBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['order_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v3_orders_order_id_meta_uin_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params or
                params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `api_v3_orders_order_id_meta_uin_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'order_id' in params:
            path_params['orderId'] = params['order_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/orders/{orderId}/meta/uin', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v3_orders_status_post(self, **kwargs):  # noqa: E501
        """Get orders statuses  # noqa: E501

        Returns the statuses of orders from the request.  **supplierStatus** is a status of an order. Its change is always triggered only by the supplier.<br> Possible values for this field are: | Status   | Description               | How to move an order to this status   | | -------  | ---------                 | --------------------------------------| | new      | New order                 |        | confirm  | Order on assembly         | Moved automatically when the order is added to the supply **PATCH** */api/v3/supplies/{supplyId}/orders/{orderId}* | complete | Order assembled           | Moved automatically when a supply with this order moved to the delivery **PATCH** */api/v3/supplies/{supplyId}/deliver* | cancel   | Canceled by the supplier  | **PATCH** */api/v3/orders/{orderId}/cancel*   **wbStatus** is a status of an order on the Wildberries side.<br> Possible values for this field are: - **waiting** - the supplier confirmed the order, and the Wildberries has not received it yet. - **sorted** - the Wildberries warehouse sorted the order. - **sold** - the order is sold. - **canceled** - the supplier canceled the order. - **canceled_by_client** - the buyer canceled the order upon receipt. - **declined_by_client** - the buyer canceled the order in the first hour <span class=\"newM\">new</span> <br> Cancellation is available to the buyer in the first hour from the moment of order, if the order is not transferred to confirm status. - **defect** - cancellation of the order due to a defect. - **ready_for_pickup** - the order came at pickup point and waiting the client.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_orders_status_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OrdersStatusBody body:
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v3_orders_status_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v3_orders_status_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v3_orders_status_post_with_http_info(self, **kwargs):  # noqa: E501
        """Get orders statuses  # noqa: E501

        Returns the statuses of orders from the request.  **supplierStatus** is a status of an order. Its change is always triggered only by the supplier.<br> Possible values for this field are: | Status   | Description               | How to move an order to this status   | | -------  | ---------                 | --------------------------------------| | new      | New order                 |        | confirm  | Order on assembly         | Moved automatically when the order is added to the supply **PATCH** */api/v3/supplies/{supplyId}/orders/{orderId}* | complete | Order assembled           | Moved automatically when a supply with this order moved to the delivery **PATCH** */api/v3/supplies/{supplyId}/deliver* | cancel   | Canceled by the supplier  | **PATCH** */api/v3/orders/{orderId}/cancel*   **wbStatus** is a status of an order on the Wildberries side.<br> Possible values for this field are: - **waiting** - the supplier confirmed the order, and the Wildberries has not received it yet. - **sorted** - the Wildberries warehouse sorted the order. - **sold** - the order is sold. - **canceled** - the supplier canceled the order. - **canceled_by_client** - the buyer canceled the order upon receipt. - **declined_by_client** - the buyer canceled the order in the first hour <span class=\"newM\">new</span> <br> Cancellation is available to the buyer in the first hour from the moment of order, if the order is not transferred to confirm status. - **defect** - cancellation of the order due to a defect. - **ready_for_pickup** - the order came at pickup point and waiting the client.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_orders_status_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OrdersStatusBody body:
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v3_orders_status_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/orders/status', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2003',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v3_orders_stickers_post(self, type, width, height, **kwargs):  # noqa: E501
        """Get orders stickers  # noqa: E501

        Returns a list of stickers according to the requested orders. You can request a sticker in `svg`, `zplv` (vertical), `zplh` (horizontal) and `png` formats.  **Method limitations**: - You cannot request more than 100 stickers at a time (no more than 100 order IDs in a request). - The method returns stickers only for orders that are in assembly (in **confirm** status). - Available dimensions: <dd>580x400 px, with parameters `width` = 58, `height` = 40</dd> <dd>400x300 px, with parameters `width` = 40, `height` = 30</dd>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_orders_stickers_post(type, width, height, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str type: Sticker format (required)
        :param int width: Sticker width (required)
        :param int height: Sticker height (required)
        :param OrdersStickersBody body:
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v3_orders_stickers_post_with_http_info(type, width, height, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v3_orders_stickers_post_with_http_info(type, width, height, **kwargs)  # noqa: E501
            return data

    def api_v3_orders_stickers_post_with_http_info(self, type, width, height, **kwargs):  # noqa: E501
        """Get orders stickers  # noqa: E501

        Returns a list of stickers according to the requested orders. You can request a sticker in `svg`, `zplv` (vertical), `zplh` (horizontal) and `png` formats.  **Method limitations**: - You cannot request more than 100 stickers at a time (no more than 100 order IDs in a request). - The method returns stickers only for orders that are in assembly (in **confirm** status). - Available dimensions: <dd>580x400 px, with parameters `width` = 58, `height` = 40</dd> <dd>400x300 px, with parameters `width` = 40, `height` = 30</dd>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_orders_stickers_post_with_http_info(type, width, height, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str type: Sticker format (required)
        :param int width: Sticker width (required)
        :param int height: Sticker height (required)
        :param OrdersStickersBody body:
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['type', 'width', 'height', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v3_orders_stickers_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `api_v3_orders_stickers_post`")  # noqa: E501
        # verify the required parameter 'width' is set
        if ('width' not in params or
                params['width'] is None):
            raise ValueError("Missing the required parameter `width` when calling `api_v3_orders_stickers_post`")  # noqa: E501
        # verify the required parameter 'height' is set
        if ('height' not in params or
                params['height'] is None):
            raise ValueError("Missing the required parameter `height` when calling `api_v3_orders_stickers_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'width' in params:
            query_params.append(('width', params['width']))  # noqa: E501
        if 'height' in params:
            query_params.append(('height', params['height']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/orders/stickers', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2004',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
