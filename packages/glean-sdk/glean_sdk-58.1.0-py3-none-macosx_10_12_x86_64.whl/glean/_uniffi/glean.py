# This file was autogenerated by some hot garbage in the `uniffi` crate.
# Trust me, you don't want to mess with it!

# Common helper code.
#
# Ideally this would live in a separate .py file where it can be unittested etc
# in isolation, and perhaps even published as a re-useable package.
#
# However, it's important that the details of how this helper code works (e.g. the
# way that different builtin types are passed across the FFI) exactly match what's
# expected by the rust code on the other side of the interface. In practice right
# now that means coming from the exact some version of `uniffi` that was used to
# compile the rust component. The easiest way to ensure this is to bundle the Python
# helpers directly inline like we're doing here.

import os
import sys
import ctypes
import enum
import struct
import contextlib
import datetime
import typing
import platform

# Used for default argument values
_DEFAULT = object()


class _UniffiRustBuffer(ctypes.Structure):
    _fields_ = [
        ("capacity", ctypes.c_int32),
        ("len", ctypes.c_int32),
        ("data", ctypes.POINTER(ctypes.c_char)),
    ]

    @staticmethod
    def alloc(size):
        return _rust_call(_UniffiLib.ffi_glean_core_rustbuffer_alloc, size)

    @staticmethod
    def reserve(rbuf, additional):
        return _rust_call(_UniffiLib.ffi_glean_core_rustbuffer_reserve, rbuf, additional)

    def free(self):
        return _rust_call(_UniffiLib.ffi_glean_core_rustbuffer_free, self)

    def __str__(self):
        return "_UniffiRustBuffer(capacity={}, len={}, data={})".format(
            self.capacity,
            self.len,
            self.data[0:self.len]
        )

    @contextlib.contextmanager
    def alloc_with_builder(*args):
        """Context-manger to allocate a buffer using a _UniffiRustBufferBuilder.

        The allocated buffer will be automatically freed if an error occurs, ensuring that
        we don't accidentally leak it.
        """
        builder = _UniffiRustBufferBuilder()
        try:
            yield builder
        except:
            builder.discard()
            raise

    @contextlib.contextmanager
    def consume_with_stream(self):
        """Context-manager to consume a buffer using a _UniffiRustBufferStream.

        The _UniffiRustBuffer will be freed once the context-manager exits, ensuring that we don't
        leak it even if an error occurs.
        """
        try:
            s = _UniffiRustBufferStream.from_rust_buffer(self)
            yield s
            if s.remaining() != 0:
                raise RuntimeError("junk data left in buffer at end of consume_with_stream")
        finally:
            self.free()

    @contextlib.contextmanager
    def read_with_stream(self):
        """Context-manager to read a buffer using a _UniffiRustBufferStream.

        This is like consume_with_stream, but doesn't free the buffer afterwards.
        It should only be used with borrowed `_UniffiRustBuffer` data.
        """
        s = _UniffiRustBufferStream.from_rust_buffer(self)
        yield s
        if s.remaining() != 0:
            raise RuntimeError("junk data left in buffer at end of read_with_stream")

class _UniffiForeignBytes(ctypes.Structure):
    _fields_ = [
        ("len", ctypes.c_int32),
        ("data", ctypes.POINTER(ctypes.c_char)),
    ]

    def __str__(self):
        return "_UniffiForeignBytes(len={}, data={})".format(self.len, self.data[0:self.len])


class _UniffiRustBufferStream:
    """
    Helper for structured reading of bytes from a _UniffiRustBuffer
    """

    def __init__(self, data, len):
        self.data = data
        self.len = len
        self.offset = 0

    @classmethod
    def from_rust_buffer(cls, buf):
        return cls(buf.data, buf.len)

    def remaining(self):
        return self.len - self.offset

    def _unpack_from(self, size, format):
        if self.offset + size > self.len:
            raise InternalError("read past end of rust buffer")
        value = struct.unpack(format, self.data[self.offset:self.offset+size])[0]
        self.offset += size
        return value

    def read(self, size):
        if self.offset + size > self.len:
            raise InternalError("read past end of rust buffer")
        data = self.data[self.offset:self.offset+size]
        self.offset += size
        return data

    def read_i8(self):
        return self._unpack_from(1, ">b")

    def read_u8(self):
        return self._unpack_from(1, ">B")

    def read_i16(self):
        return self._unpack_from(2, ">h")

    def read_u16(self):
        return self._unpack_from(2, ">H")

    def read_i32(self):
        return self._unpack_from(4, ">i")

    def read_u32(self):
        return self._unpack_from(4, ">I")

    def read_i64(self):
        return self._unpack_from(8, ">q")

    def read_u64(self):
        return self._unpack_from(8, ">Q")

    def read_float(self):
        v = self._unpack_from(4, ">f")
        return v

    def read_double(self):
        return self._unpack_from(8, ">d")

    def read_c_size_t(self):
        return self._unpack_from(ctypes.sizeof(ctypes.c_size_t) , "@N")

class _UniffiRustBufferBuilder:
    """
    Helper for structured writing of bytes into a _UniffiRustBuffer.
    """

    def __init__(self):
        self.rbuf = _UniffiRustBuffer.alloc(16)
        self.rbuf.len = 0

    def finalize(self):
        rbuf = self.rbuf
        self.rbuf = None
        return rbuf

    def discard(self):
        if self.rbuf is not None:
            rbuf = self.finalize()
            rbuf.free()

    @contextlib.contextmanager
    def _reserve(self, num_bytes):
        if self.rbuf.len + num_bytes > self.rbuf.capacity:
            self.rbuf = _UniffiRustBuffer.reserve(self.rbuf, num_bytes)
        yield None
        self.rbuf.len += num_bytes

    def _pack_into(self, size, format, value):
        with self._reserve(size):
            # XXX TODO: I feel like I should be able to use `struct.pack_into` here but can't figure it out.
            for i, byte in enumerate(struct.pack(format, value)):
                self.rbuf.data[self.rbuf.len + i] = byte

    def write(self, value):
        with self._reserve(len(value)):
            for i, byte in enumerate(value):
                self.rbuf.data[self.rbuf.len + i] = byte

    def write_i8(self, v):
        self._pack_into(1, ">b", v)

    def write_u8(self, v):
        self._pack_into(1, ">B", v)

    def write_i16(self, v):
        self._pack_into(2, ">h", v)

    def write_u16(self, v):
        self._pack_into(2, ">H", v)

    def write_i32(self, v):
        self._pack_into(4, ">i", v)

    def write_u32(self, v):
        self._pack_into(4, ">I", v)

    def write_i64(self, v):
        self._pack_into(8, ">q", v)

    def write_u64(self, v):
        self._pack_into(8, ">Q", v)

    def write_float(self, v):
        self._pack_into(4, ">f", v)

    def write_double(self, v):
        self._pack_into(8, ">d", v)

    def write_c_size_t(self, v):
        self._pack_into(ctypes.sizeof(ctypes.c_size_t) , "@N", v)
# A handful of classes and functions to support the generated data structures.
# This would be a good candidate for isolating in its own ffi-support lib.

class InternalError(Exception):
    pass

class _UniffiRustCallStatus(ctypes.Structure):
    """
    Error runtime.
    """
    _fields_ = [
        ("code", ctypes.c_int8),
        ("error_buf", _UniffiRustBuffer),
    ]

    # These match the values from the uniffi::rustcalls module
    CALL_SUCCESS = 0
    CALL_ERROR = 1
    CALL_PANIC = 2

    def __str__(self):
        if self.code == _UniffiRustCallStatus.CALL_SUCCESS:
            return "_UniffiRustCallStatus(CALL_SUCCESS)"
        elif self.code == _UniffiRustCallStatus.CALL_ERROR:
            return "_UniffiRustCallStatus(CALL_ERROR)"
        elif self.code == _UniffiRustCallStatus.CALL_PANIC:
            return "_UniffiRustCallStatus(CALL_PANIC)"
        else:
            return "_UniffiRustCallStatus(<invalid code>)"

def _rust_call(fn, *args):
    # Call a rust function
    return _rust_call_with_error(None, fn, *args)

def _rust_call_with_error(error_ffi_converter, fn, *args):
    # Call a rust function and handle any errors
    #
    # This function is used for rust calls that return Result<> and therefore can set the CALL_ERROR status code.
    # error_ffi_converter must be set to the _UniffiConverter for the error class that corresponds to the result.
    call_status = _UniffiRustCallStatus(code=_UniffiRustCallStatus.CALL_SUCCESS, error_buf=_UniffiRustBuffer(0, 0, None))

    args_with_error = args + (ctypes.byref(call_status),)
    result = fn(*args_with_error)
    _uniffi_check_call_status(error_ffi_converter, call_status)
    return result

def _uniffi_check_call_status(error_ffi_converter, call_status):
    if call_status.code == _UniffiRustCallStatus.CALL_SUCCESS:
        pass
    elif call_status.code == _UniffiRustCallStatus.CALL_ERROR:
        if error_ffi_converter is None:
            call_status.error_buf.free()
            raise InternalError("_rust_call_with_error: CALL_ERROR, but error_ffi_converter is None")
        else:
            raise error_ffi_converter.lift(call_status.error_buf)
    elif call_status.code == _UniffiRustCallStatus.CALL_PANIC:
        # When the rust code sees a panic, it tries to construct a _UniffiRustBuffer
        # with the message.  But if that code panics, then it just sends back
        # an empty buffer.
        if call_status.error_buf.len > 0:
            msg = _UniffiConverterString.lift(call_status.error_buf)
        else:
            msg = "Unknown rust panic"
        raise InternalError(msg)
    else:
        raise InternalError("Invalid _UniffiRustCallStatus code: {}".format(
            call_status.code))

# A function pointer for a callback as defined by UniFFI.
# Rust definition `fn(handle: u64, method: u32, args: _UniffiRustBuffer, buf_ptr: *mut _UniffiRustBuffer) -> int`
_UNIFFI_FOREIGN_CALLBACK_T = ctypes.CFUNCTYPE(ctypes.c_int, ctypes.c_ulonglong, ctypes.c_ulong, ctypes.POINTER(ctypes.c_char), ctypes.c_int, ctypes.POINTER(_UniffiRustBuffer))

# UniFFI future continuation
_UNIFFI_FUTURE_CONTINUATION_T = ctypes.CFUNCTYPE(None, ctypes.c_size_t, ctypes.c_int8)
class _UniffiPointerManagerCPython:
    """
    Manage giving out pointers to Python objects on CPython

    This class is used to generate opaque pointers that reference Python objects to pass to Rust.
    It assumes a CPython platform.  See _UniffiPointerManagerGeneral for the alternative.
    """

    def new_pointer(self, obj):
        """
        Get a pointer for an object as a ctypes.c_size_t instance

        Each call to new_pointer() must be balanced with exactly one call to release_pointer()

        This returns a ctypes.c_size_t.  This is always the same size as a pointer and can be
        interchanged with pointers for FFI function arguments and return values.
        """
        # IncRef the object since we're going to pass a pointer to Rust
        ctypes.pythonapi.Py_IncRef(ctypes.py_object(obj))
        # id() is the object address on CPython
        # (https://docs.python.org/3/library/functions.html#id)
        return id(obj)

    def release_pointer(self, address):
        py_obj = ctypes.cast(address, ctypes.py_object)
        obj = py_obj.value
        ctypes.pythonapi.Py_DecRef(py_obj)
        return obj

    def lookup(self, address):
        return ctypes.cast(address, ctypes.py_object).value

class _UniffiPointerManagerGeneral:
    """
    Manage giving out pointers to Python objects on non-CPython platforms

    This has the same API as _UniffiPointerManagerCPython, but doesn't assume we're running on
    CPython and is slightly slower.

    Instead of using real pointers, it maps integer values to objects and returns the keys as
    c_size_t values.
    """

    def __init__(self):
        self._map = {}
        self._lock = threading.Lock()
        self._current_handle = 0

    def new_pointer(self, obj):
        with self._lock:
            handle = self._current_handle
            self._current_handle += 1
            self._map[handle] = obj
        return handle

    def release_pointer(self, handle):
        with self._lock:
            return self._map.pop(handle)

    def lookup(self, handle):
        with self._lock:
            return self._map[handle]

# Pick an pointer manager implementation based on the platform
if platform.python_implementation() == 'CPython':
    _UniffiPointerManager = _UniffiPointerManagerCPython # type: ignore
else:
    _UniffiPointerManager = _UniffiPointerManagerGeneral # type: ignore
# Types conforming to `_UniffiConverterPrimitive` pass themselves directly over the FFI.
class _UniffiConverterPrimitive:
    @classmethod
    def check(cls, value):
        return value

    @classmethod
    def lift(cls, value):
        return value

    @classmethod
    def lower(cls, value):
        return cls.lowerUnchecked(cls.check(value))

    @classmethod
    def lowerUnchecked(cls, value):
        return value

    @classmethod
    def write(cls, value, buf):
        cls.write_unchecked(cls.check(value), buf)

class _UniffiConverterPrimitiveInt(_UniffiConverterPrimitive):
    @classmethod
    def check(cls, value):
        try:
            value = value.__index__()
        except Exception:
            raise TypeError("'{}' object cannot be interpreted as an integer".format(type(value).__name__))
        if not isinstance(value, int):
            raise TypeError("__index__ returned non-int (type {})".format(type(value).__name__))
        if not cls.VALUE_MIN <= value < cls.VALUE_MAX:
            raise ValueError("{} requires {} <= value < {}".format(cls.CLASS_NAME, cls.VALUE_MIN, cls.VALUE_MAX))
        return super().check(value)

class _UniffiConverterPrimitiveFloat(_UniffiConverterPrimitive):
    @classmethod
    def check(cls, value):
        try:
            value = value.__float__()
        except Exception:
            raise TypeError("must be real number, not {}".format(type(value).__name__))
        if not isinstance(value, float):
            raise TypeError("__float__ returned non-float (type {})".format(type(value).__name__))
        return super().check(value)

# Helper class for wrapper types that will always go through a _UniffiRustBuffer.
# Classes should inherit from this and implement the `read` and `write` static methods.
class _UniffiConverterRustBuffer:
    @classmethod
    def lift(cls, rbuf):
        with rbuf.consume_with_stream() as stream:
            return cls.read(stream)

    @classmethod
    def lower(cls, value):
        with _UniffiRustBuffer.alloc_with_builder() as builder:
            cls.write(value, builder)
            return builder.finalize()

# Contains loading, initialization code, and the FFI Function declarations.
# Define some ctypes FFI types that we use in the library

"""
ctypes type for the foreign executor callback.  This is a built-in interface for scheduling
tasks

Args:
  executor: opaque c_size_t value representing the eventloop
  delay: delay in ms
  task: function pointer to the task callback
  task_data: void pointer to the task callback data

Normally we should call task(task_data) after the detail.
However, when task is NULL this indicates that Rust has dropped the ForeignExecutor and we should
decrease the EventLoop refcount.
"""
_UNIFFI_FOREIGN_EXECUTOR_CALLBACK_T = ctypes.CFUNCTYPE(ctypes.c_int8, ctypes.c_size_t, ctypes.c_uint32, ctypes.c_void_p, ctypes.c_void_p)

"""
Function pointer for a Rust task, which a callback function that takes a opaque pointer
"""
_UNIFFI_RUST_TASK = ctypes.CFUNCTYPE(None, ctypes.c_void_p, ctypes.c_int8)

def _uniffi_future_callback_t(return_type):
    """
    Factory function to create callback function types for async functions
    """
    return ctypes.CFUNCTYPE(None, ctypes.c_size_t, return_type, _UniffiRustCallStatus)

def _uniffi_load_indirect():
    """
    This is how we find and load the dynamic library provided by the component.
    For now we just look it up by name.
    """
    if sys.platform == "darwin":
        libname = "lib{}.dylib"
    elif sys.platform.startswith("win"):
        # As of python3.8, ctypes does not seem to search $PATH when loading DLLs.
        # We could use `os.add_dll_directory` to configure the search path, but
        # it doesn't feel right to mess with application-wide settings. Let's
        # assume that the `.dll` is next to the `.py` file and load by full path.
        libname = os.path.join(
            os.path.dirname(__file__),
            "{}.dll",
        )
    else:
        # Anything else must be an ELF platform - Linux, *BSD, Solaris/illumos
        libname = "lib{}.so"

    libname = libname.format("glean_ffi")
    path = os.path.join(os.path.dirname(__file__), libname)
    lib = ctypes.cdll.LoadLibrary(path)
    return lib

def _uniffi_check_contract_api_version(lib):
    # Get the bindings contract version from our ComponentInterface
    bindings_contract_version = 24
    # Get the scaffolding contract version by calling the into the dylib
    scaffolding_contract_version = lib.ffi_glean_core_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version:
        raise InternalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")

def _uniffi_check_api_checksums(lib):
    if lib.uniffi_glean_core_checksum_func_glean_enable_logging() != 23531:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_func_glean_enable_logging_to_fd() != 3838:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_func_glean_get_upload_task() != 42269:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_func_glean_handle_client_active() != 15870:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_func_glean_handle_client_inactive() != 53329:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_func_glean_initialize() != 1269:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_func_glean_initialize_for_subprocess() != 27932:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_func_glean_process_ping_upload_response() != 61682:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_func_glean_register_event_listener() != 21714:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_func_glean_set_debug_view_tag() != 40313:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_func_glean_set_dirty_flag() != 30094:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_func_glean_set_experiment_active() != 64455:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_func_glean_set_experiment_inactive() != 10322:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_func_glean_set_experimentation_id() != 36389:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_func_glean_set_log_pings() != 11842:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_func_glean_set_metrics_enabled_config() != 6061:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_func_glean_set_source_tags() != 42620:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_func_glean_set_test_mode() != 4528:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_func_glean_set_upload_enabled() != 20119:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_func_glean_shutdown() != 1598:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_func_glean_submit_ping_by_name() != 33584:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_func_glean_submit_ping_by_name_sync() != 10812:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_func_glean_test_destroy_glean() != 14848:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_func_glean_test_get_experiment_data() != 29441:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_func_glean_test_get_experimentation_id() != 42963:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_func_glean_unregister_event_listener() != 22885:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_booleanmetric_set() != 50883:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_booleanmetric_test_get_num_recorded_errors() != 43984:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_booleanmetric_test_get_value() != 31632:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_countermetric_add() != 22929:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_countermetric_test_get_num_recorded_errors() != 27933:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_countermetric_test_get_value() != 63452:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_customdistributionmetric_accumulate_samples() != 14486:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_customdistributionmetric_accumulate_single_sample() != 35720:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_customdistributionmetric_test_get_num_recorded_errors() != 27350:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_customdistributionmetric_test_get_value() != 62185:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_datetimemetric_set() != 56290:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_datetimemetric_test_get_num_recorded_errors() != 5553:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_datetimemetric_test_get_value() != 31968:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_datetimemetric_test_get_value_as_string() != 34323:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_denominatormetric_add() != 6770:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_denominatormetric_test_get_num_recorded_errors() != 25617:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_denominatormetric_test_get_value() != 51736:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_eventmetric_record() != 34620:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_eventmetric_test_get_num_recorded_errors() != 36170:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_eventmetric_test_get_value() != 36109:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_labeledboolean_get() != 56079:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_labeledboolean_test_get_num_recorded_errors() != 41466:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_labeledcounter_get() != 3023:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_labeledcounter_test_get_num_recorded_errors() != 60730:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_labeledstring_get() != 31395:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_labeledstring_test_get_num_recorded_errors() != 46588:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_memorydistributionmetric_accumulate() != 58021:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_memorydistributionmetric_accumulate_samples() != 40351:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_memorydistributionmetric_test_get_num_recorded_errors() != 2157:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_memorydistributionmetric_test_get_value() != 19993:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_numeratormetric_add_to_numerator() != 32381:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_numeratormetric_test_get_num_recorded_errors() != 48491:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_numeratormetric_test_get_value() != 35454:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_pingtype_submit() != 11138:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_quantitymetric_set() != 44859:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_quantitymetric_test_get_num_recorded_errors() != 22634:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_quantitymetric_test_get_value() != 44076:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_ratemetric_add_to_denominator() != 40751:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_ratemetric_add_to_numerator() != 28742:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_ratemetric_test_get_num_recorded_errors() != 6012:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_ratemetric_test_get_value() != 65115:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_stringlistmetric_add() != 48169:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_stringlistmetric_set() != 47789:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_stringlistmetric_test_get_num_recorded_errors() != 29223:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_stringlistmetric_test_get_value() != 17711:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_stringmetric_set() != 8577:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_stringmetric_test_get_num_recorded_errors() != 51353:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_stringmetric_test_get_value() != 13569:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_textmetric_set() != 47464:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_textmetric_test_get_num_recorded_errors() != 6506:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_textmetric_test_get_value() != 40956:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_timespanmetric_cancel() != 24521:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_timespanmetric_set_raw_nanos() != 19360:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_timespanmetric_start() != 34133:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_timespanmetric_stop() != 19007:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_timespanmetric_test_get_num_recorded_errors() != 21002:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_timespanmetric_test_get_value() != 43155:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_timingdistributionmetric_accumulate_samples() != 64118:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_timingdistributionmetric_accumulate_single_sample() != 20027:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_timingdistributionmetric_cancel() != 62769:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_timingdistributionmetric_start() != 23057:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_timingdistributionmetric_stop_and_accumulate() != 18007:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_timingdistributionmetric_test_get_num_recorded_errors() != 45920:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_timingdistributionmetric_test_get_value() != 17097:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_urlmetric_set() != 18842:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_urlmetric_test_get_num_recorded_errors() != 43952:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_urlmetric_test_get_value() != 6352:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_uuidmetric_generate_and_set() != 65421:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_uuidmetric_set() != 35424:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_uuidmetric_test_get_num_recorded_errors() != 50594:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_uuidmetric_test_get_value() != 60994:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_constructor_booleanmetric_new() != 57049:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_constructor_countermetric_new() != 16504:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_constructor_customdistributionmetric_new() != 41233:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_constructor_datetimemetric_new() != 34832:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_constructor_denominatormetric_new() != 18239:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_constructor_eventmetric_new() != 27818:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_constructor_labeledboolean_new() != 60112:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_constructor_labeledcounter_new() != 42151:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_constructor_labeledstring_new() != 54661:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_constructor_memorydistributionmetric_new() != 34053:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_constructor_numeratormetric_new() != 57953:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_constructor_pingtype_new() != 4132:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_constructor_quantitymetric_new() != 11876:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_constructor_ratemetric_new() != 2200:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_constructor_stringlistmetric_new() != 29562:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_constructor_stringmetric_new() != 64650:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_constructor_textmetric_new() != 64922:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_constructor_timespanmetric_new() != 3993:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_constructor_timingdistributionmetric_new() != 3191:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_constructor_urlmetric_new() != 64124:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_constructor_uuidmetric_new() != 29344:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_gleaneventlistener_on_event_recorded() != 16527:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_ongleanevents_initialize_finished() != 55717:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_ongleanevents_trigger_upload() != 28788:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_ongleanevents_start_metrics_ping_scheduler() != 14495:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_ongleanevents_cancel_uploads() != 18603:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_ongleanevents_shutdown() != 62541:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")

# A ctypes library to expose the extern-C FFI definitions.
# This is an implementation detail which will be called internally by the public API.

_UniffiLib = _uniffi_load_indirect()
_UniffiLib.uniffi_glean_core_fn_free_booleanmetric.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_free_booleanmetric.restype = None
_UniffiLib.uniffi_glean_core_fn_constructor_booleanmetric_new.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_constructor_booleanmetric_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_glean_core_fn_method_booleanmetric_set.argtypes = (
    ctypes.c_void_p,
    ctypes.c_int8,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_booleanmetric_set.restype = None
_UniffiLib.uniffi_glean_core_fn_method_booleanmetric_test_get_num_recorded_errors.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_booleanmetric_test_get_num_recorded_errors.restype = ctypes.c_int32
_UniffiLib.uniffi_glean_core_fn_method_booleanmetric_test_get_value.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_booleanmetric_test_get_value.restype = _UniffiRustBuffer
_UniffiLib.uniffi_glean_core_fn_free_countermetric.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_free_countermetric.restype = None
_UniffiLib.uniffi_glean_core_fn_constructor_countermetric_new.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_constructor_countermetric_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_glean_core_fn_method_countermetric_add.argtypes = (
    ctypes.c_void_p,
    ctypes.c_int32,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_countermetric_add.restype = None
_UniffiLib.uniffi_glean_core_fn_method_countermetric_test_get_num_recorded_errors.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_countermetric_test_get_num_recorded_errors.restype = ctypes.c_int32
_UniffiLib.uniffi_glean_core_fn_method_countermetric_test_get_value.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_countermetric_test_get_value.restype = _UniffiRustBuffer
_UniffiLib.uniffi_glean_core_fn_free_customdistributionmetric.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_free_customdistributionmetric.restype = None
_UniffiLib.uniffi_glean_core_fn_constructor_customdistributionmetric_new.argtypes = (
    _UniffiRustBuffer,
    ctypes.c_int64,
    ctypes.c_int64,
    ctypes.c_int64,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_constructor_customdistributionmetric_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_glean_core_fn_method_customdistributionmetric_accumulate_samples.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_customdistributionmetric_accumulate_samples.restype = None
_UniffiLib.uniffi_glean_core_fn_method_customdistributionmetric_accumulate_single_sample.argtypes = (
    ctypes.c_void_p,
    ctypes.c_int64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_customdistributionmetric_accumulate_single_sample.restype = None
_UniffiLib.uniffi_glean_core_fn_method_customdistributionmetric_test_get_num_recorded_errors.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_customdistributionmetric_test_get_num_recorded_errors.restype = ctypes.c_int32
_UniffiLib.uniffi_glean_core_fn_method_customdistributionmetric_test_get_value.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_customdistributionmetric_test_get_value.restype = _UniffiRustBuffer
_UniffiLib.uniffi_glean_core_fn_free_datetimemetric.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_free_datetimemetric.restype = None
_UniffiLib.uniffi_glean_core_fn_constructor_datetimemetric_new.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_constructor_datetimemetric_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_glean_core_fn_method_datetimemetric_set.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_datetimemetric_set.restype = None
_UniffiLib.uniffi_glean_core_fn_method_datetimemetric_test_get_num_recorded_errors.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_datetimemetric_test_get_num_recorded_errors.restype = ctypes.c_int32
_UniffiLib.uniffi_glean_core_fn_method_datetimemetric_test_get_value.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_datetimemetric_test_get_value.restype = _UniffiRustBuffer
_UniffiLib.uniffi_glean_core_fn_method_datetimemetric_test_get_value_as_string.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_datetimemetric_test_get_value_as_string.restype = _UniffiRustBuffer
_UniffiLib.uniffi_glean_core_fn_free_denominatormetric.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_free_denominatormetric.restype = None
_UniffiLib.uniffi_glean_core_fn_constructor_denominatormetric_new.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_constructor_denominatormetric_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_glean_core_fn_method_denominatormetric_add.argtypes = (
    ctypes.c_void_p,
    ctypes.c_int32,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_denominatormetric_add.restype = None
_UniffiLib.uniffi_glean_core_fn_method_denominatormetric_test_get_num_recorded_errors.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_denominatormetric_test_get_num_recorded_errors.restype = ctypes.c_int32
_UniffiLib.uniffi_glean_core_fn_method_denominatormetric_test_get_value.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_denominatormetric_test_get_value.restype = _UniffiRustBuffer
_UniffiLib.uniffi_glean_core_fn_free_eventmetric.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_free_eventmetric.restype = None
_UniffiLib.uniffi_glean_core_fn_constructor_eventmetric_new.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_constructor_eventmetric_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_glean_core_fn_method_eventmetric_record.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_eventmetric_record.restype = None
_UniffiLib.uniffi_glean_core_fn_method_eventmetric_test_get_num_recorded_errors.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_eventmetric_test_get_num_recorded_errors.restype = ctypes.c_int32
_UniffiLib.uniffi_glean_core_fn_method_eventmetric_test_get_value.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_eventmetric_test_get_value.restype = _UniffiRustBuffer
_UniffiLib.uniffi_glean_core_fn_free_labeledboolean.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_free_labeledboolean.restype = None
_UniffiLib.uniffi_glean_core_fn_constructor_labeledboolean_new.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_constructor_labeledboolean_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_glean_core_fn_method_labeledboolean_get.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_labeledboolean_get.restype = ctypes.c_void_p
_UniffiLib.uniffi_glean_core_fn_method_labeledboolean_test_get_num_recorded_errors.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_labeledboolean_test_get_num_recorded_errors.restype = ctypes.c_int32
_UniffiLib.uniffi_glean_core_fn_free_labeledcounter.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_free_labeledcounter.restype = None
_UniffiLib.uniffi_glean_core_fn_constructor_labeledcounter_new.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_constructor_labeledcounter_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_glean_core_fn_method_labeledcounter_get.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_labeledcounter_get.restype = ctypes.c_void_p
_UniffiLib.uniffi_glean_core_fn_method_labeledcounter_test_get_num_recorded_errors.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_labeledcounter_test_get_num_recorded_errors.restype = ctypes.c_int32
_UniffiLib.uniffi_glean_core_fn_free_labeledstring.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_free_labeledstring.restype = None
_UniffiLib.uniffi_glean_core_fn_constructor_labeledstring_new.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_constructor_labeledstring_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_glean_core_fn_method_labeledstring_get.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_labeledstring_get.restype = ctypes.c_void_p
_UniffiLib.uniffi_glean_core_fn_method_labeledstring_test_get_num_recorded_errors.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_labeledstring_test_get_num_recorded_errors.restype = ctypes.c_int32
_UniffiLib.uniffi_glean_core_fn_free_memorydistributionmetric.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_free_memorydistributionmetric.restype = None
_UniffiLib.uniffi_glean_core_fn_constructor_memorydistributionmetric_new.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_constructor_memorydistributionmetric_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_glean_core_fn_method_memorydistributionmetric_accumulate.argtypes = (
    ctypes.c_void_p,
    ctypes.c_int64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_memorydistributionmetric_accumulate.restype = None
_UniffiLib.uniffi_glean_core_fn_method_memorydistributionmetric_accumulate_samples.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_memorydistributionmetric_accumulate_samples.restype = None
_UniffiLib.uniffi_glean_core_fn_method_memorydistributionmetric_test_get_num_recorded_errors.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_memorydistributionmetric_test_get_num_recorded_errors.restype = ctypes.c_int32
_UniffiLib.uniffi_glean_core_fn_method_memorydistributionmetric_test_get_value.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_memorydistributionmetric_test_get_value.restype = _UniffiRustBuffer
_UniffiLib.uniffi_glean_core_fn_free_numeratormetric.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_free_numeratormetric.restype = None
_UniffiLib.uniffi_glean_core_fn_constructor_numeratormetric_new.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_constructor_numeratormetric_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_glean_core_fn_method_numeratormetric_add_to_numerator.argtypes = (
    ctypes.c_void_p,
    ctypes.c_int32,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_numeratormetric_add_to_numerator.restype = None
_UniffiLib.uniffi_glean_core_fn_method_numeratormetric_test_get_num_recorded_errors.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_numeratormetric_test_get_num_recorded_errors.restype = ctypes.c_int32
_UniffiLib.uniffi_glean_core_fn_method_numeratormetric_test_get_value.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_numeratormetric_test_get_value.restype = _UniffiRustBuffer
_UniffiLib.uniffi_glean_core_fn_free_pingtype.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_free_pingtype.restype = None
_UniffiLib.uniffi_glean_core_fn_constructor_pingtype_new.argtypes = (
    _UniffiRustBuffer,
    ctypes.c_int8,
    ctypes.c_int8,
    ctypes.c_int8,
    ctypes.c_int8,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_constructor_pingtype_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_glean_core_fn_method_pingtype_submit.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_pingtype_submit.restype = None
_UniffiLib.uniffi_glean_core_fn_free_quantitymetric.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_free_quantitymetric.restype = None
_UniffiLib.uniffi_glean_core_fn_constructor_quantitymetric_new.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_constructor_quantitymetric_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_glean_core_fn_method_quantitymetric_set.argtypes = (
    ctypes.c_void_p,
    ctypes.c_int64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_quantitymetric_set.restype = None
_UniffiLib.uniffi_glean_core_fn_method_quantitymetric_test_get_num_recorded_errors.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_quantitymetric_test_get_num_recorded_errors.restype = ctypes.c_int32
_UniffiLib.uniffi_glean_core_fn_method_quantitymetric_test_get_value.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_quantitymetric_test_get_value.restype = _UniffiRustBuffer
_UniffiLib.uniffi_glean_core_fn_free_ratemetric.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_free_ratemetric.restype = None
_UniffiLib.uniffi_glean_core_fn_constructor_ratemetric_new.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_constructor_ratemetric_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_glean_core_fn_method_ratemetric_add_to_denominator.argtypes = (
    ctypes.c_void_p,
    ctypes.c_int32,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_ratemetric_add_to_denominator.restype = None
_UniffiLib.uniffi_glean_core_fn_method_ratemetric_add_to_numerator.argtypes = (
    ctypes.c_void_p,
    ctypes.c_int32,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_ratemetric_add_to_numerator.restype = None
_UniffiLib.uniffi_glean_core_fn_method_ratemetric_test_get_num_recorded_errors.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_ratemetric_test_get_num_recorded_errors.restype = ctypes.c_int32
_UniffiLib.uniffi_glean_core_fn_method_ratemetric_test_get_value.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_ratemetric_test_get_value.restype = _UniffiRustBuffer
_UniffiLib.uniffi_glean_core_fn_free_stringlistmetric.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_free_stringlistmetric.restype = None
_UniffiLib.uniffi_glean_core_fn_constructor_stringlistmetric_new.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_constructor_stringlistmetric_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_glean_core_fn_method_stringlistmetric_add.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_stringlistmetric_add.restype = None
_UniffiLib.uniffi_glean_core_fn_method_stringlistmetric_set.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_stringlistmetric_set.restype = None
_UniffiLib.uniffi_glean_core_fn_method_stringlistmetric_test_get_num_recorded_errors.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_stringlistmetric_test_get_num_recorded_errors.restype = ctypes.c_int32
_UniffiLib.uniffi_glean_core_fn_method_stringlistmetric_test_get_value.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_stringlistmetric_test_get_value.restype = _UniffiRustBuffer
_UniffiLib.uniffi_glean_core_fn_free_stringmetric.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_free_stringmetric.restype = None
_UniffiLib.uniffi_glean_core_fn_constructor_stringmetric_new.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_constructor_stringmetric_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_glean_core_fn_method_stringmetric_set.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_stringmetric_set.restype = None
_UniffiLib.uniffi_glean_core_fn_method_stringmetric_test_get_num_recorded_errors.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_stringmetric_test_get_num_recorded_errors.restype = ctypes.c_int32
_UniffiLib.uniffi_glean_core_fn_method_stringmetric_test_get_value.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_stringmetric_test_get_value.restype = _UniffiRustBuffer
_UniffiLib.uniffi_glean_core_fn_free_textmetric.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_free_textmetric.restype = None
_UniffiLib.uniffi_glean_core_fn_constructor_textmetric_new.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_constructor_textmetric_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_glean_core_fn_method_textmetric_set.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_textmetric_set.restype = None
_UniffiLib.uniffi_glean_core_fn_method_textmetric_test_get_num_recorded_errors.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_textmetric_test_get_num_recorded_errors.restype = ctypes.c_int32
_UniffiLib.uniffi_glean_core_fn_method_textmetric_test_get_value.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_textmetric_test_get_value.restype = _UniffiRustBuffer
_UniffiLib.uniffi_glean_core_fn_free_timespanmetric.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_free_timespanmetric.restype = None
_UniffiLib.uniffi_glean_core_fn_constructor_timespanmetric_new.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_constructor_timespanmetric_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_glean_core_fn_method_timespanmetric_cancel.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_timespanmetric_cancel.restype = None
_UniffiLib.uniffi_glean_core_fn_method_timespanmetric_set_raw_nanos.argtypes = (
    ctypes.c_void_p,
    ctypes.c_int64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_timespanmetric_set_raw_nanos.restype = None
_UniffiLib.uniffi_glean_core_fn_method_timespanmetric_start.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_timespanmetric_start.restype = None
_UniffiLib.uniffi_glean_core_fn_method_timespanmetric_stop.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_timespanmetric_stop.restype = None
_UniffiLib.uniffi_glean_core_fn_method_timespanmetric_test_get_num_recorded_errors.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_timespanmetric_test_get_num_recorded_errors.restype = ctypes.c_int32
_UniffiLib.uniffi_glean_core_fn_method_timespanmetric_test_get_value.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_timespanmetric_test_get_value.restype = _UniffiRustBuffer
_UniffiLib.uniffi_glean_core_fn_free_timingdistributionmetric.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_free_timingdistributionmetric.restype = None
_UniffiLib.uniffi_glean_core_fn_constructor_timingdistributionmetric_new.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_constructor_timingdistributionmetric_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_glean_core_fn_method_timingdistributionmetric_accumulate_samples.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_timingdistributionmetric_accumulate_samples.restype = None
_UniffiLib.uniffi_glean_core_fn_method_timingdistributionmetric_accumulate_single_sample.argtypes = (
    ctypes.c_void_p,
    ctypes.c_int64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_timingdistributionmetric_accumulate_single_sample.restype = None
_UniffiLib.uniffi_glean_core_fn_method_timingdistributionmetric_cancel.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_timingdistributionmetric_cancel.restype = None
_UniffiLib.uniffi_glean_core_fn_method_timingdistributionmetric_start.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_timingdistributionmetric_start.restype = _UniffiRustBuffer
_UniffiLib.uniffi_glean_core_fn_method_timingdistributionmetric_stop_and_accumulate.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_timingdistributionmetric_stop_and_accumulate.restype = None
_UniffiLib.uniffi_glean_core_fn_method_timingdistributionmetric_test_get_num_recorded_errors.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_timingdistributionmetric_test_get_num_recorded_errors.restype = ctypes.c_int32
_UniffiLib.uniffi_glean_core_fn_method_timingdistributionmetric_test_get_value.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_timingdistributionmetric_test_get_value.restype = _UniffiRustBuffer
_UniffiLib.uniffi_glean_core_fn_free_urlmetric.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_free_urlmetric.restype = None
_UniffiLib.uniffi_glean_core_fn_constructor_urlmetric_new.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_constructor_urlmetric_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_glean_core_fn_method_urlmetric_set.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_urlmetric_set.restype = None
_UniffiLib.uniffi_glean_core_fn_method_urlmetric_test_get_num_recorded_errors.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_urlmetric_test_get_num_recorded_errors.restype = ctypes.c_int32
_UniffiLib.uniffi_glean_core_fn_method_urlmetric_test_get_value.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_urlmetric_test_get_value.restype = _UniffiRustBuffer
_UniffiLib.uniffi_glean_core_fn_free_uuidmetric.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_free_uuidmetric.restype = None
_UniffiLib.uniffi_glean_core_fn_constructor_uuidmetric_new.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_constructor_uuidmetric_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_glean_core_fn_method_uuidmetric_generate_and_set.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_uuidmetric_generate_and_set.restype = _UniffiRustBuffer
_UniffiLib.uniffi_glean_core_fn_method_uuidmetric_set.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_uuidmetric_set.restype = None
_UniffiLib.uniffi_glean_core_fn_method_uuidmetric_test_get_num_recorded_errors.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_uuidmetric_test_get_num_recorded_errors.restype = ctypes.c_int32
_UniffiLib.uniffi_glean_core_fn_method_uuidmetric_test_get_value.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_uuidmetric_test_get_value.restype = _UniffiRustBuffer
_UniffiLib.uniffi_glean_core_fn_init_callback_gleaneventlistener.argtypes = (
    _UNIFFI_FOREIGN_CALLBACK_T,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_init_callback_gleaneventlistener.restype = None
_UniffiLib.uniffi_glean_core_fn_init_callback_ongleanevents.argtypes = (
    _UNIFFI_FOREIGN_CALLBACK_T,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_init_callback_ongleanevents.restype = None
_UniffiLib.uniffi_glean_core_fn_func_glean_enable_logging.argtypes = (
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_func_glean_enable_logging.restype = None
_UniffiLib.uniffi_glean_core_fn_func_glean_enable_logging_to_fd.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_func_glean_enable_logging_to_fd.restype = None
_UniffiLib.uniffi_glean_core_fn_func_glean_get_upload_task.argtypes = (
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_func_glean_get_upload_task.restype = _UniffiRustBuffer
_UniffiLib.uniffi_glean_core_fn_func_glean_handle_client_active.argtypes = (
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_func_glean_handle_client_active.restype = None
_UniffiLib.uniffi_glean_core_fn_func_glean_handle_client_inactive.argtypes = (
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_func_glean_handle_client_inactive.restype = None
_UniffiLib.uniffi_glean_core_fn_func_glean_initialize.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_func_glean_initialize.restype = None
_UniffiLib.uniffi_glean_core_fn_func_glean_initialize_for_subprocess.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_func_glean_initialize_for_subprocess.restype = ctypes.c_int8
_UniffiLib.uniffi_glean_core_fn_func_glean_process_ping_upload_response.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_func_glean_process_ping_upload_response.restype = _UniffiRustBuffer
_UniffiLib.uniffi_glean_core_fn_func_glean_register_event_listener.argtypes = (
    _UniffiRustBuffer,
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_func_glean_register_event_listener.restype = None
_UniffiLib.uniffi_glean_core_fn_func_glean_set_debug_view_tag.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_func_glean_set_debug_view_tag.restype = ctypes.c_int8
_UniffiLib.uniffi_glean_core_fn_func_glean_set_dirty_flag.argtypes = (
    ctypes.c_int8,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_func_glean_set_dirty_flag.restype = None
_UniffiLib.uniffi_glean_core_fn_func_glean_set_experiment_active.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_func_glean_set_experiment_active.restype = None
_UniffiLib.uniffi_glean_core_fn_func_glean_set_experiment_inactive.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_func_glean_set_experiment_inactive.restype = None
_UniffiLib.uniffi_glean_core_fn_func_glean_set_experimentation_id.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_func_glean_set_experimentation_id.restype = None
_UniffiLib.uniffi_glean_core_fn_func_glean_set_log_pings.argtypes = (
    ctypes.c_int8,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_func_glean_set_log_pings.restype = None
_UniffiLib.uniffi_glean_core_fn_func_glean_set_metrics_enabled_config.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_func_glean_set_metrics_enabled_config.restype = None
_UniffiLib.uniffi_glean_core_fn_func_glean_set_source_tags.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_func_glean_set_source_tags.restype = ctypes.c_int8
_UniffiLib.uniffi_glean_core_fn_func_glean_set_test_mode.argtypes = (
    ctypes.c_int8,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_func_glean_set_test_mode.restype = None
_UniffiLib.uniffi_glean_core_fn_func_glean_set_upload_enabled.argtypes = (
    ctypes.c_int8,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_func_glean_set_upload_enabled.restype = None
_UniffiLib.uniffi_glean_core_fn_func_glean_shutdown.argtypes = (
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_func_glean_shutdown.restype = None
_UniffiLib.uniffi_glean_core_fn_func_glean_submit_ping_by_name.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_func_glean_submit_ping_by_name.restype = None
_UniffiLib.uniffi_glean_core_fn_func_glean_submit_ping_by_name_sync.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_func_glean_submit_ping_by_name_sync.restype = ctypes.c_int8
_UniffiLib.uniffi_glean_core_fn_func_glean_test_destroy_glean.argtypes = (
    ctypes.c_int8,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_func_glean_test_destroy_glean.restype = None
_UniffiLib.uniffi_glean_core_fn_func_glean_test_get_experiment_data.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_func_glean_test_get_experiment_data.restype = _UniffiRustBuffer
_UniffiLib.uniffi_glean_core_fn_func_glean_test_get_experimentation_id.argtypes = (
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_func_glean_test_get_experimentation_id.restype = _UniffiRustBuffer
_UniffiLib.uniffi_glean_core_fn_func_glean_unregister_event_listener.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_func_glean_unregister_event_listener.restype = None
_UniffiLib.ffi_glean_core_rustbuffer_alloc.argtypes = (
    ctypes.c_int32,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_glean_core_rustbuffer_alloc.restype = _UniffiRustBuffer
_UniffiLib.ffi_glean_core_rustbuffer_from_bytes.argtypes = (
    _UniffiForeignBytes,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_glean_core_rustbuffer_from_bytes.restype = _UniffiRustBuffer
_UniffiLib.ffi_glean_core_rustbuffer_free.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_glean_core_rustbuffer_free.restype = None
_UniffiLib.ffi_glean_core_rustbuffer_reserve.argtypes = (
    _UniffiRustBuffer,
    ctypes.c_int32,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_glean_core_rustbuffer_reserve.restype = _UniffiRustBuffer
_UniffiLib.ffi_glean_core_rust_future_continuation_callback_set.argtypes = (
    _UNIFFI_FUTURE_CONTINUATION_T,
)
_UniffiLib.ffi_glean_core_rust_future_continuation_callback_set.restype = None
_UniffiLib.ffi_glean_core_rust_future_poll_u8.argtypes = (
    ctypes.c_void_p,
    ctypes.c_size_t,
)
_UniffiLib.ffi_glean_core_rust_future_poll_u8.restype = None
_UniffiLib.ffi_glean_core_rust_future_cancel_u8.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_glean_core_rust_future_cancel_u8.restype = None
_UniffiLib.ffi_glean_core_rust_future_free_u8.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_glean_core_rust_future_free_u8.restype = None
_UniffiLib.ffi_glean_core_rust_future_complete_u8.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_glean_core_rust_future_complete_u8.restype = ctypes.c_uint8
_UniffiLib.ffi_glean_core_rust_future_poll_i8.argtypes = (
    ctypes.c_void_p,
    ctypes.c_size_t,
)
_UniffiLib.ffi_glean_core_rust_future_poll_i8.restype = None
_UniffiLib.ffi_glean_core_rust_future_cancel_i8.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_glean_core_rust_future_cancel_i8.restype = None
_UniffiLib.ffi_glean_core_rust_future_free_i8.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_glean_core_rust_future_free_i8.restype = None
_UniffiLib.ffi_glean_core_rust_future_complete_i8.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_glean_core_rust_future_complete_i8.restype = ctypes.c_int8
_UniffiLib.ffi_glean_core_rust_future_poll_u16.argtypes = (
    ctypes.c_void_p,
    ctypes.c_size_t,
)
_UniffiLib.ffi_glean_core_rust_future_poll_u16.restype = None
_UniffiLib.ffi_glean_core_rust_future_cancel_u16.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_glean_core_rust_future_cancel_u16.restype = None
_UniffiLib.ffi_glean_core_rust_future_free_u16.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_glean_core_rust_future_free_u16.restype = None
_UniffiLib.ffi_glean_core_rust_future_complete_u16.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_glean_core_rust_future_complete_u16.restype = ctypes.c_uint16
_UniffiLib.ffi_glean_core_rust_future_poll_i16.argtypes = (
    ctypes.c_void_p,
    ctypes.c_size_t,
)
_UniffiLib.ffi_glean_core_rust_future_poll_i16.restype = None
_UniffiLib.ffi_glean_core_rust_future_cancel_i16.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_glean_core_rust_future_cancel_i16.restype = None
_UniffiLib.ffi_glean_core_rust_future_free_i16.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_glean_core_rust_future_free_i16.restype = None
_UniffiLib.ffi_glean_core_rust_future_complete_i16.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_glean_core_rust_future_complete_i16.restype = ctypes.c_int16
_UniffiLib.ffi_glean_core_rust_future_poll_u32.argtypes = (
    ctypes.c_void_p,
    ctypes.c_size_t,
)
_UniffiLib.ffi_glean_core_rust_future_poll_u32.restype = None
_UniffiLib.ffi_glean_core_rust_future_cancel_u32.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_glean_core_rust_future_cancel_u32.restype = None
_UniffiLib.ffi_glean_core_rust_future_free_u32.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_glean_core_rust_future_free_u32.restype = None
_UniffiLib.ffi_glean_core_rust_future_complete_u32.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_glean_core_rust_future_complete_u32.restype = ctypes.c_uint32
_UniffiLib.ffi_glean_core_rust_future_poll_i32.argtypes = (
    ctypes.c_void_p,
    ctypes.c_size_t,
)
_UniffiLib.ffi_glean_core_rust_future_poll_i32.restype = None
_UniffiLib.ffi_glean_core_rust_future_cancel_i32.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_glean_core_rust_future_cancel_i32.restype = None
_UniffiLib.ffi_glean_core_rust_future_free_i32.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_glean_core_rust_future_free_i32.restype = None
_UniffiLib.ffi_glean_core_rust_future_complete_i32.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_glean_core_rust_future_complete_i32.restype = ctypes.c_int32
_UniffiLib.ffi_glean_core_rust_future_poll_u64.argtypes = (
    ctypes.c_void_p,
    ctypes.c_size_t,
)
_UniffiLib.ffi_glean_core_rust_future_poll_u64.restype = None
_UniffiLib.ffi_glean_core_rust_future_cancel_u64.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_glean_core_rust_future_cancel_u64.restype = None
_UniffiLib.ffi_glean_core_rust_future_free_u64.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_glean_core_rust_future_free_u64.restype = None
_UniffiLib.ffi_glean_core_rust_future_complete_u64.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_glean_core_rust_future_complete_u64.restype = ctypes.c_uint64
_UniffiLib.ffi_glean_core_rust_future_poll_i64.argtypes = (
    ctypes.c_void_p,
    ctypes.c_size_t,
)
_UniffiLib.ffi_glean_core_rust_future_poll_i64.restype = None
_UniffiLib.ffi_glean_core_rust_future_cancel_i64.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_glean_core_rust_future_cancel_i64.restype = None
_UniffiLib.ffi_glean_core_rust_future_free_i64.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_glean_core_rust_future_free_i64.restype = None
_UniffiLib.ffi_glean_core_rust_future_complete_i64.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_glean_core_rust_future_complete_i64.restype = ctypes.c_int64
_UniffiLib.ffi_glean_core_rust_future_poll_f32.argtypes = (
    ctypes.c_void_p,
    ctypes.c_size_t,
)
_UniffiLib.ffi_glean_core_rust_future_poll_f32.restype = None
_UniffiLib.ffi_glean_core_rust_future_cancel_f32.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_glean_core_rust_future_cancel_f32.restype = None
_UniffiLib.ffi_glean_core_rust_future_free_f32.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_glean_core_rust_future_free_f32.restype = None
_UniffiLib.ffi_glean_core_rust_future_complete_f32.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_glean_core_rust_future_complete_f32.restype = ctypes.c_float
_UniffiLib.ffi_glean_core_rust_future_poll_f64.argtypes = (
    ctypes.c_void_p,
    ctypes.c_size_t,
)
_UniffiLib.ffi_glean_core_rust_future_poll_f64.restype = None
_UniffiLib.ffi_glean_core_rust_future_cancel_f64.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_glean_core_rust_future_cancel_f64.restype = None
_UniffiLib.ffi_glean_core_rust_future_free_f64.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_glean_core_rust_future_free_f64.restype = None
_UniffiLib.ffi_glean_core_rust_future_complete_f64.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_glean_core_rust_future_complete_f64.restype = ctypes.c_double
_UniffiLib.ffi_glean_core_rust_future_poll_pointer.argtypes = (
    ctypes.c_void_p,
    ctypes.c_size_t,
)
_UniffiLib.ffi_glean_core_rust_future_poll_pointer.restype = None
_UniffiLib.ffi_glean_core_rust_future_cancel_pointer.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_glean_core_rust_future_cancel_pointer.restype = None
_UniffiLib.ffi_glean_core_rust_future_free_pointer.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_glean_core_rust_future_free_pointer.restype = None
_UniffiLib.ffi_glean_core_rust_future_complete_pointer.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_glean_core_rust_future_complete_pointer.restype = ctypes.c_void_p
_UniffiLib.ffi_glean_core_rust_future_poll_rust_buffer.argtypes = (
    ctypes.c_void_p,
    ctypes.c_size_t,
)
_UniffiLib.ffi_glean_core_rust_future_poll_rust_buffer.restype = None
_UniffiLib.ffi_glean_core_rust_future_cancel_rust_buffer.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_glean_core_rust_future_cancel_rust_buffer.restype = None
_UniffiLib.ffi_glean_core_rust_future_free_rust_buffer.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_glean_core_rust_future_free_rust_buffer.restype = None
_UniffiLib.ffi_glean_core_rust_future_complete_rust_buffer.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_glean_core_rust_future_complete_rust_buffer.restype = _UniffiRustBuffer
_UniffiLib.ffi_glean_core_rust_future_poll_void.argtypes = (
    ctypes.c_void_p,
    ctypes.c_size_t,
)
_UniffiLib.ffi_glean_core_rust_future_poll_void.restype = None
_UniffiLib.ffi_glean_core_rust_future_cancel_void.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_glean_core_rust_future_cancel_void.restype = None
_UniffiLib.ffi_glean_core_rust_future_free_void.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_glean_core_rust_future_free_void.restype = None
_UniffiLib.ffi_glean_core_rust_future_complete_void.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_glean_core_rust_future_complete_void.restype = None
_UniffiLib.uniffi_glean_core_checksum_func_glean_enable_logging.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_func_glean_enable_logging.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_func_glean_enable_logging_to_fd.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_func_glean_enable_logging_to_fd.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_func_glean_get_upload_task.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_func_glean_get_upload_task.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_func_glean_handle_client_active.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_func_glean_handle_client_active.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_func_glean_handle_client_inactive.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_func_glean_handle_client_inactive.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_func_glean_initialize.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_func_glean_initialize.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_func_glean_initialize_for_subprocess.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_func_glean_initialize_for_subprocess.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_func_glean_process_ping_upload_response.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_func_glean_process_ping_upload_response.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_func_glean_register_event_listener.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_func_glean_register_event_listener.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_func_glean_set_debug_view_tag.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_func_glean_set_debug_view_tag.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_func_glean_set_dirty_flag.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_func_glean_set_dirty_flag.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_func_glean_set_experiment_active.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_func_glean_set_experiment_active.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_func_glean_set_experiment_inactive.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_func_glean_set_experiment_inactive.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_func_glean_set_experimentation_id.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_func_glean_set_experimentation_id.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_func_glean_set_log_pings.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_func_glean_set_log_pings.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_func_glean_set_metrics_enabled_config.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_func_glean_set_metrics_enabled_config.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_func_glean_set_source_tags.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_func_glean_set_source_tags.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_func_glean_set_test_mode.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_func_glean_set_test_mode.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_func_glean_set_upload_enabled.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_func_glean_set_upload_enabled.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_func_glean_shutdown.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_func_glean_shutdown.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_func_glean_submit_ping_by_name.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_func_glean_submit_ping_by_name.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_func_glean_submit_ping_by_name_sync.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_func_glean_submit_ping_by_name_sync.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_func_glean_test_destroy_glean.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_func_glean_test_destroy_glean.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_func_glean_test_get_experiment_data.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_func_glean_test_get_experiment_data.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_func_glean_test_get_experimentation_id.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_func_glean_test_get_experimentation_id.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_func_glean_unregister_event_listener.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_func_glean_unregister_event_listener.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_booleanmetric_set.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_booleanmetric_set.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_booleanmetric_test_get_num_recorded_errors.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_booleanmetric_test_get_num_recorded_errors.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_booleanmetric_test_get_value.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_booleanmetric_test_get_value.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_countermetric_add.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_countermetric_add.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_countermetric_test_get_num_recorded_errors.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_countermetric_test_get_num_recorded_errors.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_countermetric_test_get_value.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_countermetric_test_get_value.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_customdistributionmetric_accumulate_samples.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_customdistributionmetric_accumulate_samples.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_customdistributionmetric_accumulate_single_sample.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_customdistributionmetric_accumulate_single_sample.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_customdistributionmetric_test_get_num_recorded_errors.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_customdistributionmetric_test_get_num_recorded_errors.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_customdistributionmetric_test_get_value.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_customdistributionmetric_test_get_value.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_datetimemetric_set.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_datetimemetric_set.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_datetimemetric_test_get_num_recorded_errors.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_datetimemetric_test_get_num_recorded_errors.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_datetimemetric_test_get_value.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_datetimemetric_test_get_value.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_datetimemetric_test_get_value_as_string.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_datetimemetric_test_get_value_as_string.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_denominatormetric_add.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_denominatormetric_add.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_denominatormetric_test_get_num_recorded_errors.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_denominatormetric_test_get_num_recorded_errors.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_denominatormetric_test_get_value.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_denominatormetric_test_get_value.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_eventmetric_record.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_eventmetric_record.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_eventmetric_test_get_num_recorded_errors.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_eventmetric_test_get_num_recorded_errors.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_eventmetric_test_get_value.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_eventmetric_test_get_value.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_labeledboolean_get.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_labeledboolean_get.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_labeledboolean_test_get_num_recorded_errors.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_labeledboolean_test_get_num_recorded_errors.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_labeledcounter_get.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_labeledcounter_get.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_labeledcounter_test_get_num_recorded_errors.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_labeledcounter_test_get_num_recorded_errors.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_labeledstring_get.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_labeledstring_get.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_labeledstring_test_get_num_recorded_errors.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_labeledstring_test_get_num_recorded_errors.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_memorydistributionmetric_accumulate.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_memorydistributionmetric_accumulate.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_memorydistributionmetric_accumulate_samples.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_memorydistributionmetric_accumulate_samples.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_memorydistributionmetric_test_get_num_recorded_errors.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_memorydistributionmetric_test_get_num_recorded_errors.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_memorydistributionmetric_test_get_value.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_memorydistributionmetric_test_get_value.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_numeratormetric_add_to_numerator.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_numeratormetric_add_to_numerator.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_numeratormetric_test_get_num_recorded_errors.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_numeratormetric_test_get_num_recorded_errors.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_numeratormetric_test_get_value.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_numeratormetric_test_get_value.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_pingtype_submit.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_pingtype_submit.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_quantitymetric_set.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_quantitymetric_set.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_quantitymetric_test_get_num_recorded_errors.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_quantitymetric_test_get_num_recorded_errors.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_quantitymetric_test_get_value.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_quantitymetric_test_get_value.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_ratemetric_add_to_denominator.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_ratemetric_add_to_denominator.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_ratemetric_add_to_numerator.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_ratemetric_add_to_numerator.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_ratemetric_test_get_num_recorded_errors.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_ratemetric_test_get_num_recorded_errors.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_ratemetric_test_get_value.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_ratemetric_test_get_value.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_stringlistmetric_add.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_stringlistmetric_add.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_stringlistmetric_set.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_stringlistmetric_set.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_stringlistmetric_test_get_num_recorded_errors.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_stringlistmetric_test_get_num_recorded_errors.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_stringlistmetric_test_get_value.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_stringlistmetric_test_get_value.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_stringmetric_set.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_stringmetric_set.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_stringmetric_test_get_num_recorded_errors.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_stringmetric_test_get_num_recorded_errors.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_stringmetric_test_get_value.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_stringmetric_test_get_value.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_textmetric_set.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_textmetric_set.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_textmetric_test_get_num_recorded_errors.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_textmetric_test_get_num_recorded_errors.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_textmetric_test_get_value.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_textmetric_test_get_value.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_timespanmetric_cancel.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_timespanmetric_cancel.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_timespanmetric_set_raw_nanos.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_timespanmetric_set_raw_nanos.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_timespanmetric_start.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_timespanmetric_start.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_timespanmetric_stop.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_timespanmetric_stop.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_timespanmetric_test_get_num_recorded_errors.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_timespanmetric_test_get_num_recorded_errors.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_timespanmetric_test_get_value.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_timespanmetric_test_get_value.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_timingdistributionmetric_accumulate_samples.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_timingdistributionmetric_accumulate_samples.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_timingdistributionmetric_accumulate_single_sample.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_timingdistributionmetric_accumulate_single_sample.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_timingdistributionmetric_cancel.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_timingdistributionmetric_cancel.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_timingdistributionmetric_start.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_timingdistributionmetric_start.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_timingdistributionmetric_stop_and_accumulate.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_timingdistributionmetric_stop_and_accumulate.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_timingdistributionmetric_test_get_num_recorded_errors.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_timingdistributionmetric_test_get_num_recorded_errors.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_timingdistributionmetric_test_get_value.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_timingdistributionmetric_test_get_value.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_urlmetric_set.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_urlmetric_set.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_urlmetric_test_get_num_recorded_errors.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_urlmetric_test_get_num_recorded_errors.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_urlmetric_test_get_value.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_urlmetric_test_get_value.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_uuidmetric_generate_and_set.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_uuidmetric_generate_and_set.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_uuidmetric_set.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_uuidmetric_set.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_uuidmetric_test_get_num_recorded_errors.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_uuidmetric_test_get_num_recorded_errors.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_uuidmetric_test_get_value.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_uuidmetric_test_get_value.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_constructor_booleanmetric_new.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_constructor_booleanmetric_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_constructor_countermetric_new.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_constructor_countermetric_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_constructor_customdistributionmetric_new.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_constructor_customdistributionmetric_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_constructor_datetimemetric_new.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_constructor_datetimemetric_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_constructor_denominatormetric_new.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_constructor_denominatormetric_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_constructor_eventmetric_new.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_constructor_eventmetric_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_constructor_labeledboolean_new.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_constructor_labeledboolean_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_constructor_labeledcounter_new.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_constructor_labeledcounter_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_constructor_labeledstring_new.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_constructor_labeledstring_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_constructor_memorydistributionmetric_new.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_constructor_memorydistributionmetric_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_constructor_numeratormetric_new.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_constructor_numeratormetric_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_constructor_pingtype_new.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_constructor_pingtype_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_constructor_quantitymetric_new.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_constructor_quantitymetric_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_constructor_ratemetric_new.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_constructor_ratemetric_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_constructor_stringlistmetric_new.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_constructor_stringlistmetric_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_constructor_stringmetric_new.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_constructor_stringmetric_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_constructor_textmetric_new.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_constructor_textmetric_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_constructor_timespanmetric_new.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_constructor_timespanmetric_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_constructor_timingdistributionmetric_new.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_constructor_timingdistributionmetric_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_constructor_urlmetric_new.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_constructor_urlmetric_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_constructor_uuidmetric_new.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_constructor_uuidmetric_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_gleaneventlistener_on_event_recorded.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_gleaneventlistener_on_event_recorded.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_ongleanevents_initialize_finished.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_ongleanevents_initialize_finished.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_ongleanevents_trigger_upload.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_ongleanevents_trigger_upload.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_ongleanevents_start_metrics_ping_scheduler.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_ongleanevents_start_metrics_ping_scheduler.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_ongleanevents_cancel_uploads.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_ongleanevents_cancel_uploads.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_ongleanevents_shutdown.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_ongleanevents_shutdown.restype = ctypes.c_uint16
_UniffiLib.ffi_glean_core_uniffi_contract_version.argtypes = (
)
_UniffiLib.ffi_glean_core_uniffi_contract_version.restype = ctypes.c_uint32
_uniffi_check_contract_api_version(_UniffiLib)
_uniffi_check_api_checksums(_UniffiLib)

# Async support

# Public interface members begin here.


class _UniffiConverterUInt8(_UniffiConverterPrimitiveInt):
    CLASS_NAME = "u8"
    VALUE_MIN = 0
    VALUE_MAX = 2**8

    @staticmethod
    def read(buf):
        return buf.read_u8()

    @staticmethod
    def write_unchecked(value, buf):
        buf.write_u8(value)

class _UniffiConverterInt8(_UniffiConverterPrimitiveInt):
    CLASS_NAME = "i8"
    VALUE_MIN = -2**7
    VALUE_MAX = 2**7

    @staticmethod
    def read(buf):
        return buf.read_i8()

    @staticmethod
    def write_unchecked(value, buf):
        buf.write_i8(value)

class _UniffiConverterUInt32(_UniffiConverterPrimitiveInt):
    CLASS_NAME = "u32"
    VALUE_MIN = 0
    VALUE_MAX = 2**32

    @staticmethod
    def read(buf):
        return buf.read_u32()

    @staticmethod
    def write_unchecked(value, buf):
        buf.write_u32(value)

class _UniffiConverterInt32(_UniffiConverterPrimitiveInt):
    CLASS_NAME = "i32"
    VALUE_MIN = -2**31
    VALUE_MAX = 2**31

    @staticmethod
    def read(buf):
        return buf.read_i32()

    @staticmethod
    def write_unchecked(value, buf):
        buf.write_i32(value)

class _UniffiConverterUInt64(_UniffiConverterPrimitiveInt):
    CLASS_NAME = "u64"
    VALUE_MIN = 0
    VALUE_MAX = 2**64

    @staticmethod
    def read(buf):
        return buf.read_u64()

    @staticmethod
    def write_unchecked(value, buf):
        buf.write_u64(value)

class _UniffiConverterInt64(_UniffiConverterPrimitiveInt):
    CLASS_NAME = "i64"
    VALUE_MIN = -2**63
    VALUE_MAX = 2**63

    @staticmethod
    def read(buf):
        return buf.read_i64()

    @staticmethod
    def write_unchecked(value, buf):
        buf.write_i64(value)

class _UniffiConverterBool(_UniffiConverterPrimitive):
    @classmethod
    def check(cls, value):
        return not not value

    @classmethod
    def read(cls, buf):
        return cls.lift(buf.read_u8())

    @classmethod
    def write_unchecked(cls, value, buf):
        buf.write_u8(value)

    @staticmethod
    def lift(value):
        return value != 0

class _UniffiConverterString:
    @staticmethod
    def check(value):
        if not isinstance(value, str):
            raise TypeError("argument must be str, not {}".format(type(value).__name__))
        return value

    @staticmethod
    def read(buf):
        size = buf.read_i32()
        if size < 0:
            raise InternalError("Unexpected negative string length")
        utf8_bytes = buf.read(size)
        return utf8_bytes.decode("utf-8")

    @staticmethod
    def write(value, buf):
        value = _UniffiConverterString.check(value)
        utf8_bytes = value.encode("utf-8")
        buf.write_i32(len(utf8_bytes))
        buf.write(utf8_bytes)

    @staticmethod
    def lift(buf):
        with buf.consume_with_stream() as stream:
            return stream.read(stream.remaining()).decode("utf-8")

    @staticmethod
    def lower(value):
        value = _UniffiConverterString.check(value)
        with _UniffiRustBuffer.alloc_with_builder() as builder:
            builder.write(value.encode("utf-8"))
            return builder.finalize()



class BooleanMetric:
    _pointer: ctypes.c_void_p
    def __init__(self, meta: "CommonMetricData"):
        
        self._pointer = _rust_call(_UniffiLib.uniffi_glean_core_fn_constructor_booleanmetric_new,
        _UniffiConverterTypeCommonMetricData.lower(meta))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_glean_core_fn_free_booleanmetric, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def set(self, value: "bool"):
        
        _rust_call(_UniffiLib.uniffi_glean_core_fn_method_booleanmetric_set,self._pointer,
        _UniffiConverterBool.lower(value))







    def test_get_num_recorded_errors(self, error: "ErrorType") -> "int":
        
        return _UniffiConverterInt32.lift(
            _rust_call(_UniffiLib.uniffi_glean_core_fn_method_booleanmetric_test_get_num_recorded_errors,self._pointer,
        _UniffiConverterTypeErrorType.lower(error))
        )






    def test_get_value(self, ping_name: "typing.Union[object, typing.Optional[str]]" = _DEFAULT) -> "typing.Optional[bool]":
        if ping_name is _DEFAULT:
            ping_name = None
        
        return _UniffiConverterOptionalBool.lift(
            _rust_call(_UniffiLib.uniffi_glean_core_fn_method_booleanmetric_test_get_value,self._pointer,
        _UniffiConverterOptionalString.lower(ping_name))
        )






class _UniffiConverterTypeBooleanMetric:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, BooleanMetric):
            raise TypeError("Expected BooleanMetric instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return BooleanMetric._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class CounterMetric:
    _pointer: ctypes.c_void_p
    def __init__(self, meta: "CommonMetricData"):
        
        self._pointer = _rust_call(_UniffiLib.uniffi_glean_core_fn_constructor_countermetric_new,
        _UniffiConverterTypeCommonMetricData.lower(meta))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_glean_core_fn_free_countermetric, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def add(self, amount: "typing.Union[object, int]" = _DEFAULT):
        if amount is _DEFAULT:
            amount = 1
        
        _rust_call(_UniffiLib.uniffi_glean_core_fn_method_countermetric_add,self._pointer,
        _UniffiConverterInt32.lower(amount))







    def test_get_num_recorded_errors(self, error: "ErrorType") -> "int":
        
        return _UniffiConverterInt32.lift(
            _rust_call(_UniffiLib.uniffi_glean_core_fn_method_countermetric_test_get_num_recorded_errors,self._pointer,
        _UniffiConverterTypeErrorType.lower(error))
        )






    def test_get_value(self, ping_name: "typing.Union[object, typing.Optional[str]]" = _DEFAULT) -> "typing.Optional[int]":
        if ping_name is _DEFAULT:
            ping_name = None
        
        return _UniffiConverterOptionalInt32.lift(
            _rust_call(_UniffiLib.uniffi_glean_core_fn_method_countermetric_test_get_value,self._pointer,
        _UniffiConverterOptionalString.lower(ping_name))
        )






class _UniffiConverterTypeCounterMetric:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, CounterMetric):
            raise TypeError("Expected CounterMetric instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return CounterMetric._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class CustomDistributionMetric:
    _pointer: ctypes.c_void_p
    def __init__(self, meta: "CommonMetricData",range_min: "int",range_max: "int",bucket_count: "int",histogram_type: "HistogramType"):
        
        
        
        
        
        self._pointer = _rust_call(_UniffiLib.uniffi_glean_core_fn_constructor_customdistributionmetric_new,
        _UniffiConverterTypeCommonMetricData.lower(meta),
        _UniffiConverterInt64.lower(range_min),
        _UniffiConverterInt64.lower(range_max),
        _UniffiConverterInt64.lower(bucket_count),
        _UniffiConverterTypeHistogramType.lower(histogram_type))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_glean_core_fn_free_customdistributionmetric, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def accumulate_samples(self, samples: "typing.List[int]"):
        
        _rust_call(_UniffiLib.uniffi_glean_core_fn_method_customdistributionmetric_accumulate_samples,self._pointer,
        _UniffiConverterSequenceInt64.lower(samples))







    def accumulate_single_sample(self, sample: "int"):
        
        _rust_call(_UniffiLib.uniffi_glean_core_fn_method_customdistributionmetric_accumulate_single_sample,self._pointer,
        _UniffiConverterInt64.lower(sample))







    def test_get_num_recorded_errors(self, error: "ErrorType") -> "int":
        
        return _UniffiConverterInt32.lift(
            _rust_call(_UniffiLib.uniffi_glean_core_fn_method_customdistributionmetric_test_get_num_recorded_errors,self._pointer,
        _UniffiConverterTypeErrorType.lower(error))
        )






    def test_get_value(self, ping_name: "typing.Union[object, typing.Optional[str]]" = _DEFAULT) -> "typing.Optional[DistributionData]":
        if ping_name is _DEFAULT:
            ping_name = None
        
        return _UniffiConverterOptionalTypeDistributionData.lift(
            _rust_call(_UniffiLib.uniffi_glean_core_fn_method_customdistributionmetric_test_get_value,self._pointer,
        _UniffiConverterOptionalString.lower(ping_name))
        )






class _UniffiConverterTypeCustomDistributionMetric:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, CustomDistributionMetric):
            raise TypeError("Expected CustomDistributionMetric instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return CustomDistributionMetric._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class DatetimeMetric:
    _pointer: ctypes.c_void_p
    def __init__(self, meta: "CommonMetricData",time_unit: "TimeUnit"):
        
        
        self._pointer = _rust_call(_UniffiLib.uniffi_glean_core_fn_constructor_datetimemetric_new,
        _UniffiConverterTypeCommonMetricData.lower(meta),
        _UniffiConverterTypeTimeUnit.lower(time_unit))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_glean_core_fn_free_datetimemetric, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def set(self, value: "typing.Union[object, typing.Optional[Datetime]]" = _DEFAULT):
        if value is _DEFAULT:
            value = None
        
        _rust_call(_UniffiLib.uniffi_glean_core_fn_method_datetimemetric_set,self._pointer,
        _UniffiConverterOptionalTypeDatetime.lower(value))







    def test_get_num_recorded_errors(self, error: "ErrorType") -> "int":
        
        return _UniffiConverterInt32.lift(
            _rust_call(_UniffiLib.uniffi_glean_core_fn_method_datetimemetric_test_get_num_recorded_errors,self._pointer,
        _UniffiConverterTypeErrorType.lower(error))
        )






    def test_get_value(self, ping_name: "typing.Union[object, typing.Optional[str]]" = _DEFAULT) -> "typing.Optional[Datetime]":
        if ping_name is _DEFAULT:
            ping_name = None
        
        return _UniffiConverterOptionalTypeDatetime.lift(
            _rust_call(_UniffiLib.uniffi_glean_core_fn_method_datetimemetric_test_get_value,self._pointer,
        _UniffiConverterOptionalString.lower(ping_name))
        )






    def test_get_value_as_string(self, ping_name: "typing.Union[object, typing.Optional[str]]" = _DEFAULT) -> "typing.Optional[str]":
        if ping_name is _DEFAULT:
            ping_name = None
        
        return _UniffiConverterOptionalString.lift(
            _rust_call(_UniffiLib.uniffi_glean_core_fn_method_datetimemetric_test_get_value_as_string,self._pointer,
        _UniffiConverterOptionalString.lower(ping_name))
        )






class _UniffiConverterTypeDatetimeMetric:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, DatetimeMetric):
            raise TypeError("Expected DatetimeMetric instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return DatetimeMetric._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class DenominatorMetric:
    _pointer: ctypes.c_void_p
    def __init__(self, meta: "CommonMetricData",numerators: "typing.List[CommonMetricData]"):
        
        
        self._pointer = _rust_call(_UniffiLib.uniffi_glean_core_fn_constructor_denominatormetric_new,
        _UniffiConverterTypeCommonMetricData.lower(meta),
        _UniffiConverterSequenceTypeCommonMetricData.lower(numerators))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_glean_core_fn_free_denominatormetric, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def add(self, amount: "int"):
        
        _rust_call(_UniffiLib.uniffi_glean_core_fn_method_denominatormetric_add,self._pointer,
        _UniffiConverterInt32.lower(amount))







    def test_get_num_recorded_errors(self, error: "ErrorType") -> "int":
        
        return _UniffiConverterInt32.lift(
            _rust_call(_UniffiLib.uniffi_glean_core_fn_method_denominatormetric_test_get_num_recorded_errors,self._pointer,
        _UniffiConverterTypeErrorType.lower(error))
        )






    def test_get_value(self, ping_name: "typing.Union[object, typing.Optional[str]]" = _DEFAULT) -> "typing.Optional[int]":
        if ping_name is _DEFAULT:
            ping_name = None
        
        return _UniffiConverterOptionalInt32.lift(
            _rust_call(_UniffiLib.uniffi_glean_core_fn_method_denominatormetric_test_get_value,self._pointer,
        _UniffiConverterOptionalString.lower(ping_name))
        )






class _UniffiConverterTypeDenominatorMetric:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, DenominatorMetric):
            raise TypeError("Expected DenominatorMetric instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return DenominatorMetric._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class EventMetric:
    _pointer: ctypes.c_void_p
    def __init__(self, meta: "CommonMetricData",allowed_extra_keys: "typing.List[str]"):
        
        
        self._pointer = _rust_call(_UniffiLib.uniffi_glean_core_fn_constructor_eventmetric_new,
        _UniffiConverterTypeCommonMetricData.lower(meta),
        _UniffiConverterSequenceString.lower(allowed_extra_keys))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_glean_core_fn_free_eventmetric, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def record(self, extra: "dict"):
        
        _rust_call(_UniffiLib.uniffi_glean_core_fn_method_eventmetric_record,self._pointer,
        _UniffiConverterMapStringString.lower(extra))







    def test_get_num_recorded_errors(self, error: "ErrorType") -> "int":
        
        return _UniffiConverterInt32.lift(
            _rust_call(_UniffiLib.uniffi_glean_core_fn_method_eventmetric_test_get_num_recorded_errors,self._pointer,
        _UniffiConverterTypeErrorType.lower(error))
        )






    def test_get_value(self, ping_name: "typing.Union[object, typing.Optional[str]]" = _DEFAULT) -> "typing.Optional[typing.List[RecordedEvent]]":
        if ping_name is _DEFAULT:
            ping_name = None
        
        return _UniffiConverterOptionalSequenceTypeRecordedEvent.lift(
            _rust_call(_UniffiLib.uniffi_glean_core_fn_method_eventmetric_test_get_value,self._pointer,
        _UniffiConverterOptionalString.lower(ping_name))
        )






class _UniffiConverterTypeEventMetric:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, EventMetric):
            raise TypeError("Expected EventMetric instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return EventMetric._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class LabeledBoolean:
    _pointer: ctypes.c_void_p
    def __init__(self, meta: "CommonMetricData",labels: "typing.Optional[typing.List[CowString]]"):
        
        
        self._pointer = _rust_call(_UniffiLib.uniffi_glean_core_fn_constructor_labeledboolean_new,
        _UniffiConverterTypeCommonMetricData.lower(meta),
        _UniffiConverterOptionalSequenceTypeCowString.lower(labels))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_glean_core_fn_free_labeledboolean, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def get(self, label: "str") -> "BooleanMetric":
        
        return _UniffiConverterTypeBooleanMetric.lift(
            _rust_call(_UniffiLib.uniffi_glean_core_fn_method_labeledboolean_get,self._pointer,
        _UniffiConverterString.lower(label))
        )






    def test_get_num_recorded_errors(self, error: "ErrorType") -> "int":
        
        return _UniffiConverterInt32.lift(
            _rust_call(_UniffiLib.uniffi_glean_core_fn_method_labeledboolean_test_get_num_recorded_errors,self._pointer,
        _UniffiConverterTypeErrorType.lower(error))
        )






class _UniffiConverterTypeLabeledBoolean:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, LabeledBoolean):
            raise TypeError("Expected LabeledBoolean instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return LabeledBoolean._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class LabeledCounter:
    _pointer: ctypes.c_void_p
    def __init__(self, meta: "CommonMetricData",labels: "typing.Optional[typing.List[CowString]]"):
        
        
        self._pointer = _rust_call(_UniffiLib.uniffi_glean_core_fn_constructor_labeledcounter_new,
        _UniffiConverterTypeCommonMetricData.lower(meta),
        _UniffiConverterOptionalSequenceTypeCowString.lower(labels))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_glean_core_fn_free_labeledcounter, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def get(self, label: "str") -> "CounterMetric":
        
        return _UniffiConverterTypeCounterMetric.lift(
            _rust_call(_UniffiLib.uniffi_glean_core_fn_method_labeledcounter_get,self._pointer,
        _UniffiConverterString.lower(label))
        )






    def test_get_num_recorded_errors(self, error: "ErrorType") -> "int":
        
        return _UniffiConverterInt32.lift(
            _rust_call(_UniffiLib.uniffi_glean_core_fn_method_labeledcounter_test_get_num_recorded_errors,self._pointer,
        _UniffiConverterTypeErrorType.lower(error))
        )






class _UniffiConverterTypeLabeledCounter:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, LabeledCounter):
            raise TypeError("Expected LabeledCounter instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return LabeledCounter._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class LabeledString:
    _pointer: ctypes.c_void_p
    def __init__(self, meta: "CommonMetricData",labels: "typing.Optional[typing.List[CowString]]"):
        
        
        self._pointer = _rust_call(_UniffiLib.uniffi_glean_core_fn_constructor_labeledstring_new,
        _UniffiConverterTypeCommonMetricData.lower(meta),
        _UniffiConverterOptionalSequenceTypeCowString.lower(labels))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_glean_core_fn_free_labeledstring, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def get(self, label: "str") -> "StringMetric":
        
        return _UniffiConverterTypeStringMetric.lift(
            _rust_call(_UniffiLib.uniffi_glean_core_fn_method_labeledstring_get,self._pointer,
        _UniffiConverterString.lower(label))
        )






    def test_get_num_recorded_errors(self, error: "ErrorType") -> "int":
        
        return _UniffiConverterInt32.lift(
            _rust_call(_UniffiLib.uniffi_glean_core_fn_method_labeledstring_test_get_num_recorded_errors,self._pointer,
        _UniffiConverterTypeErrorType.lower(error))
        )






class _UniffiConverterTypeLabeledString:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, LabeledString):
            raise TypeError("Expected LabeledString instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return LabeledString._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class MemoryDistributionMetric:
    _pointer: ctypes.c_void_p
    def __init__(self, meta: "CommonMetricData",memory_unit: "MemoryUnit"):
        
        
        self._pointer = _rust_call(_UniffiLib.uniffi_glean_core_fn_constructor_memorydistributionmetric_new,
        _UniffiConverterTypeCommonMetricData.lower(meta),
        _UniffiConverterTypeMemoryUnit.lower(memory_unit))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_glean_core_fn_free_memorydistributionmetric, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def accumulate(self, sample: "int"):
        
        _rust_call(_UniffiLib.uniffi_glean_core_fn_method_memorydistributionmetric_accumulate,self._pointer,
        _UniffiConverterInt64.lower(sample))







    def accumulate_samples(self, samples: "typing.List[int]"):
        
        _rust_call(_UniffiLib.uniffi_glean_core_fn_method_memorydistributionmetric_accumulate_samples,self._pointer,
        _UniffiConverterSequenceInt64.lower(samples))







    def test_get_num_recorded_errors(self, error: "ErrorType") -> "int":
        
        return _UniffiConverterInt32.lift(
            _rust_call(_UniffiLib.uniffi_glean_core_fn_method_memorydistributionmetric_test_get_num_recorded_errors,self._pointer,
        _UniffiConverterTypeErrorType.lower(error))
        )






    def test_get_value(self, ping_name: "typing.Union[object, typing.Optional[str]]" = _DEFAULT) -> "typing.Optional[DistributionData]":
        if ping_name is _DEFAULT:
            ping_name = None
        
        return _UniffiConverterOptionalTypeDistributionData.lift(
            _rust_call(_UniffiLib.uniffi_glean_core_fn_method_memorydistributionmetric_test_get_value,self._pointer,
        _UniffiConverterOptionalString.lower(ping_name))
        )






class _UniffiConverterTypeMemoryDistributionMetric:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, MemoryDistributionMetric):
            raise TypeError("Expected MemoryDistributionMetric instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return MemoryDistributionMetric._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class NumeratorMetric:
    _pointer: ctypes.c_void_p
    def __init__(self, meta: "CommonMetricData"):
        
        self._pointer = _rust_call(_UniffiLib.uniffi_glean_core_fn_constructor_numeratormetric_new,
        _UniffiConverterTypeCommonMetricData.lower(meta))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_glean_core_fn_free_numeratormetric, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def add_to_numerator(self, amount: "int"):
        
        _rust_call(_UniffiLib.uniffi_glean_core_fn_method_numeratormetric_add_to_numerator,self._pointer,
        _UniffiConverterInt32.lower(amount))







    def test_get_num_recorded_errors(self, error: "ErrorType") -> "int":
        
        return _UniffiConverterInt32.lift(
            _rust_call(_UniffiLib.uniffi_glean_core_fn_method_numeratormetric_test_get_num_recorded_errors,self._pointer,
        _UniffiConverterTypeErrorType.lower(error))
        )






    def test_get_value(self, ping_name: "typing.Union[object, typing.Optional[str]]" = _DEFAULT) -> "typing.Optional[Rate]":
        if ping_name is _DEFAULT:
            ping_name = None
        
        return _UniffiConverterOptionalTypeRate.lift(
            _rust_call(_UniffiLib.uniffi_glean_core_fn_method_numeratormetric_test_get_value,self._pointer,
        _UniffiConverterOptionalString.lower(ping_name))
        )






class _UniffiConverterTypeNumeratorMetric:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, NumeratorMetric):
            raise TypeError("Expected NumeratorMetric instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return NumeratorMetric._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class PingType:
    _pointer: ctypes.c_void_p
    def __init__(self, name: "str",include_client_id: "bool",send_if_empty: "bool",precise_timestamps: "bool",include_info_sections: "bool",reason_codes: "typing.List[str]"):
        
        
        
        
        
        
        self._pointer = _rust_call(_UniffiLib.uniffi_glean_core_fn_constructor_pingtype_new,
        _UniffiConverterString.lower(name),
        _UniffiConverterBool.lower(include_client_id),
        _UniffiConverterBool.lower(send_if_empty),
        _UniffiConverterBool.lower(precise_timestamps),
        _UniffiConverterBool.lower(include_info_sections),
        _UniffiConverterSequenceString.lower(reason_codes))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_glean_core_fn_free_pingtype, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def submit(self, reason: "typing.Union[object, typing.Optional[str]]" = _DEFAULT):
        if reason is _DEFAULT:
            reason = None
        
        _rust_call(_UniffiLib.uniffi_glean_core_fn_method_pingtype_submit,self._pointer,
        _UniffiConverterOptionalString.lower(reason))







class _UniffiConverterTypePingType:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, PingType):
            raise TypeError("Expected PingType instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return PingType._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class QuantityMetric:
    _pointer: ctypes.c_void_p
    def __init__(self, meta: "CommonMetricData"):
        
        self._pointer = _rust_call(_UniffiLib.uniffi_glean_core_fn_constructor_quantitymetric_new,
        _UniffiConverterTypeCommonMetricData.lower(meta))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_glean_core_fn_free_quantitymetric, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def set(self, value: "int"):
        
        _rust_call(_UniffiLib.uniffi_glean_core_fn_method_quantitymetric_set,self._pointer,
        _UniffiConverterInt64.lower(value))







    def test_get_num_recorded_errors(self, error: "ErrorType") -> "int":
        
        return _UniffiConverterInt32.lift(
            _rust_call(_UniffiLib.uniffi_glean_core_fn_method_quantitymetric_test_get_num_recorded_errors,self._pointer,
        _UniffiConverterTypeErrorType.lower(error))
        )






    def test_get_value(self, ping_name: "typing.Union[object, typing.Optional[str]]" = _DEFAULT) -> "typing.Optional[int]":
        if ping_name is _DEFAULT:
            ping_name = None
        
        return _UniffiConverterOptionalInt64.lift(
            _rust_call(_UniffiLib.uniffi_glean_core_fn_method_quantitymetric_test_get_value,self._pointer,
        _UniffiConverterOptionalString.lower(ping_name))
        )






class _UniffiConverterTypeQuantityMetric:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, QuantityMetric):
            raise TypeError("Expected QuantityMetric instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return QuantityMetric._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class RateMetric:
    _pointer: ctypes.c_void_p
    def __init__(self, meta: "CommonMetricData"):
        
        self._pointer = _rust_call(_UniffiLib.uniffi_glean_core_fn_constructor_ratemetric_new,
        _UniffiConverterTypeCommonMetricData.lower(meta))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_glean_core_fn_free_ratemetric, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def add_to_denominator(self, amount: "int"):
        
        _rust_call(_UniffiLib.uniffi_glean_core_fn_method_ratemetric_add_to_denominator,self._pointer,
        _UniffiConverterInt32.lower(amount))







    def add_to_numerator(self, amount: "int"):
        
        _rust_call(_UniffiLib.uniffi_glean_core_fn_method_ratemetric_add_to_numerator,self._pointer,
        _UniffiConverterInt32.lower(amount))







    def test_get_num_recorded_errors(self, error: "ErrorType") -> "int":
        
        return _UniffiConverterInt32.lift(
            _rust_call(_UniffiLib.uniffi_glean_core_fn_method_ratemetric_test_get_num_recorded_errors,self._pointer,
        _UniffiConverterTypeErrorType.lower(error))
        )






    def test_get_value(self, ping_name: "typing.Union[object, typing.Optional[str]]" = _DEFAULT) -> "typing.Optional[Rate]":
        if ping_name is _DEFAULT:
            ping_name = None
        
        return _UniffiConverterOptionalTypeRate.lift(
            _rust_call(_UniffiLib.uniffi_glean_core_fn_method_ratemetric_test_get_value,self._pointer,
        _UniffiConverterOptionalString.lower(ping_name))
        )






class _UniffiConverterTypeRateMetric:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, RateMetric):
            raise TypeError("Expected RateMetric instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return RateMetric._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class StringListMetric:
    _pointer: ctypes.c_void_p
    def __init__(self, meta: "CommonMetricData"):
        
        self._pointer = _rust_call(_UniffiLib.uniffi_glean_core_fn_constructor_stringlistmetric_new,
        _UniffiConverterTypeCommonMetricData.lower(meta))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_glean_core_fn_free_stringlistmetric, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def add(self, value: "str"):
        
        _rust_call(_UniffiLib.uniffi_glean_core_fn_method_stringlistmetric_add,self._pointer,
        _UniffiConverterString.lower(value))







    def set(self, value: "typing.List[str]"):
        
        _rust_call(_UniffiLib.uniffi_glean_core_fn_method_stringlistmetric_set,self._pointer,
        _UniffiConverterSequenceString.lower(value))







    def test_get_num_recorded_errors(self, error: "ErrorType") -> "int":
        
        return _UniffiConverterInt32.lift(
            _rust_call(_UniffiLib.uniffi_glean_core_fn_method_stringlistmetric_test_get_num_recorded_errors,self._pointer,
        _UniffiConverterTypeErrorType.lower(error))
        )






    def test_get_value(self, ping_name: "typing.Union[object, typing.Optional[str]]" = _DEFAULT) -> "typing.Optional[typing.List[str]]":
        if ping_name is _DEFAULT:
            ping_name = None
        
        return _UniffiConverterOptionalSequenceString.lift(
            _rust_call(_UniffiLib.uniffi_glean_core_fn_method_stringlistmetric_test_get_value,self._pointer,
        _UniffiConverterOptionalString.lower(ping_name))
        )






class _UniffiConverterTypeStringListMetric:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, StringListMetric):
            raise TypeError("Expected StringListMetric instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return StringListMetric._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class StringMetric:
    _pointer: ctypes.c_void_p
    def __init__(self, meta: "CommonMetricData"):
        
        self._pointer = _rust_call(_UniffiLib.uniffi_glean_core_fn_constructor_stringmetric_new,
        _UniffiConverterTypeCommonMetricData.lower(meta))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_glean_core_fn_free_stringmetric, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def set(self, value: "str"):
        
        _rust_call(_UniffiLib.uniffi_glean_core_fn_method_stringmetric_set,self._pointer,
        _UniffiConverterString.lower(value))







    def test_get_num_recorded_errors(self, error: "ErrorType") -> "int":
        
        return _UniffiConverterInt32.lift(
            _rust_call(_UniffiLib.uniffi_glean_core_fn_method_stringmetric_test_get_num_recorded_errors,self._pointer,
        _UniffiConverterTypeErrorType.lower(error))
        )






    def test_get_value(self, ping_name: "typing.Union[object, typing.Optional[str]]" = _DEFAULT) -> "typing.Optional[str]":
        if ping_name is _DEFAULT:
            ping_name = None
        
        return _UniffiConverterOptionalString.lift(
            _rust_call(_UniffiLib.uniffi_glean_core_fn_method_stringmetric_test_get_value,self._pointer,
        _UniffiConverterOptionalString.lower(ping_name))
        )






class _UniffiConverterTypeStringMetric:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, StringMetric):
            raise TypeError("Expected StringMetric instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return StringMetric._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class TextMetric:
    _pointer: ctypes.c_void_p
    def __init__(self, meta: "CommonMetricData"):
        
        self._pointer = _rust_call(_UniffiLib.uniffi_glean_core_fn_constructor_textmetric_new,
        _UniffiConverterTypeCommonMetricData.lower(meta))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_glean_core_fn_free_textmetric, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def set(self, value: "str"):
        
        _rust_call(_UniffiLib.uniffi_glean_core_fn_method_textmetric_set,self._pointer,
        _UniffiConverterString.lower(value))







    def test_get_num_recorded_errors(self, error: "ErrorType") -> "int":
        
        return _UniffiConverterInt32.lift(
            _rust_call(_UniffiLib.uniffi_glean_core_fn_method_textmetric_test_get_num_recorded_errors,self._pointer,
        _UniffiConverterTypeErrorType.lower(error))
        )






    def test_get_value(self, ping_name: "typing.Union[object, typing.Optional[str]]" = _DEFAULT) -> "typing.Optional[str]":
        if ping_name is _DEFAULT:
            ping_name = None
        
        return _UniffiConverterOptionalString.lift(
            _rust_call(_UniffiLib.uniffi_glean_core_fn_method_textmetric_test_get_value,self._pointer,
        _UniffiConverterOptionalString.lower(ping_name))
        )






class _UniffiConverterTypeTextMetric:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, TextMetric):
            raise TypeError("Expected TextMetric instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return TextMetric._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class TimespanMetric:
    _pointer: ctypes.c_void_p
    def __init__(self, meta: "CommonMetricData",time_unit: "TimeUnit"):
        
        
        self._pointer = _rust_call(_UniffiLib.uniffi_glean_core_fn_constructor_timespanmetric_new,
        _UniffiConverterTypeCommonMetricData.lower(meta),
        _UniffiConverterTypeTimeUnit.lower(time_unit))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_glean_core_fn_free_timespanmetric, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def cancel(self, ):
        _rust_call(_UniffiLib.uniffi_glean_core_fn_method_timespanmetric_cancel,self._pointer,)







    def set_raw_nanos(self, elapsed: "int"):
        
        _rust_call(_UniffiLib.uniffi_glean_core_fn_method_timespanmetric_set_raw_nanos,self._pointer,
        _UniffiConverterInt64.lower(elapsed))







    def start(self, ):
        _rust_call(_UniffiLib.uniffi_glean_core_fn_method_timespanmetric_start,self._pointer,)







    def stop(self, ):
        _rust_call(_UniffiLib.uniffi_glean_core_fn_method_timespanmetric_stop,self._pointer,)







    def test_get_num_recorded_errors(self, error: "ErrorType") -> "int":
        
        return _UniffiConverterInt32.lift(
            _rust_call(_UniffiLib.uniffi_glean_core_fn_method_timespanmetric_test_get_num_recorded_errors,self._pointer,
        _UniffiConverterTypeErrorType.lower(error))
        )






    def test_get_value(self, ping_name: "typing.Union[object, typing.Optional[str]]" = _DEFAULT) -> "typing.Optional[int]":
        if ping_name is _DEFAULT:
            ping_name = None
        
        return _UniffiConverterOptionalInt64.lift(
            _rust_call(_UniffiLib.uniffi_glean_core_fn_method_timespanmetric_test_get_value,self._pointer,
        _UniffiConverterOptionalString.lower(ping_name))
        )






class _UniffiConverterTypeTimespanMetric:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, TimespanMetric):
            raise TypeError("Expected TimespanMetric instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return TimespanMetric._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class TimingDistributionMetric:
    _pointer: ctypes.c_void_p
    def __init__(self, meta: "CommonMetricData",time_unit: "TimeUnit"):
        
        
        self._pointer = _rust_call(_UniffiLib.uniffi_glean_core_fn_constructor_timingdistributionmetric_new,
        _UniffiConverterTypeCommonMetricData.lower(meta),
        _UniffiConverterTypeTimeUnit.lower(time_unit))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_glean_core_fn_free_timingdistributionmetric, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def accumulate_samples(self, samples: "typing.List[int]"):
        
        _rust_call(_UniffiLib.uniffi_glean_core_fn_method_timingdistributionmetric_accumulate_samples,self._pointer,
        _UniffiConverterSequenceInt64.lower(samples))







    def accumulate_single_sample(self, sample: "int"):
        
        _rust_call(_UniffiLib.uniffi_glean_core_fn_method_timingdistributionmetric_accumulate_single_sample,self._pointer,
        _UniffiConverterInt64.lower(sample))







    def cancel(self, timer_id: "TimerId"):
        
        _rust_call(_UniffiLib.uniffi_glean_core_fn_method_timingdistributionmetric_cancel,self._pointer,
        _UniffiConverterTypeTimerId.lower(timer_id))







    def start(self, ) -> "TimerId":
        return _UniffiConverterTypeTimerId.lift(
            _rust_call(_UniffiLib.uniffi_glean_core_fn_method_timingdistributionmetric_start,self._pointer,)
        )






    def stop_and_accumulate(self, timer_id: "TimerId"):
        
        _rust_call(_UniffiLib.uniffi_glean_core_fn_method_timingdistributionmetric_stop_and_accumulate,self._pointer,
        _UniffiConverterTypeTimerId.lower(timer_id))







    def test_get_num_recorded_errors(self, error: "ErrorType") -> "int":
        
        return _UniffiConverterInt32.lift(
            _rust_call(_UniffiLib.uniffi_glean_core_fn_method_timingdistributionmetric_test_get_num_recorded_errors,self._pointer,
        _UniffiConverterTypeErrorType.lower(error))
        )






    def test_get_value(self, ping_name: "typing.Union[object, typing.Optional[str]]" = _DEFAULT) -> "typing.Optional[DistributionData]":
        if ping_name is _DEFAULT:
            ping_name = None
        
        return _UniffiConverterOptionalTypeDistributionData.lift(
            _rust_call(_UniffiLib.uniffi_glean_core_fn_method_timingdistributionmetric_test_get_value,self._pointer,
        _UniffiConverterOptionalString.lower(ping_name))
        )






class _UniffiConverterTypeTimingDistributionMetric:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, TimingDistributionMetric):
            raise TypeError("Expected TimingDistributionMetric instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return TimingDistributionMetric._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class UrlMetric:
    _pointer: ctypes.c_void_p
    def __init__(self, meta: "CommonMetricData"):
        
        self._pointer = _rust_call(_UniffiLib.uniffi_glean_core_fn_constructor_urlmetric_new,
        _UniffiConverterTypeCommonMetricData.lower(meta))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_glean_core_fn_free_urlmetric, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def set(self, value: "str"):
        
        _rust_call(_UniffiLib.uniffi_glean_core_fn_method_urlmetric_set,self._pointer,
        _UniffiConverterString.lower(value))







    def test_get_num_recorded_errors(self, error: "ErrorType") -> "int":
        
        return _UniffiConverterInt32.lift(
            _rust_call(_UniffiLib.uniffi_glean_core_fn_method_urlmetric_test_get_num_recorded_errors,self._pointer,
        _UniffiConverterTypeErrorType.lower(error))
        )






    def test_get_value(self, ping_name: "typing.Union[object, typing.Optional[str]]" = _DEFAULT) -> "typing.Optional[str]":
        if ping_name is _DEFAULT:
            ping_name = None
        
        return _UniffiConverterOptionalString.lift(
            _rust_call(_UniffiLib.uniffi_glean_core_fn_method_urlmetric_test_get_value,self._pointer,
        _UniffiConverterOptionalString.lower(ping_name))
        )






class _UniffiConverterTypeUrlMetric:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, UrlMetric):
            raise TypeError("Expected UrlMetric instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return UrlMetric._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class UuidMetric:
    _pointer: ctypes.c_void_p
    def __init__(self, meta: "CommonMetricData"):
        
        self._pointer = _rust_call(_UniffiLib.uniffi_glean_core_fn_constructor_uuidmetric_new,
        _UniffiConverterTypeCommonMetricData.lower(meta))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_glean_core_fn_free_uuidmetric, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def generate_and_set(self, ) -> "str":
        return _UniffiConverterString.lift(
            _rust_call(_UniffiLib.uniffi_glean_core_fn_method_uuidmetric_generate_and_set,self._pointer,)
        )






    def set(self, value: "str"):
        
        _rust_call(_UniffiLib.uniffi_glean_core_fn_method_uuidmetric_set,self._pointer,
        _UniffiConverterString.lower(value))







    def test_get_num_recorded_errors(self, error: "ErrorType") -> "int":
        
        return _UniffiConverterInt32.lift(
            _rust_call(_UniffiLib.uniffi_glean_core_fn_method_uuidmetric_test_get_num_recorded_errors,self._pointer,
        _UniffiConverterTypeErrorType.lower(error))
        )






    def test_get_value(self, ping_name: "typing.Union[object, typing.Optional[str]]" = _DEFAULT) -> "typing.Optional[str]":
        if ping_name is _DEFAULT:
            ping_name = None
        
        return _UniffiConverterOptionalString.lift(
            _rust_call(_UniffiLib.uniffi_glean_core_fn_method_uuidmetric_test_get_value,self._pointer,
        _UniffiConverterOptionalString.lower(ping_name))
        )






class _UniffiConverterTypeUuidMetric:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, UuidMetric):
            raise TypeError("Expected UuidMetric instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return UuidMetric._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer


class ClientInfoMetrics:
    app_build: "str";app_display_version: "str";app_build_date: "Datetime";architecture: "str";os_version: "str";channel: "typing.Optional[str]";locale: "typing.Optional[str]";device_manufacturer: "typing.Optional[str]";device_model: "typing.Optional[str]";android_sdk_version: "typing.Optional[str]";windows_build_number: "typing.Optional[int]";

    @typing.no_type_check
    def __init__(self, app_build: "str", app_display_version: "str", app_build_date: "Datetime", architecture: "str", os_version: "str", channel: "typing.Optional[str]" = _DEFAULT, locale: "typing.Optional[str]" = _DEFAULT, device_manufacturer: "typing.Optional[str]" = _DEFAULT, device_model: "typing.Optional[str]" = _DEFAULT, android_sdk_version: "typing.Optional[str]" = _DEFAULT, windows_build_number: "typing.Optional[int]" = _DEFAULT):
        self.app_build = app_build
        self.app_display_version = app_display_version
        self.app_build_date = app_build_date
        self.architecture = architecture
        self.os_version = os_version
        if channel is _DEFAULT:
            self.channel = None
        else:
            self.channel = channel
        if locale is _DEFAULT:
            self.locale = None
        else:
            self.locale = locale
        if device_manufacturer is _DEFAULT:
            self.device_manufacturer = None
        else:
            self.device_manufacturer = device_manufacturer
        if device_model is _DEFAULT:
            self.device_model = None
        else:
            self.device_model = device_model
        if android_sdk_version is _DEFAULT:
            self.android_sdk_version = None
        else:
            self.android_sdk_version = android_sdk_version
        if windows_build_number is _DEFAULT:
            self.windows_build_number = None
        else:
            self.windows_build_number = windows_build_number

    def __str__(self):
        return "ClientInfoMetrics(app_build={}, app_display_version={}, app_build_date={}, architecture={}, os_version={}, channel={}, locale={}, device_manufacturer={}, device_model={}, android_sdk_version={}, windows_build_number={})".format(self.app_build, self.app_display_version, self.app_build_date, self.architecture, self.os_version, self.channel, self.locale, self.device_manufacturer, self.device_model, self.android_sdk_version, self.windows_build_number)

    def __eq__(self, other):
        if self.app_build != other.app_build:
            return False
        if self.app_display_version != other.app_display_version:
            return False
        if self.app_build_date != other.app_build_date:
            return False
        if self.architecture != other.architecture:
            return False
        if self.os_version != other.os_version:
            return False
        if self.channel != other.channel:
            return False
        if self.locale != other.locale:
            return False
        if self.device_manufacturer != other.device_manufacturer:
            return False
        if self.device_model != other.device_model:
            return False
        if self.android_sdk_version != other.android_sdk_version:
            return False
        if self.windows_build_number != other.windows_build_number:
            return False
        return True

class _UniffiConverterTypeClientInfoMetrics(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return ClientInfoMetrics(
            app_build=_UniffiConverterString.read(buf),
            app_display_version=_UniffiConverterString.read(buf),
            app_build_date=_UniffiConverterTypeDatetime.read(buf),
            architecture=_UniffiConverterString.read(buf),
            os_version=_UniffiConverterString.read(buf),
            channel=_UniffiConverterOptionalString.read(buf),
            locale=_UniffiConverterOptionalString.read(buf),
            device_manufacturer=_UniffiConverterOptionalString.read(buf),
            device_model=_UniffiConverterOptionalString.read(buf),
            android_sdk_version=_UniffiConverterOptionalString.read(buf),
            windows_build_number=_UniffiConverterOptionalInt64.read(buf),
        )

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.app_build, buf)
        _UniffiConverterString.write(value.app_display_version, buf)
        _UniffiConverterTypeDatetime.write(value.app_build_date, buf)
        _UniffiConverterString.write(value.architecture, buf)
        _UniffiConverterString.write(value.os_version, buf)
        _UniffiConverterOptionalString.write(value.channel, buf)
        _UniffiConverterOptionalString.write(value.locale, buf)
        _UniffiConverterOptionalString.write(value.device_manufacturer, buf)
        _UniffiConverterOptionalString.write(value.device_model, buf)
        _UniffiConverterOptionalString.write(value.android_sdk_version, buf)
        _UniffiConverterOptionalInt64.write(value.windows_build_number, buf)


class CommonMetricData:
    category: "str";name: "str";send_in_pings: "typing.List[str]";lifetime: "Lifetime";disabled: "bool";dynamic_label: "typing.Optional[str]";

    @typing.no_type_check
    def __init__(self, category: "str", name: "str", send_in_pings: "typing.List[str]", lifetime: "Lifetime", disabled: "bool", dynamic_label: "typing.Optional[str]" = _DEFAULT):
        self.category = category
        self.name = name
        self.send_in_pings = send_in_pings
        self.lifetime = lifetime
        self.disabled = disabled
        if dynamic_label is _DEFAULT:
            self.dynamic_label = None
        else:
            self.dynamic_label = dynamic_label

    def __str__(self):
        return "CommonMetricData(category={}, name={}, send_in_pings={}, lifetime={}, disabled={}, dynamic_label={})".format(self.category, self.name, self.send_in_pings, self.lifetime, self.disabled, self.dynamic_label)

    def __eq__(self, other):
        if self.category != other.category:
            return False
        if self.name != other.name:
            return False
        if self.send_in_pings != other.send_in_pings:
            return False
        if self.lifetime != other.lifetime:
            return False
        if self.disabled != other.disabled:
            return False
        if self.dynamic_label != other.dynamic_label:
            return False
        return True

class _UniffiConverterTypeCommonMetricData(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return CommonMetricData(
            category=_UniffiConverterString.read(buf),
            name=_UniffiConverterString.read(buf),
            send_in_pings=_UniffiConverterSequenceString.read(buf),
            lifetime=_UniffiConverterTypeLifetime.read(buf),
            disabled=_UniffiConverterBool.read(buf),
            dynamic_label=_UniffiConverterOptionalString.read(buf),
        )

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.category, buf)
        _UniffiConverterString.write(value.name, buf)
        _UniffiConverterSequenceString.write(value.send_in_pings, buf)
        _UniffiConverterTypeLifetime.write(value.lifetime, buf)
        _UniffiConverterBool.write(value.disabled, buf)
        _UniffiConverterOptionalString.write(value.dynamic_label, buf)


class Datetime:
    year: "int";month: "int";day: "int";hour: "int";minute: "int";second: "int";nanosecond: "int";offset_seconds: "int";

    @typing.no_type_check
    def __init__(self, year: "int", month: "int", day: "int", hour: "int", minute: "int", second: "int", nanosecond: "int", offset_seconds: "int"):
        self.year = year
        self.month = month
        self.day = day
        self.hour = hour
        self.minute = minute
        self.second = second
        self.nanosecond = nanosecond
        self.offset_seconds = offset_seconds

    def __str__(self):
        return "Datetime(year={}, month={}, day={}, hour={}, minute={}, second={}, nanosecond={}, offset_seconds={})".format(self.year, self.month, self.day, self.hour, self.minute, self.second, self.nanosecond, self.offset_seconds)

    def __eq__(self, other):
        if self.year != other.year:
            return False
        if self.month != other.month:
            return False
        if self.day != other.day:
            return False
        if self.hour != other.hour:
            return False
        if self.minute != other.minute:
            return False
        if self.second != other.second:
            return False
        if self.nanosecond != other.nanosecond:
            return False
        if self.offset_seconds != other.offset_seconds:
            return False
        return True

class _UniffiConverterTypeDatetime(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return Datetime(
            year=_UniffiConverterInt32.read(buf),
            month=_UniffiConverterUInt32.read(buf),
            day=_UniffiConverterUInt32.read(buf),
            hour=_UniffiConverterUInt32.read(buf),
            minute=_UniffiConverterUInt32.read(buf),
            second=_UniffiConverterUInt32.read(buf),
            nanosecond=_UniffiConverterUInt32.read(buf),
            offset_seconds=_UniffiConverterInt32.read(buf),
        )

    @staticmethod
    def write(value, buf):
        _UniffiConverterInt32.write(value.year, buf)
        _UniffiConverterUInt32.write(value.month, buf)
        _UniffiConverterUInt32.write(value.day, buf)
        _UniffiConverterUInt32.write(value.hour, buf)
        _UniffiConverterUInt32.write(value.minute, buf)
        _UniffiConverterUInt32.write(value.second, buf)
        _UniffiConverterUInt32.write(value.nanosecond, buf)
        _UniffiConverterInt32.write(value.offset_seconds, buf)


class DistributionData:
    values: "dict";sum: "int";count: "int";

    @typing.no_type_check
    def __init__(self, values: "dict", sum: "int", count: "int"):
        self.values = values
        self.sum = sum
        self.count = count

    def __str__(self):
        return "DistributionData(values={}, sum={}, count={})".format(self.values, self.sum, self.count)

    def __eq__(self, other):
        if self.values != other.values:
            return False
        if self.sum != other.sum:
            return False
        if self.count != other.count:
            return False
        return True

class _UniffiConverterTypeDistributionData(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return DistributionData(
            values=_UniffiConverterMapInt64Int64.read(buf),
            sum=_UniffiConverterInt64.read(buf),
            count=_UniffiConverterInt64.read(buf),
        )

    @staticmethod
    def write(value, buf):
        _UniffiConverterMapInt64Int64.write(value.values, buf)
        _UniffiConverterInt64.write(value.sum, buf)
        _UniffiConverterInt64.write(value.count, buf)


class InternalConfiguration:
    data_path: "str";application_id: "str";language_binding_name: "str";upload_enabled: "bool";max_events: "typing.Optional[int]";delay_ping_lifetime_io: "bool";app_build: "str";use_core_mps: "bool";trim_data_to_registered_pings: "bool";log_level: "typing.Optional[LevelFilter]";rate_limit: "typing.Optional[PingRateLimit]";enable_event_timestamps: "bool";experimentation_id: "typing.Optional[str]";

    @typing.no_type_check
    def __init__(self, data_path: "str", application_id: "str", language_binding_name: "str", upload_enabled: "bool", max_events: "typing.Optional[int]", delay_ping_lifetime_io: "bool", app_build: "str", use_core_mps: "bool", trim_data_to_registered_pings: "bool", log_level: "typing.Optional[LevelFilter]", rate_limit: "typing.Optional[PingRateLimit]", enable_event_timestamps: "bool", experimentation_id: "typing.Optional[str]"):
        self.data_path = data_path
        self.application_id = application_id
        self.language_binding_name = language_binding_name
        self.upload_enabled = upload_enabled
        self.max_events = max_events
        self.delay_ping_lifetime_io = delay_ping_lifetime_io
        self.app_build = app_build
        self.use_core_mps = use_core_mps
        self.trim_data_to_registered_pings = trim_data_to_registered_pings
        self.log_level = log_level
        self.rate_limit = rate_limit
        self.enable_event_timestamps = enable_event_timestamps
        self.experimentation_id = experimentation_id

    def __str__(self):
        return "InternalConfiguration(data_path={}, application_id={}, language_binding_name={}, upload_enabled={}, max_events={}, delay_ping_lifetime_io={}, app_build={}, use_core_mps={}, trim_data_to_registered_pings={}, log_level={}, rate_limit={}, enable_event_timestamps={}, experimentation_id={})".format(self.data_path, self.application_id, self.language_binding_name, self.upload_enabled, self.max_events, self.delay_ping_lifetime_io, self.app_build, self.use_core_mps, self.trim_data_to_registered_pings, self.log_level, self.rate_limit, self.enable_event_timestamps, self.experimentation_id)

    def __eq__(self, other):
        if self.data_path != other.data_path:
            return False
        if self.application_id != other.application_id:
            return False
        if self.language_binding_name != other.language_binding_name:
            return False
        if self.upload_enabled != other.upload_enabled:
            return False
        if self.max_events != other.max_events:
            return False
        if self.delay_ping_lifetime_io != other.delay_ping_lifetime_io:
            return False
        if self.app_build != other.app_build:
            return False
        if self.use_core_mps != other.use_core_mps:
            return False
        if self.trim_data_to_registered_pings != other.trim_data_to_registered_pings:
            return False
        if self.log_level != other.log_level:
            return False
        if self.rate_limit != other.rate_limit:
            return False
        if self.enable_event_timestamps != other.enable_event_timestamps:
            return False
        if self.experimentation_id != other.experimentation_id:
            return False
        return True

class _UniffiConverterTypeInternalConfiguration(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return InternalConfiguration(
            data_path=_UniffiConverterString.read(buf),
            application_id=_UniffiConverterString.read(buf),
            language_binding_name=_UniffiConverterString.read(buf),
            upload_enabled=_UniffiConverterBool.read(buf),
            max_events=_UniffiConverterOptionalUInt32.read(buf),
            delay_ping_lifetime_io=_UniffiConverterBool.read(buf),
            app_build=_UniffiConverterString.read(buf),
            use_core_mps=_UniffiConverterBool.read(buf),
            trim_data_to_registered_pings=_UniffiConverterBool.read(buf),
            log_level=_UniffiConverterOptionalTypeLevelFilter.read(buf),
            rate_limit=_UniffiConverterOptionalTypePingRateLimit.read(buf),
            enable_event_timestamps=_UniffiConverterBool.read(buf),
            experimentation_id=_UniffiConverterOptionalString.read(buf),
        )

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.data_path, buf)
        _UniffiConverterString.write(value.application_id, buf)
        _UniffiConverterString.write(value.language_binding_name, buf)
        _UniffiConverterBool.write(value.upload_enabled, buf)
        _UniffiConverterOptionalUInt32.write(value.max_events, buf)
        _UniffiConverterBool.write(value.delay_ping_lifetime_io, buf)
        _UniffiConverterString.write(value.app_build, buf)
        _UniffiConverterBool.write(value.use_core_mps, buf)
        _UniffiConverterBool.write(value.trim_data_to_registered_pings, buf)
        _UniffiConverterOptionalTypeLevelFilter.write(value.log_level, buf)
        _UniffiConverterOptionalTypePingRateLimit.write(value.rate_limit, buf)
        _UniffiConverterBool.write(value.enable_event_timestamps, buf)
        _UniffiConverterOptionalString.write(value.experimentation_id, buf)


class PingRateLimit:
    seconds_per_interval: "int";pings_per_interval: "int";

    @typing.no_type_check
    def __init__(self, seconds_per_interval: "int", pings_per_interval: "int"):
        self.seconds_per_interval = seconds_per_interval
        self.pings_per_interval = pings_per_interval

    def __str__(self):
        return "PingRateLimit(seconds_per_interval={}, pings_per_interval={})".format(self.seconds_per_interval, self.pings_per_interval)

    def __eq__(self, other):
        if self.seconds_per_interval != other.seconds_per_interval:
            return False
        if self.pings_per_interval != other.pings_per_interval:
            return False
        return True

class _UniffiConverterTypePingRateLimit(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return PingRateLimit(
            seconds_per_interval=_UniffiConverterUInt64.read(buf),
            pings_per_interval=_UniffiConverterUInt32.read(buf),
        )

    @staticmethod
    def write(value, buf):
        _UniffiConverterUInt64.write(value.seconds_per_interval, buf)
        _UniffiConverterUInt32.write(value.pings_per_interval, buf)


class PingRequest:
    document_id: "str";path: "str";body: "typing.List[int]";headers: "dict";body_has_info_sections: "bool";ping_name: "str";

    @typing.no_type_check
    def __init__(self, document_id: "str", path: "str", body: "typing.List[int]", headers: "dict", body_has_info_sections: "bool", ping_name: "str"):
        self.document_id = document_id
        self.path = path
        self.body = body
        self.headers = headers
        self.body_has_info_sections = body_has_info_sections
        self.ping_name = ping_name

    def __str__(self):
        return "PingRequest(document_id={}, path={}, body={}, headers={}, body_has_info_sections={}, ping_name={})".format(self.document_id, self.path, self.body, self.headers, self.body_has_info_sections, self.ping_name)

    def __eq__(self, other):
        if self.document_id != other.document_id:
            return False
        if self.path != other.path:
            return False
        if self.body != other.body:
            return False
        if self.headers != other.headers:
            return False
        if self.body_has_info_sections != other.body_has_info_sections:
            return False
        if self.ping_name != other.ping_name:
            return False
        return True

class _UniffiConverterTypePingRequest(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return PingRequest(
            document_id=_UniffiConverterString.read(buf),
            path=_UniffiConverterString.read(buf),
            body=_UniffiConverterSequenceUInt8.read(buf),
            headers=_UniffiConverterMapStringString.read(buf),
            body_has_info_sections=_UniffiConverterBool.read(buf),
            ping_name=_UniffiConverterString.read(buf),
        )

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.document_id, buf)
        _UniffiConverterString.write(value.path, buf)
        _UniffiConverterSequenceUInt8.write(value.body, buf)
        _UniffiConverterMapStringString.write(value.headers, buf)
        _UniffiConverterBool.write(value.body_has_info_sections, buf)
        _UniffiConverterString.write(value.ping_name, buf)


class Rate:
    numerator: "int";denominator: "int";

    @typing.no_type_check
    def __init__(self, numerator: "int", denominator: "int"):
        self.numerator = numerator
        self.denominator = denominator

    def __str__(self):
        return "Rate(numerator={}, denominator={})".format(self.numerator, self.denominator)

    def __eq__(self, other):
        if self.numerator != other.numerator:
            return False
        if self.denominator != other.denominator:
            return False
        return True

class _UniffiConverterTypeRate(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return Rate(
            numerator=_UniffiConverterInt32.read(buf),
            denominator=_UniffiConverterInt32.read(buf),
        )

    @staticmethod
    def write(value, buf):
        _UniffiConverterInt32.write(value.numerator, buf)
        _UniffiConverterInt32.write(value.denominator, buf)


class RecordedEvent:
    timestamp: "int";category: "str";name: "str";extra: "typing.Optional[dict]";

    @typing.no_type_check
    def __init__(self, timestamp: "int", category: "str", name: "str", extra: "typing.Optional[dict]"):
        self.timestamp = timestamp
        self.category = category
        self.name = name
        self.extra = extra

    def __str__(self):
        return "RecordedEvent(timestamp={}, category={}, name={}, extra={})".format(self.timestamp, self.category, self.name, self.extra)

    def __eq__(self, other):
        if self.timestamp != other.timestamp:
            return False
        if self.category != other.category:
            return False
        if self.name != other.name:
            return False
        if self.extra != other.extra:
            return False
        return True

class _UniffiConverterTypeRecordedEvent(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return RecordedEvent(
            timestamp=_UniffiConverterUInt64.read(buf),
            category=_UniffiConverterString.read(buf),
            name=_UniffiConverterString.read(buf),
            extra=_UniffiConverterOptionalMapStringString.read(buf),
        )

    @staticmethod
    def write(value, buf):
        _UniffiConverterUInt64.write(value.timestamp, buf)
        _UniffiConverterString.write(value.category, buf)
        _UniffiConverterString.write(value.name, buf)
        _UniffiConverterOptionalMapStringString.write(value.extra, buf)


class RecordedExperiment:
    branch: "str";extra: "typing.Optional[dict]";

    @typing.no_type_check
    def __init__(self, branch: "str", extra: "typing.Optional[dict]"):
        self.branch = branch
        self.extra = extra

    def __str__(self):
        return "RecordedExperiment(branch={}, extra={})".format(self.branch, self.extra)

    def __eq__(self, other):
        if self.branch != other.branch:
            return False
        if self.extra != other.extra:
            return False
        return True

class _UniffiConverterTypeRecordedExperiment(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return RecordedExperiment(
            branch=_UniffiConverterString.read(buf),
            extra=_UniffiConverterOptionalMapStringString.read(buf),
        )

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.branch, buf)
        _UniffiConverterOptionalMapStringString.write(value.extra, buf)


class TimerId:
    id: "int";

    @typing.no_type_check
    def __init__(self, id: "int"):
        self.id = id

    def __str__(self):
        return "TimerId(id={})".format(self.id)

    def __eq__(self, other):
        if self.id != other.id:
            return False
        return True

class _UniffiConverterTypeTimerId(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return TimerId(
            id=_UniffiConverterUInt64.read(buf),
        )

    @staticmethod
    def write(value, buf):
        _UniffiConverterUInt64.write(value.id, buf)


# CallbackError
# We want to define each variant as a nested class that's also a subclass,
# which is tricky in Python.  To accomplish this we're going to create each
# class separately, then manually add the child classes to the base class's
# __dict__.  All of this happens in dummy class to avoid polluting the module
# namespace.
class CallbackError(Exception):
    pass

_UniffiTempCallbackError = CallbackError

class CallbackError:  # type: ignore
    class UnexpectedError(_UniffiTempCallbackError):
        def __repr__(self):
            return "CallbackError.UnexpectedError({})".format(repr(str(self)))
    _UniffiTempCallbackError.UnexpectedError = UnexpectedError # type: ignore

CallbackError = _UniffiTempCallbackError # type: ignore
del _UniffiTempCallbackError


class _UniffiConverterTypeCallbackError(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return CallbackError.UnexpectedError(
                _UniffiConverterString.read(buf),
            )
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def write(value, buf):
        if isinstance(value, CallbackError.UnexpectedError):
            buf.write_i32(1)





class ErrorType(enum.Enum):
    INVALID_VALUE = 1
    INVALID_LABEL = 2
    INVALID_STATE = 3
    INVALID_OVERFLOW = 4
    


class _UniffiConverterTypeErrorType(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return ErrorType.INVALID_VALUE
        if variant == 2:
            return ErrorType.INVALID_LABEL
        if variant == 3:
            return ErrorType.INVALID_STATE
        if variant == 4:
            return ErrorType.INVALID_OVERFLOW
        raise InternalError("Raw enum value doesn't match any cases")

    def write(value, buf):
        if value == ErrorType.INVALID_VALUE:
            buf.write_i32(1)
        if value == ErrorType.INVALID_LABEL:
            buf.write_i32(2)
        if value == ErrorType.INVALID_STATE:
            buf.write_i32(3)
        if value == ErrorType.INVALID_OVERFLOW:
            buf.write_i32(4)






class HistogramType(enum.Enum):
    LINEAR = 1
    EXPONENTIAL = 2
    


class _UniffiConverterTypeHistogramType(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return HistogramType.LINEAR
        if variant == 2:
            return HistogramType.EXPONENTIAL
        raise InternalError("Raw enum value doesn't match any cases")

    def write(value, buf):
        if value == HistogramType.LINEAR:
            buf.write_i32(1)
        if value == HistogramType.EXPONENTIAL:
            buf.write_i32(2)






class LevelFilter(enum.Enum):
    OFF = 1
    ERROR = 2
    WARN = 3
    INFO = 4
    DEBUG = 5
    TRACE = 6
    


class _UniffiConverterTypeLevelFilter(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return LevelFilter.OFF
        if variant == 2:
            return LevelFilter.ERROR
        if variant == 3:
            return LevelFilter.WARN
        if variant == 4:
            return LevelFilter.INFO
        if variant == 5:
            return LevelFilter.DEBUG
        if variant == 6:
            return LevelFilter.TRACE
        raise InternalError("Raw enum value doesn't match any cases")

    def write(value, buf):
        if value == LevelFilter.OFF:
            buf.write_i32(1)
        if value == LevelFilter.ERROR:
            buf.write_i32(2)
        if value == LevelFilter.WARN:
            buf.write_i32(3)
        if value == LevelFilter.INFO:
            buf.write_i32(4)
        if value == LevelFilter.DEBUG:
            buf.write_i32(5)
        if value == LevelFilter.TRACE:
            buf.write_i32(6)






class Lifetime(enum.Enum):
    PING = 1
    APPLICATION = 2
    USER = 3
    


class _UniffiConverterTypeLifetime(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return Lifetime.PING
        if variant == 2:
            return Lifetime.APPLICATION
        if variant == 3:
            return Lifetime.USER
        raise InternalError("Raw enum value doesn't match any cases")

    def write(value, buf):
        if value == Lifetime.PING:
            buf.write_i32(1)
        if value == Lifetime.APPLICATION:
            buf.write_i32(2)
        if value == Lifetime.USER:
            buf.write_i32(3)






class MemoryUnit(enum.Enum):
    BYTE = 1
    KILOBYTE = 2
    MEGABYTE = 3
    GIGABYTE = 4
    


class _UniffiConverterTypeMemoryUnit(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return MemoryUnit.BYTE
        if variant == 2:
            return MemoryUnit.KILOBYTE
        if variant == 3:
            return MemoryUnit.MEGABYTE
        if variant == 4:
            return MemoryUnit.GIGABYTE
        raise InternalError("Raw enum value doesn't match any cases")

    def write(value, buf):
        if value == MemoryUnit.BYTE:
            buf.write_i32(1)
        if value == MemoryUnit.KILOBYTE:
            buf.write_i32(2)
        if value == MemoryUnit.MEGABYTE:
            buf.write_i32(3)
        if value == MemoryUnit.GIGABYTE:
            buf.write_i32(4)






class PingUploadTask:
    def __init__(self):
        raise RuntimeError("PingUploadTask cannot be instantiated directly")

    # Each enum variant is a nested class of the enum itself.
    class UPLOAD:
        request: "PingRequest";

        @typing.no_type_check
        def __init__(self,request: "PingRequest"):
            
            self.request = request
            

        def __str__(self):
            return "PingUploadTask.UPLOAD(request={})".format(self.request)

        def __eq__(self, other):
            if not other.is_upload():
                return False
            if self.request != other.request:
                return False
            return True
    class WAIT:
        time: "int";

        @typing.no_type_check
        def __init__(self,time: "int"):
            
            self.time = time
            

        def __str__(self):
            return "PingUploadTask.WAIT(time={})".format(self.time)

        def __eq__(self, other):
            if not other.is_wait():
                return False
            if self.time != other.time:
                return False
            return True
    class DONE:
        unused: "int";

        @typing.no_type_check
        def __init__(self,unused: "int"):
            
            self.unused = unused
            

        def __str__(self):
            return "PingUploadTask.DONE(unused={})".format(self.unused)

        def __eq__(self, other):
            if not other.is_done():
                return False
            if self.unused != other.unused:
                return False
            return True
    

    # For each variant, we have an `is_NAME` method for easily checking
    # whether an instance is that variant.
    def is_upload(self) -> bool:
        return isinstance(self, PingUploadTask.UPLOAD)
    def is_wait(self) -> bool:
        return isinstance(self, PingUploadTask.WAIT)
    def is_done(self) -> bool:
        return isinstance(self, PingUploadTask.DONE)
    

# Now, a little trick - we make each nested variant class be a subclass of the main
# enum class, so that method calls and instance checks etc will work intuitively.
# We might be able to do this a little more neatly with a metaclass, but this'll do.
PingUploadTask.UPLOAD = type("PingUploadTask.UPLOAD", (PingUploadTask.UPLOAD, PingUploadTask,), {})  # type: ignore
PingUploadTask.WAIT = type("PingUploadTask.WAIT", (PingUploadTask.WAIT, PingUploadTask,), {})  # type: ignore
PingUploadTask.DONE = type("PingUploadTask.DONE", (PingUploadTask.DONE, PingUploadTask,), {})  # type: ignore




class _UniffiConverterTypePingUploadTask(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return PingUploadTask.UPLOAD(
                _UniffiConverterTypePingRequest.read(buf),
            )
        if variant == 2:
            return PingUploadTask.WAIT(
                _UniffiConverterUInt64.read(buf),
            )
        if variant == 3:
            return PingUploadTask.DONE(
                _UniffiConverterInt8.read(buf),
            )
        raise InternalError("Raw enum value doesn't match any cases")

    def write(value, buf):
        if value.is_upload():
            buf.write_i32(1)
            _UniffiConverterTypePingRequest.write(value.request, buf)
        if value.is_wait():
            buf.write_i32(2)
            _UniffiConverterUInt64.write(value.time, buf)
        if value.is_done():
            buf.write_i32(3)
            _UniffiConverterInt8.write(value.unused, buf)






class TimeUnit(enum.Enum):
    NANOSECOND = 1
    MICROSECOND = 2
    MILLISECOND = 3
    SECOND = 4
    MINUTE = 5
    HOUR = 6
    DAY = 7
    


class _UniffiConverterTypeTimeUnit(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return TimeUnit.NANOSECOND
        if variant == 2:
            return TimeUnit.MICROSECOND
        if variant == 3:
            return TimeUnit.MILLISECOND
        if variant == 4:
            return TimeUnit.SECOND
        if variant == 5:
            return TimeUnit.MINUTE
        if variant == 6:
            return TimeUnit.HOUR
        if variant == 7:
            return TimeUnit.DAY
        raise InternalError("Raw enum value doesn't match any cases")

    def write(value, buf):
        if value == TimeUnit.NANOSECOND:
            buf.write_i32(1)
        if value == TimeUnit.MICROSECOND:
            buf.write_i32(2)
        if value == TimeUnit.MILLISECOND:
            buf.write_i32(3)
        if value == TimeUnit.SECOND:
            buf.write_i32(4)
        if value == TimeUnit.MINUTE:
            buf.write_i32(5)
        if value == TimeUnit.HOUR:
            buf.write_i32(6)
        if value == TimeUnit.DAY:
            buf.write_i32(7)






class UploadResult:
    def __init__(self):
        raise RuntimeError("UploadResult cannot be instantiated directly")

    # Each enum variant is a nested class of the enum itself.
    class RECOVERABLE_FAILURE:
        unused: "int";

        @typing.no_type_check
        def __init__(self,unused: "int"):
            
            self.unused = unused
            

        def __str__(self):
            return "UploadResult.RECOVERABLE_FAILURE(unused={})".format(self.unused)

        def __eq__(self, other):
            if not other.is_recoverable_failure():
                return False
            if self.unused != other.unused:
                return False
            return True
    class UNRECOVERABLE_FAILURE:
        unused: "int";

        @typing.no_type_check
        def __init__(self,unused: "int"):
            
            self.unused = unused
            

        def __str__(self):
            return "UploadResult.UNRECOVERABLE_FAILURE(unused={})".format(self.unused)

        def __eq__(self, other):
            if not other.is_unrecoverable_failure():
                return False
            if self.unused != other.unused:
                return False
            return True
    class HTTP_STATUS:
        code: "int";

        @typing.no_type_check
        def __init__(self,code: "int"):
            
            self.code = code
            

        def __str__(self):
            return "UploadResult.HTTP_STATUS(code={})".format(self.code)

        def __eq__(self, other):
            if not other.is_http_status():
                return False
            if self.code != other.code:
                return False
            return True
    class DONE:
        unused: "int";

        @typing.no_type_check
        def __init__(self,unused: "int"):
            
            self.unused = unused
            

        def __str__(self):
            return "UploadResult.DONE(unused={})".format(self.unused)

        def __eq__(self, other):
            if not other.is_done():
                return False
            if self.unused != other.unused:
                return False
            return True
    

    # For each variant, we have an `is_NAME` method for easily checking
    # whether an instance is that variant.
    def is_recoverable_failure(self) -> bool:
        return isinstance(self, UploadResult.RECOVERABLE_FAILURE)
    def is_unrecoverable_failure(self) -> bool:
        return isinstance(self, UploadResult.UNRECOVERABLE_FAILURE)
    def is_http_status(self) -> bool:
        return isinstance(self, UploadResult.HTTP_STATUS)
    def is_done(self) -> bool:
        return isinstance(self, UploadResult.DONE)
    

# Now, a little trick - we make each nested variant class be a subclass of the main
# enum class, so that method calls and instance checks etc will work intuitively.
# We might be able to do this a little more neatly with a metaclass, but this'll do.
UploadResult.RECOVERABLE_FAILURE = type("UploadResult.RECOVERABLE_FAILURE", (UploadResult.RECOVERABLE_FAILURE, UploadResult,), {})  # type: ignore
UploadResult.UNRECOVERABLE_FAILURE = type("UploadResult.UNRECOVERABLE_FAILURE", (UploadResult.UNRECOVERABLE_FAILURE, UploadResult,), {})  # type: ignore
UploadResult.HTTP_STATUS = type("UploadResult.HTTP_STATUS", (UploadResult.HTTP_STATUS, UploadResult,), {})  # type: ignore
UploadResult.DONE = type("UploadResult.DONE", (UploadResult.DONE, UploadResult,), {})  # type: ignore




class _UniffiConverterTypeUploadResult(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return UploadResult.RECOVERABLE_FAILURE(
                _UniffiConverterInt8.read(buf),
            )
        if variant == 2:
            return UploadResult.UNRECOVERABLE_FAILURE(
                _UniffiConverterInt8.read(buf),
            )
        if variant == 3:
            return UploadResult.HTTP_STATUS(
                _UniffiConverterInt32.read(buf),
            )
        if variant == 4:
            return UploadResult.DONE(
                _UniffiConverterInt8.read(buf),
            )
        raise InternalError("Raw enum value doesn't match any cases")

    def write(value, buf):
        if value.is_recoverable_failure():
            buf.write_i32(1)
            _UniffiConverterInt8.write(value.unused, buf)
        if value.is_unrecoverable_failure():
            buf.write_i32(2)
            _UniffiConverterInt8.write(value.unused, buf)
        if value.is_http_status():
            buf.write_i32(3)
            _UniffiConverterInt32.write(value.code, buf)
        if value.is_done():
            buf.write_i32(4)
            _UniffiConverterInt8.write(value.unused, buf)






class UploadTaskAction(enum.Enum):
    NEXT = 1
    END = 2
    


class _UniffiConverterTypeUploadTaskAction(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return UploadTaskAction.NEXT
        if variant == 2:
            return UploadTaskAction.END
        raise InternalError("Raw enum value doesn't match any cases")

    def write(value, buf):
        if value == UploadTaskAction.NEXT:
            buf.write_i32(1)
        if value == UploadTaskAction.END:
            buf.write_i32(2)




import threading

class ConcurrentHandleMap:
    """
    A map where inserting, getting and removing data is synchronized with a lock.
    """

    def __init__(self):
        # type Handle = int
        self._left_map = {}  # type: Dict[Handle, Any]
        self._right_map = {}  # type: Dict[Any, Handle]

        self._lock = threading.Lock()
        self._current_handle = 0
        self._stride = 1


    def insert(self, obj):
        with self._lock:
            if obj in self._right_map:
                return self._right_map[obj]
            else:
                handle = self._current_handle
                self._current_handle += self._stride
                self._left_map[handle] = obj
                self._right_map[obj] = handle
                return handle

    def get(self, handle):
        with self._lock:
            return self._left_map.get(handle)

    def remove(self, handle):
        with self._lock:
            if handle in self._left_map:
                obj = self._left_map.pop(handle)
                del self._right_map[obj]
                return obj

# Magic number for the Rust proxy to call using the same mechanism as every other method,
# to free the callback once it's dropped by Rust.
IDX_CALLBACK_FREE = 0
# Return codes for callback calls
_UNIFFI_CALLBACK_SUCCESS = 0
_UNIFFI_CALLBACK_ERROR = 1
_UNIFFI_CALLBACK_UNEXPECTED_ERROR = 2

class _UniffiConverterCallbackInterface:
    _handle_map = ConcurrentHandleMap()

    def __init__(self, cb):
        self._foreign_callback = cb

    def drop(self, handle):
        self.__class__._handle_map.remove(handle)

    @classmethod
    def lift(cls, handle):
        obj = cls._handle_map.get(handle)
        if not obj:
            raise InternalError("The object in the handle map has been dropped already")

        return obj

    @classmethod
    def read(cls, buf):
        handle = buf.read_u64()
        cls.lift(handle)

    @classmethod
    def lower(cls, cb):
        handle = cls._handle_map.insert(cb)
        return handle

    @classmethod
    def write(cls, cb, buf):
        buf.write_u64(cls.lower(cb))

# Declaration and _UniffiConverters for GleanEventListener Callback Interface

class GleanEventListener:
    def on_event_recorded(self, id: "str"):
        raise NotImplementedError

    

def py_foreignCallbackCallbackInterfaceGleanEventListener(handle, method, args_data, args_len, buf_ptr):
    
    def invoke_on_event_recorded(python_callback, args_stream, buf_ptr):
        def makeCall():return python_callback.on_event_recorded(
                _UniffiConverterString.read(args_stream)
                )

        def makeCallAndHandleReturn():
            makeCall()
            return _UNIFFI_CALLBACK_SUCCESS
        return makeCallAndHandleReturn()

    

    cb = _UniffiConverterCallbackInterfaceGleanEventListener.lift(handle)
    if not cb:
        raise InternalError("No callback in handlemap; this is a uniffi bug")

    if method == IDX_CALLBACK_FREE:
        _UniffiConverterCallbackInterfaceGleanEventListener.drop(handle)
        # Successfull return
        # See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
        return _UNIFFI_CALLBACK_SUCCESS

    if method == 1:
        # Call the method and handle any errors
        # See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs` for details
        try:
            return invoke_on_event_recorded(cb, _UniffiRustBufferStream(args_data, args_len), buf_ptr)
        except BaseException as e:
            # Catch unexpected errors
            try:
                # Try to serialize the exception into a String
                buf_ptr[0] = _UniffiConverterString.lower(repr(e))
            except:
                # If that fails, just give up
                pass
            return _UNIFFI_CALLBACK_UNEXPECTED_ERROR
    

    # This should never happen, because an out of bounds method index won't
    # ever be used. Once we can catch errors, we should return an InternalException.
    # https://github.com/mozilla/uniffi-rs/issues/351

    # An unexpected error happened.
    # See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
    return _UNIFFI_CALLBACK_UNEXPECTED_ERROR

# We need to keep this function reference alive:
# if they get GC'd while in use then UniFFI internals could attempt to call a function
# that is in freed memory.
# That would be...uh...bad. Yeah, that's the word. Bad.
foreignCallbackCallbackInterfaceGleanEventListener = _UNIFFI_FOREIGN_CALLBACK_T(py_foreignCallbackCallbackInterfaceGleanEventListener)
_rust_call(lambda err: _UniffiLib.uniffi_glean_core_fn_init_callback_gleaneventlistener(foreignCallbackCallbackInterfaceGleanEventListener, err))

# The _UniffiConverter which transforms the Callbacks in to Handles to pass to Rust.
_UniffiConverterCallbackInterfaceGleanEventListener = _UniffiConverterCallbackInterface(foreignCallbackCallbackInterfaceGleanEventListener)





# Declaration and _UniffiConverters for OnGleanEvents Callback Interface

class OnGleanEvents:
    def initialize_finished(self, ):
        raise NotImplementedError

    def trigger_upload(self, ):
        raise NotImplementedError

    def start_metrics_ping_scheduler(self, ):
        raise NotImplementedError

    def cancel_uploads(self, ):
        raise NotImplementedError

    def shutdown(self, ):
        raise NotImplementedError

    

def py_foreignCallbackCallbackInterfaceOnGleanEvents(handle, method, args_data, args_len, buf_ptr):
    
    def invoke_initialize_finished(python_callback, args_stream, buf_ptr):
        def makeCall():
            return python_callback.initialize_finished()

        def makeCallAndHandleReturn():
            makeCall()
            return _UNIFFI_CALLBACK_SUCCESS
        return makeCallAndHandleReturn()

    
    def invoke_trigger_upload(python_callback, args_stream, buf_ptr):
        def makeCall():
            return python_callback.trigger_upload()

        def makeCallAndHandleReturn():
            makeCall()
            return _UNIFFI_CALLBACK_SUCCESS
        try:
            return makeCallAndHandleReturn()
        except CallbackError as e:
            # Catch errors declared in the UDL file
            with _UniffiRustBuffer.alloc_with_builder() as builder:
                _UniffiConverterTypeCallbackError.write(e, builder)
                buf_ptr[0] = builder.finalize()
            return _UNIFFI_CALLBACK_ERROR

    
    def invoke_start_metrics_ping_scheduler(python_callback, args_stream, buf_ptr):
        def makeCall():
            return python_callback.start_metrics_ping_scheduler()

        def makeCallAndHandleReturn():
            rval = makeCall()
            with _UniffiRustBuffer.alloc_with_builder() as builder:
                _UniffiConverterBool.write(rval, builder)
                buf_ptr[0] = builder.finalize()
            return _UNIFFI_CALLBACK_SUCCESS
        return makeCallAndHandleReturn()

    
    def invoke_cancel_uploads(python_callback, args_stream, buf_ptr):
        def makeCall():
            return python_callback.cancel_uploads()

        def makeCallAndHandleReturn():
            makeCall()
            return _UNIFFI_CALLBACK_SUCCESS
        try:
            return makeCallAndHandleReturn()
        except CallbackError as e:
            # Catch errors declared in the UDL file
            with _UniffiRustBuffer.alloc_with_builder() as builder:
                _UniffiConverterTypeCallbackError.write(e, builder)
                buf_ptr[0] = builder.finalize()
            return _UNIFFI_CALLBACK_ERROR

    
    def invoke_shutdown(python_callback, args_stream, buf_ptr):
        def makeCall():
            return python_callback.shutdown()

        def makeCallAndHandleReturn():
            makeCall()
            return _UNIFFI_CALLBACK_SUCCESS
        try:
            return makeCallAndHandleReturn()
        except CallbackError as e:
            # Catch errors declared in the UDL file
            with _UniffiRustBuffer.alloc_with_builder() as builder:
                _UniffiConverterTypeCallbackError.write(e, builder)
                buf_ptr[0] = builder.finalize()
            return _UNIFFI_CALLBACK_ERROR

    

    cb = _UniffiConverterCallbackInterfaceOnGleanEvents.lift(handle)
    if not cb:
        raise InternalError("No callback in handlemap; this is a uniffi bug")

    if method == IDX_CALLBACK_FREE:
        _UniffiConverterCallbackInterfaceOnGleanEvents.drop(handle)
        # Successfull return
        # See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
        return _UNIFFI_CALLBACK_SUCCESS

    if method == 1:
        # Call the method and handle any errors
        # See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs` for details
        try:
            return invoke_initialize_finished(cb, _UniffiRustBufferStream(args_data, args_len), buf_ptr)
        except BaseException as e:
            # Catch unexpected errors
            try:
                # Try to serialize the exception into a String
                buf_ptr[0] = _UniffiConverterString.lower(repr(e))
            except:
                # If that fails, just give up
                pass
            return _UNIFFI_CALLBACK_UNEXPECTED_ERROR
    if method == 2:
        # Call the method and handle any errors
        # See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs` for details
        try:
            return invoke_trigger_upload(cb, _UniffiRustBufferStream(args_data, args_len), buf_ptr)
        except BaseException as e:
            # Catch unexpected errors
            try:
                # Try to serialize the exception into a String
                buf_ptr[0] = _UniffiConverterString.lower(repr(e))
            except:
                # If that fails, just give up
                pass
            return _UNIFFI_CALLBACK_UNEXPECTED_ERROR
    if method == 3:
        # Call the method and handle any errors
        # See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs` for details
        try:
            return invoke_start_metrics_ping_scheduler(cb, _UniffiRustBufferStream(args_data, args_len), buf_ptr)
        except BaseException as e:
            # Catch unexpected errors
            try:
                # Try to serialize the exception into a String
                buf_ptr[0] = _UniffiConverterString.lower(repr(e))
            except:
                # If that fails, just give up
                pass
            return _UNIFFI_CALLBACK_UNEXPECTED_ERROR
    if method == 4:
        # Call the method and handle any errors
        # See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs` for details
        try:
            return invoke_cancel_uploads(cb, _UniffiRustBufferStream(args_data, args_len), buf_ptr)
        except BaseException as e:
            # Catch unexpected errors
            try:
                # Try to serialize the exception into a String
                buf_ptr[0] = _UniffiConverterString.lower(repr(e))
            except:
                # If that fails, just give up
                pass
            return _UNIFFI_CALLBACK_UNEXPECTED_ERROR
    if method == 5:
        # Call the method and handle any errors
        # See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs` for details
        try:
            return invoke_shutdown(cb, _UniffiRustBufferStream(args_data, args_len), buf_ptr)
        except BaseException as e:
            # Catch unexpected errors
            try:
                # Try to serialize the exception into a String
                buf_ptr[0] = _UniffiConverterString.lower(repr(e))
            except:
                # If that fails, just give up
                pass
            return _UNIFFI_CALLBACK_UNEXPECTED_ERROR
    

    # This should never happen, because an out of bounds method index won't
    # ever be used. Once we can catch errors, we should return an InternalException.
    # https://github.com/mozilla/uniffi-rs/issues/351

    # An unexpected error happened.
    # See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
    return _UNIFFI_CALLBACK_UNEXPECTED_ERROR

# We need to keep this function reference alive:
# if they get GC'd while in use then UniFFI internals could attempt to call a function
# that is in freed memory.
# That would be...uh...bad. Yeah, that's the word. Bad.
foreignCallbackCallbackInterfaceOnGleanEvents = _UNIFFI_FOREIGN_CALLBACK_T(py_foreignCallbackCallbackInterfaceOnGleanEvents)
_rust_call(lambda err: _UniffiLib.uniffi_glean_core_fn_init_callback_ongleanevents(foreignCallbackCallbackInterfaceOnGleanEvents, err))

# The _UniffiConverter which transforms the Callbacks in to Handles to pass to Rust.
_UniffiConverterCallbackInterfaceOnGleanEvents = _UniffiConverterCallbackInterface(foreignCallbackCallbackInterfaceOnGleanEvents)



class _UniffiConverterOptionalUInt32(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterUInt32.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterUInt32.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalInt32(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterInt32.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterInt32.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalInt64(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterInt64.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterInt64.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalBool(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterBool.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterBool.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalString(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterString.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterString.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalTypeDatetime(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterTypeDatetime.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterTypeDatetime.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalTypeDistributionData(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterTypeDistributionData.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterTypeDistributionData.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalTypePingRateLimit(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterTypePingRateLimit.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterTypePingRateLimit.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalTypeRate(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterTypeRate.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterTypeRate.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalTypeRecordedExperiment(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterTypeRecordedExperiment.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterTypeRecordedExperiment.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalTypeLevelFilter(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterTypeLevelFilter.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterTypeLevelFilter.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalSequenceString(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterSequenceString.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterSequenceString.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalSequenceTypeRecordedEvent(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterSequenceTypeRecordedEvent.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterSequenceTypeRecordedEvent.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalSequenceTypeCowString(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterSequenceTypeCowString.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterSequenceTypeCowString.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalMapStringString(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterMapStringString.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterMapStringString.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterSequenceUInt8(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterUInt8.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterUInt8.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceInt64(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterInt64.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterInt64.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceString(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterString.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterString.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceTypeCommonMetricData(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterTypeCommonMetricData.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterTypeCommonMetricData.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceTypeRecordedEvent(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterTypeRecordedEvent.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterTypeRecordedEvent.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceTypeCowString(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterTypeCowString.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterTypeCowString.read(buf) for i in range(count)
        ]



class _UniffiConverterMapInt64Int64(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, items, buf):
        buf.write_i32(len(items))
        for (key, value) in items.items():
            _UniffiConverterInt64.write(key, buf)
            _UniffiConverterInt64.write(value, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative map size")

        # It would be nice to use a dict comprehension,
        # but in Python 3.7 and before the evaluation order is not according to spec,
        # so we we're reading the value before the key.
        # This loop makes the order explicit: first reading the key, then the value.
        d = {}
        for i in range(count):
            key = _UniffiConverterInt64.read(buf)
            val = _UniffiConverterInt64.read(buf)
            d[key] = val
        return d



class _UniffiConverterMapStringString(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, items, buf):
        buf.write_i32(len(items))
        for (key, value) in items.items():
            _UniffiConverterString.write(key, buf)
            _UniffiConverterString.write(value, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative map size")

        # It would be nice to use a dict comprehension,
        # but in Python 3.7 and before the evaluation order is not according to spec,
        # so we we're reading the value before the key.
        # This loop makes the order explicit: first reading the key, then the value.
        d = {}
        for i in range(count):
            key = _UniffiConverterString.read(buf)
            val = _UniffiConverterString.read(buf)
            d[key] = val
        return d


# Type alias
CowString = str

class _UniffiConverterTypeCowString:
    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value, buf)

    @staticmethod
    def read(buf):
        return _UniffiConverterString.read(buf)

    @staticmethod
    def lift(value):
        return _UniffiConverterString.lift(value)

    @staticmethod
    def lower(value):
        return _UniffiConverterString.lower(value)

def glean_enable_logging():
    _rust_call(_UniffiLib.uniffi_glean_core_fn_func_glean_enable_logging,)


def glean_enable_logging_to_fd(fd: "int"):
    
    _rust_call(_UniffiLib.uniffi_glean_core_fn_func_glean_enable_logging_to_fd,
        _UniffiConverterUInt64.lower(fd))


def glean_get_upload_task() -> "PingUploadTask":
    return _UniffiConverterTypePingUploadTask.lift(_rust_call(_UniffiLib.uniffi_glean_core_fn_func_glean_get_upload_task,))


def glean_handle_client_active():
    _rust_call(_UniffiLib.uniffi_glean_core_fn_func_glean_handle_client_active,)


def glean_handle_client_inactive():
    _rust_call(_UniffiLib.uniffi_glean_core_fn_func_glean_handle_client_inactive,)


def glean_initialize(cfg: "InternalConfiguration",client_info: "ClientInfoMetrics",callbacks: "OnGleanEvents"):
    
    
    
    _rust_call(_UniffiLib.uniffi_glean_core_fn_func_glean_initialize,
        _UniffiConverterTypeInternalConfiguration.lower(cfg),
        _UniffiConverterTypeClientInfoMetrics.lower(client_info),
        _UniffiConverterCallbackInterfaceOnGleanEvents.lower(callbacks))


def glean_initialize_for_subprocess(cfg: "InternalConfiguration") -> "bool":
    
    return _UniffiConverterBool.lift(_rust_call(_UniffiLib.uniffi_glean_core_fn_func_glean_initialize_for_subprocess,
        _UniffiConverterTypeInternalConfiguration.lower(cfg)))


def glean_process_ping_upload_response(uuid: "str",result: "UploadResult") -> "UploadTaskAction":
    
    
    return _UniffiConverterTypeUploadTaskAction.lift(_rust_call(_UniffiLib.uniffi_glean_core_fn_func_glean_process_ping_upload_response,
        _UniffiConverterString.lower(uuid),
        _UniffiConverterTypeUploadResult.lower(result)))


def glean_register_event_listener(tag: "str",listener: "GleanEventListener"):
    
    
    _rust_call(_UniffiLib.uniffi_glean_core_fn_func_glean_register_event_listener,
        _UniffiConverterString.lower(tag),
        _UniffiConverterCallbackInterfaceGleanEventListener.lower(listener))


def glean_set_debug_view_tag(tag: "str") -> "bool":
    
    return _UniffiConverterBool.lift(_rust_call(_UniffiLib.uniffi_glean_core_fn_func_glean_set_debug_view_tag,
        _UniffiConverterString.lower(tag)))


def glean_set_dirty_flag(flag: "bool"):
    
    _rust_call(_UniffiLib.uniffi_glean_core_fn_func_glean_set_dirty_flag,
        _UniffiConverterBool.lower(flag))


def glean_set_experiment_active(experiment_id: "str",branch: "str",extra: "dict"):
    
    
    
    _rust_call(_UniffiLib.uniffi_glean_core_fn_func_glean_set_experiment_active,
        _UniffiConverterString.lower(experiment_id),
        _UniffiConverterString.lower(branch),
        _UniffiConverterMapStringString.lower(extra))


def glean_set_experiment_inactive(experiment_id: "str"):
    
    _rust_call(_UniffiLib.uniffi_glean_core_fn_func_glean_set_experiment_inactive,
        _UniffiConverterString.lower(experiment_id))


def glean_set_experimentation_id(experimentation_id: "str"):
    
    _rust_call(_UniffiLib.uniffi_glean_core_fn_func_glean_set_experimentation_id,
        _UniffiConverterString.lower(experimentation_id))


def glean_set_log_pings(value: "bool"):
    
    _rust_call(_UniffiLib.uniffi_glean_core_fn_func_glean_set_log_pings,
        _UniffiConverterBool.lower(value))


def glean_set_metrics_enabled_config(json: "str"):
    
    _rust_call(_UniffiLib.uniffi_glean_core_fn_func_glean_set_metrics_enabled_config,
        _UniffiConverterString.lower(json))


def glean_set_source_tags(tags: "typing.List[str]") -> "bool":
    
    return _UniffiConverterBool.lift(_rust_call(_UniffiLib.uniffi_glean_core_fn_func_glean_set_source_tags,
        _UniffiConverterSequenceString.lower(tags)))


def glean_set_test_mode(enabled: "bool"):
    
    _rust_call(_UniffiLib.uniffi_glean_core_fn_func_glean_set_test_mode,
        _UniffiConverterBool.lower(enabled))


def glean_set_upload_enabled(enabled: "bool"):
    
    _rust_call(_UniffiLib.uniffi_glean_core_fn_func_glean_set_upload_enabled,
        _UniffiConverterBool.lower(enabled))


def glean_shutdown():
    _rust_call(_UniffiLib.uniffi_glean_core_fn_func_glean_shutdown,)


def glean_submit_ping_by_name(ping_name: "str",reason: "typing.Union[object, typing.Optional[str]]" = _DEFAULT):
    
    if reason is _DEFAULT:
        reason = None
    
    _rust_call(_UniffiLib.uniffi_glean_core_fn_func_glean_submit_ping_by_name,
        _UniffiConverterString.lower(ping_name),
        _UniffiConverterOptionalString.lower(reason))


def glean_submit_ping_by_name_sync(ping_name: "str",reason: "typing.Union[object, typing.Optional[str]]" = _DEFAULT) -> "bool":
    
    if reason is _DEFAULT:
        reason = None
    
    return _UniffiConverterBool.lift(_rust_call(_UniffiLib.uniffi_glean_core_fn_func_glean_submit_ping_by_name_sync,
        _UniffiConverterString.lower(ping_name),
        _UniffiConverterOptionalString.lower(reason)))


def glean_test_destroy_glean(clear_stores: "bool",data_path: "typing.Union[object, typing.Optional[str]]" = _DEFAULT):
    
    if data_path is _DEFAULT:
        data_path = None
    
    _rust_call(_UniffiLib.uniffi_glean_core_fn_func_glean_test_destroy_glean,
        _UniffiConverterBool.lower(clear_stores),
        _UniffiConverterOptionalString.lower(data_path))


def glean_test_get_experiment_data(experiment_id: "str") -> "typing.Optional[RecordedExperiment]":
    
    return _UniffiConverterOptionalTypeRecordedExperiment.lift(_rust_call(_UniffiLib.uniffi_glean_core_fn_func_glean_test_get_experiment_data,
        _UniffiConverterString.lower(experiment_id)))


def glean_test_get_experimentation_id() -> "typing.Optional[str]":
    return _UniffiConverterOptionalString.lift(_rust_call(_UniffiLib.uniffi_glean_core_fn_func_glean_test_get_experimentation_id,))


def glean_unregister_event_listener(tag: "str"):
    
    _rust_call(_UniffiLib.uniffi_glean_core_fn_func_glean_unregister_event_listener,
        _UniffiConverterString.lower(tag))


__all__ = [
    "InternalError",
    "CallbackError",
    "ErrorType",
    "HistogramType",
    "LevelFilter",
    "Lifetime",
    "MemoryUnit",
    "PingUploadTask",
    "TimeUnit",
    "UploadResult",
    "UploadTaskAction",
    "ClientInfoMetrics",
    "CommonMetricData",
    "Datetime",
    "DistributionData",
    "InternalConfiguration",
    "PingRateLimit",
    "PingRequest",
    "Rate",
    "RecordedEvent",
    "RecordedExperiment",
    "TimerId",
    "glean_enable_logging",
    "glean_enable_logging_to_fd",
    "glean_get_upload_task",
    "glean_handle_client_active",
    "glean_handle_client_inactive",
    "glean_initialize",
    "glean_initialize_for_subprocess",
    "glean_process_ping_upload_response",
    "glean_register_event_listener",
    "glean_set_debug_view_tag",
    "glean_set_dirty_flag",
    "glean_set_experiment_active",
    "glean_set_experiment_inactive",
    "glean_set_experimentation_id",
    "glean_set_log_pings",
    "glean_set_metrics_enabled_config",
    "glean_set_source_tags",
    "glean_set_test_mode",
    "glean_set_upload_enabled",
    "glean_shutdown",
    "glean_submit_ping_by_name",
    "glean_submit_ping_by_name_sync",
    "glean_test_destroy_glean",
    "glean_test_get_experiment_data",
    "glean_test_get_experimentation_id",
    "glean_unregister_event_listener",
    "BooleanMetric",
    "CounterMetric",
    "CustomDistributionMetric",
    "DatetimeMetric",
    "DenominatorMetric",
    "EventMetric",
    "LabeledBoolean",
    "LabeledCounter",
    "LabeledString",
    "MemoryDistributionMetric",
    "NumeratorMetric",
    "PingType",
    "QuantityMetric",
    "RateMetric",
    "StringListMetric",
    "StringMetric",
    "TextMetric",
    "TimespanMetric",
    "TimingDistributionMetric",
    "UrlMetric",
    "UuidMetric",
    "GleanEventListener",
    "OnGleanEvents",
]

