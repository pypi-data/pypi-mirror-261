# coding: utf-8

"""
    Nomad Envoy

    This is the API descriptor for the Nomad Envoy API, responsible for order operation and product lists. Developed by [Samarkand Global](https://samarkand.global) in partnership with [Youzan](https://www.youzan.com/), [LittleRED](https://www.xiaohongshu.com/), [PDD](http://www.pinduoduo.com/), etc. Read the documentation online at [Nomad API Suite](https://api.samarkand.io/). - Install for node with `npm install nomad_envoy_cli` - Install for python with `pip install nomad-envoy-cli`  # noqa: E501

    The version of the OpenAPI document: 1.58.0
    Contact: paul@samarkand.global
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from nomad_envoy_cli.api_client import ApiClient
from nomad_envoy_cli.exceptions import (
    ApiTypeError,
    ApiValueError
)


class StoreApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_store_inventory(self, store_id, inventory, **kwargs):  # noqa: E501
        """createStoreInventory  # noqa: E501

        Create store-level product inventory  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_store_inventory(store_id, inventory, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str store_id: The store Id in Nomad system (required)
        :param Inventory inventory: Product in store inventory. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ApiResponseInventory
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.create_store_inventory_with_http_info(store_id, inventory, **kwargs)  # noqa: E501

    def create_store_inventory_with_http_info(self, store_id, inventory, **kwargs):  # noqa: E501
        """createStoreInventory  # noqa: E501

        Create store-level product inventory  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_store_inventory_with_http_info(store_id, inventory, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str store_id: The store Id in Nomad system (required)
        :param Inventory inventory: Product in store inventory. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ApiResponseInventory, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['store_id', 'inventory']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_store_inventory" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'store_id' is set
        if self.api_client.client_side_validation and ('store_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['store_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `store_id` when calling `create_store_inventory`")  # noqa: E501
        # verify the required parameter 'inventory' is set
        if self.api_client.client_side_validation and ('inventory' not in local_var_params or  # noqa: E501
                                                        local_var_params['inventory'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `inventory` when calling `create_store_inventory`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'store_id' in local_var_params:
            path_params['store_id'] = local_var_params['store_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'inventory' in local_var_params:
            body_params = local_var_params['inventory']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ca_key', 'ca_stage']  # noqa: E501

        return self.api_client.call_api(
            '/stores/{store_id}/inventory', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponseInventory',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_store(self, store, **kwargs):  # noqa: E501
        """postStore  # noqa: E501

        Operations for stores, such as query score of platform  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_store(store, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param Store store: Store operation. (required)
        :param str store_id: The store ID in nomad system
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ApiResponseGeneral
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.post_store_with_http_info(store, **kwargs)  # noqa: E501

    def post_store_with_http_info(self, store, **kwargs):  # noqa: E501
        """postStore  # noqa: E501

        Operations for stores, such as query score of platform  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_store_with_http_info(store, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param Store store: Store operation. (required)
        :param str store_id: The store ID in nomad system
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ApiResponseGeneral, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['store', 'store_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_store" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'store' is set
        if self.api_client.client_side_validation and ('store' not in local_var_params or  # noqa: E501
                                                        local_var_params['store'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `store` when calling `post_store`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'store_id' in local_var_params and local_var_params['store_id'] is not None:  # noqa: E501
            query_params.append(('store_id', local_var_params['store_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'store' in local_var_params:
            body_params = local_var_params['store']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ca_key', 'ca_stage']  # noqa: E501

        return self.api_client.call_api(
            '/stores/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponseGeneral',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def query_store(self, **kwargs):  # noqa: E501
        """queryStore  # noqa: E501

        Query all store name or specific store  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.query_store(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str store_name: The store name in nomad system
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ApiResponseGeneral
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.query_store_with_http_info(**kwargs)  # noqa: E501

    def query_store_with_http_info(self, **kwargs):  # noqa: E501
        """queryStore  # noqa: E501

        Query all store name or specific store  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.query_store_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str store_name: The store name in nomad system
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ApiResponseGeneral, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['store_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method query_store" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'store_name' in local_var_params and local_var_params['store_name'] is not None:  # noqa: E501
            query_params.append(('store_name', local_var_params['store_name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ca_key', 'ca_stage']  # noqa: E501

        return self.api_client.call_api(
            '/stores/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponseGeneral',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def query_store_inventory(self, store_id, **kwargs):  # noqa: E501
        """queryStoreInventory  # noqa: E501

        Query store-level product inventory  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.query_store_inventory(store_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str store_id: The store Id in Nomad system (required)
        :param int page_no: Page number, starting with 1
        :param int page_size: Page size, options: [1, 10, 50, 100, 1000]
        :param str product_id: The product Id in the store
        :param str batch_id: The batch Id in the store
        :param str location_id: The product Id of product
        :param str sku_name: The SKU name of product
        :param str barcode: The barcode of product
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ApiResponseInventory
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.query_store_inventory_with_http_info(store_id, **kwargs)  # noqa: E501

    def query_store_inventory_with_http_info(self, store_id, **kwargs):  # noqa: E501
        """queryStoreInventory  # noqa: E501

        Query store-level product inventory  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.query_store_inventory_with_http_info(store_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str store_id: The store Id in Nomad system (required)
        :param int page_no: Page number, starting with 1
        :param int page_size: Page size, options: [1, 10, 50, 100, 1000]
        :param str product_id: The product Id in the store
        :param str batch_id: The batch Id in the store
        :param str location_id: The product Id of product
        :param str sku_name: The SKU name of product
        :param str barcode: The barcode of product
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ApiResponseInventory, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['store_id', 'page_no', 'page_size', 'product_id', 'batch_id', 'location_id', 'sku_name', 'barcode']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method query_store_inventory" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'store_id' is set
        if self.api_client.client_side_validation and ('store_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['store_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `store_id` when calling `query_store_inventory`")  # noqa: E501

        if self.api_client.client_side_validation and 'page_no' in local_var_params and local_var_params['page_no'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `page_no` when calling `query_store_inventory`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'store_id' in local_var_params:
            path_params['store_id'] = local_var_params['store_id']  # noqa: E501

        query_params = []
        if 'page_no' in local_var_params and local_var_params['page_no'] is not None:  # noqa: E501
            query_params.append(('page_no', local_var_params['page_no']))  # noqa: E501
        if 'page_size' in local_var_params and local_var_params['page_size'] is not None:  # noqa: E501
            query_params.append(('page_size', local_var_params['page_size']))  # noqa: E501
        if 'product_id' in local_var_params and local_var_params['product_id'] is not None:  # noqa: E501
            query_params.append(('product_id', local_var_params['product_id']))  # noqa: E501
        if 'batch_id' in local_var_params and local_var_params['batch_id'] is not None:  # noqa: E501
            query_params.append(('batch_id', local_var_params['batch_id']))  # noqa: E501
        if 'location_id' in local_var_params and local_var_params['location_id'] is not None:  # noqa: E501
            query_params.append(('location_id', local_var_params['location_id']))  # noqa: E501
        if 'sku_name' in local_var_params and local_var_params['sku_name'] is not None:  # noqa: E501
            query_params.append(('sku_name', local_var_params['sku_name']))  # noqa: E501
        if 'barcode' in local_var_params and local_var_params['barcode'] is not None:  # noqa: E501
            query_params.append(('barcode', local_var_params['barcode']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ca_key', 'ca_stage']  # noqa: E501

        return self.api_client.call_api(
            '/stores/{store_id}/inventory', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponseInventory',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_store_inventory(self, store_id, inventory, **kwargs):  # noqa: E501
        """updateStoreInventory  # noqa: E501

        Update store-level product inventory  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_store_inventory(store_id, inventory, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str store_id: The store Id in Nomad system (required)
        :param Inventory inventory: Product in store inventory. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ApiResponseInventory
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.update_store_inventory_with_http_info(store_id, inventory, **kwargs)  # noqa: E501

    def update_store_inventory_with_http_info(self, store_id, inventory, **kwargs):  # noqa: E501
        """updateStoreInventory  # noqa: E501

        Update store-level product inventory  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_store_inventory_with_http_info(store_id, inventory, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str store_id: The store Id in Nomad system (required)
        :param Inventory inventory: Product in store inventory. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ApiResponseInventory, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['store_id', 'inventory']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_store_inventory" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'store_id' is set
        if self.api_client.client_side_validation and ('store_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['store_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `store_id` when calling `update_store_inventory`")  # noqa: E501
        # verify the required parameter 'inventory' is set
        if self.api_client.client_side_validation and ('inventory' not in local_var_params or  # noqa: E501
                                                        local_var_params['inventory'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `inventory` when calling `update_store_inventory`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'store_id' in local_var_params:
            path_params['store_id'] = local_var_params['store_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'inventory' in local_var_params:
            body_params = local_var_params['inventory']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ca_key', 'ca_stage']  # noqa: E501

        return self.api_client.call_api(
            '/stores/{store_id}/inventory', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponseInventory',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
