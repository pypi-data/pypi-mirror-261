Metadata-Version: 2.1
Name: ru_mvd_search_wanted
Version: 0.0.4
Summary: Parser of information from the website of the Ministry of Internal Affairs Search
Home-page: https://github.com/daniilak/ru_mvd_search_wanted
Author: Daniil Agniashvili
Author-email: dortos123456@gmail.com
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: Microsoft :: Windows
Classifier: Operating System :: POSIX :: Linux
Requires-Python: >3.7
Description-Content-Type: text/markdown
License-File: LICENSE


# API MVD Search Wanted Client

> Поиск указанного человека в базе данных [Розыск МВД](https://xn--b1aew.xn--p1ai/wanted)

Requirements:

-   Python 3.7+
-   [httpx](https://pypi.org/project/httpx/)
-   [beautifulsoup4](https://pypi.org/project/beautifulsoup4/)
-   [fake-useragent](https://pypi.org/project/fake-useragent/)

## Installation

```sh
pip install ru_mvd_search_wanted
```


## Usage

Import client:

```python
from ru_mvd_search_wanted.sync import MVDParser
```

Set proxy:

```python
proxy = "user:pass@host:port"
```

Use `with MVDParser()` if you want a context-managed client:

```python


with MVDParser(
    "Фамилия", "Имя", "Отчество", "YYYY", "MM", "DD", "123455@gmail.com", proxy
) as mvd:
    captcha_base64 = mvd.initialize()

    # solve captcha
    # captcha_word = solve(captcha_base64)
    result = mvd.get_result(captcha_word)

    print(result)

```

## Usage  (async)

Import client:

```python
from ru_mvd_search_wanted.asynchr import MVDParserAsync
```

Set proxy:

```python
proxy = "user:pass@host:port"
```

Use `async with MVDParserAsync()` Example:

```python

import asyncio

proxy = "user:pass@host:port"

async def main():
    async with MVDParserAsync(
        "Фамилия",
        "Имя",
        "Отчество",
        "YYYY",
        "MM",
        "DD",
        "123456@gmail.com",
        proxy
    ) as mvd:
        captcha_base64 = await mvd.initialize()

        # solve captcha
        # captcha_word = await solve(captcha_base64)
        result = await mvd.get_result(captcha_word)

        print(result)

loop = asyncio.get_event_loop()
loop.run_until_complete(main())
```
