# generated by datamodel-codegen:
#   filename:  usage-openapi.json

from __future__ import annotations

from typing import Any

from pydantic import BaseModel


class BaseExecutionUsage(BaseModel):
    """
    Base model for execution usage.
    """

    execution_seconds: Any
    """
    Total execution time.
    """
    machine_config: str
    """
    Machine config string in GPU(H100, count=1) format.
    """


class XTTSUsage(BaseExecutionUsage):
    input_audio_bytes: int
    """
    Size of speaker conditioning audio.
    """
    input_audio_seconds: float
    """
    Length of speaker conditioning audio.
    """
    output_audio_bytes: int
    """
    Size of output audio
    """
    output_audio_seconds: float
    """
    Length of output audio
    """


class SegmentAnythingUsage(BaseExecutionUsage):
    input_image_bytes: int
    """
    Size of input image.
    """
    input_image_width: int
    """
    Widht of input.
    """
    input_image_height: int
    """
    Height of input.
    """


class GroundingDINOUsage(BaseExecutionUsage):
    input_image_bytes: int
    """
    Size of input image.
    """
    input_image_width: int
    """
    Widht of input.
    """
    input_image_height: int
    """
    Height of input.
    """


class WhisperUsage(BaseExecutionUsage):
    input_audio_bytes: int
    """
    Size of input audio.
    """
    input_audio_seconds: float
    """
    Length of input audio.
    """
    output_segment_count: int
    """
    Number of segments.
    """
    align_enabled: bool
    """
    Align toggle.
    """
    diarize_enabled: bool
    """
    Diarize toggle.
    """
    chapters_enabled: bool
    """
    Chapters toggle.
    """


class FirellavaUsage(BaseExecutionUsage):
    input_image_bytes: int
    """
    Total bytes of input image(s).
    """
    input_image_count: int
    """
    Number of input images.
    """
    input_token_count: int
    """
    Input prompt tokens.
    """
    output_token_count: int
    """
    Output text tokens.
    """


class LamaUsage(BaseExecutionUsage):
    output_image_bytes: int
    """
    Total bytes of output image(s).
    """
    output_width: int
    """
    Width of output.
    """
    output_height: int
    """
    Height of output.
    """


class RemoveBackgroundUsage(BaseExecutionUsage):
    output_image_bytes: int
    """
    Total bytes of output image(s).
    """
    output_width: int
    """
    Width of output.
    """
    output_height: int
    """
    Height of output.
    """


class UpscaleImageUsage(BaseExecutionUsage):
    output_image_bytes: int
    """
    Total bytes of output image(s).
    """
    output_width: int
    """
    Width of output.
    """
    output_height: int
    """
    Height of output.
    """


class BaseStableDiffusionUsage(BaseExecutionUsage):
    prompt_length: int
    """
    Characters of prompt.
    """
    output_image_bytes: int
    """
    Total bytes of output image(s).
    """
    output_image_count: int
    """
    Number of output images.
    """
    output_width: int
    """
    Width of output.
    """
    output_height: int
    """
    Height of output.
    """


class StableDiffusionWithImageUsage(BaseStableDiffusionUsage):
    input_image_bytes: int
    """
    Size of input image.
    """


class AnimateImageUsage(BaseExecutionUsage):
    input_image_bytes: int
    """
    Size of input image.
    """
    output_frames: int
    """
    Number of output images.
    """
    output_width: int
    """
    Width of output.
    """
    output_height: int
    """
    Height of output.
    """


class ClipUsage(BaseExecutionUsage):
    input_image_count: int
    """
    Input images.
    """
    input_image_bytes: int
    """
    Total size of input image(s).
    """
    input_text_count: int
    """
    Input texts.
    """
    input_token_count: int
    """
    Total tokens from input text(s).
    """
    output_embedding_count: int
    """
    Output text tokens.
    """


class JinaUsage(BaseExecutionUsage):
    input_doc_count: int
    """
    Input documents.
    """
    output_embedding_count: int
    """
    Output embeddings.
    """


class MistralUsage(BaseExecutionUsage):
    input_token_count: int
    """
    Input prompt tokens.
    """
    output_token_count: int
    """
    Output text tokens.
    """
