# generated by datamodel-codegen:
#   filename:  openapi.json

from __future__ import annotations

from typing import Any, Dict, List
from typing_extensions import Literal, TypedDict, NotRequired


class ErrorOut(TypedDict):
    type: Literal["api_error", "invalid_request_error"]
    """
    The type of error returned.
    """
    message: str
    """
    A message providing more details about the error.
    """


class ResponseFormat(TypedDict):
    type: Literal["json_object", "text"]
    """
    Type of response.
    """
    json_schema: NotRequired[Dict[str, Any]]
    """
    JSON schema to guide `json_object` response.
    """


class GenerateTextIn(TypedDict):
    prompt: str
    """
    Input prompt.
    """
    model: NotRequired[Literal["mistral-7b-instruct"]]
    """
    Selected model.
    """
    response_format: NotRequired[ResponseFormat]
    """
    Format of the response.
    """
    temperature: NotRequired[int]
    """
    Sampling temperature to use. Higher values make the output more random, lower values make the output more deterministic.
    """
    max_tokens: NotRequired[int]
    """
    Maximum number of tokens to generate.
    """


class MultiGenerateTextIn(TypedDict):
    prompt: str
    """
    Input prompt.
    """
    num_choices: int
    """
    Number of choices to generate.
    """
    model: NotRequired[Literal["mistral-7b-instruct"]]
    """
    Selected model.
    """
    response_format: NotRequired[ResponseFormat]
    """
    Format of the response.
    """
    temperature: NotRequired[int]
    """
    Sampling temperature to use. Higher values make the output more random, lower values make the output more deterministic.
    """
    max_tokens: NotRequired[int]
    """
    Maximum number of tokens to generate.
    """


class GenerateTextOut(TypedDict):
    text: NotRequired[str]
    """
    Text response.
    """
    json_object: NotRequired[Dict[str, Any]]
    """
    JSON response.
    """


class MultiGenerateTextOut(TypedDict):
    choices: List[GenerateTextOut]


class GenerateTextVisionIn(TypedDict):
    prompt: str
    """
    Text prompt.
    """
    image_uris: NotRequired[List[str]]
    """
    Image prompts.
    """
    model: NotRequired[Literal["firellava-13b"]]
    """
    Selected model.
    """
    temperature: NotRequired[int]
    """
    Sampling temperature to use. Higher values make the output more random, lower values make the output more deterministic.
    """
    max_tokens: NotRequired[int]
    """
    Maximum number of tokens to generate.
    """


class GenerateTextVisionOut(TypedDict):
    text: str
    """
    Text response.
    """


class GenerateImageIn(TypedDict):
    prompt: str
    """
    Text prompt.
    """
    image_prompt_uri: NotRequired[str]
    """
    Image prompt.
    """
    model: NotRequired[Literal["stablediffusion-xl"]]
    """
    Selected model.
    """
    image_influence: NotRequired[float]
    """
    Controls the influence of the image prompt on the generated output.
    """
    negative_prompt: NotRequired[str]
    """
    Negative input prompt.
    """
    store: NotRequired[str]
    """
    Use "hosted" to return an image URL hosted on Substrate. You can also provide a URL to a registered [file store](/docs/file-stores). If unset, the image data will be returned as a base64-encoded string.
    """
    width: NotRequired[int]
    """
    Width of output image, in pixels.
    """
    height: NotRequired[int]
    """
    Height of output image, in pixels.
    """
    seed: NotRequired[int]
    """
    Seed for deterministic generation. Default is a random seed.
    """


class GenerateImageOut(TypedDict):
    image_uri: str
    """
    Base 64-encoded JPEG image bytes, or a hosted image url if `store` is provided.
    """
    seed: int
    """
    The random noise seed used for generation.
    """


class MultiGenerateImageIn(TypedDict):
    prompt: str
    """
    Text prompt.
    """
    image_prompt_uri: NotRequired[str]
    """
    Image prompt.
    """
    num_images: int
    """
    Number of images to generate.
    """
    model: NotRequired[Literal["stablediffusion-xl"]]
    """
    Selected model.
    """
    image_influence: NotRequired[float]
    """
    Controls the influence of the image prompt on the generated output.
    """
    negative_prompt: NotRequired[str]
    """
    Negative input prompt.
    """
    store: NotRequired[str]
    """
    Use "hosted" to return an image URL hosted on Substrate. You can also provide a URL to a registered [file store](/docs/file-stores). If unset, the image data will be returned as a base64-encoded string.
    """
    width: NotRequired[int]
    """
    Width of output image, in pixels.
    """
    height: NotRequired[int]
    """
    Height of output image, in pixels.
    """
    seeds: NotRequired[List[int]]
    """
    Random noise seeds. Default is random seeds for each generation.
    """


class MultiGenerateImageOut(TypedDict):
    outputs: List[GenerateImageOut]


class ControlledGenerateImageIn(TypedDict):
    image_uri: str
    """
    Input image.
    """
    control_method: Literal["edge", "depth", "illusion"]
    """
    Strategy to control generation using the input image.
    """
    prompt: str
    """
    Text prompt.
    """
    output_resolution: NotRequired[int]
    """
    Resolution of the output image, in pixels.
    """
    model: NotRequired[Literal["stablediffusion-xl"]]
    """
    Selected model.
    """
    negative_prompt: NotRequired[str]
    """
    Negative input prompt.
    """
    store: NotRequired[str]
    """
    Use "hosted" to return an image URL hosted on Substrate. You can also provide a URL to a registered [file store](/docs/file-stores). If unset, the image data will be returned as a base64-encoded string.
    """
    image_influence: NotRequired[float]
    """
    Controls the influence of the input image on the generated output.
    """
    seed: NotRequired[int]
    """
    Seed for deterministic generation. Default is a random seed.
    """


class ControlledGenerateImageOut(TypedDict):
    image_uri: str
    """
    Base 64-encoded JPEG image bytes, or a hosted image url if `store` is provided.
    """
    seed: int
    """
    The random noise seed used for generation.
    """


class MultiControlledGenerateImageIn(TypedDict):
    image_uri: str
    """
    Input image.
    """
    control_method: Literal["edge", "depth", "illusion"]
    """
    Strategy to control generation using the input image.
    """
    prompt: str
    """
    Text prompt.
    """
    num_images: int
    """
    Number of images to generate.
    """
    output_resolution: NotRequired[int]
    """
    Resolution of the output image, in pixels.
    """
    model: NotRequired[Literal["stablediffusion-xl"]]
    """
    Selected model.
    """
    negative_prompt: NotRequired[str]
    """
    Negative input prompt.
    """
    store: NotRequired[str]
    """
    Use "hosted" to return an image URL hosted on Substrate. You can also provide a URL to a registered [file store](/docs/file-stores). If unset, the image data will be returned as a base64-encoded string.
    """
    image_influence: NotRequired[float]
    """
    Controls the influence of the input image on the generated output.
    """
    seeds: NotRequired[List[int]]
    """
    Random noise seeds. Default is random seeds for each generation.
    """


class MultiControlledGenerateImageOut(TypedDict):
    outputs: List[ControlledGenerateImageOut]


class GenerativeEditImageIn(TypedDict):
    image_uri: str
    """
    Original image.
    """
    prompt: str
    """
    Text prompt.
    """
    mask_image_uri: NotRequired[str]
    """
    Mask image that controls which pixels are inpainted. If unset, the entire image is edited (image-to-image).
    """
    image_prompt_uri: NotRequired[str]
    """
    Image prompt.
    """
    output_resolution: NotRequired[int]
    """
    Resolution of the output image, in pixels.
    """
    model: NotRequired[Literal["stablediffusion-xl"]]
    """
    Selected model.
    """
    strength: NotRequired[float]
    """
    Controls the strength of the generation process.
    """
    image_prompt_influence: NotRequired[float]
    """
    Controls the influence of the image prompt on the generated output.
    """
    negative_prompt: NotRequired[str]
    """
    Negative input prompt.
    """
    store: NotRequired[str]
    """
    Use "hosted" to return an image URL hosted on Substrate. You can also provide a URL to a registered [file store](/docs/file-stores). If unset, the image data will be returned as a base64-encoded string.
    """
    seed: NotRequired[int]
    """
    Seed for deterministic generation. Default is a random seed.
    """


class GenerativeEditImageOut(TypedDict):
    image_uri: str
    """
    Base 64-encoded JPEG image bytes, or a hosted image url if `store` is provided.
    """
    seed: int
    """
    The random noise seed used for generation.
    """


class MultiGenerativeEditImageIn(TypedDict):
    image_uri: str
    """
    Original image.
    """
    prompt: str
    """
    Text prompt.
    """
    mask_image_uri: NotRequired[str]
    """
    Mask image that controls which pixels are edited (inpainting). If unset, the entire image is edited (image-to-image).
    """
    image_prompt_uri: NotRequired[str]
    """
    Image prompt.
    """
    num_images: int
    """
    Number of images to generate.
    """
    output_resolution: NotRequired[int]
    """
    Resolution of the output image, in pixels.
    """
    model: NotRequired[Literal["stablediffusion-xl"]]
    """
    Selected model.
    """
    negative_prompt: NotRequired[str]
    """
    Negative input prompt.
    """
    store: NotRequired[str]
    """
    Use "hosted" to return an image URL hosted on Substrate. You can also provide a URL to a registered [file store](/docs/file-stores). If unset, the image data will be returned as a base64-encoded string.
    """
    strength: NotRequired[float]
    """
    Controls the strength of the generation process.
    """
    image_prompt_influence: NotRequired[float]
    """
    Controls the influence of the image prompt on the generated output.
    """
    seeds: NotRequired[List[int]]
    """
    Random noise seeds. Default is random seeds for each generation.
    """


class MultiGenerativeEditImageOut(TypedDict):
    outputs: List[GenerativeEditImageOut]


class BoundingBox(TypedDict):
    x1: float
    """
    Top left corner x.
    """
    y1: float
    """
    Top left corner y.
    """
    x2: float
    """
    Bottom right corner x.
    """
    y2: float
    """
    Bottom right corner y.
    """


class Point(TypedDict):
    x: int
    """
    X position.
    """
    y: int
    """
    Y position.
    """


class FillMaskIn(TypedDict):
    image_uri: str
    """
    Input image.
    """
    mask_image_uri: str
    """
    Mask image that controls which pixels are inpainted.
    """
    model: NotRequired[Literal["big-lama"]]
    """
    Selected model.
    """
    store: NotRequired[str]
    """
    Use "hosted" to return an image URL hosted on Substrate. You can also provide a URL to a registered [file store](/docs/file-stores). If unset, the image data will be returned as a base64-encoded string.
    """


class FillMaskOut(TypedDict):
    image_uri: str
    """
    Base 64-encoded JPEG image bytes, or a hosted image url if `store` is provided.
    """


class RemoveBackgroundIn(TypedDict):
    image_uri: str
    """
    Input image.
    """
    return_mask: NotRequired[bool]
    """
    Return a mask image instead of the original content.
    """
    background_color: NotRequired[str]
    """
    Hex value background color. Transparent if unset.
    """
    model: NotRequired[Literal["isnet"]]
    """
    Selected model.
    """
    store: NotRequired[str]
    """
    Use "hosted" to return an image URL hosted on Substrate. You can also provide a URL to a registered [file store](/docs/file-stores). If unset, the image data will be returned as a base64-encoded string.
    """


class RemoveBackgroundOut(TypedDict):
    image_uri: str
    """
    Base 64-encoded JPEG image bytes, or a hosted image url if `store` is provided.
    """


class UpscaleImageIn(TypedDict):
    image_uri: str
    """
    Input image.
    """
    model: NotRequired[Literal["real-esrgan-x4"]]
    """
    Selected model.
    """
    store: NotRequired[str]
    """
    Use "hosted" to return an image URL hosted on Substrate. You can also provide a URL to a registered [file store](/docs/file-stores). If unset, the image data will be returned as a base64-encoded string.
    """


class UpscaleImageOut(TypedDict):
    image_uri: str
    """
    Base 64-encoded JPEG image bytes, or a hosted image url if `store` is provided.
    """


class DetectSegmentsIn(TypedDict):
    image_uri: str
    """
    Input image.
    """
    point_prompts: NotRequired[List[Point]]
    """
    Point prompts, to detect a segment under the point. One of `point_prompt` or `box_prompt` must be set.
    """
    box_prompts: NotRequired[List[BoundingBox]]
    """
    Box prompts, to detect a segment within the bounding box. One of `point_prompt` or `box_prompt` must be set.
    """
    model: NotRequired[Literal["segment-anything"]]
    """
    Selected model.
    """
    store: NotRequired[str]
    """
    Use "hosted" to return an image URL hosted on Substrate. You can also provide a URL to a registered [file store](/docs/file-stores). If unset, the image data will be returned as a base64-encoded string.
    """


class DetectSegmentsOut(TypedDict):
    mask_image_uri: str
    """
    Detected segments in 'mask image' format. Base 64-encoded JPEG image bytes, or a hosted image url if `store` is provided.
    """


class TranscribeMediaIn(TypedDict):
    audio_uri: str
    """
    Input audio.
    """
    prompt: NotRequired[str]
    """
    Prompt to guide model on the content and context of input audio.
    """
    language: NotRequired[str]
    """
    Language of input audio in [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639_language_codes) format.
    """
    segment: NotRequired[bool]
    """
    Segment the text into sentences with approximate timestamps.
    """
    align: NotRequired[bool]
    """
    Align transcription to produce more accurate sentence-level timestamps and word-level timestamps. An array of word segments will be included in each sentence segment.
    """
    diarize: NotRequired[bool]
    """
    Identify speakers for each segment. Speaker IDs will be included in each segment.
    """
    suggest_chapters: NotRequired[bool]
    """
    Suggest automatic chapter markers.
    """


class TranscribedWord(TypedDict):
    word: str
    """
    Text of word.
    """
    start: NotRequired[float]
    """
    Start time of word, in seconds.
    """
    end: NotRequired[float]
    """
    End time of word, in seconds.
    """
    speaker: NotRequired[str]
    """
    ID of speaker, if `diarize` is enabled.
    """


class TranscribedSegment(TypedDict):
    text: str
    """
    Text of segment.
    """
    start: float
    """
    Start time of segment, in seconds.
    """
    end: float
    """
    End time of segment, in seconds.
    """
    speaker: NotRequired[str]
    """
    ID of speaker, if `diarize` is enabled.
    """
    words: NotRequired[List[TranscribedWord]]
    """
    Aligned words, if `align` is enabled.
    """


class ChapterMarker(TypedDict):
    title: str
    """
    Chapter title.
    """
    start: float
    """
    Start time of chapter, in seconds.
    """


class TranscribeMediaOut(TypedDict):
    text: str
    """
    Transcribed text.
    """
    segments: NotRequired[List[TranscribedSegment]]
    """
    Transcribed segments, if `segment` is enabled.
    """
    chapters: NotRequired[List[ChapterMarker]]
    """
    Chapter markers, if `suggest_chapters` is enabled.
    """


class GenerateSpeechIn(TypedDict):
    text: str
    """
    Input text.
    """
    audio_uri: NotRequired[str]
    """
    Reference audio used to synthesize the speaker. If unset, a default speaker voice will be used.
    """
    language: NotRequired[str]
    """
    Language of input text. Supported languages: `en, de, fr, es, it, pt, pl, zh, ar, cs, ru, nl, tr, hu, ko`.
    """
    store: NotRequired[str]
    """
    Use "hosted" to return an audio URL hosted on Substrate. You can also provide a URL to a registered [file store](/docs/file-stores). If unset, the audio data will be returned as a base64-encoded string.
    """


class GenerateSpeechOut(TypedDict):
    audio_uri: str
    """
    Base 64-encoded WAV audio bytes, or a hosted audio url if `store` is provided.
    """


class Embedding(TypedDict):
    vector: List[float]
    """
    Embedding vector.
    """


class EmbedTextOut(TypedDict):
    embedding: Embedding
    """
    Generated embedding.
    """


class EmbedTextItem(TypedDict):
    text: str
    """
    Text to embed.
    """
    metadata: NotRequired[Dict[str, Any]]
    """
    Metadata that can be used to query the vector store. Ignored if `store` is unset.
    """


class MultiEmbedTextOut(TypedDict):
    embeddings: List[Embedding]
    """
    Generated embeddings.
    """


class EmbeddedMetadataSelect(TypedDict):
    include_keys: NotRequired[List[str]]
    """
    Keys to embed with text.
    """
    exclude_keys: NotRequired[List[str]]
    """
    Keys to exclude. All other keys will be embedded with text.
    """


class EmbedImageIn(TypedDict):
    image_uri: str
    """
    Image to embed.
    """
    model: NotRequired[Literal["clip"]]
    """
    Selected model.
    """
    store: NotRequired[str]
    """
    [Vector store](/docs/vector-stores) identifier.
    """


class EmbedImageOut(TypedDict):
    embedding: Embedding
    """
    Generated embedding.
    """


class EmbedImageItem(TypedDict):
    image_uri: str
    """
    Image to embed.
    """


class MultiEmbedImageIn(TypedDict):
    items: List[EmbedImageItem]
    """
    Items to embed.
    """
    store: NotRequired[str]
    """
    [Vector store](/docs/vector-stores) identifier.
    """
    model: NotRequired[Literal["clip"]]
    """
    Selected model.
    """


class MultiEmbedImageOut(TypedDict):
    embeddings: List[Embedding]
    """
    Generated embeddings.
    """


class VectorStoreParams(TypedDict):
    """
    Fields describing a vector store and its associated index.
    """

    name: str
    """
    Vector store name.
    """
    model: Literal["jina-v2", "clip"]
    """
    Selected embedding model
    """
    m: NotRequired[int]
    """
    The max number of connections per layer for the index.
    """
    ef_construction: NotRequired[int]
    """
    The size of the dynamic candidate list for constructing the index graph.
    """
    metric: NotRequired[Literal["cosine", "l2", "inner"]]
    """
    The distance metric to construct the index with.
    """


class DeleteVectorStoreParams(TypedDict):
    name: str
    """
    Vector store name.
    """
    model: Literal["jina-v2", "clip"]
    """
    Selected embedding model
    """


class Vector(TypedDict):
    """
    Canonical representation of document with embedding vector.
    """

    id: str
    """
    Document ID.
    """
    vector: List[float]
    """
    Embedding vector.
    """
    metadata: Dict[str, Any]
    """
    Document metadata.
    """


class GetVectorsParams(TypedDict):
    name: str
    """
    Vector store name.
    """
    model: Literal["jina-v2", "clip"]
    """
    Selected embedding model
    """
    ids: List[str]
    """
    Document IDs to retrieve.
    """


class GetVectorsResponse(TypedDict):
    vectors: List[Vector]
    """
    Retrieved vectors.
    """


class VectorUpdateCountResponse(TypedDict):
    count: int
    """
    Number of vectors modified.
    """


class UpdateVectorParams(TypedDict):
    """
    Document to update.
    """

    id: str
    """
    Document ID.
    """
    vector: NotRequired[List[float]]
    """
    Embedding vector.
    """
    metadata: NotRequired[Dict[str, Any]]
    """
    Document metadata.
    """


class UpdateVectorsParams(TypedDict):
    name: str
    """
    Vector store name.
    """
    model: Literal["jina-v2", "clip"]
    """
    Selected embedding model
    """
    vectors: List[UpdateVectorParams]
    """
    Vectors to upsert.
    """


class DeleteVectorsParams(TypedDict):
    name: str
    """
    Vector store name.
    """
    model: Literal["jina-v2", "clip"]
    """
    Selected embedding model
    """
    ids: List[str]
    """
    Document IDs to delete.
    """


class QueryVectorStoreParams(TypedDict):
    name: str
    """
    Vector store to query against.
    """
    model: Literal["jina-v2", "clip"]
    """
    Selected embedding model
    """
    query_ids: NotRequired[List[str]]
    """
    Document IDs to use for the query.
    """
    query_image_uris: NotRequired[List[str]]
    """
    Image URIs to embed and use for the query.
    """
    query_vectors: NotRequired[List[List[float]]]
    """
    Vector to use for the query.
    """
    query_strings: NotRequired[List[str]]
    """
    Texts to embed and use for the query.
    """
    top_k: NotRequired[int]
    """
    Number of results to return.
    """
    ef_search: NotRequired[int]
    """
    The size of the dynamic candidate list for searching the index graph.
    """
    include_values: NotRequired[bool]
    """
    Include the values of the vectors in the response.
    """
    include_metadata: NotRequired[bool]
    """
    Include the metadata of the vectors in the response.
    """
    filters: NotRequired[Dict[str, Any]]
    """
    Filter metadata by key-value pairs.
    """


class VectorStoreQueryResult(TypedDict):
    id: str
    """
    Document ID.
    """
    distance: float
    """
    Similarity score.
    """
    vector: NotRequired[List[float]]
    """
    Embedding vector.
    """
    metadata: NotRequired[Dict[str, Any]]
    """
    Document metadata.
    """


class QueryVectorStoreResponse(TypedDict):
    results: List[List[VectorStoreQueryResult]]
    """
    Query results.
    """
    name: NotRequired[str]
    """
    Vector store name.
    """
    model: NotRequired[Literal["jina-v2", "clip"]]
    """
    Selected embedding model
    """
    metric: NotRequired[Literal["cosine", "l2", "inner"]]
    """
    The distance metric used for the query.
    """


class EmbedTextIn(TypedDict):
    text: str
    """
    Text to embed.
    """
    model: NotRequired[Literal["jina-v2", "clip"]]
    """
    Selected model.
    """
    store: NotRequired[str]
    """
    [Vector store](/docs/vector-stores) identifier.
    """
    metadata: NotRequired[Dict[str, Any]]
    """
    Metadata that can be used to query the vector store. Ignored if `store` is unset.
    """
    embedded_metadata: NotRequired[EmbeddedMetadataSelect]
    """
    Choose keys from `metadata` to embed with text. Select keys to include with `include_keys`, or keys to exclude with `exclude_keys`.
    """


class MultiEmbedTextIn(TypedDict):
    items: List[EmbedTextItem]
    """
    Items to embed.
    """
    model: NotRequired[Literal["jina-v2", "clip"]]
    """
    Selected model.
    """
    store: NotRequired[str]
    """
    [Vector store](/docs/vector-stores) identifier.
    """
    embedded_metadata: NotRequired[EmbeddedMetadataSelect]
    """
    Choose keys from `metadata` to embed with text. Select keys to include with `include_keys`, or keys to exclude with `exclude_keys`.
    """
