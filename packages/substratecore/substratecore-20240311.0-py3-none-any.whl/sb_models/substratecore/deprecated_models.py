# generated by datamodel-codegen:
#   filename:  deprecated-api.json

from __future__ import annotations

from typing import Any, Dict, List, Optional
from typing_extensions import Literal, Annotated

from pydantic import Extra, Field, BaseModel


class ErrorOut(BaseModel):
    class Config:
        extra = Extra.allow

    type: Literal["api_error", "invalid_request_error"]
    """
    The type of error returned.
    """
    message: str
    """
    A message providing more details about the error.
    """


class StableDiffusionXLIn(BaseModel):
    class Config:
        extra = Extra.allow

    prompt: str
    """
    Input prompt.
    """
    negative_prompt: Optional[str] = None
    """
    Negative input prompt.
    """
    store: Optional[Any] = False
    """
    Return a hosted image URL instead of base64 encoded image data.
    """
    width: Optional[int] = None
    """
    Width of output image, in pixels.
    """
    height: Optional[int] = None
    """
    Height of output image, in pixels.
    """
    steps: Optional[int] = None
    """
    Number of diffusion steps to run.
    """
    seed: Optional[int] = None
    """
    Random noise seed. Default is a random seed.
    """
    guidance_scale: Annotated[Optional[float], Field(ge=0.0, le=35.0)] = None
    """
    Controls the influence of the input prompt on the generated output.
    """
    num_images: Optional[int] = 1
    """
    Number of images to generate.
    """


class StableDiffusionImage(BaseModel):
    class Config:
        extra = Extra.allow

    uri: str
    """
    Base 64-encoded JPEG image bytes, or a hosted image url if `store` is enabled.
    """
    seed: int
    """
    The random noise seed used for generation.
    """


class StableDiffusionOut(BaseModel):
    class Config:
        extra = Extra.allow

    items: List[StableDiffusionImage]


class StableDiffusionResponse(BaseModel):
    class Config:
        extra = Extra.allow

    data: Optional[StableDiffusionOut] = None
    error: Optional[ErrorOut] = None


class MistralPrompt(BaseModel):
    class Config:
        extra = Extra.allow

    prompt: str
    """
    Prompt to generate completions for.
    """


class MistralIn(BaseModel):
    class Config:
        extra = Extra.allow

    prompts: List[MistralPrompt]
    """
    Input prompts.
    """
    temperature: Annotated[Optional[float], Field(ge=0.0, le=2.0)] = 0.75
    """
    Sampling temperature to use. Higher values make the output more random; lower values make the output more deterministic.
    """
    max_tokens: Optional[int] = 800
    """
    Maximum number of tokens to generate.
    """
    num_completions: Optional[int] = 1
    """
    Number of completions to generate for each prompt.
    """
    json_schema: Optional[str] = None
    """
    JSON schema to guide generation.
    """


class MistralResult(BaseModel):
    class Config:
        extra = Extra.allow

    completions: Optional[List[str]] = None
    """
    Generated completion choices.
    """
    json_completions: Optional[List[Dict[str, Any]]] = None
    """
    Generated JSON completion choices, if `json_schema` was provided.
    """


class MistralOut(BaseModel):
    class Config:
        extra = Extra.allow

    items: List[MistralResult]


class MistralResponse(BaseModel):
    class Config:
        extra = Extra.allow

    data: Optional[MistralOut] = None
    error: Optional[ErrorOut] = None


class JinaDoc(BaseModel):
    class Config:
        extra = Extra.allow

    text: str
    """
    Text to embed.
    """
    id: Optional[str] = None
    """
    Document id. Required when storing embedding.
    """
    metadata: Optional[Dict[str, Any]] = None
    """
    Additional metadata to store in embedding document.
    """
    embed_metadata_keys: Optional[List[str]] = None
    """
    Contents of `metadata` included to generate embedding.
    """


class JinaIn(BaseModel):
    class Config:
        extra = Extra.allow

    docs: List[JinaDoc]
    """
    Documents to embed.
    """
    store: Optional[str] = None
    """
    Vector store ID in which embedding will be stored.
    """


class JinaEmbedding(BaseModel):
    class Config:
        extra = Extra.allow

    vector: List[float]
    """
    Embedding vector.
    """
    id: Optional[str] = None
    """
    Document id.
    """
    metadata: Optional[Dict[str, Any]] = None
    """
    Additional metadata stored in embedding document.
    """


class JinaOut(BaseModel):
    class Config:
        extra = Extra.allow

    items: List[JinaEmbedding]
