from typing import List

class Domain:
    def __init__(self, arg0: int, arg1: int) -> None: ...
    @classmethod
    def AllValues(cls) -> Domain: ...
    def FlattenedIntervals(self) -> List[int]: ...
    @classmethod
    def FromFlatIntervals(cls, flat_intervals: List[int]) -> Domain: ...
    @classmethod
    def FromIntervals(cls, intervals: List[List[int]]) -> Domain: ...
    @classmethod
    def FromValues(cls, values: List[int]) -> Domain: ...
    def addition_with(self, domain: Domain) -> Domain: ...
    @classmethod
    def all_values(cls) -> Domain: ...
    def complement(self) -> Domain: ...
    def contains(self, value: int) -> bool: ...
    def flattened_intervals(self) -> List[int]: ...
    @classmethod
    def from_flat_intervals(cls, flat_intervals: List[int]) -> Domain: ...
    @classmethod
    def from_intervals(cls, intervals: List[List[int]]) -> Domain: ...
    @classmethod
    def from_values(cls, values: List[int]) -> Domain: ...
    def intersection_with(self, domain: Domain) -> Domain: ...
    def is_empty(self) -> bool: ...
    def max(self) -> int: ...
    def min(self) -> int: ...
    def negation(self) -> Domain: ...
    def size(self) -> int: ...
    def union_with(self, domain: Domain) -> Domain: ...
