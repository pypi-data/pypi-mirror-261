"""Data synthesis class"""

from pandas import DataFrame
from sdv.metadata import SingleTableMetadata
from sdv.single_table import GaussianCopulaSynthesizer


class Synthesis:
    def __init__(self, real_data: DataFrame, metadata: SingleTableMetadata):
        """
        Initialize the Synthesis class with real data and its metadata.

        Args:
            real_data (DataFrame): The real dataset to be used for synthesizing new data.
            metadata (SingleTableMetadata): Metadata information for the real dataset, which includes
                              the schema details required by the synthesizer.
        """
        self.real_data = real_data
        self.metadata = metadata

    def _init_synthesizer(self) -> GaussianCopulaSynthesizer:
        """
        Initializes and returns a GaussianCopulaSynthesizer instance using the provided metadata.

        Returns:
            GaussianCopulaSynthesizer: An instance of the GaussianCopulaSynthesizer class.
        """
        synthesizer = GaussianCopulaSynthesizer(self.metadata)
        return synthesizer

    def execute(self) -> DataFrame:
        """
        Synthesizes a new dataset based on the real data and metadata provided during class initialization.
        The method fits a Gaussian Copula Synthesizer to the real data and then generates synthetic data
        of the same size as the real dataset.

        Returns:
            DataFrame: A synthetic dataset generated by the Gaussian Copula Synthesizer.
        """
        synthesizer = self._init_synthesizer()
        synthesizer.fit(self.real_data)

        # Optional: To visualize or save learned distributions
        # synthesizer.get_learned_distributions()

        # Optional: To save the fitted synthesizer model
        # synthesizer.save(filepath="data/synthesizer_name.pkl")

        num_dataset_rows = self.real_data.shape[0]
        synthetic_data = synthesizer.sample(num_rows=num_dataset_rows)

        return synthetic_data
