Metadata-Version: 2.1
Name: vka
Version: 1.2.18
Summary: module for the vk api wrapper
Home-page: https://github.com/MrCreEper002/vka
Author: Major4ik
Author-email: 2772771882@mail.ru
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.10
Description-Content-Type: text/markdown

# vka

#### ``–ú–æ–¥—É–ª—å —Å–¥–µ–ª–∞–Ω–∞ –ø–æ –æ—Å–Ω–æ–≤–∞–º "vk_api" –∏ "vkquick"`` 

–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç python3.10+

–ù–∏–∂–µ –ø—Ä–∏–≤–µ–¥–µ–Ω –ø–µ—Ä–≤—ã–π –ø—Ä–∏–º–µ—Ä, –∫–∞–∫ –º–æ–∂–Ω–æ - —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—É, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤—ã–ø–æ–ª–Ω–∏—Ç—å –º–µ—Ç–æ–¥ –≤–∫
```python
from vka import ABot, Context

# —Ç–æ–∫–µ–Ω –æ—Ç –ì–†–£–ü–ü–´
bot = ABot(token="group_token")

# –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –≤ –±–æ—Ç–∞
@bot.add_command(commands=('–ø—Ä–∏–≤–µ—Ç', 'hi'))
async def hello_world(ctx: Context):
    # —á—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º–µ—Ç–æ–¥–æ–º –≤–∫
    await ctx.api.users.get(user_ids=1)  
    # —Ç–æ–∂–µ —Å–∞–º–æ–µ –º–æ–∂–Ω–æ —Ç–∞–∫ ->  await ctx.api.method("users.get", {"user_ids":1})
    #   (
    #       {
    #           'first_name': '–ü–∞–≤–µ–ª', 
    #            'id': 1, 
    #            'last_name': '–î—É—Ä–æ–≤', 
    #            'can_access_closed': True, 
    #            'is_closed': False, 
    #            'can_invite_to_chats': False
    #        }
    #   )
    
    # —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–ø–∏—Å–∞–ª –∫–æ–º–∞–Ω–¥—É
    user = await ctx.fetch_sender()
    """
        id              - id
        fn              - –∏–º—è
        ln              - —Ñ–∞–º–∏–ª–∏—è
        full            - –∏–º—è —Ñ–∞–º–∏–ª–∏—è
        @ - [@id|name]  - —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞—è 
    """ 

    # –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    await ctx.answer(f'{user:@full_name}, –ø—Ä–∏–≤–µ—Ç!')
    
async def poke(ctx: Context):
    await ctx.answer('–¢–´–ö!')
    
bot.register_command(poke, commands='—Ç—ã–∫')

# –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.run()
```

–í—Ç–æ—Ä–æ–π –ø—Ä–∏–º–µ—Ä

```python
 
from vka import ABot, Context, Keyboard, Button

bot = ABot(token="group_token")


@bot.add_click_callback(show_snackbar=True)
async def show_snackbar():
    return '–ü—Ä–æ–∏–∑–æ—à–ª–æ —á—É–¥–æ üß©'


@bot.add_command(commands='–ø—Ä–∏–≤–µ—Ç')
async def hello_world(ctx: Context):
    keyboard = Keyboard(
        Button.callback('–ú—è').positive().on_called(
            show_snackbar
        ),
    )
    await ctx.answer('–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —á—Ç–æ–±—ã –ø—Ä–æ–∏–∑–æ—à–ª–æ —á—É–¥–æ ü§ñ', keyboard=keyboard)


bot.run()
```

–¢—Ä–µ—Ç–∏–π –ø—Ä–∏–º–µ—Ä

```python
 
from vka import ABot, Context, Keyboard, Button
import asyncio


async def show_snackbar():
    return '–ü—Ä–æ–∏–∑–æ—à–ª–æ —á—É–¥–æ üß©'


async def hello_world(ctx: Context):
    keyboard = Keyboard(
        Button.callback('–ú—è').positive().on_called(
            show_snackbar
        ),
    )
    await ctx.answer('–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —á—Ç–æ–±—ã –ø—Ä–æ–∏–∑–æ—à–ª–æ —á—É–¥–æ ü§ñ', keyboard=keyboard)

async def any_text(ctx: Context):
    await ctx.answer('–ü—Ä–∏–≤–µ—Ç!')

    
async def main():
    bot = ABot(token="group_token")
    bot.register_command(hello_world, commands='hi') # —Ç–æ–ª—å–∫–æ –ø–æ –∫–æ–º–∞–Ω–¥–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç
    bot.register_command(hello_world, any_text=True) # –æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞ –ª—é–±–æ–µ —Å–º—Å
    bot.register_callback(hello_world, show_snackbar=True) # –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —á—Ç–æ–±—ã –≤—ã–ª–µ–∑–ª–æ —Ç–∏–ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    await bot.async_run()

asyncio.run(main())

```

