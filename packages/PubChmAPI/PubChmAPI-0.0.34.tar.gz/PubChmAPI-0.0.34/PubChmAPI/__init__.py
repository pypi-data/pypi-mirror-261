# -*- coding: utf-8 -*-
"""PubChmAPI.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_LTPRxE_WQBHUQOzWER7JdMbzXXbK96h
"""

# -*- coding: utf-8 -*-
"""Init Pubcon New version.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NMpzBDs1AsQTMCADtU03d23gPWZkcbF6
"""

print("This Python package, PubChemAPI, simplifies the interaction with the PubChem database, allowing users to seamlessly retrieve information related to compounds, substances, assays, proteins, genes, and more.\nWhether you're a researcher, scientist, or developer, this package provides an easy-to-use interface to access a wealth of information stored in PubChem.\n\nCreated by Ahmed Alhilal.\nContact: aalhilal@kfu.edu.sa\n\nSource:\n1. https://chem.libretexts.org/Courses/Intercollegiate_Courses/Cheminformatics/01%3A_Introduction (Free ebook)\n2. https://pubchem.ncbi.nlm.nih.gov/docs/pug-rest#section=Dates\n\nExplore the functions inside this package:\nhttps://docs.google.com/spreadsheets/d/1Lc6dTcneR2KLtnT3zkLMn7jPOlFOznIy/edit?usp=sharing&ouid=112811379287189098377&rtpof=true&sd=true\n\nGitHub Repository:\nhttps://github.com/ahmed1212212/PubChemAPI.git")

"""# compound"""

def generate_pubchem_url(input_type, input_identifier, output_type, output_format, *input_data):
    """
    Generate a PubChem URL based on input specifications.

    Args:
    - input_type (str): Type of input identifier (e.g., 'cid', 'aid', 'sid').
    - input_identifier (str): Input identifier to convert to other formulas.
    - output_type (str): Type of output specification (e.g., 'record', 'description', 'assaysummary').
    - output_format (str): Output format option (e.g., 'xml', 'csv', 'png').
    - *input_data: Variable-length input data (e.g., list of identifiers, names, SMILES).

    Returns:
    - str: PubChem URL for the specified conversion.

    Example:
    generate_pubchem_url("compound", "cid", "sids", "xml", 180)
    """
    input_type_str = str(input_type)
    input_identifier_str = str(input_identifier)
    output_type_str = str(output_type)
    output_format_str = str(output_format)
    # Convert input data to a flat list of strings
    input_data_strings = [str(item) for sublist in input_data for item in (sublist if isinstance(sublist, list) else [sublist])]

    # Join the input data into a comma-separated string
    input_data_str = ",".join(input_data_strings)

    # Construct the URL
    url = f"https://pubchem.ncbi.nlm.nih.gov/rest/pug/{input_type_str}/{input_identifier_str}/{input_data_str}/{output_type_str}/{output_format_str}"

    return url

"""**compound domain name**"""

def compound_name_conversion(*compound_names, record_type='record'):
    compound_name_list = []
    for compound_name_arg in compound_names:
        if isinstance(compound_name_arg, str):
            compound_name_list.append(str(compound_name_arg))
        elif isinstance(compound_name_arg, list):
            for compound_name_item in compound_name_arg:
                compound_name_list.append(str(compound_name_item))
        else:
            for compound_name_item in compound_name_arg:
                compound_name_list.append(compound_name_item)

    urls = []
    for compound_name in compound_name_list:
        compound_name_str = str(compound_name)
        plugin = f"compound/name/{compound_name_str}"
        url = f"https://pubchem.ncbi.nlm.nih.gov/rest/pug/{plugin}/{record_type}"
        urls.append(url)

    return urls

def compound_name_to_synonym(*compound_names):
    """Retrieve synonym URLs for given compound names."""
    return compound_name_conversion(*compound_names, record_type='synonyms/txt')

def compound_name_to_record(*compound_names):
    """Retrieve record URLs for given compound names."""
    return compound_name_conversion(*compound_names, record_type='record/xml')

def compound_name_to_property(*compound_names):
    """Retrieve property URLs for given compound names."""
    return compound_name_conversion(*compound_names, record_type="property/Title,MolecularFormula,MolecularWeight,CanonicalSMILES,IsomericSMILES,InChI,InChIKey,IUPACName,XLogP,ExactMass,MonoisotopicMass,TPSA,Complexity,Charge,HBondDonorCount,HBondAcceptorCount,RotatableBondCount,HeavyAtomCount,IsotopeAtomCount,AtomStereoCount,DefinedAtomStereoCount,UndefinedAtomStereoCount,BondStereoCount,DefinedBondStereoCount,UndefinedBondStereoCount,CovalentUnitCount,Volume3D,XStericQuadrupole3D,YStericQuadrupole3D,ZStericQuadrupole3D,FeatureCount3D,FeatureAcceptorCount3D,FeatureDonorCount3D,FeatureAnionCount3D,FeatureCationCount3D,FeatureRingCount3D,FeatureHydrophobeCount3D,ConformerModelRMSD3D,EffectiveRotorCount3D,ConformerCount3D,Fingerprint2D/CSV")

def compound_name_to_aid(*compound_names):
    """Retrieve AID URLs for given compound names."""
    return compound_name_conversion(*compound_names, record_type='aids/txt')

def compound_name_to_assaysummary(*compound_names):
    """Retrieve assaysummary URLs for given compound names."""
    return compound_name_conversion(*compound_names, record_type='assaysummary/xml')

def compound_name_to_classification(*compound_names):
    """Retrieve classification URLs for given compound names."""
    return compound_name_conversion(*compound_names, record_type='classification/xml')

def compound_name_to_description(*compound_names):
    """Retrieve description URLs for given compound names."""
    return compound_name_conversion(*compound_names, record_type='description/xml')

def compound_name_to_sid(*compound_names):
    """Retrieve SID URLs for given compound names."""
    return compound_name_conversion(*compound_names, record_type='sids/txt')

def compound_name_to_cid(*compound_names):
    """Retrieve CID URLs for given compound names."""
    return compound_name_conversion(*compound_names, record_type='cids/txt')

def compound_name_to_conformer(*compound_names):
    """Retrieve conformer URLs for given compound names."""
    return compound_name_conversion(*compound_names, record_type='conformers/xml')

def compound_name_to_2d_png(*compound_cids):
    """Retrieve 2D PNG URLs for given compound CIDs."""
    return compound_name_conversion(*compound_cids, record_type='png?record_type=2d')

def compound_name_to_3d_png(*compound_cids):
    """Retrieve 3D PNG URLs for given compound CIDs."""
    return compound_name_conversion(*compound_cids, record_type='png?record_type=3d')

def compound_name_to_active_aid(*compound_names):
    """Retrieve active AID URLs for given compound names."""
    return compound_name_conversion(*compound_names, record_type='aids/txt?aids_type=active')

def compound_name_to_inactive_aid(*compound_names):
    """Retrieve inactive AID URLs for given compound names."""
    return compound_name_conversion(*compound_names, record_type='aids/txt?aids_type=inactive')

def compound_name_to_all_aid(*compound_names):
    """Retrieve all AID URLs for given compound names."""
    return compound_name_conversion(*compound_names, record_type='aids')

def compound_name_to_original_cids(*compound_names):
    """Retrieve original CID URLs for given compound names."""
    return compound_name_conversion(*compound_names, record_type='cids/txt?cids_type=original')

def compound_name_to_parent_cids(*compound_names):
    """Retrieve parent CID URLs for given compound names."""
    return compound_name_conversion(*compound_names, record_type='cids/txt?cids_type=parent')

def compound_name_to_component_cids(*compound_names):
    """Retrieve component CID URLs for given compound names."""
    return compound_name_conversion(*compound_names, record_type='cids/txt?cids_type=component')

def compound_name_to_preferred_cids(*compound_names):
    """Retrieve preferred CID URLs for given compound names."""
    return compound_name_conversion(*compound_names, record_type='cids/txt?cids_type=preferred')

def compound_name_to_similar_2d_cids(*compound_names):
    """Retrieve similar 2D CID URLs for given compound names."""
    return compound_name_conversion(*compound_names, record_type='cids/txt?cids_type=similar_2d')

def compound_name_to_similar_3d_cids(*compound_names):
    """Retrieve similar 3D CID URLs for given compound names."""
    return compound_name_conversion(*compound_names, record_type='cids/txt?cids_type=similar_3d')

def compound_name_to_same_stereo_cids(*compound_names):
    """Retrieve same stereo CID URLs for given compound names."""
    return compound_name_conversion(*compound_names, record_type='cids/txt?cids_type=same_stereo')
def compound_name_to_same_isotopes_cids(*compound_names):
    """Retrieve same isotopes CID URLs for given compound names."""
    return compound_name_conversion(*compound_names, record_type='cids/txt?cids_type=same_isotopes')

def compound_name_to_same_connectivity_cids(*compound_names):
    """Retrieve same connectivity CID URLs for given compound names."""
    return compound_name_conversion(*compound_names, record_type='cids/txt?cids_type=same_connectivity')

def compound_name_to_same_tautomer_cids(*compound_names):
    """Retrieve same tautomer CID URLs for given compound names."""
    return compound_name_conversion(*compound_names, record_type='cids/txt?cids_type=same_tautomer')

def compound_name_to_same_parent_cids(*compound_names):
    """Retrieve same parent CID URLs for given compound names."""
    return compound_name_conversion(*compound_names, record_type='cids/txt?cids_type=same_parent')

def compound_name_to_same_parent_stereo_cids(*compound_names):
    """Retrieve same parent stereo CID URLs for given compound names."""
    return compound_name_conversion(*compound_names, record_type='cids/txt?cids_type=same_parent_stereo')

def compound_name_to_same_parent_isotopes_cids(*compound_names):
    """Retrieve same parent isotopes CID URLs for given compound names."""
    return compound_name_conversion(*compound_names, record_type='cids/txt?cids_type=same_parent_isotopes')

def compound_name_to_same_parent_connectivity_cids(*compound_names):
    """Retrieve same parent connectivity CID URLs for given compound names."""
    return compound_name_conversion(*compound_names, record_type='cids/txt?cids_type=same_parent_connectivity')

def compound_name_to_same_parent_tautomer_cids(*compound_names):
    """Retrieve same parent tautomer CID URLs for given compound names."""
    return compound_name_conversion(*compound_names, record_type='cids/txt?cids_type=same_parent_tautomer')

def compound_name_to_mutliple_property(*compound_names, properties=None):
    if properties is None:
        properties = [
            "Title", "MolecularFormula", "MolecularWeight", "CanonicalSMILES", "IsomericSMILES",
            "InChI", "InChIKey", "IUPACName", "XLogP", "ExactMass", "MonoisotopicMass", "TPSA",
            "Complexity", "Charge", "HBondDonorCount", "HBondAcceptorCount", "RotatableBondCount",
            "HeavyAtomCount", "IsotopeAtomCount", "AtomStereoCount", "DefinedAtomStereoCount",
            "UndefinedAtomStereoCount", "BondStereoCount", "DefinedBondStereoCount",
            "UndefinedBondStereoCount", "CovalentUnitCount", "Volume3D", "XStericQuadrupole3D",
            "YStericQuadrupole3D", "ZStericQuadrupole3D", "FeatureCount3D", "FeatureAcceptorCount3D",
            "FeatureDonorCount3D", "FeatureAnionCount3D", "FeatureCationCount3D", "FeatureRingCount3D",
            "FeatureHydrophobeCount3D", "ConformerModelRMSD3D", "EffectiveRotorCount3D",
            "ConformerCount3D", "Fingerprint2D"
        ]

    urls = {}
    for property_name in properties:
        urls[property_name] = compound_name_conversion(*compound_names, record_type=f"property/{property_name}/txt")

    return urls
def compound_name_to_Title(*compound_names):
    return compound_name_conversion(*compound_names, record_type="property/Title/txt")

def compound_name_to_MolecularFormula(*compound_names):
    return compound_name_conversion(*compound_names, record_type="property/MolecularFormula/txt")

def compound_name_to_MolecularWeight(*compound_names):
    return compound_name_conversion(*compound_names, record_type="property/MolecularWeight/txt")

def compound_name_to_CanonicalSMILES(*compound_names):
    return compound_name_conversion(*compound_names, record_type="property/CanonicalSMILES/txt")

def compound_name_to_IsomericSMILES(*compound_names):
    return compound_name_conversion(*compound_names, record_type="property/IsomericSMILES/txt")

def compound_name_to_InChI(*compound_names):
    return compound_name_conversion(*compound_names, record_type="property/InChI/txt")

def compound_name_to_InChIKey(*compound_names):
    return compound_name_conversion(*compound_names, record_type="property/InChIKey/txt")

def compound_name_to_IUPACName(*compound_names):
    return compound_name_conversion(*compound_names, record_type="property/IUPACName/txt")

def compound_name_to_XLogP(*compound_names):
    return compound_name_conversion(*compound_names, record_type="property/XLogP/txt")

def compound_name_to_ExactMass(*compound_names):
    return compound_name_conversion(*compound_names, record_type="property/ExactMass/txt")

def compound_name_to_MonoisotopicMass(*compound_names):
    return compound_name_conversion(*compound_names, record_type="property/MonoisotopicMass/txt")

def compound_name_to_TPSA(*compound_names):
    return compound_name_conversion(*compound_names, record_type="property/TPSA/txt")

def compound_name_to_Complexity(*compound_names):
    return compound_name_conversion(*compound_names, record_type="property/Complexity/txt")

def compound_name_to_Charge(*compound_names):
    return compound_name_conversion(*compound_names, record_type="property/Charge/txt")

def compound_name_to_HBondDonorCount(*compound_names):
    return compound_name_conversion(*compound_names, record_type="property/HBondDonorCount/txt")

def compound_name_to_HBondAcceptorCount(*compound_names):
    return compound_name_conversion(*compound_names, record_type="property/HBondAcceptorCount/txt")

def compound_name_to_RotatableBondCount(*compound_names):
    return compound_name_conversion(*compound_names, record_type="property/RotatableBondCount/txt")

def compound_name_to_HeavyAtomCount(*compound_names):
    return compound_name_conversion(*compound_names, record_type="property/HeavyAtomCount/txt")

def compound_name_to_IsotopeAtomCount(*compound_names):
    return compound_name_conversion(*compound_names, record_type="property/IsotopeAtomCount/txt")

def compound_name_to_AtomStereoCount(*compound_names):
    return compound_name_conversion(*compound_names, record_type="property/AtomStereoCount/txt")

def compound_name_to_DefinedAtomStereoCount(*compound_names):
    return compound_name_conversion(*compound_names, record_type="property/DefinedAtomStereoCount/txt")

def compound_name_to_UndefinedAtomStereoCount(*compound_names):
    return compound_name_conversion(*compound_names, record_type="property/UndefinedAtomStereoCount/txt")

def compound_name_to_BondStereoCount(*compound_names):
    return compound_name_conversion(*compound_names, record_type="property/BondStereoCount/txt")

def compound_name_to_DefinedBondStereoCount(*compound_names):
    return compound_name_conversion(*compound_names, record_type="property/DefinedBondStereoCount/txt")

def compound_name_to_UndefinedBondStereoCount(*compound_names):
    return compound_name_conversion(*compound_names, record_type="property/UndefinedBondStereoCount/txt")

def compound_name_to_CovalentUnitCount(*compound_names):
    return compound_name_conversion(*compound_names, record_type="property/CovalentUnitCount/txt")

def compound_name_to_Volume3D(*compound_names):
    return compound_name_conversion(*compound_names, record_type="property/Volume3D/txt")

def compound_name_to_XStericQuadrupole3D(*compound_names):
    return compound_name_conversion(*compound_names, record_type="property/XStericQuadrupole3D/txt")

def compound_name_to_YStericQuadrupole3D(*compound_names):
    return compound_name_conversion(*compound_names, record_type="property/YStericQuadrupole3D/txt")

def compound_name_to_ZStericQuadrupole3D(*compound_names):
    return compound_name_conversion(*compound_names, record_type="property/ZStericQuadrupole3D/txt")

def compound_name_to_FeatureCount3D(*compound_names):
    return compound_name_conversion(*compound_names, record_type="property/FeatureCount3D/txt")

def compound_name_to_FeatureAcceptorCount3D(*compound_names):
    return compound_name_conversion(*compound_names, record_type="property/FeatureAcceptorCount3D/txt")

def compound_name_to_FeatureDonorCount3D(*compound_names):
    return compound_name_conversion(*compound_names, record_type="property/FeatureDonorCount3D/txt")

def compound_name_to_FeatureAnionCount3D(*compound_names):
    return compound_name_conversion(*compound_names, record_type="property/FeatureAnionCount3D/txt")

def compound_name_to_FeatureCationCount3D(*compound_names):
    return compound_name_conversion(*compound_names, record_type="property/FeatureCationCount3D/txt")

def compound_name_to_FeatureRingCount3D(*compound_names):
    return compound_name_conversion(*compound_names, record_type="property/FeatureRingCount3D/txt")

def compound_name_to_FeatureHydrophobeCount3D(*compound_names):
    return compound_name_conversion(*compound_names, record_type="property/FeatureHydrophobeCount3D/txt")

def compound_name_to_ConformerModelRMSD3D(*compound_names):
    return compound_name_conversion(*compound_names, record_type="property/ConformerModelRMSD3D/txt")

def compound_name_to_EffectiveRotorCount3D(*compound_names):
    return compound_name_conversion(*compound_names, record_type="property/EffectiveRotorCount3D/txt")

def compound_name_to_ConformerCount3D(*compound_names):
    return compound_name_conversion(*compound_names, record_type="property/ConformerCount3D/txt")

def compound_name_to_Fingerprint2D(*compound_names):
    return compound_name_conversion(*compound_names, record_type="property/Fingerprint2D/txt")
compound_name_to_ConformerCount3D("water",)
def compound_name_to_Title(*compound_names):
    return compound_name_conversion(*compound_names, record_type="property/Title/txt")

def compound_name_to_MolecularFormula(*compound_names):
    return compound_name_conversion(*compound_names, record_type="property/MolecularFormula/txt")

def compound_name_to_MolecularWeight(*compound_names):
    return compound_name_conversion(*compound_names, record_type="property/MolecularWeight/txt")

def compound_name_to_CanonicalSMILES(*compound_names):
    return compound_name_conversion(*compound_names, record_type="property/CanonicalSMILES/txt")

def compound_name_to_IsomericSMILES(*compound_names):
    return compound_name_conversion(*compound_names, record_type="property/IsomericSMILES/txt")

def compound_name_to_InChI(*compound_names):
    return compound_name_conversion(*compound_names, record_type="property/InChI/txt")

def compound_name_to_InChIKey(*compound_names):
    return compound_name_conversion(*compound_names, record_type="property/InChIKey/txt")

def compound_name_to_IUPACName(*compound_names):
    return compound_name_conversion(*compound_names, record_type="property/IUPACName/txt")

def compound_name_to_XLogP(*compound_names):
    return compound_name_conversion(*compound_names, record_type="property/XLogP/txt")

def compound_name_to_ExactMass(*compound_names):
    return compound_name_conversion(*compound_names, record_type="property/ExactMass/txt")

def compound_name_to_MonoisotopicMass(*compound_names):
    return compound_name_conversion(*compound_names, record_type="property/MonoisotopicMass/txt")

def compound_name_to_TPSA(*compound_names):
    return compound_name_conversion(*compound_names, record_type="property/TPSA/txt")

def compound_name_to_Complexity(*compound_names):
    return compound_name_conversion(*compound_names, record_type="property/Complexity/txt")

def compound_name_to_Charge(*compound_names):
    return compound_name_conversion(*compound_names, record_type="property/Charge/txt")

def compound_name_to_HBondDonorCount(*compound_names):
    return compound_name_conversion(*compound_names, record_type="property/HBondDonorCount/txt")

def compound_name_to_HBondAcceptorCount(*compound_names):
    return compound_name_conversion(*compound_names, record_type="property/HBondAcceptorCount/txt")

def compound_name_to_RotatableBondCount(*compound_names):
    return compound_name_conversion(*compound_names, record_type="property/RotatableBondCount/txt")

def compound_name_to_HeavyAtomCount(*compound_names):
    return compound_name_conversion(*compound_names, record_type="property/HeavyAtomCount/txt")

def compound_name_to_IsotopeAtomCount(*compound_names):
    return compound_name_conversion(*compound_names, record_type="property/IsotopeAtomCount/txt")

def compound_name_to_AtomStereoCount(*compound_names):
    return compound_name_conversion(*compound_names, record_type="property/AtomStereoCount/txt")

def compound_name_to_DefinedAtomStereoCount(*compound_names):
    return compound_name_conversion(*compound_names, record_type="property/DefinedAtomStereoCount/txt")

def compound_name_to_UndefinedAtomStereoCount(*compound_names):
    return compound_name_conversion(*compound_names, record_type="property/UndefinedAtomStereoCount/txt")

def compound_name_to_BondStereoCount(*compound_names):
    return compound_name_conversion(*compound_names, record_type="property/BondStereoCount/txt")

def compound_name_to_DefinedBondStereoCount(*compound_names):
    return compound_name_conversion(*compound_names, record_type="property/DefinedBondStereoCount/txt")

def compound_name_to_UndefinedBondStereoCount(*compound_names):
    return compound_name_conversion(*compound_names, record_type="property/UndefinedBondStereoCount/txt")

def compound_name_to_CovalentUnitCount(*compound_names):
    return compound_name_conversion(*compound_names, record_type="property/CovalentUnitCount/txt")

def compound_name_to_Volume3D(*compound_names):
    return compound_name_conversion(*compound_names, record_type="property/Volume3D/txt")

def compound_name_to_XStericQuadrupole3D(*compound_names):
    return compound_name_conversion(*compound_names, record_type="property/XStericQuadrupole3D/txt")

def compound_name_to_YStericQuadrupole3D(*compound_names):
    return compound_name_conversion(*compound_names, record_type="property/YStericQuadrupole3D/txt")

def compound_name_to_ZStericQuadrupole3D(*compound_names):
    return compound_name_conversion(*compound_names, record_type="property/ZStericQuadrupole3D/txt")

def compound_name_to_FeatureCount3D(*compound_names):
    return compound_name_conversion(*compound_names, record_type="property/FeatureCount3D/txt")

def compound_name_to_FeatureAcceptorCount3D(*compound_names):
    return compound_name_conversion(*compound_names, record_type="property/FeatureAcceptorCount3D/txt")

def compound_name_to_FeatureDonorCount3D(*compound_names):
    return compound_name_conversion(*compound_names, record_type="property/FeatureDonorCount3D/txt")
def compound_name_to_FeatureCationCount3D(*compound_names):
    return compound_name_conversion(*compound_names, record_type="property/FeatureCationCount3D/txt")

def compound_name_to_FeatureRingCount3D(*compound_names):
    return compound_name_conversion(*compound_names, record_type="property/FeatureRingCount3D/txt")

def compound_name_to_FeatureHydrophobeCount3D(*compound_names):
    return compound_name_conversion(*compound_names, record_type="property/FeatureHydrophobeCount3D/txt")

def compound_name_to_ConformerModelRMSD3D(*compound_names):
    return compound_name_conversion(*compound_names, record_type="property/ConformerModelRMSD3D/txt")

def compound_name_to_EffectiveRotorCount3D(*compound_names):
    return compound_name_conversion(*compound_names, record_type="property/EffectiveRotorCount3D/txt")

def compound_name_to_ConformerCount3D(*compound_names):
    return compound_name_conversion(*compound_names, record_type="property/ConformerCount3D/txt")

def compound_name_to_Fingerprint2D(*compound_names):
    return compound_name_conversion(*compound_names, record_type="property/Fingerprint2D/txt")
compound_name_to_ConformerCount3D("water",)

"""**compound domain is cid **** *"""

def compound_cid_conversion(*compound_cids, record_type='record'):
    """
    Convert compound CIDs to PubChem URLs with a specified record type.

    :param compound_cids: Variable number of compound CIDs or lists of compound CIDs.
    :param record_type: Type of record to retrieve (default is 'record').
    :return: List of PubChem URLs.
    """
    compound_cid_list = []
    for compound_cid_arg in compound_cids:
        if isinstance(compound_cid_arg, str):
            compound_cid_list.append(str(compound_cid_arg))
        elif isinstance(compound_cid_arg, list):
            for compound_cid_item in compound_cid_arg:
                compound_cid_list.append(str(compound_cid_item))
        else:
            for compound_cid_item in compound_cid_arg:
                compound_cid_list.append(compound_cid_item)

    urls = []
    for compound_cid in compound_cid_list:
        compound_cid_str = str(compound_cid)
        plugin = f"compound/cid/{compound_cid_str}"
        url = f"https://pubchem.ncbi.nlm.nih.gov/rest/pug/{plugin}/{record_type}"
        urls.append(url)

    return urls

def compound_cid_to_synonym(*compound_cids):
    """Retrieve synonym URLs for given compound CIDs."""
    return compound_cid_conversion(*compound_cids, record_type='synonyms/txt')

def compound_cid_to_record(*compound_cids):
    """Retrieve record URLs for given compound CIDs."""
    return compound_cid_conversion(*compound_cids, record_type='record/xml')

def compound_cid_to_property(*compound_cids):
    """Retrieve property URLs for given compound CIDs."""
    return compound_cid_conversion(*compound_cids, record_type="property/Title,MolecularFormula,MolecularWeight,CanonicalSMILES,IsomericSMILES,InChI,InChIKey,IUPACName,XLogP,ExactMass,MonoisotopicMass,TPSA,Complexity,Charge,HBondDonorCount,HBondAcceptorCount,RotatableBondCount,HeavyAtomCount,IsotopeAtomCount,AtomStereoCount,DefinedAtomStereoCount,UndefinedAtomStereoCount,BondStereoCount,DefinedBondStereoCount,UndefinedBondStereoCount,CovalentUnitCount,Volume3D,XStericQuadrupole3D,YStericQuadrupole3D,ZStericQuadrupole3D,FeatureCount3D,FeatureAcceptorCount3D,FeatureDonorCount3D,FeatureAnionCount3D,FeatureCationCount3D,FeatureRingCount3D,FeatureHydrophobeCount3D,ConformerModelRMSD3D,EffectiveRotorCount3D,ConformerCount3D,Fingerprint2D/CSV")

def compound_cid_to_aid(*compound_cids):
    """Retrieve AID URLs for given compound CIDs."""
    return compound_cid_conversion(*compound_cids, record_type='aids/txt')

def compound_cid_to_assaysummary(*compound_cids):
    """Retrieve assaysummary URLs for given compound CIDs."""
    return compound_cid_conversion(*compound_cids, record_type='assaysummary/xml')

def compound_cid_to_classification(*compound_cids):
    """Retrieve classification URLs for given compound CIDs."""
    return compound_cid_conversion(*compound_cids, record_type='classification/xml')

def compound_cid_to_description(*compound_cids):
    """Retrieve description URLs for given compound CIDs."""
    return compound_cid_conversion(*compound_cids, record_type='description/xml')

def compound_cid_to_sid(*compound_cids):
    """Retrieve SID URLs for given compound CIDs."""
    return compound_cid_conversion(*compound_cids, record_type='sids/txt')

def compound_cid_to_cid(*compound_cids):
    """Retrieve CID URLs for given compound CIDs."""
    return compound_cid_conversion(*compound_cids, record_type='cids/txt')

def compound_cid_to_conformer(*compound_cids):
    """Retrieve conformer URLs for given compound CIDs."""
    return compound_cid_conversion(*compound_cids, record_type='conformers/xml')

def compound_cid_to_png(*compound_cids):
    """Retrieve PNG URLs for given compound CIDs."""
    return compound_cid_conversion(*compound_cids, record_type='png')

def compound_cid_to_2d_png(*compound_cids):
    """Retrieve 2D PNG URLs for given compound CIDs."""
    return compound_cid_conversion(*compound_cids, record_type='png?record_type=2d')

def compound_cid_to_3d_png(*compound_cids):
    """Retrieve 3D PNG URLs for given compound CIDs."""
    return compound_cid_conversion(*compound_cids, record_type='png?record_type=3d')

def compound_cid_to_active_aid(*compound_cids):
    """Retrieve active AID URLs for given compound CIDs."""
    return compound_cid_conversion(*compound_cids, record_type='aids/txt?aids_type=active')

def compound_cid_to_inactive_aid(*compound_cids):
    """Retrieve inactive AID URLs for given compound CIDs."""
    return compound_cid_conversion(*compound_cids, record_type='aids/txt?aids_type=inactive')

def compound_cid_to_all_aid(*compound_cids):
    """Retrieve all AID URLs for given compound CIDs."""
    return compound_cid_conversion(*compound_cids, record_type='aids')
def compound_cid_to_same_isotopes_cids(*compound_cids):
    """Retrieve same isotopes CID URLs for given compound CIDs."""
    return compound_cid_conversion(*compound_cids, record_type='cids/txt?cids_type=same_isotopes')

def compound_cid_to_same_connectivity_cids(*compound_cids):
    """Retrieve same connectivity CID URLs for given compound CIDs."""
    return compound_cid_conversion(*compound_cids, record_type='cids/txt?cids_type=same_connectivity')

def compound_cid_to_same_tautomer_cids(*compound_cids):
    """Retrieve same tautomer CID URLs for given compound CIDs."""
    return compound_cid_conversion(*compound_cids, record_type='cids/txt?cids_type=same_tautomer')

def compound_cid_to_same_parent_cids(*compound_cids):
    """Retrieve same parent CID URLs for given compound CIDs."""
    return compound_cid_conversion(*compound_cids, record_type='cids/txt?cids_type=same_parent')

def compound_cid_to_same_parent_stereo_cids(*compound_cids):
    """Retrieve same parent stereo CID URLs for given compound CIDs."""
    return compound_cid_conversion(*compound_cids, record_type='cids/txt?cids_type=same_parent_stereo')

def compound_cid_to_same_parent_isotopes_cids(*compound_cids):
    """Retrieve same parent isotopes CID URLs for given compound CIDs."""
    return compound_cid_conversion(*compound_cids, record_type='cids/txt?cids_type=same_parent_isotopes')

def compound_cid_to_same_parent_connectivity_cids(*compound_cids):
    """Retrieve same parent connectivity CID URLs for given compound CIDs."""
    return compound_cid_conversion(*compound_cids, record_type='cids/txt?cids_type=same_parent_connectivity')

def compound_cid_to_same_parent_tautomer_cids(*compound_cids):
    """Retrieve same parent tautomer CID URLs for given compound CIDs."""
    return compound_cid_conversion(*compound_cids, record_type='cids/txt?cids_type=same_parent_tautomer')
def compound_cid_to_original_cids(*compound_cids):
    """Retrieve original CID URLs for given compound CIDs."""
    return compound_cid_conversion(*compound_cids, record_type='cids/txt?cids_type=original')

def compound_cid_to_parent_cids(*compound_cids):
    """Retrieve parent CID URLs for given compound CIDs."""
    return compound_cid_conversion(*compound_cids, record_type='cids/txt?cids_type=parent')

def compound_cid_to_component_cids(*compound_cids):
    """Retrieve component CID URLs for given compound CIDs."""
    return compound_cid_conversion(*compound_cids, record_type='cids/txt?cids_type=component')

def compound_cid_to_preferred_cids(*compound_cids):
    """Retrieve preferred CID URLs for given compound CIDs."""
    return compound_cid_conversion(*compound_cids, record_type='cids?cids_type=preferred')

def compound_cid_to_similar_2d_cids(*compound_cids):
    """Retrieve similar 2D CID URLs for given compound CIDs."""
    return compound_cid_conversion(*compound_cids, record_type='cids/txt?cids_type=similar_2d')

def compound_cid_to_similar_3d_cids(*compound_cids):
    """Retrieve similar 3D CID URLs for given compound CIDs."""
    return compound_cid_conversion(*compound_cids, record_type='cids/txt?cids_type=similar_3d')

def compound_cid_to_same_stereo_cids(*compound_cids):
    """Retrieve same stereo CID URLs for given compound CIDs."""
    return compound_cid_conversion(*compound_cids, record_type='cids/txt?cids_type=same_stereo')

def compound_cid_to_mutliple_property(*compound_cids, properties=None):
    """
    Retrieve property URLs for given compound CIDs.

    :param compound_cids: Variable number of compound CIDs or lists of compound CIDs.
    :param properties: List of properties to retrieve (default is None, retrieves all properties).
    :return: Dictionary of property names and corresponding lists of PubChem URLs.
    """
    if properties is None:
        properties = [
            "Title", "MolecularFormula", "MolecularWeight", "CanonicalSMILES", "IsomericSMILES",
            "InChI", "InChIKey", "IUPACName", "XLogP", "ExactMass", "MonoisotopicMass", "TPSA",
            "Complexity", "Charge", "HBondDonorCount", "HBondAcceptorCount", "RotatableBondCount",
            "HeavyAtomCount", "IsotopeAtomCount", "AtomStereoCount", "DefinedAtomStereoCount",
            "UndefinedAtomStereoCount", "BondStereoCount", "DefinedBondStereoCount",
            "UndefinedBondStereoCount", "CovalentUnitCount", "Volume3D", "XStericQuadrupole3D",
            "YStericQuadrupole3D", "ZStericQuadrupole3D", "FeatureCount3D", "FeatureAcceptorCount3D",
            "FeatureDonorCount3D", "FeatureAnionCount3D", "FeatureCationCount3D", "FeatureRingCount3D",
            "FeatureHydrophobeCount3D", "ConformerModelRMSD3D", "EffectiveRotorCount3D",
            "ConformerCount3D", "Fingerprint2D"
        ]

    urls = {}
    for property_name in properties:
        urls[property_name] = compound_cid_conversion(*compound_cids, record_type=f"property/{property_name}/txt")

    return urls
def compound_cid_to_Title(*compound_cids):
    return compound_cid_conversion(*compound_cids, record_type="property/Title/txt")

def compound_cid_to_MolecularFormula(*compound_cids):
    return compound_cid_conversion(*compound_cids, record_type="property/MolecularFormula/txt")

def compound_cid_to_MolecularWeight(*compound_cids):
    return compound_cid_conversion(*compound_cids, record_type="property/MolecularWeight/txt")

def compound_cid_to_CanonicalSMILES(*compound_cids):
    return compound_cid_conversion(*compound_cids, record_type="property/CanonicalSMILES/txt")

def compound_cid_to_IsomericSMILES(*compound_cids):
    return compound_cid_conversion(*compound_cids, record_type="property/IsomericSMILES/txt")

def compound_cid_to_InChI(*compound_cids):
    return compound_cid_conversion(*compound_cids, record_type="property/InChI/txt")

def compound_cid_to_InChIKey(*compound_cids):
    return compound_cid_conversion(*compound_cids, record_type="property/InChIKey/txt")

def compound_cid_to_IUPACName(*compound_cids):
    return compound_cid_conversion(*compound_cids, record_type="property/IUPACName/txt")

def compound_cid_to_XLogP(*compound_cids):
    return compound_cid_conversion(*compound_cids, record_type="property/XLogP/txt")

def compound_cid_to_ExactMass(*compound_cids):
    return compound_cid_conversion(*compound_cids, record_type="property/ExactMass/txt")

def compound_cid_to_MonoisotopicMass(*compound_cids):
    return compound_cid_conversion(*compound_cids, record_type="property/MonoisotopicMass/txt")

def compound_cid_to_TPSA(*compound_cids):
    return compound_cid_conversion(*compound_cids, record_type="property/TPSA/txt")

def compound_cid_to_Complexity(*compound_cids):
    return compound_cid_conversion(*compound_cids, record_type="property/Complexity/txt")

def compound_cid_to_Charge(*compound_cids):
    return compound_cid_conversion(*compound_cids, record_type="property/Charge/txt")

def compound_cid_to_HBondDonorCount(*compound_cids):
    return compound_cid_conversion(*compound_cids, record_type="property/HBondDonorCount/txt")

def compound_cid_to_HBondAcceptorCount(*compound_cids):
    return compound_cid_conversion(*compound_cids, record_type="property/HBondAcceptorCount/txt")

def compound_cid_to_RotatableBondCount(*compound_cids):
    return compound_cid_conversion(*compound_cids, record_type="property/RotatableBondCount/txt")

def compound_cid_to_HeavyAtomCount(*compound_cids):
    return compound_cid_conversion(*compound_cids, record_type="property/HeavyAtomCount/txt")

def compound_cid_to_IsotopeAtomCount(*compound_cids):
    return compound_cid_conversion(*compound_cids, record_type="property/IsotopeAtomCount/txt")

def compound_cid_to_AtomStereoCount(*compound_cids):
    return compound_cid_conversion(*compound_cids, record_type="property/AtomStereoCount/txt")

def compound_cid_to_DefinedAtomStereoCount(*compound_cids):
    return compound_cid_conversion(*compound_cids, record_type="property/DefinedAtomStereoCount/txt")

def compound_cid_to_UndefinedAtomStereoCount(*compound_cids):
    return compound_cid_conversion(*compound_cids, record_type="property/UndefinedAtomStereoCount/txt")

def compound_cid_to_BondStereoCount(*compound_cids):
    return compound_cid_conversion(*compound_cids, record_type="property/BondStereoCount/txt")

def compound_cid_to_DefinedBondStereoCount(*compound_cids):
    return compound_cid_conversion(*compound_cids, record_type="property/DefinedBondStereoCount/txt")

def compound_cid_to_UndefinedBondStereoCount(*compound_cids):
    return compound_cid_conversion(*compound_cids, record_type="property/UndefinedBondStereoCount/txt")

def compound_cid_to_CovalentUnitCount(*compound_cids):
    return compound_cid_conversion(*compound_cids, record_type="property/CovalentUnitCount/txt")

def compound_cid_to_Volume3D(*compound_cids):
    return compound_cid_conversion(*compound_cids, record_type="property/Volume3D/txt")

def compound_cid_to_XStericQuadrupole3D(*compound_cids):
    return compound_cid_conversion(*compound_cids, record_type="property/XStericQuadrupole3D/txt")

def compound_cid_to_YStericQuadrupole3D(*compound_cids):
    return compound_cid_conversion(*compound_cids, record_type="property/YStericQuadrupole3D/txt")

def compound_cid_to_ZStericQuadrupole3D(*compound_cids):
    return compound_cid_conversion(*compound_cids, record_type="property/ZStericQuadrupole3D/txt")

def compound_cid_to_FeatureCount3D(*compound_cids):
    return compound_cid_conversion(*compound_cids, record_type="property/FeatureCount3D/txt")

def compound_cid_to_FeatureAcceptorCount3D(*compound_cids):
    return compound_cid_conversion(*compound_cids, record_type="property/FeatureAcceptorCount3D/txt")

def compound_cid_to_FeatureDonorCount3D(*compound_cids):
    return compound_cid_conversion(*compound_cids, record_type="property/FeatureDonorCount3D/txt")

def compound_cid_to_FeatureAnionCount3D(*compound_cids):
    return compound_cid_conversion(*compound_cids, record_type="property/FeatureAnionCount3D/txt")

def compound_cid_to_FeatureCationCount3D(*compound_cids):
    return compound_cid_conversion(*compound_cids, record_type="property/FeatureCationCount3D/txt")

def compound_cid_to_FeatureRingCount3D(*compound_cids):
    return compound_cid_conversion(*compound_cids, record_type="property/FeatureRingCount3D/txt")

def compound_cid_to_FeatureHydrophobeCount3D(*compound_cids):
    return compound_cid_conversion(*compound_cids, record_type="property/FeatureHydrophobeCount3D/txt")

def compound_cid_to_ConformerModelRMSD3D(*compound_cids):
    return compound_cid_conversion(*compound_cids, record_type="property/ConformerModelRMSD3D/txt")

def compound_cid_to_EffectiveRotorCount3D(*compound_cids):
    return compound_cid_conversion(*compound_cids, record_type="property/EffectiveRotorCount3D/txt")

def compound_cid_to_ConformerCount3D(*compound_cids):
    return compound_cid_conversion(*compound_cids, record_type="property/ConformerCount3D/txt")

def compound_cid_to_Fingerprint2D(*compound_cids):
      return compound_cid_conversion(*compound_cids, record_type="property/Fingerprint2D/txt")

"""**smiles**"""

def compound_smiles_conversion(*compound_smiles, record_type='record'):
    """
    Convert compound SMILES to PubChem URLs with a specified record type.

    :param compound_smiles: Variable number of compound SMILES or lists of compound SMILES.
    :param record_type: Type of record to retrieve (default is 'record').
    :return: List of PubChem URLs.
    """
    compound_smiles_list = []
    for compound_smiles_arg in compound_smiles:
        if isinstance(compound_smiles_arg, str):
            compound_smiles_list.append(str(compound_smiles_arg))
        elif isinstance(compound_smiles_arg, list):
            for compound_smiles_item in compound_smiles_arg:
                compound_smiles_list.append(str(compound_smiles_item))
        else:
            for compound_smiles_item in compound_smiles_arg:
                compound_smiles_list.append(compound_smiles_item)

    urls = []
    for compound_smiles in compound_smiles_list:
        compound_smiles_str = str(compound_smiles)
        plugin = f"compound/smiles/{compound_smiles_str}"
        url = "https://pubchem.ncbi.nlm.nih.gov/rest/pug/compound/smiles/cids/txt?" + "smiles=" + compound_smiles_str
        urls.append(url)

    return urls
def compound_smiles_to_synonym(*compound_smiles):
    """Retrieve synonym URLs for given compound SMILES."""
    return compound_smiles_conversion(*compound_smiles, record_type='synonyms/txt')

def compound_smiles_to_record(*compound_smiles):
    """Retrieve record URLs for given compound SMILES."""
    return compound_smiles_conversion(*compound_smiles, record_type='record/xml')

def compound_smiles_to_property(*compound_smiles):
    """Retrieve property URLs for given compound SMILES."""
    return compound_smiles_conversion(*compound_smiles, record_type="property/Title,MolecularFormula,MolecularWeight,CanonicalSMILES,IsomericSMILES,InChI,InChIKey,IUPACName,XLogP,ExactMass,MonoisotopicMass,TPSA,Complexity,Charge,HBondDonorCount,HBondAcceptorCount,RotatableBondCount,HeavyAtomCount,IsotopeAtomCount,AtomStereoCount,DefinedAtomStereoCount,UndefinedAtomStereoCount,BondStereoCount,DefinedBondStereoCount,UndefinedBondStereoCount,CovalentUnitCount,Volume3D,XStericQuadrupole3D,YStericQuadrupole3D,ZStericQuadrupole3D,FeatureCount3D,FeatureAcceptorCount3D,FeatureDonorCount3D,FeatureAnionCount3D,FeatureCationCount3D,FeatureRingCount3D,FeatureHydrophobeCount3D,ConformerModelRMSD3D,EffectiveRotorCount3D,ConformerCount3D,Fingerprint2D/CSV")

def compound_smiles_to_aid(*compound_smiles):
    """Retrieve AID URLs for given compound SMILES."""
    return compound_smiles_conversion(*compound_smiles, record_type='aids/txt')

def compound_smiles_to_assaysummary(*compound_smiles):
    """Retrieve assaysummary URLs for given compound SMILES."""
    return compound_smiles_conversion(*compound_smiles, record_type='assaysummary/xml')

def compound_smiles_to_classification(*compound_smiles):
    """Retrieve classification URLs for given compound SMILES."""
    return compound_smiles_conversion(*compound_smiles, record_type='classification/xml')

def compound_smiles_to_description(*compound_smiles):
    """Retrieve description URLs for given compound SMILES."""
    return compound_smiles_conversion(*compound_smiles, record_type='description/xml')

def compound_smiles_to_sid(*compound_smiles):
    """Retrieve SID URLs for given compound SMILES."""
    return compound_smiles_conversion(*compound_smiles, record_type='sids/txt')

def compound_smiles_to_cid(*compound_smiles):
    """Retrieve CID URLs for given compound SMILES."""
    return compound_smiles_conversion(*compound_smiles, record_type='smiles/txt')

def compound_smiles_to_conformer(*compound_smiles):
    """Retrieve conformer URLs for given compound SMILES."""
    return compound_smiles_conversion(*compound_smiles, record_type='conformers/xml')

def compound_smiles_to_png(*compound_smiles):
    """Retrieve PNG URLs for given compound SMILES."""
    return compound_smiles_conversion(*compound_smiles, record_type='png')

def compound_smiles_to_2d_png(*compound_smiles):
    """Retrieve 2D PNG URLs for given compound SMILES."""
    return compound_smiles_conversion(*compound_smiles, record_type='png?record_type=2d')

def compound_smiles_to_3d_png(*compound_smiles):
    """Retrieve 3D PNG URLs for given compound SMILES."""
    return compound_smiles_conversion(*compound_smiles, record_type='png?record_type=3d')

def compound_smiles_to_active_aid(*compound_smiles):
    """Retrieve active AID URLs for given compound SMILES."""
    return compound_smiles_conversion(*compound_smiles, record_type='aids/txt?aids_type=active')

def compound_smiles_to_inactive_aid(*compound_smiles):
    """Retrieve inactive AID URLs for given compound SMILES."""
    return compound_smiles_conversion(*compound_smiles, record_type='aids?aids_type=inactive')

def compound_smiles_to_all_aid(*compound_smiles):
    """Retrieve all AID URLs for given compound SMILES."""
    return compound_smiles_conversion(*compound_smiles, record_type='aids')
def compound_smiles_to_same_isotopes_cids(*compound_smiles):
    """Retrieve same isotopes CID URLs for given compound SMILES."""
    return compound_smiles_conversion(*compound_smiles, record_type='cids/txt?cids_type=same_isotopes')

def compound_smiles_to_same_connectivity_cids(*compound_smiles):
    """Retrieve same connectivity CID URLs for given compound SMILES."""
    return compound_smiles_conversion(*compound_smiles, record_type='cids/txt?cids_type=same_connectivity')

def compound_smiles_to_same_tautomer_cids(*compound_smiles):
    """Retrieve same tautomer CID URLs for given compound SMILES."""
    return compound_smiles_conversion(*compound_smiles, record_type='cids/txt?cids_type=same_tautomer')

def compound_smiles_to_same_parent_cids(*compound_smiles):
    """Retrieve same parent CID URLs for given compound SMILES."""
    return compound_smiles_conversion(*compound_smiles, record_type='cids/txt?cids_type=same_parent')

def compound_smiles_to_same_parent_stereo_cids(*compound_smiles):
    """Retrieve same parent stereo CID URLs for given compound SMILES."""
    return compound_smiles_conversion(*compound_smiles, record_type='cids/txt?cids_type=same_parent_stereo')

def compound_smiles_to_same_parent_isotopes_cids(*compound_smiles):
    """Retrieve same parent isotopes CID URLs for given compound SMILES."""
    return compound_smiles_conversion(*compound_smiles, record_type='cids/txt?cids_type=same_parent_isotopes')

def compound_smiles_to_same_parent_connectivity_cids(*compound_smiles):
    """Retrieve same parent connectivity CID URLs for given compound SMILES."""
    return compound_smiles_conversion(*compound_smiles, record_type='cids/txt?cids_type=same_parent_connectivity')

def compound_smiles_to_same_parent_tautomer_cids(*compound_smiles):
    """Retrieve same parent tautomer CID URLs for given compound SMILES."""
    return compound_smiles_conversion(*compound_smiles, record_type='cids/txt?cids_type=same_parent_tautomer')
def compound_smiles_to_original_cids(*compound_smiles):
    """Retrieve original CID URLs for given compound SMILES."""
    return compound_smiles_conversion(*compound_smiles, record_type='cids/txt?cids_type=original')

def compound_smiles_to_parent_cids(*compound_smiles):
    """Retrieve parent CID URLs for given compound SMILES."""
    return compound_smiles_conversion(*compound_smiles, record_type='cids/txt?cids_type=parent')

def compound_smiles_to_component_cids(*compound_smiles):
    """Retrieve component CID URLs for given compound SMILES."""
    return compound_smiles_conversion(*compound_smiles, record_type='cids/txt?cids_type=component')

def compound_smiles_to_preferred_cids(*compound_smiles):
    """Retrieve preferred CID URLs for given compound SMILES."""
    return compound_smiles_conversion(*compound_smiles, record_type='cids/txt?cids_type=preferred')

def compound_smiles_to_similar_2d_cids(*compound_smiles):
    """Retrieve similar 2D CID URLs for given compound SMILES."""
    return compound_smiles_conversion(*compound_smiles, record_type='cids/txt?cids_type=similar_2d')

def compound_smiles_to_similar_3d_cids(*compound_smiles):
    """Retrieve similar 3D CID URLs for given compound SMILES."""
    return compound_smiles_conversion(*compound_smiles, record_type='cids/txt?cids_type=similar_3d')

def compound_smiles_to_same_stereo_cids(*compound_smiles):
    """Retrieve same stereo CID URLs for given compound SMILES."""
    return compound_smiles_conversion(*compound_smiles, record_type='cids/txt?cids_type=same_stereo')

def compound_smiles_to_mutliple_property(*compound_smiles, properties=None):
    """
    Retrieve property URLs for given compound SMILES.

    :param compound_smiles: Variable number of compound SMILES or lists of compound SMILES.
    :param properties: List of properties to retrieve (default is None, retrieves all properties).
    :return: Dictionary of property names and corresponding lists of PubChem URLs.
    """
    if properties is None:
        properties = [
            "Title", "MolecularFormula", "MolecularWeight", "CanonicalSMILES", "IsomericSMILES",
            "InChI", "InChIKey", "IUPACName", "XLogP", "ExactMass", "MonoisotopicMass", "TPSA",
            "Complexity", "Charge", "HBondDonorCount", "HBondAcceptorCount", "RotatableBondCount",
            "HeavyAtomCount", "IsotopeAtomCount", "AtomStereoCount", "DefinedAtomStereoCount",
            "UndefinedAtomStereoCount", "BondStereoCount", "DefinedBondStereoCount",
            "UndefinedBondStereoCount", "CovalentUnitCount", "Volume3D", "XStericQuadrupole3D",
            "YStericQuadrupole3D", "ZStericQuadrupole3D", "FeatureCount3D", "FeatureAcceptorCount3D",
            "FeatureDonorCount3D", "FeatureAnionCount3D", "FeatureCationCount3D", "FeatureRingCount3D",
            "FeatureHydrophobeCount3D", "ConformerModelRMSD3D", "EffectiveRotorCount3D",
            "ConformerCount3D", "Fingerprint2D"
        ]

    urls = {}
    for property_name in properties:
        urls[property_name] = compound_smiles_conversion(*compound_smiles, record_type=f"property/{property_name}/txt")

    return urls
"""**Formula**"""
def compound_formula_to_mutliple_property(*compound_formulas, properties=None):
    """
    Retrieve property URLs for given compound formulas.

    :param compound_formulas: Variable number of compound formulas or lists of compound formulas.
    :param properties: List of properties to retrieve (default is None, retrieves all properties).
    :return: Dictionary of property names and corresponding lists of PubChem URLs.
    """
    if properties is None:
        properties = [
            "Title", "MolecularFormula", "MolecularWeight", "CanonicalSMILES", "IsomericSMILES",
            "InChI", "InChIKey", "IUPACName", "XLogP", "ExactMass", "MonoisotopicMass", "TPSA",
            "Complexity", "Charge", "HBondDonorCount", "HBondAcceptorCount", "RotatableBondCount",
            "HeavyAtomCount", "IsotopeAtomCount", "AtomStereoCount", "DefinedAtomStereoCount",
            "UndefinedAtomStereoCount", "BondStereoCount", "DefinedBondStereoCount",
            "UndefinedBondStereoCount", "CovalentUnitCount", "Volume3D", "XStericQuadrupole3D",
            "YStericQuadrupole3D", "ZStericQuadrupole3D", "FeatureCount3D", "FeatureAcceptorCount3D",
            "FeatureDonorCount3D", "FeatureAnionCount3D", "FeatureCationCount3D", "FeatureRingCount3D",
            "FeatureHydrophobeCount3D", "ConformerModelRMSD3D", "EffectiveRotorCount3D",
            "ConformerCount3D", "Fingerprint2D"
        ]

    urls = {}
    for property_name in properties:
        urls[property_name] = compound_formula_conversion(*compound_formulas, record_type=f"property/{property_name}/txt")

    return urls
def compound_smiles_to_Title(*compound_smiles):
    """Retrieve Title property URLs for given compound SMILES."""
    return compound_smiles_conversion(*compound_smiles, record_type="property/Title/txt")

def compound_smiles_to_MolecularFormula(*compound_smiles):
    """Retrieve MolecularFormula property URLs for given compound SMILES."""
    return compound_smiles_conversion(*compound_smiles, record_type="property/MolecularFormula/txt")

def compound_smiles_to_MolecularWeight(*compound_smiles):
    """Retrieve MolecularWeight property URLs for given compound SMILES."""
    return compound_smiles_conversion(*compound_smiles, record_type="property/MolecularWeight/txt")

def compound_smiles_to_CanonicalSMILES(*compound_smiles):
    """Retrieve CanonicalSMILES property URLs for given compound SMILES."""
    return compound_smiles_conversion(*compound_smiles, record_type="property/CanonicalSMILES/txt")

def compound_smiles_to_IsomericSMILES(*compound_smiles):
    """Retrieve IsomericSMILES property URLs for given compound SMILES."""
    return compound_smiles_conversion(*compound_smiles, record_type="property/IsomericSMILES/txt")

def compound_smiles_to_InChI(*compound_smiles):
    """Retrieve InChI property URLs for given compound SMILES."""
    return compound_smiles_conversion(*compound_smiles, record_type="property/InChI/txt")

def compound_smiles_to_InChIKey(*compound_smiles):
    """Retrieve InChIKey property URLs for given compound SMILES."""
    return compound_smiles_conversion(*compound_smiles, record_type="property/InChIKey/txt")

def compound_smiles_to_IUPACName(*compound_smiles):
    """Retrieve IUPACName property URLs for given compound SMILES."""
    return compound_smiles_conversion(*compound_smiles, record_type="property/IUPACName/txt")

def compound_smiles_to_XLogP(*compound_smiles):
    """Retrieve XLogP property URLs for given compound SMILES."""
    return compound_smiles_conversion(*compound_smiles, record_type="property/XLogP/txt")

def compound_smiles_to_ExactMass(*compound_smiles):
    """Retrieve ExactMass property URLs for given compound SMILES."""
    return compound_smiles_conversion(*compound_smiles, record_type="property/ExactMass/txt")

def compound_smiles_to_MonoisotopicMass(*compound_smiles):
    """Retrieve MonoisotopicMass property URLs for given compound SMILES."""
    return compound_smiles_conversion(*compound_smiles, record_type="property/MonoisotopicMass/txt")

def compound_smiles_to_TPSA(*compound_smiles):
    """Retrieve TPSA property URLs for given compound SMILES."""
    return compound_smiles_conversion(*compound_smiles, record_type="property/TPSA/txt")

def compound_smiles_to_Complexity(*compound_smiles):
    """Retrieve Complexity property URLs for given compound SMILES."""
    return compound_smiles_conversion(*compound_smiles, record_type="property/Complexity/txt")

def compound_smiles_to_Charge(*compound_smiles):
    """Retrieve Charge property URLs for given compound SMILES."""
    return compound_smiles_conversion(*compound_smiles, record_type="property/Charge/txt")

def compound_smiles_to_HBondDonorCount(*compound_smiles):
    """Retrieve HBondDonorCount property URLs for given compound SMILES."""
    return compound_smiles_conversion(*compound_smiles, record_type="property/HBondDonorCount/txt")

def compound_smiles_to_HBondAcceptorCount(*compound_smiles):
    """Retrieve HBondAcceptorCount property URLs for given compound SMILES."""
    return compound_smiles_conversion(*compound_smiles, record_type="property/HBondAcceptorCount/txt")

def compound_smiles_to_RotatableBondCount(*compound_smiles):
    """Retrieve RotatableBondCount property URLs for given compound SMILES."""
    return compound_smiles_conversion(*compound_smiles, record_type="property/RotatableBondCount/txt")

def compound_smiles_to_HeavyAtomCount(*compound_smiles):
    """Retrieve HeavyAtomCount property URLs for given compound SMILES."""
    return compound_smiles_conversion(*compound_smiles, record_type="property/HeavyAtomCount/txt")

def compound_smiles_to_IsotopeAtomCount(*compound_smiles):
    """Retrieve IsotopeAtomCount property URLs for given compound SMILES."""
    return compound_smiles_conversion(*compound_smiles, record_type="property/IsotopeAtomCount/txt")

def compound_smiles_to_AtomStereoCount(*compound_smiles):
    """Retrieve AtomStereoCount property URLs for given compound SMILES."""
    return compound_smiles_conversion(*compound_smiles, record_type="property/AtomStereoCount/txt")

def compound_smiles_to_DefinedAtomStereoCount(*compound_smiles):
    """Retrieve DefinedAtomStereoCount property URLs for given compound SMILES."""
    return compound_smiles_conversion(*compound_smiles, record_type="property/DefinedAtomStereoCount/txt")

def compound_smiles_to_UndefinedAtomStereoCount(*compound_smiles):
    """Retrieve UndefinedAtomStereoCount property URLs for given compound SMILES."""
    return compound_smiles_conversion(*compound_smiles, record_type="property/UndefinedAtomStereoCount/txt")

def compound_smiles_to_BondStereoCount(*compound_smiles):
    """Retrieve BondStereoCount property URLs for given compound SMILES."""
    return compound_smiles_conversion(*compound_smiles, record_type="property/BondStereoCount/txt")

def compound_smiles_to_DefinedBondStereoCount(*compound_smiles):
    """Retrieve DefinedBondStereoCount property URLs for given compound SMILES."""
    return compound_smiles_conversion(*compound_smiles, record_type="property/DefinedBondStereoCount/txt")

def compound_smiles_to_UndefinedBondStereoCount(*compound_smiles):
    """Retrieve UndefinedBondStereoCount property URLs for given compound SMILES."""
    return compound_smiles_conversion(*compound_smiles, record_type="property/UndefinedBondStereoCount/txt")

def compound_smiles_to_CovalentUnitCount(*compound_smiles):
    """Retrieve CovalentUnitCount property URLs for given compound SMILES."""
    return compound_smiles_conversion(*compound_smiles, record_type="property/CovalentUnitCount/txt")

def compound_smiles_to_Volume3D(*compound_smiles):
    """Retrieve Volume3D property URLs for given compound SMILES."""
    return compound_smiles_conversion(*compound_smiles, record_type="property/Volume3D/txt")

def compound_smiles_to_XStericQuadrupole3D(*compound_smiles):
    """Retrieve XStericQuadrupole3D property URLs for given compound SMILES."""
    return compound_smiles_conversion(*compound_smiles, record_type="property/XStericQuadrupole3D/txt")

def compound_smiles_to_YStericQuadrupole3D(*compound_smiles):
    """Retrieve YStericQuadrupole3D property URLs for given compound SMILES."""
    return compound_smiles_conversion(*compound_smiles, record_type="property/YStericQuadrupole3D/txt")

def compound_smiles_to_ZStericQuadrupole3D(*compound_smiles):
    """Retrieve ZStericQuadrupole3D property URLs for given compound SMILES."""
    return compound_smiles_conversion(*compound_smiles, record_type="property/ZStericQuadrupole3D/txt")

def compound_smiles_to_FeatureCount3D(*compound_smiles):
    """Retrieve FeatureCount3D property URLs for given compound SMILES."""
    return compound_smiles_conversion(*compound_smiles, record_type="property/FeatureCount3D/txt")

def compound_smiles_to_FeatureAcceptorCount3D(*compound_smiles):
    """Retrieve FeatureAcceptorCount3D property URLs for given compound SMILES."""
    return compound_smiles_conversion(*compound_smiles, record_type="property/FeatureAcceptorCount3D/txt")

def compound_smiles_to_FeatureDonorCount3D(*compound_smiles):
    """Retrieve FeatureDonorCount3D property URLs for given compound SMILES."""
    return compound_smiles_conversion(*compound_smiles, record_type="property/FeatureDonorCount3D/txt")

def compound_smiles_to_FeatureAnionCount3D(*compound_smiles):
    """Retrieve FeatureAnionCount3D property URLs for given compound SMILES."""
    return compound_smiles_conversion(*compound_smiles, record_type="property/FeatureAnionCount3D/txt")

def compound_smiles_to_FeatureCationCount3D(*compound_smiles):
    """Retrieve FeatureCationCount3D property URLs for given compound SMILES."""
    return compound_smiles_conversion(*compound_smiles, record_type="property/FeatureCationCount3D/txt")

def compound_smiles_to_FeatureRingCount3D(*compound_smiles):
    """Retrieve FeatureRingCount3D property URLs for given compound SMILES."""
    return compound_smiles_conversion(*compound_smiles, record_type="property/FeatureRingCount3D/txt")

def compound_smiles_to_FeatureHydrophobeCount3D(*compound_smiles):
    """Retrieve FeatureHydrophobeCount3D property URLs for given compound SMILES."""
    return compound_smiles_conversion(*compound_smiles, record_type="property/FeatureHydrophobeCount3D/txt")

def compound_smiles_to_ConformerModelRMSD3D(*compound_smiles):
    """Retrieve ConformerModelRMSD3D property URLs for given compound SMILES."""
    return compound_smiles_conversion(*compound_smiles, record_type="property/ConformerModelRMSD3D/txt")

def compound_smiles_to_EffectiveRotorCount3D(*compound_smiles):
    """Retrieve EffectiveRotorCount3D property URLs for given compound SMILES."""
    return compound_smiles_conversion(*compound_smiles, record_type="property/EffectiveRotorCount3D/txt")

def compound_smiles_to_ConformerCount3D(*compound_smiles):
    """Retrieve ConformerCount3D property URLs for given compound SMILES."""
    return compound_smiles_conversion(*compound_smiles, record_type="property/ConformerCount3D/txt")

def compound_smiles_to_Fingerprint2D(*compound_smiles):
    """Retrieve Fingerprint2D property URLs for given compound SMILES."""
    return compound_smiles_conversion(*compound_smiles, record_type="property/Fingerprint2D/CSV")
def compound_formula_conversion(*compound_formulas, record_type='record'):
    """
    Convert compound formulas to PubChem URLs with a specified record type.

    :param compound_formulas: Variable number of compound formulas or lists of compound formulas.
    :param record_type: Type of record to retrieve (default is 'record').
    :return: List of PubChem URLs.
    """
    compound_formula_list = []
    for compound_formula_arg in compound_formulas:
        if isinstance(compound_formula_arg, str):
            compound_formula_list.append(str(compound_formula_arg))
        elif isinstance(compound_formula_arg, list):
            for compound_formula_item in compound_formula_arg:
                compound_formula_list.append(str(compound_formula_item))
        else:
            for compound_formula_item in compound_formula_arg:
                compound_formula_list.append(compound_formula_item)

    urls = []
    for compound_formula in compound_formula_list:
        compound_formula_str = str(compound_formula)
        plugin = f"compound/fastformula/{compound_formula_str}"
        url = f"https://pubchem.ncbi.nlm.nih.gov/rest/pug/{plugin}/{record_type}"
        urls.append(url)

    return urls

def compound_formula_to_synonym(*compound_formulas):
    """Retrieve synonym URLs for given compound formulas."""
    return compound_formula_conversion(*compound_formulas, record_type='synonyms/txt')

def compound_formula_to_record(*compound_formulas):
    """Retrieve record URLs for given compound formulas."""
    return compound_formula_conversion(*compound_formulas, record_type='record/xml')

def compound_formula_to_property(*compound_formulas):
    """Retrieve property URLs for given compound formulas."""
    return compound_formula_conversion(*compound_formulas, record_type="property/Title,MolecularFormula,MolecularWeight,CanonicalSMILES,IsomericSMILES,InChI,InChIKey,IUPACName,XLogP,ExactMass,MonoisotopicMass,TPSA,Complexity,Charge,HBondDonorCount,HBondAcceptorCount,RotatableBondCount,HeavyAtomCount,IsotopeAtomCount,AtomStereoCount,DefinedAtomStereoCount,UndefinedAtomStereoCount,BondStereoCount,DefinedBondStereoCount,UndefinedBondStereoCount,CovalentUnitCount,Volume3D,XStericQuadrupole3D,YStericQuadrupole3D,ZStericQuadrupole3D,FeatureCount3D,FeatureAcceptorCount3D,FeatureDonorCount3D,FeatureAnionCount3D,FeatureCationCount3D,FeatureRingCount3D,FeatureHydrophobeCount3D,ConformerModelRMSD3D,EffectiveRotorCount3D,ConformerCount3D,Fingerprint2D/CSV")

def compound_formula_to_aid(*compound_formulas):
    """Retrieve AID URLs for given compound formulas."""
    return compound_formula_conversion(*compound_formulas, record_type='aids/txt')

def compound_formula_to_assaysummary(*compound_formulas):
    """Retrieve assaysummary URLs for given compound formulas."""
    return compound_formula_conversion(*compound_formulas, record_type='assaysummary/xml')

def compound_formula_to_classification(*compound_formulas):
    """Retrieve classification URLs for given compound formulas."""
    return compound_formula_conversion(*compound_formulas, record_type='classification/xml')

def compound_formula_to_description(*compound_formulas):
    """Retrieve description URLs for given compound formulas."""
    return compound_formula_conversion(*compound_formulas, record_type='description/xml')

def compound_formula_to_sid(*compound_formulas):
    """Retrieve SID URLs for given compound formulas."""
    return compound_formula_conversion(*compound_formulas, record_type='sids/txt')

def compound_formula_to_cid(*compound_formulas):
    """Retrieve CID URLs for given compound formulas."""
    return compound_formula_conversion(*compound_formulas, record_type='cids/txt')

def compound_formula_to_conformer(*compound_formulas):
    """Retrieve conformer URLs for given compound formulas."""
    return compound_formula_conversion(*compound_formulas, record_type='conformers/xml')

def compound_formula_to_png(*compound_formulas):
    """Retrieve PNG URLs for given compound formulas."""
    return compound_formula_conversion(*compound_formulas, record_type='png')

def compound_formula_to_2d_png(*compound_formulas):
    """Retrieve 2D PNG URLs for given compound formulas."""
    return compound_formula_conversion(*compound_formulas, record_type='png?record_type=2d')

def compound_formula_to_3d_png(*compound_formulas):
    """Retrieve 3D PNG URLs for given compound formulas."""
    return compound_formula_conversion(*compound_formulas, record_type='png?record_type=3d')

def compound_formula_to_active_aid(*compound_formulas):
    """Retrieve active AID URLs for given compound formulas."""
    return compound_formula_conversion(*compound_formulas, record_type='aids/txt?aids_type=active')

def compound_formula_to_inactive_aid(*compound_formulas):
    """Retrieve inactive AID URLs for given compound formulas."""
    return compound_formula_conversion(*compound_formulas, record_type='aids/txt?aids_type=inactive')

def compound_formula_to_all_aid(*compound_formulas):
    """Retrieve all AID URLs for given compound formulas."""
    return compound_formula_conversion(*compound_formulas, record_type='aids')

def compound_formula_to_same_isotopes_cids(*compound_formulas):
    """Retrieve same isotopes CID URLs for given compound formulas."""
    return compound_formula_conversion(*compound_formulas, record_type='cids/txt?cids_type=same_isotopes')

def compound_formula_to_same_connectivity_cids(*compound_formulas):
    """Retrieve same connectivity CID URLs for given compound formulas."""
    return compound_formula_conversion(*compound_formulas, record_type='cids/txt?cids_type=same_connectivity')

def compound_formula_to_same_tautomer_cids(*compound_formulas):
    """Retrieve same tautomer CID URLs for given compound formulas."""
    return compound_formula_conversion(*compound_formulas, record_type='cids/txt?cids_type=same_tautomer')

def compound_formula_to_same_parent_cids(*compound_formulas):
    """Retrieve same parent CID URLs for given compound formulas."""
    return compound_formula_conversion(*compound_formulas, record_type='cids/txt?cids_type=same_parent')

def compound_formula_to_same_parent_stereo_cids(*compound_formulas):
    """Retrieve same parent stereo CID URLs for given compound formulas."""
    return compound_formula_conversion(*compound_formulas, record_type='cids/txt?cids_type=same_parent_stereo')

def compound_formula_to_same_parent_isotopes_cids(*compound_formulas):
    """Retrieve same parent isotopes CID URLs for given compound formulas."""
    return compound_formula_conversion(*compound_formulas, record_type='cids/txt?cids_type=same_parent_isotopes')

def compound_formula_to_same_parent_connectivity_cids(*compound_formulas):
    """Retrieve same parent connectivity CID URLs for given compound formulas."""
    return compound_formula_conversion(*compound_formulas, record_type='cids/txt?cids_type=same_parent_connectivity')

def compound_formula_to_same_parent_tautomer_cids(*compound_formulas):
    """Retrieve same parent tautomer CID URLs for given compound formulas."""
    return compound_formula_conversion(*compound_formulas, record_type='cids/txt?cids_type=same_parent_tautomer')

def compound_formula_to_original_cids(*compound_formulas):
    """Retrieve original CID URLs for given compound formulas."""
    return compound_formula_conversion(*compound_formulas, record_type='cids/txt?cids_type=original')

def compound_formula_to_parent_cids(*compound_formulas):
    """Retrieve parent CID URLs for given compound formulas."""
    return compound_formula_conversion(*compound_formulas, record_type='cids/txt?cids_type=parent')

def compound_formula_to_component_cids(*compound_formulas):
    """Retrieve component CID URLs for given compound formulas."""
    return compound_formula_conversion(*compound_formulas, record_type='cids/txt?cids_type=component')

def compound_formula_to_preferred_cids(*compound_formulas):
    """Retrieve preferred CID URLs for given compound formulas."""
    return compound_formula_conversion(*compound_formulas, record_type='cids/txt?cids_type=preferred')

def compound_formula_to_similar_2d_cids(*compound_formulas):
    """Retrieve similar 2D CID URLs for given compound formulas."""
    return compound_formula_conversion(*compound_formulas, record_type='cids/txt?cids_type=similar_2d')

def compound_formula_to_similar_3d_cids(*compound_formulas):
    """Retrieve similar 3D CID URLs for given compound formulas."""
    return compound_formula_conversion(*compound_formulas, record_type='cids/txt?cids_type=similar_3d')

def compound_formula_to_same_stereo_cids(*compound_formulas):
    """Retrieve same stereo CID URLs for given compound formulas."""
    return compound_formula_conversion(*compound_formulas, record_type='cids/txt?cids_type=same_stereo')

"""**inchi**"""

import requests
def compound_inchi_to_mutliple_property(*compound_inchis, properties=None):
    """
    Retrieve property URLs for given compound InChIs.

    :param compound_inchis: Variable number of compound InChIs or lists of compound InChIs.
    :param properties: List of properties to retrieve (default is None, retrieves all properties).
    :return: Dictionary of property names and corresponding lists of PubChem URLs.
    """
    if properties is None:
        properties = [
            "Title", "MolecularFormula", "MolecularWeight", "CanonicalSMILES", "IsomericSMILES",
            "InChI", "InChIKey", "IUPACName", "XLogP", "ExactMass", "MonoisotopicMass", "TPSA",
            "Complexity", "Charge", "HBondDonorCount", "HBondAcceptorCount", "RotatableBondCount",
            "HeavyAtomCount", "IsotopeAtomCount", "AtomStereoCount", "DefinedAtomStereoCount",
            "UndefinedAtomStereoCount", "BondStereoCount", "DefinedBondStereoCount",
            "UndefinedBondStereoCount", "CovalentUnitCount", "Volume3D", "XStericQuadrupole3D",
            "YStericQuadrupole3D", "ZStericQuadrupole3D", "FeatureCount3D", "FeatureAcceptorCount3D",
            "FeatureDonorCount3D", "FeatureAnionCount3D", "FeatureCationCount3D", "FeatureRingCount3D",
            "FeatureHydrophobeCount3D", "ConformerModelRMSD3D", "EffectiveRotorCount3D",
            "ConformerCount3D", "Fingerprint2D"
        ]

    urls = {}
    for property_name in properties:
        urls[property_name] = compound_inchi_conversion(*compound_inchis, record_type=f"property/{property_name}/txt")

    return urls

    for property_name, urls in inchi_property_urls.items():
       print(f"{property_name} URLs:", urls)

def compound_formula_to_Title(*compound_formulas):
    """Retrieve Title property URLs for given compound formulas."""
    return compound_formula_conversion(*compound_formulas, record_type="property/Title/txt")

def compound_formula_to_MolecularFormula(*compound_formulas):
    """Retrieve MolecularFormula property URLs for given compound formulas."""
    return compound_formula_conversion(*compound_formulas, record_type="property/MolecularFormula/txt")

def compound_formula_to_MolecularWeight(*compound_formulas):
    """Retrieve MolecularWeight property URLs for given compound formulas."""
    return compound_formula_conversion(*compound_formulas, record_type="property/MolecularWeight/txt")

def compound_formula_to_CanonicalSMILES(*compound_formulas):
    """Retrieve CanonicalSMILES property URLs for given compound formulas."""
    return compound_formula_conversion(*compound_formulas, record_type="property/CanonicalSMILES/txt")

def compound_formula_to_IsomericSMILES(*compound_formulas):
    """Retrieve IsomericSMILES property URLs for given compound formulas."""
    return compound_formula_conversion(*compound_formulas, record_type="property/IsomericSMILES/txt")

def compound_formula_to_InChI(*compound_formulas):
    """Retrieve InChI property URLs for given compound formulas."""
    return compound_formula_conversion(*compound_formulas, record_type="property/InChI/txt")

def compound_formula_to_InChIKey(*compound_formulas):
    """Retrieve InChIKey property URLs for given compound formulas."""
    return compound_formula_conversion(*compound_formulas, record_type="property/InChIKey/txt")

def compound_formula_to_IUPACName(*compound_formulas):
    """Retrieve IUPACName property URLs for given compound formulas."""
    return compound_formula_conversion(*compound_formulas, record_type="property/IUPACName/txt")

def compound_formula_to_XLogP(*compound_formulas):
    """Retrieve XLogP property URLs for given compound formulas."""
    return compound_formula_conversion(*compound_formulas, record_type="property/XLogP/txt")

def compound_formula_to_ExactMass(*compound_formulas):
    """Retrieve ExactMass property URLs for given compound formulas."""
    return compound_formula_conversion(*compound_formulas, record_type="property/ExactMass/txt")

def compound_formula_to_MonoisotopicMass(*compound_formulas):
    """Retrieve MonoisotopicMass property URLs for given compound formulas."""
    return compound_formula_conversion(*compound_formulas, record_type="property/MonoisotopicMass/txt")

def compound_formula_to_TPSA(*compound_formulas):
    """Retrieve TPSA property URLs for given compound formulas."""
    return compound_formula_conversion(*compound_formulas, record_type="property/TPSA/txt")

def compound_formula_to_Complexity(*compound_formulas):
    """Retrieve Complexity property URLs for given compound formulas."""
    return compound_formula_conversion(*compound_formulas, record_type="property/Complexity/txt")

def compound_formula_to_Charge(*compound_formulas):
    """Retrieve Charge property URLs for given compound formulas."""
    return compound_formula_conversion(*compound_formulas, record_type="property/Charge/txt")

def compound_formula_to_HBondDonorCount(*compound_formulas):
    """Retrieve HBondDonorCount property URLs for given compound formulas."""
    return compound_formula_conversion(*compound_formulas, record_type="property/HBondDonorCount/txt")

def compound_formula_to_HBondAcceptorCount(*compound_formulas):
    """Retrieve HBondAcceptorCount property URLs for given compound formulas."""
    return compound_formula_conversion(*compound_formulas, record_type="property/HBondAcceptorCount/txt")

def compound_formula_to_RotatableBondCount(*compound_formulas):
    """Retrieve RotatableBondCount property URLs for given compound formulas."""
    return compound_formula_conversion(*compound_formulas, record_type="property/RotatableBondCount/txt")

def compound_formula_to_HeavyAtomCount(*compound_formulas):
    """Retrieve HeavyAtomCount property URLs for given compound formulas."""
    return compound_formula_conversion(*compound_formulas, record_type="property/HeavyAtomCount/txt")

def compound_formula_to_IsotopeAtomCount(*compound_formulas):
    """Retrieve IsotopeAtomCount property URLs for given compound formulas."""
    return compound_formula_conversion(*compound_formulas, record_type="property/IsotopeAtomCount/txt")

def compound_formula_to_AtomStereoCount(*compound_formulas):
    """Retrieve AtomStereoCount property URLs for given compound formulas."""
    return compound_formula_conversion(*compound_formulas, record_type="property/AtomStereoCount/txt")

def compound_formula_to_DefinedAtomStereoCount(*compound_formulas):
    """Retrieve DefinedAtomStereoCount property URLs for given compound formulas."""
    return compound_formula_conversion(*compound_formulas, record_type="property/DefinedAtomStereoCount/txt")

def compound_formula_to_UndefinedAtomStereoCount(*compound_formulas):
    """Retrieve UndefinedAtomStereoCount property URLs for given compound formulas."""
    return compound_formula_conversion(*compound_formulas, record_type="property/UndefinedAtomStereoCount/txt")

def compound_formula_to_BondStereoCount(*compound_formulas):
    """Retrieve BondStereoCount property URLs for given compound formulas."""
    return compound_formula_conversion(*compound_formulas, record_type="property/BondStereoCount/txt")

def compound_formula_to_DefinedBondStereoCount(*compound_formulas):
    """Retrieve DefinedBondStereoCount property URLs for given compound formulas."""
    return compound_formula_conversion(*compound_formulas, record_type="property/DefinedBondStereoCount/txt")

def compound_formula_to_UndefinedBondStereoCount(*compound_formulas):
    """Retrieve UndefinedBondStereoCount property URLs for given compound formulas."""
    return compound_formula_conversion(*compound_formulas, record_type="property/UndefinedBondStereoCount/txt")

def compound_formula_to_CovalentUnitCount(*compound_formulas):
    """Retrieve CovalentUnitCount property URLs for given compound formulas."""
    return compound_formula_conversion(*compound_formulas, record_type="property/CovalentUnitCount/txt")

def compound_formula_to_Volume3D(*compound_formulas):
    """Retrieve Volume3D property URLs for given compound formulas."""
    return compound_formula_conversion(*compound_formulas, record_type="property/Volume3D/txt")

def compound_formula_to_XStericQuadrupole3D(*compound_formulas):
    """Retrieve XStericQuadrupole3D property URLs for given compound formulas."""
    return compound_formula_conversion(*compound_formulas, record_type="property/XStericQuadrupole3D/txt")

def compound_formula_to_YStericQuadrupole3D(*compound_formulas):
    """Retrieve YStericQuadrupole3D property URLs for given compound formulas."""
    return compound_formula_conversion(*compound_formulas, record_type="property/YStericQuadrupole3D/txt")

def compound_formula_to_ZStericQuadrupole3D(*compound_formulas):
    """Retrieve ZStericQuadrupole3D property URLs for given compound formulas."""
    return compound_formula_conversion(*compound_formulas, record_type="property/ZStericQuadrupole3D/txt")

def compound_formula_to_FeatureCount3D(*compound_formulas):
    """Retrieve FeatureCount3D property URLs for given compound formulas."""
    return compound_formula_conversion(*compound_formulas, record_type="property/FeatureCount3D/txt")

def compound_formula_to_FeatureAcceptorCount3D(*compound_formulas):
    """Retrieve FeatureAcceptorCount3D property URLs for given compound formulas."""
    return compound_formula_conversion(*compound_formulas, record_type="property/FeatureAcceptorCount3D/txt")

def compound_formula_to_FeatureDonorCount3D(*compound_formulas):
    """Retrieve FeatureDonorCount3D property URLs for given compound formulas."""
    return compound_formula_conversion(*compound_formulas, record_type="property/FeatureDonorCount3D/txt")

def compound_formula_to_FeatureAnionCount3D(*compound_formulas):
    """Retrieve FeatureAnionCount3D property URLs for given compound formulas."""
    return compound_formula_conversion(*compound_formulas, record_type="property/FeatureAnionCount3D/txt")

def compound_formula_to_FeatureCationCount3D(*compound_formulas):
    """Retrieve FeatureCationCount3D property URLs for given compound formulas."""
    return compound_formula_conversion(*compound_formulas, record_type="property/FeatureCationCount3D/txt")

def compound_formula_to_FeatureRingCount3D(*compound_formulas):
    """Retrieve FeatureRingCount3D property URLs for given compound formulas."""
    return compound_formula_conversion(*compound_formulas, record_type="property/FeatureRingCount3D/txt")

def compound_formula_to_FeatureHydrophobeCount3D(*compound_formulas):
    """Retrieve FeatureHydrophobeCount3D property URLs for given compound formulas."""
    return compound_formula_conversion(*compound_formulas, record_type="property/FeatureHydrophobeCount3D/txt")

def compound_formula_to_ConformerModelRMSD3D(*compound_formulas):
    """Retrieve ConformerModelRMSD3D property URLs for given compound formulas."""
    return compound_formula_conversion(*compound_formulas, record_type="property/ConformerModelRMSD3D/txt")

def compound_formula_to_EffectiveRotorCount3D(*compound_formulas):
    """Retrieve EffectiveRotorCount3D property URLs for given compound formulas."""
    return compound_formula_conversion(*compound_formulas, record_type="property/EffectiveRotorCount3D/txt")

def compound_formula_to_ConformerCount3D(*compound_formulas):
    """Retrieve ConformerCount3D property URLs for given compound formulas."""
    return compound_formula_conversion(*compound_formulas, record_type="property/ConformerCount3D/txt")

def compound_formula_to_Fingerprint2D(*compound_formulas):
    """Retrieve Fingerprint2D property URLs for given compound formulas."""
    return compound_formula_conversion(*compound_formulas, record_type="property/Fingerprint2D/CSV")
def compound_inchi_to_Title(*compound_inchis):
    """Retrieve Title property URLs for given compound InChIs."""
    return compound_inchi_conversion(*compound_inchis, record_type="property/Title/txt")
def compound_inchi_conversion(*compound_inchis, record_type='record', output_format='JSON'):
    """
    Convert compound InChIs to PubChem URLs with a specified record type and output format.

    :param compound_inchis: Variable number of compound InChIs or lists of compound InChIs.
    :param record_type: Type of record to retrieve (default is 'record').
    :param output_format: Desired output format (default is 'JSON').
    :return: List of PubChem URLs.
    """
    compound_inchi_list = []
    for compound_inchi_arg in compound_inchis:
        if isinstance(compound_inchi_arg, str):
            compound_inchi_list.append(str(compound_inchi_arg))
        elif isinstance(compound_inchi_arg, list):
            for compound_inchi_item in compound_inchi_arg:
                compound_inchi_list.append(str(compound_inchi_item))
        else:
            for compound_inchi_item in compound_inchi_arg:
                compound_inchi_list.append(compound_inchi_item)

    urls = []
    for compound_inchi in compound_inchi_list:
        compound_inchi_str = str(compound_inchi)
        url = f"https://pubchem.ncbi.nlm.nih.gov/rest/pug/compound/inchi/cids/{output_format}?inchi={compound_inchi_str}"
        print(f"URL: {url}")
        response = requests.post(url)
        urls.append(response.text)

    return urls

def compound_inchi_to_synonym(*compound_inchis):
    """Retrieve synonym URLs for given compound InChIs."""
    return compound_inchi_conversion(*compound_inchis, record_type='synonyms/txt')

def compound_inchi_to_record(*compound_inchis):
    """Retrieve record URLs for given compound InChIs."""
    return compound_inchi_conversion(*compound_inchis, record_type='record/xml')

def compound_inchi_to_property(*compound_inchis):
    """Retrieve property URLs for given compound InChIs."""
    return compound_inchi_conversion(*compound_inchis, record_type="property/Title,MolecularFormula,MolecularWeight,CanonicalSMILES,IsomericSMILES,InChI,InChIKey,IUPACName,XLogP,ExactMass,MonoisotopicMass,TPSA,Complexity,Charge,HBondDonorCount,HBondAcceptorCount,RotatableBondCount,HeavyAtomCount,IsotopeAtomCount,AtomStereoCount,DefinedAtomStereoCount,UndefinedAtomStereoCount,BondStereoCount,DefinedBondStereoCount,UndefinedBondStereoCount,CovalentUnitCount,Volume3D,XStericQuadrupole3D,YStericQuadrupole3D,ZStericQuadrupole3D,FeatureCount3D,FeatureAcceptorCount3D,FeatureDonorCount3D,FeatureAnionCount3D,FeatureCationCount3D,FeatureRingCount3D,FeatureHydrophobeCount3D,ConformerModelRMSD3D,EffectiveRotorCount3D,ConformerCount3D,Fingerprint2D/CSV")

def compound_inchi_to_aid(*compound_inchis):
    """Retrieve AID URLs for given compound InChIs."""
    return compound_inchi_conversion(*compound_inchis, record_type='aids/txt')

def compound_inchi_to_assaysummary(*compound_inchis):
    """Retrieve assaysummary URLs for given compound InChIs."""
    return compound_inchi_conversion(*compound_inchis, record_type='assaysummary/xml')

def compound_inchi_to_classification(*compound_inchis):
    """Retrieve classification URLs for given compound InChIs."""
    return compound_inchi_conversion(*compound_inchis, record_type='classification/xml')

def compound_inchi_to_description(*compound_inchis):
    """Retrieve description URLs for given compound InChIs."""
    return compound_inchi_conversion(*compound_inchis, record_type='description/xml')

def compound_inchi_to_sid(*compound_inchis):
    """Retrieve SID URLs for given compound InChIs."""
    return compound_inchi_conversion(*compound_inchis, record_type='sids/txt')

def compound_inchi_to_cid(*compound_inchis):
    """Retrieve CID URLs for given compound InChIs."""
    return compound_inchi_conversion(*compound_inchis, record_type='cid/txt')

def compound_inchi_to_conformer(*compound_inchis):
    """Retrieve conformer URLs for given compound InChIs."""
    return compound_inchi_conversion(*compound_inchis, record_type='conformers/xml')

def compound_inchi_to_png(*compound_inchis):
    """Retrieve PNG URLs for given compound InChIs."""
    return compound_inchi_conversion(*compound_inchis, record_type='png')

def compound_inchi_to_2d_png(*compound_inchis):
    """Retrieve 2D PNG URLs for given compound InChIs."""
    return compound_inchi_conversion(*compound_inchis, record_type='png?record_type=2d')

def compound_inchi_to_3d_png(*compound_inchis):
    """Retrieve 3D PNG URLs for given compound InChIs."""
    return compound_inchi_conversion(*compound_inchis, record_type='png?record_type=3d')

def compound_inchi_to_active_aid(*compound_inchis):
    """Retrieve active AID URLs for given compound InChIs."""
    return compound_inchi_conversion(*compound_inchis, record_type='aids/txt?aids_type=active')

def compound_inchi_to_inactive_aid(*compound_inchis):
    """Retrieve inactive AID URLs for given compound InChIs."""
    return compound_inchi_conversion(*compound_inchis, record_type='aids/txt?aids_type=inactive')

def compound_inchi_to_all_aid(*compound_inchis):
    """Retrieve all AID URLs for given compound InChIs."""
    return compound_inchi_conversion(*compound_inchis, record_type='aids')

def compound_inchi_to_same_isotopes_cids(*compound_inchis):
    """Retrieve same isotopes CID URLs for given compound InChIs."""
    return compound_inchi_conversion(*compound_inchis, record_type='cids?cids_type=same_isotopes')

def compound_inchi_to_same_connectivity_cids(*compound_inchis):
    """Retrieve same connectivity CID URLs for given compound InChIs."""
    return compound_inchi_conversion(*compound_inchis, record_type='cids?cids_type=same_connectivity')

def compound_inchi_to_same_tautomer_cids(*compound_inchis):
    """Retrieve same tautomer CID URLs for given compound InChIs."""
    return compound_inchi_conversion(*compound_inchis, record_type='cids/txt?cids_type=same_tautomer')

def compound_inchi_to_same_parent_cids(*compound_inchis):
    """Retrieve same parent CID URLs for given compound InChIs."""
    return compound_inchi_conversion(*compound_inchis, record_type='cids/txt?cids_type=same_parent')

def compound_inchi_to_same_parent_stereo_cids(*compound_inchis):
    """Retrieve same parent stereo CID URLs for given compound InChIs."""
    return compound_inchi_conversion(*compound_inchis, record_type='cids/txt?cids_type=same_parent_stereo')

def compound_inchi_to_same_parent_isotopes_cids(*compound_inchis):
    """Retrieve same parent isotopes CID URLs for given compound InChIs."""
    return compound_inchi_conversion(*compound_inchis, record_type='cids/txt?cids_type=same_parent_isotopes')

def compound_inchi_to_same_parent_connectivity_cids(*compound_inchis):
    """Retrieve same parent connectivity CID URLs for given compound InChIs."""
    return compound_inchi_conversion(*compound_inchis, record_type='cids/txt?cids_type=same_parent_connectivity')

def compound_inchi_to_same_parent_tautomer_cids(*compound_inchis):
    """Retrieve same parent tautomer CID URLs for given compound InChIs."""
    return compound_inchi_conversion(*compound_inchis, record_type='cids/txt?cids_type=same_parent_tautomer')

def compound_inchi_to_original_cids(*compound_inchis):
    """Retrieve original CID URLs for given compound InChIs."""
    return compound_inchi_conversion(*compound_inchis, record_type='cids/txt?cids_type=original')

def compound_inchi_to_parent_cids(*compound_inchis):
    """Retrieve parent CID URLs for given compound InChIs."""
    return compound_inchi_conversion(*compound_inchis, record_type='cids/txt?cids_type=parent')

def compound_inchi_to_component_cids(*compound_inchis):
    """Retrieve component CID URLs for given compound InChIs."""
    return compound_inchi_conversion(*compound_inchis, record_type='cids/txt?cids_type=component')

def compound_inchi_to_preferred_cids(*compound_inchis):
    """Retrieve preferred CID URLs for given compound InChIs."""
    return compound_inchi_conversion(*compound_inchis, record_type='cids/txt?cids_type=preferred')

def compound_inchi_to_similar_2d_cids(*compound_inchis):
    """Retrieve similar 2D CID URLs for given compound InChIs."""
    return compound_inchi_conversion(*compound_inchis, record_type='cids/txt?cids_type=similar_2d')

def compound_inchi_to_similar_3d_cids(*compound_inchis):
    """Retrieve similar 3D CID URLs for given compound InChIs."""
    return compound_inchi_conversion(*compound_inchis, record_type='cids/txt?cids_type=similar_3d')

def compound_inchi_to_same_stereo_cids(*compound_inchis):
    """Retrieve same stereo CID URLs for given compound InChIs."""
    return compound_inchi_conversion(*compound_inchis, record_type='cids/txt?cids_type=same_stereo')

"""**inchikey**"""
def compound_inchikey_to_mutliple_property(*compound_inchikeys, properties=None):
    """
    Retrieve property URLs for given compound InChIKeys.

    :param compound_inchikeys: Variable number of compound InChIKeys or lists of compound InChIKeys.
    :param properties: List of properties to retrieve (default is None, retrieves all properties).
    :return: Dictionary of property names and corresponding lists of PubChem URLs.
    """
    if properties is None:
        properties = [
            "Title", "MolecularFormula", "MolecularWeight", "CanonicalSMILES", "IsomericSMILES",
            "InChI", "InChIKey", "IUPACName", "XLogP", "ExactMass", "MonoisotopicMass", "TPSA",
            "Complexity", "Charge", "HBondDonorCount", "HBondAcceptorCount", "RotatableBondCount",
            "HeavyAtomCount", "IsotopeAtomCount", "AtomStereoCount", "DefinedAtomStereoCount",
            "UndefinedAtomStereoCount", "BondStereoCount", "DefinedBondStereoCount",
            "UndefinedBondStereoCount", "CovalentUnitCount", "Volume3D", "XStericQuadrupole3D",
            "YStericQuadrupole3D", "ZStericQuadrupole3D", "FeatureCount3D", "FeatureAcceptorCount3D",
            "FeatureDonorCount3D", "FeatureAnionCount3D", "FeatureCationCount3D", "FeatureRingCount3D",
            "FeatureHydrophobeCount3D", "ConformerModelRMSD3D", "EffectiveRotorCount3D",
            "ConformerCount3D", "Fingerprint2D"
        ]

    urls = {}
    for property_name in properties:
        urls[property_name] = compound_inchikey_conversion(*compound_inchikeys, record_type=f"property/{property_name}/txt")

    return urls


def compound_inchikey_conversion(*compound_inchikeys, record_type='record'):
    """
    Convert compound InChIKeys to PubChem URLs with a specified record type.

    :param compound_inchikeys: Variable number of compound InChIKeys or lists of compound InChIKeys.
    :param record_type: Type of record to retrieve (default is 'record').
    :return: List of PubChem URLs.
    """
    compound_inchikey_list = []
    for compound_inchikey_arg in compound_inchikeys:
        if isinstance(compound_inchikey_arg, str):
            compound_inchikey_list.append(str(compound_inchikey_arg))
        elif isinstance(compound_inchikey_arg, list):
            for compound_inchikey_item in compound_inchikey_arg:
                compound_inchikey_list.append(str(compound_inchikey_item))
        else:
            for compound_inchikey_item in compound_inchikey_arg:
                compound_inchikey_list.append(compound_inchikey_item)

    urls = []
    for compound_inchikey in compound_inchikey_list:
        compound_inchikey_str = str(compound_inchikey)
        plugin = f"compound/inchikey/{compound_inchikey_str}"
        url = f"https://pubchem.ncbi.nlm.nih.gov/rest/pug/{plugin}/{record_type}"
        urls.append(url)

    return urls
def compound_inchi_to_MolecularFormula(*compound_inchis):
    """Retrieve MolecularFormula property URLs for given compound InChIs."""
    return compound_inchi_conversion(*compound_inchis, record_type="property/MolecularFormula/txt")

def compound_inchi_to_MolecularWeight(*compound_inchis):
    """Retrieve MolecularWeight property URLs for given compound InChIs."""
    return compound_inchi_conversion(*compound_inchis, record_type="property/MolecularWeight/txt")

def compound_inchi_to_CanonicalSMILES(*compound_inchis):
    """Retrieve CanonicalSMILES property URLs for given compound InChIs."""
    return compound_inchi_conversion(*compound_inchis, record_type="property/CanonicalSMILES/txt")

def compound_inchi_to_IsomericSMILES(*compound_inchis):
    """Retrieve IsomericSMILES property URLs for given compound InChIs."""
    return compound_inchi_conversion(*compound_inchis, record_type="property/IsomericSMILES/txt")

def compound_inchi_to_InChI(*compound_inchis):
    """Retrieve InChI property URLs for given compound InChIs."""
    return compound_inchi_conversion(*compound_inchis, record_type="property/InChI/txt")

def compound_inchi_to_InChIKey(*compound_inchis):
    """Retrieve InChIKey property URLs for given compound InChIs."""
    return compound_inchi_conversion(*compound_inchis, record_type="property/InChIKey/txt")

def compound_inchi_to_IUPACName(*compound_inchis):
    """Retrieve IUPACName property URLs for given compound InChIs."""
    return compound_inchi_conversion(*compound_inchis, record_type="property/IUPACName/txt")

def compound_inchi_to_XLogP(*compound_inchis):
    """Retrieve XLogP property URLs for given compound InChIs."""
    return compound_inchi_conversion(*compound_inchis, record_type="property/XLogP/txt")

def compound_inchi_to_ExactMass(*compound_inchis):
    """Retrieve ExactMass property URLs for given compound InChIs."""
    return compound_inchi_conversion(*compound_inchis, record_type="property/ExactMass/txt")

def compound_inchi_to_MonoisotopicMass(*compound_inchis):
    """Retrieve MonoisotopicMass property URLs for given compound InChIs."""
    return compound_inchi_conversion(*compound_inchis, record_type="property/MonoisotopicMass/txt")

def compound_inchi_to_TPSA(*compound_inchis):
    """Retrieve TPSA property URLs for given compound InChIs."""
    return compound_inchi_conversion(*compound_inchis, record_type="property/TPSA/txt")

def compound_inchi_to_Complexity(*compound_inchis):
    """Retrieve Complexity property URLs for given compound InChIs."""
    return compound_inchi_conversion(*compound_inchis, record_type="property/Complexity/txt")

def compound_inchi_to_Charge(*compound_inchis):
    """Retrieve Charge property URLs for given compound InChIs."""
    return compound_inchi_conversion(*compound_inchis, record_type="property/Charge/txt")

def compound_inchi_to_HBondDonorCount(*compound_inchis):
    """Retrieve HBondDonorCount property URLs for given compound InChIs."""
    return compound_inchi_conversion(*compound_inchis, record_type="property/HBondDonorCount/txt")

def compound_inchi_to_HBondAcceptorCount(*compound_inchis):
    """Retrieve HBondAcceptorCount property URLs for given compound InChIs."""
    return compound_inchi_conversion(*compound_inchis, record_type="property/HBondAcceptorCount/txt")

def compound_inchi_to_RotatableBondCount(*compound_inchis):
    """Retrieve RotatableBondCount property URLs for given compound InChIs."""
    return compound_inchi_conversion(*compound_inchis, record_type="property/RotatableBondCount/txt")

def compound_inchi_to_HeavyAtomCount(*compound_inchis):
    """Retrieve HeavyAtomCount property URLs for given compound InChIs."""
    return compound_inchi_conversion(*compound_inchis, record_type="property/HeavyAtomCount/txt")

def compound_inchi_to_IsotopeAtomCount(*compound_inchis):
    """Retrieve IsotopeAtomCount property URLs for given compound InChIs."""
    return compound_inchi_conversion(*compound_inchis, record_type="property/IsotopeAtomCount/txt")

def compound_inchi_to_AtomStereoCount(*compound_inchis):
    """Retrieve AtomStereoCount property URLs for given compound InChIs."""
    return compound_inchi_conversion(*compound_inchis, record_type="property/AtomStereoCount/txt")

def compound_inchi_to_DefinedAtomStereoCount(*compound_inchis):
    """Retrieve DefinedAtomStereoCount property URLs for given compound InChIs."""
    return compound_inchi_conversion(*compound_inchis, record_type="property/DefinedAtomStereoCount/txt")

def compound_inchi_to_UndefinedAtomStereoCount(*compound_inchis):
    """Retrieve UndefinedAtomStereoCount property URLs for given compound InChIs."""
    return compound_inchi_conversion(*compound_inchis, record_type="property/UndefinedAtomStereoCount/txt")

def compound_inchi_to_BondStereoCount(*compound_inchis):
    """Retrieve BondStereoCount property URLs for given compound InChIs."""
    return compound_inchi_conversion(*compound_inchis, record_type="property/BondStereoCount/txt")

def compound_inchi_to_DefinedBondStereoCount(*compound_inchis):
    """Retrieve DefinedBondStereoCount property URLs for given compound InChIs."""
    return compound_inchi_conversion(*compound_inchis, record_type="property/DefinedBondStereoCount/txt")

def compound_inchi_to_UndefinedBondStereoCount(*compound_inchis):
    """Retrieve UndefinedBondStereoCount property URLs for given compound InChIs."""
    return compound_inchi_conversion(*compound_inchis, record_type="property/UndefinedBondStereoCount/txt")

def compound_inchi_to_CovalentUnitCount(*compound_inchis):
    """Retrieve CovalentUnitCount property URLs for given compound InChIs."""
    return compound_inchi_conversion(*compound_inchis, record_type="property/CovalentUnitCount/txt")

def compound_inchi_to_Volume3D(*compound_inchis):
    """Retrieve Volume3D property URLs for given compound InChIs."""
    return compound_inchi_conversion(*compound_inchis, record_type="property/Volume3D/txt")

def compound_inchi_to_XStericQuadrupole3D(*compound_inchis):
    """Retrieve XStericQuadrupole3D property URLs for given compound InChIs."""
    return compound_inchi_conversion(*compound_inchis, record_type="property/XStericQuadrupole3D/txt")

def compound_inchi_to_YStericQuadrupole3D(*compound_inchis):
    """Retrieve YStericQuadrupole3D property URLs for given compound InChIs."""
    return compound_inchi_conversion(*compound_inchis, record_type="property/YStericQuadrupole3D/txt")

def compound_inchi_to_ZStericQuadrupole3D(*compound_inchis):
    """Retrieve ZStericQuadrupole3D property URLs for given compound InChIs."""
    return compound_inchi_conversion(*compound_inchis, record_type="property/ZStericQuadrupole3D/txt")

def compound_inchi_to_FeatureCount3D(*compound_inchis):
    """Retrieve FeatureCount3D property URLs for given compound InChIs."""
    return compound_inchi_conversion(*compound_inchis, record_type="property/FeatureCount3D/txt")

def compound_inchi_to_FeatureAcceptorCount3D(*compound_inchis):
    """Retrieve FeatureAcceptorCount3D property URLs for given compound InChIs."""
    return compound_inchi_conversion(*compound_inchis, record_type="property/FeatureAcceptorCount3D/txt")

def compound_inchi_to_FeatureDonorCount3D(*compound_inchis):
    """Retrieve FeatureDonorCount3D property URLs for given compound InChIs."""
    return compound_inchi_conversion(*compound_inchis, record_type="property/FeatureDonorCount3D/txt")

def compound_inchi_to_FeatureAnionCount3D(*compound_inchis):
    """Retrieve FeatureAnionCount3D property URLs for given compound InChIs."""
    return compound_inchi_conversion(*compound_inchis, record_type="property/FeatureAnionCount3D/txt")

def compound_inchi_to_FeatureCationCount3D(*compound_inchis):
    """Retrieve FeatureCationCount3D property URLs for given compound InChIs."""
    return compound_inchi_conversion(*compound_inchis, record_type="property/FeatureCationCount3D/txt")

def compound_inchi_to_FeatureRingCount3D(*compound_inchis):
    """Retrieve FeatureRingCount3D property URLs for given compound InChIs."""
    return compound_inchi_conversion(*compound_inchis, record_type="property/FeatureRingCount3D/txt")

def compound_inchi_to_FeatureHydrophobeCount3D(*compound_inchis):
    """Retrieve FeatureHydrophobeCount3D property URLs for given compound InChIs."""
    return compound_inchi_conversion(*compound_inchis, record_type="property/FeatureHydrophobeCount3D/txt")

def compound_inchi_to_ConformerModelRMSD3D(*compound_inchis):
    """Retrieve ConformerModelRMSD3D property URLs for given compound InChIs."""
    return compound_inchi_conversion(*compound_inchis, record_type="property/ConformerModelRMSD3D/txt")

def compound_inchi_to_EffectiveRotorCount3D(*compound_inchis):
    """Retrieve EffectiveRotorCount3D property URLs for given compound InChIs."""
    return compound_inchi_conversion(*compound_inchis, record_type="property/EffectiveRotorCount3D/txt")

def compound_inchi_to_ConformerCount3D(*compound_inchis):
    """Retrieve ConformerCount3D property URLs for given compound InChIs."""
    return compound_inchi_conversion(*compound_inchis, record_type="property/ConformerCount3D/txt")

def compound_inchi_to_Fingerprint2D(*compound_inchis):
    """Retrieve Fingerprint2D property URLs for given compound InChIs."""
    return compound_inchi_conversion(*compound_inchis, record_type="property/Fingerprint2D/CSV")

def compound_inchikey_to_Title(*compound_inchikeys):
    """Retrieve Title property URLs for given compound InChIKeys."""
    return compound_inchikey_conversion(*compound_inchikeys, record_type="property/Title/txt")

def compound_inchikey_to_MolecularFormula(*compound_inchikeys):
    """Retrieve MolecularFormula property URLs for given compound InChIKeys."""
    return compound_inchikey_conversion(*compound_inchikeys, record_type="property/MolecularFormula/txt")

def compound_inchikey_to_MolecularWeight(*compound_inchikeys):
    """Retrieve MolecularWeight property URLs for given compound InChIKeys."""
    return compound_inchikey_conversion(*compound_inchikeys, record_type="property/MolecularWeight/txt")

def compound_inchikey_to_CanonicalSMILES(*compound_inchikeys):
    """Retrieve CanonicalSMILES property URLs for given compound InChIKeys."""
    return compound_inchikey_conversion(*compound_inchikeys, record_type="property/CanonicalSMILES/txt")

def compound_inchikey_to_IsomericSMILES(*compound_inchikeys):
    """Retrieve IsomericSMILES property URLs for given compound InChIKeys."""
    return compound_inchikey_conversion(*compound_inchikeys, record_type="property/IsomericSMILES/txt")

def compound_inchikey_to_InChI(*compound_inchikeys):
    """Retrieve InChI property URLs for given compound InChIKeys."""
    return compound_inchikey_conversion(*compound_inchikeys, record_type="property/InChI/txt")

def compound_inchikey_to_InChIKey(*compound_inchikeys):
    """Retrieve InChIKey property URLs for given compound InChIKeys."""
    return compound_inchikey_conversion(*compound_inchikeys, record_type="property/InChIKey/txt")

def compound_inchikey_to_IUPACName(*compound_inchikeys):
    """Retrieve IUPACName property URLs for given compound InChIKeys."""
    return compound_inchikey_conversion(*compound_inchikeys, record_type="property/IUPACName/txt")

def compound_inchikey_to_XLogP(*compound_inchikeys):
    """Retrieve XLogP property URLs for given compound InChIKeys."""
    return compound_inchikey_conversion(*compound_inchikeys, record_type="property/XLogP/txt")

def compound_inchikey_to_ExactMass(*compound_inchikeys):
    """Retrieve ExactMass property URLs for given compound InChIKeys."""
    return compound_inchikey_conversion(*compound_inchikeys, record_type="property/ExactMass/txt")

def compound_inchikey_to_MonoisotopicMass(*compound_inchikeys):
    """Retrieve MonoisotopicMass property URLs for given compound InChIKeys."""
    return compound_inchikey_conversion(*compound_inchikeys, record_type="property/MonoisotopicMass/txt")

def compound_inchikey_to_TPSA(*compound_inchikeys):
    """Retrieve TPSA property URLs for given compound InChIKeys."""
    return compound_inchikey_conversion(*compound_inchikeys, record_type="property/TPSA/txt")

def compound_inchikey_to_Complexity(*compound_inchikeys):
    """Retrieve Complexity property URLs for given compound InChIKeys."""
    return compound_inchikey_conversion(*compound_inchikeys, record_type="property/Complexity/txt")

def compound_inchikey_to_Charge(*compound_inchikeys):
    """Retrieve Charge property URLs for given compound InChIKeys."""
    return compound_inchikey_conversion(*compound_inchikeys, record_type="property/Charge/txt")

def compound_inchikey_to_HBondDonorCount(*compound_inchikeys):
    """Retrieve HBondDonorCount property URLs for given compound InChIKeys."""
    return compound_inchikey_conversion(*compound_inchikeys, record_type="property/HBondDonorCount/txt")

def compound_inchikey_to_HBondAcceptorCount(*compound_inchikeys):
    """Retrieve HBondAcceptorCount property URLs for given compound InChIKeys."""
    return compound_inchikey_conversion(*compound_inchikeys, record_type="property/HBondAcceptorCount/txt")

def compound_inchikey_to_RotatableBondCount(*compound_inchikeys):
    """Retrieve RotatableBondCount property URLs for given compound InChIKeys."""
    return compound_inchikey_conversion(*compound_inchikeys, record_type="property/RotatableBondCount/txt")

def compound_inchikey_to_HeavyAtomCount(*compound_inchikeys):
    """Retrieve HeavyAtomCount property URLs for given compound InChIKeys."""
    return compound_inchikey_conversion(*compound_inchikeys, record_type="property/HeavyAtomCount/txt")

def compound_inchikey_to_IsotopeAtomCount(*compound_inchikeys):
    """Retrieve IsotopeAtomCount property URLs for given compound InChIKeys."""
    return compound_inchikey_conversion(*compound_inchikeys, record_type="property/IsotopeAtomCount/txt")

def compound_inchikey_to_AtomStereoCount(*compound_inchikeys):
    """Retrieve AtomStereoCount property URLs for given compound InChIKeys."""
    return compound_inchikey_conversion(*compound_inchikeys, record_type="property/AtomStereoCount/txt")

def compound_inchikey_to_DefinedAtomStereoCount(*compound_inchikeys):
    """Retrieve DefinedAtomStereoCount property URLs for given compound InChIKeys."""
    return compound_inchikey_conversion(*compound_inchikeys, record_type="property/DefinedAtomStereoCount/txt")

def compound_inchikey_to_UndefinedAtomStereoCount(*compound_inchikeys):
    """Retrieve UndefinedAtomStereoCount property URLs for given compound InChIKeys."""
    return compound_inchikey_conversion(*compound_inchikeys, record_type="property/UndefinedAtomStereoCount/txt")

def compound_inchikey_to_BondStereoCount(*compound_inchikeys):
    """Retrieve BondStereoCount property URLs for given compound InChIKeys."""
    return compound_inchikey_conversion(*compound_inchikeys, record_type="property/BondStereoCount/txt")

def compound_inchikey_to_DefinedBondStereoCount(*compound_inchikeys):
    """Retrieve DefinedBondStereoCount property URLs for given compound InChIKeys."""
    return compound_inchikey_conversion(*compound_inchikeys, record_type="property/DefinedBondStereoCount/txt")

def compound_inchikey_to_UndefinedBondStereoCount(*compound_inchikeys):
    """Retrieve UndefinedBondStereoCount property URLs for given compound InChIKeys."""
    return compound_inchikey_conversion(*compound_inchikeys, record_type="property/UndefinedBondStereoCount/txt")

def compound_inchikey_to_CovalentUnitCount(*compound_inchikeys):
    """Retrieve CovalentUnitCount property URLs for given compound InChIKeys."""
    return compound_inchikey_conversion(*compound_inchikeys, record_type="property/CovalentUnitCount/txt")

def compound_inchikey_to_Volume3D(*compound_inchikeys):
    """Retrieve Volume3D property URLs for given compound InChIKeys."""
    return compound_inchikey_conversion(*compound_inchikeys, record_type="property/Volume3D/txt")

def compound_inchikey_to_XStericQuadrupole3D(*compound_inchikeys):
    """Retrieve XStericQuadrupole3D property URLs for given compound InChIKeys."""
    return compound_inchikey_conversion(*compound_inchikeys, record_type="property/XStericQuadrupole3D/txt")

def compound_inchikey_to_YStericQuadrupole3D(*compound_inchikeys):
    """Retrieve YStericQuadrupole3D property URLs for given compound InChIKeys."""
    return compound_inchikey_conversion(*compound_inchikeys, record_type="property/YStericQuadrupole3D/txt")

def compound_inchikey_to_ZStericQuadrupole3D(*compound_inchikeys):
    """Retrieve ZStericQuadrupole3D property URLs for given compound InChIKeys."""
    return compound_inchikey_conversion(*compound_inchikeys, record_type="property/ZStericQuadrupole3D/txt")

def compound_inchikey_to_FeatureCount3D(*compound_inchikeys):
    """Retrieve FeatureCount3D property URLs for given compound InChIKeys."""
    return compound_inchikey_conversion(*compound_inchikeys, record_type="property/FeatureCount3D/txt")

def compound_inchikey_to_FeatureAcceptorCount3D(*compound_inchikeys):
    """Retrieve FeatureAcceptorCount3D property URLs for given compound InChIKeys."""
    return compound_inchikey_conversion(*compound_inchikeys, record_type="property/FeatureAcceptorCount3D/txt")

def compound_inchikey_to_FeatureDonorCount3D(*compound_inchikeys):
    """Retrieve FeatureDonorCount3D property URLs for given compound InChIKeys."""
    return compound_inchikey_conversion(*compound_inchikeys, record_type="property/FeatureDonorCount3D/txt")

def compound_inchikey_to_FeatureAnionCount3D(*compound_inchikeys):
    """Retrieve FeatureAnionCount3D property URLs for given compound InChIKeys."""
    return compound_inchikey_conversion(*compound_inchikeys, record_type="property/FeatureAnionCount3D/txt")

def compound_inchikey_to_FeatureCationCount3D(*compound_inchikeys):
    """Retrieve FeatureCationCount3D property URLs for given compound InChIKeys."""
    return compound_inchikey_conversion(*compound_inchikeys, record_type="property/FeatureCationCount3D/txt")

def compound_inchikey_to_FeatureRingCount3D(*compound_inchikeys):
    """Retrieve FeatureRingCount3D property URLs for given compound InChIKeys."""
    return compound_inchikey_conversion(*compound_inchikeys, record_type="property/FeatureRingCount3D/txt")

def compound_inchikey_to_FeatureHydrophobeCount3D(*compound_inchikeys):
    """Retrieve FeatureHydrophobeCount3D property URLs for given compound InChIKeys."""
    return compound_inchikey_conversion(*compound_inchikeys, record_type="property/FeatureHydrophobeCount3D/txt")

def compound_inchikey_to_ConformerModelRMSD3D(*compound_inchikeys):
    """Retrieve ConformerModelRMSD3D property URLs for given compound InChIKeys."""
    return compound_inchikey_conversion(*compound_inchikeys, record_type="property/ConformerModelRMSD3D/txt")

def compound_inchikey_to_EffectiveRotorCount3D(*compound_inchikeys):
    """Retrieve EffectiveRotorCount3D property URLs for given compound InChIKeys."""
    return compound_inchikey_conversion(*compound_inchikeys, record_type="property/EffectiveRotorCount3D/txt")

def compound_inchikey_to_ConformerCount3D(*compound_inchikeys):
    """Retrieve ConformerCount3D property URLs for given compound InChIKeys."""
    return compound_inchikey_conversion(*compound_inchikeys, record_type="property/ConformerCount3D/txt")

def compound_inchikey_to_Fingerprint2D(*compound_inchikeys):
    """Retrieve Fingerprint2D property URLs for given compound InChIKeys."""
    return compound_inchikey_conversion(*compound_inchikeys, record_type="property/Fingerprint2D/CSV")


def compound_inchikey_to_synonym(*compound_inchikeys):
    """Retrieve synonym URLs for given compound InChIKeys."""
    return compound_inchikey_conversion(*compound_inchikeys, record_type='synonyms/txt')

def compound_inchikey_to_record(*compound_inchikeys):
    """Retrieve record URLs for given compound InChIKeys."""
    return compound_inchikey_conversion(*compound_inchikeys, record_type='record/xml')

def compound_inchikey_to_property(*compound_inchikeys):
    """Retrieve property URLs for given compound InChIKeys."""
    return compound_inchikey_conversion(*compound_inchikeys, record_type="property/Title,MolecularFormula,MolecularWeight,CanonicalSMILES,IsomericSMILES,InChI,InChIKey,IUPACName,XLogP,ExactMass,MonoisotopicMass,TPSA,Complexity,Charge,HBondDonorCount,HBondAcceptorCount,RotatableBondCount,HeavyAtomCount,IsotopeAtomCount,AtomStereoCount,DefinedAtomStereoCount,UndefinedAtomStereoCount,BondStereoCount,DefinedBondStereoCount,UndefinedBondStereoCount,CovalentUnitCount,Volume3D,XStericQuadrupole3D,YStericQuadrupole3D,ZStericQuadrupole3D,FeatureCount3D,FeatureAcceptorCount3D,FeatureDonorCount3D,FeatureAnionCount3D,FeatureCationCount3D,FeatureRingCount3D,FeatureHydrophobeCount3D,ConformerModelRMSD3D,EffectiveRotorCount3D,ConformerCount3D,Fingerprint2D/CSV")

def compound_inchikey_to_aid(*compound_inchikeys):
    """Retrieve AID URLs for given compound InChIKeys."""
    return compound_inchikey_conversion(*compound_inchikeys, record_type='aids/txt')

def compound_inchikey_to_assaysummary(*compound_inchikeys):
    """Retrieve assaysummary URLs for given compound InChIKeys."""
    return compound_inchikey_conversion(*compound_inchikeys, record_type='assaysummary/xml')

# Add more functions for other record types as needed
def compound_inchikey_to_classification(*compound_inchikeys):
    """Retrieve classification URLs for given compound InChIKeys."""
    return compound_inchikey_conversion(*compound_inchikeys, record_type='classification/xml')

def compound_inchikey_to_description(*compound_inchikeys):
    """Retrieve description URLs for given compound InChIKeys."""
    return compound_inchikey_conversion(*compound_inchikeys, record_type='description/xml')

def compound_inchikey_to_sid(*compound_inchikeys):
    """Retrieve SID URLs for given compound InChIKeys."""
    return compound_inchikey_conversion(*compound_inchikeys, record_type='sids/txt')

def compound_inchikey_to_cid(*compound_inchikeys):
    """Retrieve CID URLs for given compound InChIKeys."""
    return compound_inchikey_conversion(*compound_inchikeys, record_type='cid/txt')

def compound_inchikey_to_conformer(*compound_inchikeys):
    """Retrieve conformer URLs for given compound InChIKeys."""
    return compound_inchikey_conversion(*compound_inchikeys, record_type='conformers/xml')

def compound_inchikey_to_png(*compound_inchikeys):
    """Retrieve PNG URLs for given compound InChIKeys."""
    return compound_inchikey_conversion(*compound_inchikeys, record_type='png')

def compound_inchikey_to_2d_png(*compound_inchikeys):
    """Retrieve 2D PNG URLs for given compound InChIKeys."""
    return compound_inchikey_conversion(*compound_inchikeys, record_type='png?record_type=2d')

def compound_inchikey_to_3d_png(*compound_inchikeys):
    """Retrieve 3D PNG URLs for given compound InChIKeys."""
    return compound_inchikey_conversion(*compound_inchikeys, record_type='png?record_type=3d')

def compound_inchikey_to_active_aid(*compound_inchikeys):
    """Retrieve active AID URLs for given compound InChIKeys."""
    return compound_inchikey_conversion(*compound_inchikeys, record_type='aids/txt?aids_type=active')

def compound_inchikey_to_inactive_aid(*compound_inchikeys):
    """Retrieve inactive AID URLs for given compound InChIKeys."""
    return compound_inchikey_conversion(*compound_inchikeys, record_type='aids/txt?aids_type=inactive')

def compound_inchikey_to_all_aid(*compound_inchikeys):
    """Retrieve all AID URLs for given compound InChIKeys."""
    return compound_inchikey_conversion(*compound_inchikeys, record_type='aids')

def compound_inchikey_to_same_isotopes_cids(*compound_inchikeys):
    """Retrieve same isotopes CID URLs for given compound InChIKeys."""
    return compound_inchikey_conversion(*compound_inchikeys, record_type='cids/txt?cids_type=same_isotopes')

"""**fastsimilarity_2d**"""

def compound_fastsimilarity_2d_conversion(*compound_ids, record_type='record'):
    """
    Convert compound IDs to PubChem URLs with a specified record type using fast 2D similarity.

    :param compound_ids: Variable number of compound IDs or lists of compound IDs.
    :param record_type: Type of record to retrieve (default is 'record').
    :return: List of PubChem URLs.
    """
    compound_id_list = []
    for compound_id_arg in compound_ids:
        if isinstance(compound_id_arg, str):
            compound_id_list.append(str(compound_id_arg))
        elif isinstance(compound_id_arg, list):
            for compound_id_item in compound_id_arg:
                compound_id_list.append(str(compound_id_item))
        else:
            for compound_id_item in compound_id_arg:
                compound_id_list.append(compound_id_item)

    urls = []
    for compound_id in compound_id_list:
        compound_id_str = str(compound_id)
        plugin = f"compound/fastsimilarity_2d/cid/{compound_id_str}"
        url = f"https://pubchem.ncbi.nlm.nih.gov/rest/pug/{plugin}/{record_type}"
        urls.append(url)

    return urls

def compound_fastsimilarity_2d_to_synonym(*compound_ids):
    """Retrieve synonym URLs for given compound IDs."""
    return compound_fastsimilarity_2d_conversion(*compound_ids, record_type='synonyms/txt')

def compound_fastsimilarity_2d_to_record(*compound_ids):
    """Retrieve record URLs for given compound IDs."""
    return compound_fastsimilarity_2d_conversion(*compound_ids, record_type='record/xml')

def compound_fastsimilarity_2d_to_property(*compound_ids):
    """Retrieve property URLs for given compound IDs."""
    return compound_fastsimilarity_2d_conversion(*compound_ids, record_type="property/Title,MolecularFormula,MolecularWeight,CanonicalSMILES,IsomericSMILES,InChI,InChIKey,IUPACName,XLogP,ExactMass,MonoisotopicMass,TPSA,Complexity,Charge,HBondDonorCount,HBondAcceptorCount,RotatableBondCount,HeavyAtomCount,IsotopeAtomCount,AtomStereoCount,DefinedAtomStereoCount,UndefinedAtomStereoCount,BondStereoCount,DefinedBondStereoCount,UndefinedBondStereoCount,CovalentUnitCount,Volume3D,XStericQuadrupole3D,YStericQuadrupole3D,ZStericQuadrupole3D,FeatureCount3D,FeatureAcceptorCount3D,FeatureDonorCount3D,FeatureAnionCount3D,FeatureCationCount3D,FeatureRingCount3D,FeatureHydrophobeCount3D,ConformerModelRMSD3D,EffectiveRotorCount3D,ConformerCount3D,Fingerprint2D/CSV")

def compound_fastsimilarity_2d_to_aid(*compound_ids):
    """Retrieve AID URLs for given compound IDs."""
    return compound_fastsimilarity_2d_conversion(*compound_ids, record_type='aids/txt')
def compound_fastsimilarity_2d_to_assaysummary(*compound_ids):
    """Retrieve assaysummary URLs for given compound IDs."""
    return compound_fastsimilarity_2d_conversion(*compound_ids, record_type='assaysummary/xml')

def compound_fastsimilarity_2d_to_classification(*compound_ids):
    """Retrieve classification URLs for given compound IDs."""
    return compound_fastsimilarity_2d_conversion(*compound_ids, record_type='classification/xml')

def compound_fastsimilarity_2d_to_description(*compound_ids):
    """Retrieve description URLs for given compound IDs."""
    return compound_fastsimilarity_2d_conversion(*compound_ids, record_type='description/xml')

def compound_fastsimilarity_2d_to_sid(*compound_ids):
    """Retrieve SID URLs for given compound IDs."""
    return compound_fastsimilarity_2d_conversion(*compound_ids, record_type='sids/txt')

def compound_fastsimilarity_2d_to_cid(*compound_ids):
    """Retrieve CID URLs for given compound IDs."""
    return compound_fastsimilarity_2d_conversion(*compound_ids, record_type='cids/txt')

def compound_fastsimilarity_2d_to_conformer(*compound_ids):
    """Retrieve conformer URLs for given compound IDs."""
    return compound_fastsimilarity_2d_conversion(*compound_ids, record_type='conformers/xml')

def compound_fastsimilarity_2d_to_png(*compound_ids):
    """Retrieve PNG URLs for given compound IDs."""
    return compound_fastsimilarity_2d_conversion(*compound_ids, record_type='png')

def compound_fastsimilarity_2d_to_2d_png(*compound_ids):
    """Retrieve 2D PNG URLs for given compound IDs."""
    return compound_fastsimilarity_2d_conversion(*compound_ids, record_type='png?record_type=2d')

def compound_fastsimilarity_2d_to_3d_png(*compound_ids):
    """Retrieve 3D PNG URLs for given compound IDs."""
    return compound_fastsimilarity_2d_conversion(*compound_ids, record_type='png?record_type=3d')

def compound_fastsimilarity_2d_to_active_aid(*compound_ids):
    """Retrieve active AID URLs for given compound IDs."""
    return compound_fastsimilarity_2d_conversion(*compound_ids, record_type='aids?aids_type=active')

def compound_fastsimilarity_2d_to_inactive_aid(*compound_ids):
    """Retrieve inactive AID URLs for given compound IDs."""
    return compound_fastsimilarity_2d_conversion(*compound_ids, record_type='aids?aids_type=inactive')

def compound_fastsimilarity_2d_to_all_aid(*compound_ids):
    """Retrieve all AID URLs for given compound IDs."""
    return compound_fastsimilarity_2d_conversion(*compound_ids, record_type='aids')

def compound_fastsimilarity_2d_to_same_isotopes_cids(*compound_ids):
    """Retrieve same isotopes CID URLs for given compound IDs."""
    return compound_fastsimilarity_2d_conversion(*compound_ids, record_type='cids/txt?cids_type=same_isotopes')

def compound_fastsimilarity_2d_to_same_connectivity_cids(*compound_ids):
    """Retrieve same connectivity CID URLs for given compound IDs."""
    return compound_fastsimilarity_2d_conversion(*compound_ids, record_type='cids/txt?cids_type=same_connectivity')

def compound_fastsimilarity_2d_to_same_tautomer_cids(*compound_ids):
    """Retrieve same tautomer CID URLs for given compound IDs."""
    return compound_fastsimilarity_2d_conversion(*compound_ids, record_type='cids/txt?cids_type=same_tautomer')

def compound_fastsimilarity_2d_to_same_parent_cids(*compound_ids):
    """Retrieve same parent CID URLs for given compound IDs."""
    return compound_fastsimilarity_2d_conversion(*compound_ids, record_type='cids/txt?cids_type=same_parent')

def compound_fastsimilarity_2d_to_same_parent_stereo_cids(*compound_ids):
    """Retrieve same parent stereo CID URLs for given compound IDs."""
    return compound_fastsimilarity_2d_conversion(*compound_ids, record_type='cids/txt?cids_type=same_parent_stereo')

def compound_fastsimilarity_2d_to_same_parent_isotopes_cids(*compound_ids):
    """Retrieve same parent isotopes CID URLs for given compound IDs."""
    return compound_fastsimilarity_2d_conversion(*compound_ids, record_type='cids/txt?cids_type=same_parent_isotopes')

def compound_fastsimilarity_2d_to_same_parent_connectivity_cids(*compound_ids):
    """Retrieve same parent connectivity CID URLs for given compound IDs."""
    return compound_fastsimilarity_2d_conversion(*compound_ids, record_type='cids/txt?cids_type=same_parent_connectivity')

def compound_fastsimilarity_2d_to_same_parent_tautomer_cids(*compound_ids):
    """Retrieve same parent tautomer CID URLs for given compound IDs."""
    return compound_fastsimilarity_2d_conversion(*compound_ids, record_type='cids?cids_type=same_parent_tautomer')

def compound_fastsimilarity_2d_to_original_cids(*compound_ids):
    """Retrieve original CID URLs for given compound IDs."""
    return compound_fastsimilarity_2d_conversion(*compound_ids, record_type='cids/txt?cids_type=original')

def compound_fastsimilarity_2d_to_parent_cids(*compound_ids):
    """Retrieve parent CID URLs for given compound IDs."""
    return compound_fastsimilarity_2d_conversion(*compound_ids, record_type='cids/txt?cids_type=parent')

def compound_fastsimilarity_2d_to_component_cids(*compound_ids):
    """Retrieve component CID URLs for given compound IDs."""
    return compound_fastsimilarity_2d_conversion(*compound_ids, record_type='cids/txt?cids_type=component')

def compound_fastsimilarity_2d_to_preferred_cids(*compound_ids):
    """Retrieve preferred CID URLs for given compound IDs."""
    return compound_fastsimilarity_2d_conversion(*compound_ids, record_type='cids/txt?cids_type=preferred')

def compound_fastsimilarity_2d_to_similar_2d_cids(*compound_ids):
    """Retrieve similar 2D CID URLs for given compound IDs."""
    return compound_fastsimilarity_2d_conversion(*compound_ids, record_type='cids/txt?cids_type=similar_2d')

def compound_fastsimilarity_2d_to_similar_3d_cids(*compound_ids):
    """Retrieve similar 3D CID URLs for given compound IDs."""
    return compound_fastsimilarity_2d_conversion(*compound_ids, record_type='cids/txt?cids_type=similar_3d')

def compound_fastsimilarity_2d_to_same_stereo_cids(*compound_ids):
    """Retrieve same stereo CID URLs for given compound IDs."""
    return compound_fastsimilarity_2d_conversion(*compound_ids, record_type='cids/txt?cids_type=same_stereo')

"""**fastsimilarity_3d**"""

def compound_fastsimilarity_3d_conversion(*compound_ids, record_type='record'):
    """
    Convert compound IDs to PubChem URLs with a specified record type using fast 3D similarity.

    :param compound_ids: Variable number of compound IDs or lists of compound IDs.
    :param record_type: Type of record to retrieve (default is 'record').
    :return: List of PubChem URLs.
    """
    compound_id_list = []
    for compound_id_arg in compound_ids:
        if isinstance(compound_id_arg, str):
            compound_id_list.append(str(compound_id_arg))
        elif isinstance(compound_id_arg, list):
            for compound_id_item in compound_id_arg:
                compound_id_list.append(str(compound_id_item))
        else:
            for compound_id_item in compound_id_arg:
                compound_id_list.append(compound_id_item)

    urls = []
    for compound_id in compound_id_list:
        compound_id_str = str(compound_id)
        plugin = f"compound/fastsimilarity_3d/cid/{compound_id_str}"
        url = f"https://pubchem.ncbi.nlm.nih.gov/rest/pug/{plugin}/{record_type}"
        urls.append(url)

    return urls

def compound_fastsimilarity_3d_to_synonym(*compound_ids):
    """Retrieve synonym URLs for given compound IDs."""
    return compound_fastsimilarity_3d_conversion(*compound_ids, record_type='synonyms/txt')

def compound_fastsimilarity_3d_to_record(*compound_ids):
    """Retrieve record URLs for given compound IDs."""
    return compound_fastsimilarity_3d_conversion(*compound_ids, record_type='record/xml')

def compound_fastsimilarity_3d_to_property(*compound_ids):
    """Retrieve property URLs for given compound IDs."""
    return compound_fastsimilarity_3d_conversion(*compound_ids, record_type="property/Title,MolecularFormula,MolecularWeight,CanonicalSMILES,IsomericSMILES,InChI,InChIKey,IUPACName,XLogP,ExactMass,MonoisotopicMass,TPSA,Complexity,Charge,HBondDonorCount,HBondAcceptorCount,RotatableBondCount,HeavyAtomCount,IsotopeAtomCount,AtomStereoCount,DefinedAtomStereoCount,UndefinedAtomStereoCount,BondStereoCount,DefinedBondStereoCount,UndefinedBondStereoCount,CovalentUnitCount,Volume3D,XStericQuadrupole3D,YStericQuadrupole3D,ZStericQuadrupole3D,FeatureCount3D,FeatureAcceptorCount3D,FeatureDonorCount3D,FeatureAnionCount3D,FeatureCationCount3D,FeatureRingCount3D,FeatureHydrophobeCount3D,ConformerModelRMSD3D,EffectiveRotorCount3D,ConformerCount3D,Fingerprint3D/CSV")

def compound_fastsimilarity_3d_to_aid(*compound_ids):
    """Retrieve AID URLs for given compound IDs."""
    return compound_fastsimilarity_3d_conversion(*compound_ids, record_type='aids/txt')

def compound_fastsimilarity_3d_to_assaysummary(*compound_ids):
    """Retrieve assaysummary URLs for given compound IDs."""
    return compound_fastsimilarity_3d_conversion(*compound_ids, record_type='assaysummary/xml')

def compound_fastsimilarity_3d_to_classification(*compound_ids):
    """Retrieve classification URLs for given compound IDs."""
    return compound_fastsimilarity_3d_conversion(*compound_ids, record_type='classification/xml')

def compound_fastsimilarity_3d_to_description(*compound_ids):
    """Retrieve description URLs for given compound IDs."""
    return compound_fastsimilarity_3d_conversion(*compound_ids, record_type='description/xml')

def compound_fastsimilarity_3d_to_sid(*compound_ids):
    """Retrieve SID URLs for given compound IDs."""
    return compound_fastsimilarity_3d_conversion(*compound_ids, record_type='sids/txt')

def compound_fastsimilarity_3d_to_cid(*compound_ids):
    """Retrieve CID URLs for given compound IDs."""
    return compound_fastsimilarity_3d_conversion(*compound_ids, record_type='cids/txt')

def compound_fastsimilarity_3d_to_conformer(*compound_ids):
    """Retrieve conformer URLs for given compound IDs."""
    return compound_fastsimilarity_3d_conversion(*compound_ids, record_type='conformers/xml')

def compound_fastsimilarity_3d_to_png(*compound_ids):
    """Retrieve PNG URLs for given compound IDs."""
    return compound_fastsimilarity_3d_conversion(*compound_ids, record_type='png')

def compound_fastsimilarity_3d_to_2d_png(*compound_ids):
    """Retrieve 2D PNG URLs for given compound IDs."""
    return compound_fastsimilarity_3d_conversion(*compound_ids, record_type='png?record_type=2d')

def compound_fastsimilarity_3d_to_3d_png(*compound_ids):
    """Retrieve 3D PNG URLs for given compound IDs."""
    return compound_fastsimilarity_3d_conversion(*compound_ids, record_type='png?record_type=3d')

def compound_fastsimilarity_3d_to_active_aid(*compound_ids):
    """Retrieve active AID URLs for given compound IDs."""
    return compound_fastsimilarity_3d_conversion(*compound_ids, record_type='aids?aids_type=active')

def compound_fastsimilarity_3d_to_inactive_aid(*compound_ids):
    """Retrieve inactive AID URLs for given compound IDs."""
    return compound_fastsimilarity_3d_conversion(*compound_ids, record_type='aids/txt?aids_type=inactive')

def compound_fastsimilarity_3d_to_all_aid(*compound_ids):
    """Retrieve all AID URLs for given compound IDs."""
    return compound_fastsimilarity_3d_conversion(*compound_ids, record_type='aids')

def compound_fastsimilarity_3d_to_same_isotopes_cids(*compound_ids):
    """Retrieve same isotopes CID URLs for given compound IDs."""
    return compound_fastsimilarity_3d_conversion(*compound_ids, record_type='cids/txt?cids_type=same_isotopes')

def compound_fastsimilarity_3d_to_same_connectivity_cids(*compound_ids):
    """Retrieve same connectivity CID URLs for given compound IDs."""
    return compound_fastsimilarity_3d_conversion(*compound_ids, record_type='cids/txt?cids_type=same_connectivity')

def compound_fastsimilarity_3d_to_same_tautomer_cids(*compound_ids):
    """Retrieve same tautomer CID URLs for given compound IDs."""
    return compound_fastsimilarity_3d_conversion(*compound_ids, record_type='cids/txt?cids_type=same_tautomer')

def compound_fastsimilarity_3d_to_same_parent_cids(*compound_ids):
    """Retrieve same parent CID URLs for given compound IDs."""
    return compound_fastsimilarity_3d_conversion(*compound_ids, record_type='cids/txt?cids_type=same_parent')

def compound_fastsimilarity_3d_to_same_parent_stereo_cids(*compound_ids):
    """Retrieve same parent stereo CID URLs for given compound IDs."""
    return compound_fastsimilarity_3d_conversion(*compound_ids, record_type='cids/txt?cids_type=same_parent_stereo')

def compound_fastsimilarity_3d_to_same_parent_isotopes_cids(*compound_ids):
    """Retrieve same parent isotopes CID URLs for given compound IDs."""
    return compound_fastsimilarity_3d_conversion(*compound_ids, record_type='cids/txt?cids_type=same_parent_isotopes')

def compound_fastsimilarity_3d_to_same_parent_connectivity_cids(*compound_ids):
    """Retrieve same parent connectivity CID URLs for given compound IDs."""
    return compound_fastsimilarity_3d_conversion(*compound_ids, record_type='cids/txt?cids_type=same_parent_connectivity')

def compound_fastsimilarity_3d_to_same_parent_tautomer_cids(*compound_ids):
    """Retrieve same parent tautomer CID URLs for given compound IDs."""
    return compound_fastsimilarity_3d_conversion(*compound_ids, record_type='cids/txt?cids_type=same_parent_tautomer')

def compound_fastsimilarity_3d_to_original_cids(*compound_ids):
    """Retrieve original CID URLs for given compound IDs."""
    return compound_fastsimilarity_3d_conversion(*compound_ids, record_type='cids/txt?cids_type=original')

def compound_fastsimilarity_3d_to_parent_cids(*compound_ids):
    """Retrieve parent CID URLs for given compound IDs."""
    return compound_fastsimilarity_3d_conversion(*compound_ids, record_type='cids/txt?cids_type=parent')

def compound_fastsimilarity_3d_to_component_cids(*compound_ids):
    """Retrieve component CID URLs for given compound IDs."""
    return compound_fastsimilarity_3d_conversion(*compound_ids, record_type='cids/txt?cids_type=component')

def compound_fastsimilarity_3d_to_preferred_cids(*compound_ids):
    """Retrieve preferred CID URLs for given compound IDs."""
    return compound_fastsimilarity_3d_conversion(*compound_ids, record_type='cids/txt?cids_type=preferred')

def compound_fastsimilarity_3d_to_similar_2d_cids(*compound_ids):
    """Retrieve similar 2D CID URLs for given compound IDs."""
    return compound_fastsimilarity_3d_conversion(*compound_ids, record_type='cids/txt?cids_type=similar_2d')

def compound_fastsimilarity_3d_to_similar_3d_cids(*compound_ids):
    """Retrieve similar 3D CID URLs for given compound IDs."""
    return compound_fastsimilarity_3d_conversion(*compound_ids, record_type='cids/txt?cids_type=similar_3d')

def compound_fastsimilarity_3d_to_same_stereo_cids(*compound_ids):
    """Retrieve same stereo CID URLs for given compound IDs."""
    return compound_fastsimilarity_3d_conversion(*compound_ids, record_type='cids/txt?cids_type=same_stereo')

"""**compound fastsubstructure**"""

def compound_fastsubstructure_conversion(*compound_ids, record_type='record'):
    """
    Convert compound IDs to PubChem URLs with a specified record type using fast substructure search.

    :param compound_ids: Variable number of compound IDs or lists of compound IDs.
    :param record_type: Type of record to retrieve (default is 'record').
    :return: List of PubChem URLs.
    """
    compound_id_list = []
    for compound_id_arg in compound_ids:
        if isinstance(compound_id_arg, str):
            compound_id_list.append(str(compound_id_arg))
        elif isinstance(compound_id_arg, list):
            for compound_id_item in compound_id_arg:
                compound_id_list.append(str(compound_id_item))
        else:
            for compound_id_item in compound_id_arg:
                compound_id_list.append(compound_id_item)

    urls = []
    for compound_id in compound_id_list:
        compound_id_str = str(compound_id)
        plugin = f"compound/fastsubstructure/cid/{compound_id_str}"
        url = f"https://pubchem.ncbi.nlm.nih.gov/rest/pug/{plugin}/{record_type}"
        urls.append(url)

    return urls

def compound_fastsubstructure_to_synonym(*compound_ids):
    """Retrieve synonym URLs for given compound IDs."""
    return compound_fastsubstructure_conversion(*compound_ids, record_type='synonyms/txt')

def compound_fastsubstructure_to_record(*compound_ids):
    """Retrieve record URLs for given compound IDs."""
    return compound_fastsubstructure_conversion(*compound_ids, record_type='record/xml')

def compound_fastsubstructure_to_property(*compound_ids):
    """Retrieve property URLs for given compound IDs."""
    return compound_fastsubstructure_conversion(*compound_ids, record_type="property/Title,MolecularFormula,MolecularWeight,CanonicalSMILES,IsomericSMILES,InChI,InChIKey,IUPACName,XLogP,ExactMass,MonoisotopicMass,TPSA,Complexity,Charge,HBondDonorCount,HBondAcceptorCount,RotatableBondCount,HeavyAtomCount,IsotopeAtomCount,AtomStereoCount,DefinedAtomStereoCount,UndefinedAtomStereoCount,BondStereoCount,DefinedBondStereoCount,UndefinedBondStereoCount,CovalentUnitCount,Volume3D,XStericQuadrupole3D,YStericQuadrupole3D,ZStericQuadrupole3D,FeatureCount3D,FeatureAcceptorCount3D,FeatureDonorCount3D,FeatureAnionCount3D,FeatureCationCount3D,FeatureRingCount3D,FeatureHydrophobeCount3D,ConformerModelRMSD3D,EffectiveRotorCount3D,ConformerCount3D,Fingerprint3D/CSV")

def compound_fastsubstructure_to_aid(*compound_ids):
    """Retrieve AID URLs for given compound IDs."""
    return compound_fastsubstructure_conversion(*compound_ids, record_type='aids/txt')

def compound_fastsubstructure_to_assaysummary(*compound_ids):
    """Retrieve assaysummary URLs for given compound IDs."""
    return compound_fastsubstructure_conversion(*compound_ids, record_type='assaysummary/xml')

def compound_fastsubstructure_to_classification(*compound_ids):
    """Retrieve classification URLs for given compound IDs."""
    return compound_fastsubstructure_conversion(*compound_ids, record_type='classification/xml')

def compound_fastsubstructure_to_description(*compound_ids):
    """Retrieve description URLs for given compound IDs."""
    return compound_fastsubstructure_conversion(*compound_ids, record_type='description/xml')

def compound_fastsubstructure_to_sid(*compound_ids):
    """Retrieve SID URLs for given compound IDs."""
    return compound_fastsubstructure_conversion(*compound_ids, record_type='sids/txt')

def compound_fastsubstructure_to_cid(*compound_ids):
    """Retrieve CID URLs for given compound IDs."""
    return compound_fastsubstructure_conversion(*compound_ids, record_type='cids/txt')

def compound_fastsubstructure_to_conformer(*compound_ids):
    """Retrieve conformer URLs for given compound IDs."""
    return compound_fastsubstructure_conversion(*compound_ids, record_type='conformers/xml')

def compound_fastsubstructure_to_png(*compound_ids):
    """Retrieve PNG URLs for given compound IDs."""
    return compound_fastsubstructure_conversion(*compound_ids, record_type='png')

def compound_fastsubstructure_to_2d_png(*compound_ids):
    """Retrieve 2D PNG URLs for given compound IDs."""
    return compound_fastsubstructure_conversion(*compound_ids, record_type='png?record_type=2d')

def compound_fastsubstructure_to_3d_png(*compound_ids):
    """Retrieve 3D PNG URLs for given compound IDs."""
    return compound_fastsubstructure_conversion(*compound_ids, record_type='png?record_type=3d')

def compound_fastsubstructure_to_active_aid(*compound_ids):
    """Retrieve active AID URLs for given compound IDs."""
    return compound_fastsubstructure_conversion(*compound_ids, record_type='aids/txt?aids_type=active')

def compound_fastsubstructure_to_inactive_aid(*compound_ids):
    """Retrieve inactive AID URLs for given compound IDs."""
    return compound_fastsubstructure_conversion(*compound_ids, record_type='aids/txt?aids_type=inactive')

def compound_fastsubstructure_to_all_aid(*compound_ids):
    """Retrieve all AID URLs for given compound IDs."""
    return compound_fastsubstructure_conversion(*compound_ids, record_type='aids')

def compound_fastsubstructure_to_same_isotopes_cids(*compound_ids):
    """Retrieve same isotopes CID URLs for given compound IDs."""
    return compound_fastsubstructure_conversion(*compound_ids, record_type='cids/txt?cids_type=same_isotopes')

def compound_fastsubstructure_to_same_connectivity_cids(*compound_ids):
    """Retrieve same connectivity CID URLs for given compound IDs."""
    return compound_fastsubstructure_conversion(*compound_ids, record_type='cids/txt?cids_type=same_connectivity')

def compound_fastsubstructure_to_same_tautomer_cids(*compound_ids):
    """Retrieve same tautomer CID URLs for given compound IDs."""
    return compound_fastsubstructure_conversion(*compound_ids, record_type='cids/txt?cids_type=same_tautomer')

def compound_fastsubstructure_to_same_parent_cids(*compound_ids):
    """Retrieve same parent CID URLs for given compound IDs."""
    return compound_fastsubstructure_conversion(*compound_ids, record_type='cids/txt?cids_type=same_parent')

def compound_fastsubstructure_to_same_parent_stereo_cids(*compound_ids):
    """Retrieve same parent stereo CID URLs for given compound IDs."""
    return compound_fastsubstructure_conversion(*compound_ids, record_type='cids/txt?cids_type=same_parent_stereo')

def compound_fastsubstructure_to_same_parent_isotopes_cids(*compound_ids):
    """Retrieve same parent isotopes CID URLs for given compound IDs."""
    return compound_fastsubstructure_conversion(*compound_ids, record_type='cids/txt?cids_type=same_parent_isotopes')

def compound_fastsubstructure_to_same_parent_connectivity_cids(*compound_ids):
    """Retrieve same parent connectivity CID URLs for given compound IDs."""
    return compound_fastsubstructure_conversion(*compound_ids, record_type='cids/txt?cids_type=same_parent_connectivity')

def compound_fastsubstructure_to_same_parent_tautomer_cids(*compound_ids):
    """Retrieve same parent tautomer CID URLs for given compound IDs."""
    return compound_fastsubstructure_conversion(*compound_ids, record_type='cids/txt?cids_type=same_parent_tautomer')

def compound_fastsubstructure_to_original_cids(*compound_ids):
    """Retrieve original CID URLs for given compound IDs."""
    return compound_fastsubstructure_conversion(*compound_ids, record_type='cids/txt?cids_type=original')

def compound_fastsubstructure_to_parent_cids(*compound_ids):
    """Retrieve parent CID URLs for given compound IDs."""
    return compound_fastsubstructure_conversion(*compound_ids, record_type='cids/txt?cids_type=parent')

def compound_fastsubstructure_to_component_cids(*compound_ids):
    """Retrieve component CID URLs for given compound IDs."""
    return compound_fastsubstructure_conversion(*compound_ids, record_type='cids/txt?cids_type=component')

def compound_fastsubstructure_to_preferred_cids(*compound_ids):
    """Retrieve preferred CID URLs for given compound IDs."""
    return compound_fastsubstructure_conversion(*compound_ids, record_type='cids/txt?cids_type=preferred')

def compound_fastsubstructure_to_similar_2d_cids(*compound_ids):
    """Retrieve similar 2D CID URLs for given compound IDs."""
    return compound_fastsubstructure_conversion(*compound_ids, record_type='cids?cids_type=similar_2d')

def compound_fastsubstructure_to_similar_3d_cids(*compound_ids):
    """Retrieve similar 3D CID URLs for given compound IDs."""
    return compound_fastsubstructure_conversion(*compound_ids, record_type='cids?cids_type=similar_3d')

def compound_fastsubstructure_to_same_stereo_cids(*compound_ids):
    """Retrieve same stereo CID URLs for given compound IDs."""
    return compound_fastsubstructure_conversion(*compound_ids, record_type='cids?cids_type=same_stereo')

"""**fastsuperstructure**"""

def compound_fastsuperstructure_conversion(*compound_ids, record_type='record'):
    """
    Convert compound IDs to PubChem URLs with a specified record type using fast superstructure search.

    :param compound_ids: Variable number of compound IDs or lists of compound IDs.
    :param record_type: Type of record to retrieve (default is 'record').
    :return: List of PubChem URLs.
    """
    compound_id_list = []
    for compound_id_arg in compound_ids:
        if isinstance(compound_id_arg, str):
            compound_id_list.append(str(compound_id_arg))
        elif isinstance(compound_id_arg, list):
            for compound_id_item in compound_id_arg:
                compound_id_list.append(str(compound_id_item))
        else:
            for compound_id_item in compound_id_arg:
                compound_id_list.append(compound_id_item)

    urls = []
    for compound_id in compound_id_list:
        compound_id_str = str(compound_id)
        plugin = f"compound/fastsuperstructure/cid/{compound_id_str}"
        url = f"https://pubchem.ncbi.nlm.nih.gov/rest/pug/{plugin}/{record_type}"
        urls.append(url)

    return urls

def compound_fastsuperstructure_to_synonym(*compound_ids):
    """Retrieve synonym URLs for given compound IDs."""
    return compound_fastsuperstructure_conversion(*compound_ids, record_type='synonyms/txt')

def compound_fastsuperstructure_to_record(*compound_ids):
    """Retrieve record URLs for given compound IDs."""
    return compound_fastsuperstructure_conversion(*compound_ids, record_type='record/xml')

def compound_fastsuperstructure_to_property(*compound_ids):
    """Retrieve property URLs for given compound IDs."""
    return compound_fastsuperstructure_conversion(*compound_ids, record_type="property/Title,MolecularFormula,MolecularWeight,CanonicalSMILES,IsomericSMILES,InChI,InChIKey,IUPACName,XLogP,ExactMass,MonoisotopicMass,TPSA,Complexity,Charge,HBondDonorCount,HBondAcceptorCount,RotatableBondCount,HeavyAtomCount,IsotopeAtomCount,AtomStereoCount,DefinedAtomStereoCount,UndefinedAtomStereoCount,BondStereoCount,DefinedBondStereoCount,UndefinedBondStereoCount,CovalentUnitCount,Volume3D,XStericQuadrupole3D,YStericQuadrupole3D,ZStericQuadrupole3D,FeatureCount3D,FeatureAcceptorCount3D,FeatureDonorCount3D,FeatureAnionCount3D,FeatureCationCount3D,FeatureRingCount3D,FeatureHydrophobeCount3D,ConformerModelRMSD3D,EffectiveRotorCount3D,ConformerCount3D,Fingerprint3D/CSV")

def compound_fastsuperstructure_to_aid(*compound_ids):
    """Retrieve AID URLs for given compound IDs."""
    return compound_fastsuperstructure_conversion(*compound_ids, record_type='aids/txt')

def compound_fastsuperstructure_to_assaysummary(*compound_ids):
    """Retrieve assaysummary URLs for given compound IDs."""
    return compound_fastsuperstructure_conversion(*compound_ids, record_type='assaysummary/xml')

def compound_fastsuperstructure_to_classification(*compound_ids):
    """Retrieve classification URLs for given compound IDs."""
    return compound_fastsuperstructure_conversion(*compound_ids, record_type='classification/xml')

def compound_fastsuperstructure_to_description(*compound_ids):
    """Retrieve description URLs for given compound IDs."""
    return compound_fastsuperstructure_conversion(*compound_ids, record_type='description/xml')

def compound_fastsuperstructure_to_sid(*compound_ids):
    """Retrieve SID URLs for given compound IDs."""
    return compound_fastsuperstructure_conversion(*compound_ids, record_type='sids/txt')

def compound_fastsuperstructure_to_cid(*compound_ids):
    """Retrieve CID URLs for given compound IDs."""
    return compound_fastsuperstructure_conversion(*compound_ids, record_type='cids/txt')

def compound_fastsuperstructure_to_conformer(*compound_ids):
    """Retrieve conformer URLs for given compound IDs."""
    return compound_fastsuperstructure_conversion(*compound_ids, record_type='conformers/xml')

def compound_fastsuperstructure_to_png(*compound_ids):
    """Retrieve PNG URLs for given compound IDs."""
    return compound_fastsuperstructure_conversion(*compound_ids, record_type='png')

def compound_fastsuperstructure_to_2d_png(*compound_ids):
    """Retrieve 2D PNG URLs for given compound IDs."""
    return compound_fastsuperstructure_conversion(*compound_ids, record_type='png?record_type=2d')

def compound_fastsuperstructure_to_3d_png(*compound_ids):
    """Retrieve 3D PNG URLs for given compound IDs."""
    return compound_fastsuperstructure_conversion(*compound_ids, record_type='png?record_type=3d')

def compound_fastsuperstructure_to_active_aid(*compound_ids):
    """Retrieve active AID URLs for given compound IDs."""
    return compound_fastsuperstructure_conversion(*compound_ids, record_type='aids?aids_type=active')

def compound_fastsuperstructure_to_inactive_aid(*compound_ids):
    """Retrieve inactive AID URLs for given compound IDs."""
    return compound_fastsuperstructure_conversion(*compound_ids, record_type='aids?aids_type=inactive')

def compound_fastsuperstructure_to_all_aid(*compound_ids):
    """Retrieve all AID URLs for given compound IDs."""
    return compound_fastsuperstructure_conversion(*compound_ids, record_type='aids')

def compound_fastsuperstructure_to_same_isotopes_cids(*compound_ids):
    """Retrieve same isotopes CID URLs for given compound IDs."""
    return compound_fastsuperstructure_conversion(*compound_ids, record_type='cids/txt?cids_type=same_isotopes')

def compound_fastsuperstructure_to_same_connectivity_cids(*compound_ids):
    """Retrieve same connectivity CID URLs for given compound IDs."""
    return compound_fastsuperstructure_conversion(*compound_ids, record_type='cids/txt?cids_type=same_connectivity')

def compound_fastsuperstructure_to_same_tautomer_cids(*compound_ids):
    """Retrieve same tautomer CID URLs for given compound IDs."""
    return compound_fastsuperstructure_conversion(*compound_ids, record_type='cids/txt?cids_type=same_tautomer')

def compound_fastsuperstructure_to_same_parent_cids(*compound_ids):
    """Retrieve same parent CID URLs for given compound IDs."""
    return compound_fastsuperstructure_conversion(*compound_ids, record_type='cids/txt?cids_type=same_parent')

def compound_fastsuperstructure_to_same_parent_stereo_cids(*compound_ids):
    """Retrieve same parent stereo CID URLs for given compound IDs."""
    return compound_fastsuperstructure_conversion(*compound_ids, record_type='cids/txt?cids_type=same_parent_stereo')

def compound_fastsuperstructure_to_same_parent_isotopes_cids(*compound_ids):
    """Retrieve same parent isotopes CID URLs for given compound IDs."""
    return compound_fastsuperstructure_conversion(*compound_ids, record_type='cids/txt?cids_type=same_parent_isotopes')

def compound_fastsuperstructure_to_same_parent_connectivity_cids(*compound_ids):
    """Retrieve same parent connectivity CID URLs for given compound IDs."""
    return compound_fastsuperstructure_conversion(*compound_ids, record_type='cids/txt?cids_type=same_parent_connectivity')

def compound_fastsuperstructure_to_same_parent_tautomer_cids(*compound_ids):
    """Retrieve same parent tautomer CID URLs for given compound IDs."""
    return compound_fastsuperstructure_conversion(*compound_ids, record_type='cids/txt?cids_type=same_parent_tautomer')

def compound_fastsuperstructure_to_original_cids(*compound_ids):
    """Retrieve original CID URLs for given compound IDs."""
    return compound_fastsuperstructure_conversion(*compound_ids, record_type='cids/txt?cids_type=original')

def compound_fastsuperstructure_to_parent_cids(*compound_ids):
    """Retrieve parent CID URLs for given compound IDs."""
    return compound_fastsuperstructure_conversion(*compound_ids, record_type='cids/txt?cids_type=parent')

def compound_fastsuperstructure_to_component_cids(*compound_ids):
    """Retrieve component CID URLs for given compound IDs."""
    return compound_fastsuperstructure_conversion(*compound_ids, record_type='cids/txt?cids_type=component')

def compound_fastsuperstructure_to_preferred_cids(*compound_ids):
    """Retrieve preferred CID URLs for given compound IDs."""
    return compound_fastsuperstructure_conversion(*compound_ids, record_type='cids/txt?cids_type=preferred')

def compound_fastsuperstructure_to_similar_2d_cids(*compound_ids):
    """Retrieve similar 2D CID URLs for given compound IDs."""
    return compound_fastsuperstructure_conversion(*compound_ids, record_type='cids/txt?cids_type=similar_2d')

def compound_fastsuperstructure_to_similar_3d_cids(*compound_ids):
    """Retrieve similar 3D CID URLs for given compound IDs."""
    return compound_fastsuperstructure_conversion(*compound_ids, record_type='cidsرcids_type=similar_3d')

def compound_fastsuperstructure_to_same_stereo_cids(*compound_ids):
    """Retrieve same stereo CID URLs for given compound IDs."""
    return compound_fastsuperstructure_conversion(*compound_ids, record_type='cids/txt?cids_type=same_stereo')

"""**fastidentity**"""

def compound_fastidentity_conversion(*compound_ids, record_type='record'):
    """
    Convert compound IDs to PubChem URLs with a specified record type using fast identity search.

    :param compound_ids: Variable number of compound IDs or lists of compound IDs.
    :param record_type: Type of record to retrieve (default is 'record').
    :return: List of PubChem URLs.
    """
    compound_id_list = []
    for compound_id_arg in compound_ids:
        if isinstance(compound_id_arg, str):
            compound_id_list.append(str(compound_id_arg))
        elif isinstance(compound_id_arg, list):
            for compound_id_item in compound_id_arg:
                compound_id_list.append(str(compound_id_item))
        else:
            for compound_id_item in compound_id_arg:
                compound_id_list.append(compound_id_item)

    urls = []
    for compound_id in compound_id_list:
        compound_id_str = str(compound_id)
        plugin = f"compound/fastidentity/cid/{compound_id_str}"
        url = f"https://pubchem.ncbi.nlm.nih.gov/rest/pug/{plugin}/{record_type}"
        urls.append(url)

    return urls

def compound_fastidentity_to_synonym(*compound_ids):
    """Retrieve synonym URLs for given compound IDs."""
    return compound_fastidentity_conversion(*compound_ids, record_type='synonyms/txt')

def compound_fastidentity_to_record(*compound_ids):
    """Retrieve record URLs for given compound IDs."""
    return compound_fastidentity_conversion(*compound_ids, record_type='record/xml')

def compound_fastidentity_to_property(*compound_ids):
    """Retrieve property URLs for given compound IDs."""
    return compound_fastidentity_conversion(*compound_ids, record_type="property/Title,MolecularFormula,MolecularWeight,CanonicalSMILES,IsomericSMILES,InChI,InChIKey,IUPACName,XLogP,ExactMass,MonoisotopicMass,TPSA,Complexity,Charge,HBondDonorCount,HBondAcceptorCount,RotatableBondCount,HeavyAtomCount,IsotopeAtomCount,AtomStereoCount,DefinedAtomStereoCount,UndefinedAtomStereoCount,BondStereoCount,DefinedBondStereoCount,UndefinedBondStereoCount,CovalentUnitCount,Volume3D,XStericQuadrupole3D,YStericQuadrupole3D,ZStericQuadrupole3D,FeatureCount3D,FeatureAcceptorCount3D,FeatureDonorCount3D,FeatureAnionCount3D,FeatureCationCount3D,FeatureRingCount3D,FeatureHydrophobeCount3D,ConformerModelRMSD3D,EffectiveRotorCount3D,ConformerCount3D,Fingerprint3D/CSV")

def compound_fastidentity_to_aid(*compound_ids):
    """Retrieve AID URLs for given compound IDs."""
    return compound_fastidentity_conversion(*compound_ids, record_type='aids/txt')

def compound_fastidentity_to_assaysummary(*compound_ids):
    """Retrieve assaysummary URLs for given compound IDs."""
    return compound_fastidentity_conversion(*compound_ids, record_type='assaysummary/xml')

def compound_fastidentity_to_classification(*compound_ids):
    """Retrieve classification URLs for given compound IDs."""
    return compound_fastidentity_conversion(*compound_ids, record_type='classification/xml')

def compound_fastidentity_to_description(*compound_ids):
    """Retrieve description URLs for given compound IDs."""
    return compound_fastidentity_conversion(*compound_ids, record_type='description/xml')

def compound_fastidentity_to_sid(*compound_ids):
    """Retrieve SID URLs for given compound IDs."""
    return compound_fastidentity_conversion(*compound_ids, record_type='sids/txt')

def compound_fastidentity_to_cid(*compound_ids):
    """Retrieve CID URLs for given compound IDs."""
    return compound_fastidentity_conversion(*compound_ids, record_type='cids/txt')

def compound_fastidentity_to_conformer(*compound_ids):
    """Retrieve conformer URLs for given compound IDs."""
    return compound_fastidentity_conversion(*compound_ids, record_type='conformers/xml')

def compound_fastidentity_to_png(*compound_ids):
    """Retrieve PNG URLs for given compound IDs."""
    return compound_fastidentity_conversion(*compound_ids, record_type='png')

def compound_fastidentity_to_2d_png(*compound_ids):
    """Retrieve 2D PNG URLs for given compound IDs."""
    return compound_fastidentity_conversion(*compound_ids, record_type='png?record_type=2d')

def compound_fastidentity_to_3d_png(*compound_ids):
    """Retrieve 3D PNG URLs for given compound IDs."""
    return compound_fastidentity_conversion(*compound_ids, record_type='png?record_type=3d')

def compound_fastidentity_to_active_aid(*compound_ids):
    """Retrieve active AID URLs for given compound IDs."""
    return compound_fastidentity_conversion(*compound_ids, record_type='aids?aids_type=active')

def compound_fastidentity_to_inactive_aid(*compound_ids):
    """Retrieve inactive AID URLs for given compound IDs."""
    return compound_fastidentity_conversion(*compound_ids, record_type='aids?aids_type=inactive')

def compound_fastidentity_to_all_aid(*compound_ids):
    """Retrieve all AID URLs for given compound IDs."""
    return compound_fastidentity_conversion(*compound_ids, record_type='aids')

def compound_fastidentity_to_same_isotopes_cids(*compound_ids):
    """Retrieve same isotopes CID URLs for given compound IDs."""
    return compound_fastidentity_conversion(*compound_ids, record_type='cids/txt?cids_type=same_isotopes')

def compound_fastidentity_to_same_connectivity_cids(*compound_ids):
    """Retrieve same connectivity CID URLs for given compound IDs."""
    return compound_fastidentity_conversion(*compound_ids, record_type='cids/txt?cids_type=same_connectivity')

def compound_fastidentity_to_same_tautomer_cids(*compound_ids):
    """Retrieve same tautomer CID URLs for given compound IDs."""
    return compound_fastidentity_conversion(*compound_ids, record_type='cids/txt?cids_type=same_tautomer')

def compound_fastidentity_to_same_parent_cids(*compound_ids):
    """Retrieve same parent CID URLs for given compound IDs."""
    return compound_fastidentity_conversion(*compound_ids, record_type='cids/txt?cids_type=same_parent')

def compound_fastidentity_to_same_parent_stereo_cids(*compound_ids):
    """Retrieve same parent stereo CID URLs for given compound IDs."""
    return compound_fastidentity_conversion(*compound_ids, record_type='cids/txt?cids_type=same_parent_stereo')

def compound_fastidentity_to_same_parent_isotopes_cids(*compound_ids):
    """Retrieve same parent isotopes CID URLs for given compound IDs."""
    return compound_fastidentity_conversion(*compound_ids, record_type='cids/txt?cids_type=same_parent_isotopes')

def compound_fastidentity_to_same_parent_connectivity_cids(*compound_ids):
    """Retrieve same parent connectivity CID URLs for given compound IDs."""
    return compound_fastidentity_conversion(*compound_ids, record_type='cids/txt?cids_type=same_parent_connectivity')

def compound_fastidentity_to_same_parent_tautomer_cids(*compound_ids):
    """Retrieve same parent tautomer CID URLs for given compound IDs."""
    return compound_fastidentity_conversion(*compound_ids, record_type='cids/txt?cids_type=same_parent_tautomer')

def compound_fastidentity_to_original_cids(*compound_ids):
    """Retrieve original CID URLs for given compound IDs."""
    return compound_fastidentity_conversion(*compound_ids, record_type='cids/txt?cids_type=original')

def compound_fastidentity_to_parent_cids(*compound_ids):
    """Retrieve parent CID URLs for given compound IDs."""
    return compound_fastidentity_conversion(*compound_ids, record_type='cids/txt?cids_type=parent')

def compound_fastidentity_to_component_cids(*compound_ids):
    """Retrieve component CID URLs for given compound IDs."""
    return compound_fastidentity_conversion(*compound_ids, record_type='cids/txt?cids_type=component')

def compound_fastidentity_to_preferred_cids(*compound_ids):
    """Retrieve preferred CID URLs for given compound IDs."""
    return compound_fastidentity_conversion(*compound_ids, record_type='cids/txt?cids_type=preferred')

def compound_fastidentity_to_similar_2d_cids(*compound_ids):
    """Retrieve similar 2D CID URLs for given compound IDs."""
    return compound_fastidentity_conversion(*compound_ids, record_type='cids/txt?cids_type=similar_2d')

def compound_fastidentity_to_similar_3d_cids(*compound_ids):
    """Retrieve similar 3D CID URLs for given compound IDs."""
    return compound_fastidentity_conversion(*compound_ids, record_type='cids/txt?cids_type=similar_3d')

def compound_fastidentity_to_same_stereo_cids(*compound_ids):
    """Retrieve same stereo CID URLs for given compound IDs."""
    return compound_fastidentity_conversion(*compound_ids, record_type='cids/txt?cids_type=same_stereo')
def compound_fastidentity_to_same_connectivity_cids(*compound_ids):
    """Retrieve same connectivity CID URLs for given compound IDs."""
    return compound_fastidentity_conversion(*compound_ids, record_type='/cids/TXT?identity_type=same_connectivity')

def compound_fastidentity_to_same_tautomer_cids(*compound_ids):
    """Retrieve same tautomer CID URLs for given compound IDs."""
    return compound_fastidentity_conversion(*compound_ids, record_type='/cids/TXT?identity_type=same_tautomer')

def compound_fastidentity_to_same_stereo_isotope_cids(*compound_ids):
    """Retrieve same stereo isotope CID URLs for given compound IDs."""
    return compound_fastidentity_conversion(*compound_ids, record_type='/cids/TXT?identity_type=same_stereo_isotope')

def compound_fastidentity_to_nonconflicting_stereo_cids(*compound_ids):
    """Retrieve non-conflicting stereo CID URLs for given compound IDs."""
    return compound_fastidentity_conversion(*compound_ids, record_type='/cids/TXT?identity_type=nonconflicting_stereo')

def compound_fastidentity_to_same_isotope_nonconflicting_stereo_cids(*compound_ids):
    """Retrieve same isotope non-conflicting stereo CID URLs for given compound IDs."""
    return compound_fastidentity_conversion(*compound_ids, record_type='/cids/TXT?identity_type=same_isotope_nonconflicting_stereo')

"""# substance

**substance_sid_conversion**
"""

def substance_sid_conversion(*substance_sids, record_type='record'):
    """
    Convert substance SIDs to PubChem URLs with a specified record type.

    :param substance_sids: Variable number of substance SIDs or lists of substance SIDs.
    :param record_type: Type of record to retrieve (default is 'record').
    :return: List of PubChem URLs.
    """
    substance_sid_list = []
    for substance_sid_arg in substance_sids:
        if isinstance(substance_sid_arg, str):
            substance_sid_list.append(str(substance_sid_arg))
        elif isinstance(substance_sid_arg, list):
            for substance_sid_item in substance_sid_arg:
                substance_sid_list.append(str(substance_sid_item))
        else:
            for substance_sid_item in substance_sid_arg:
                substance_sid_list.append(substance_sid_item)

    urls = []
    for substance_sid in substance_sid_list:
        substance_sid_str = str(substance_sid)
        plugin = f"substance/sid/{substance_sid_str}"
        url = f"https://pubchem.ncbi.nlm.nih.gov/rest/pug/{plugin}/{record_type}"
        urls.append(url)

    return urls

def substance_sid_to_synonym(*substance_sids):
    """Retrieve synonym URLs for given substance SIDs."""
    return substance_sid_conversion(*substance_sids, record_type='synonyms/txt')

def substance_sid_to_record(*substance_sids):
    """Retrieve record URLs for given substance SIDs."""
    return substance_sid_conversion(*substance_sids, record_type='record/xml')

def substance_sid_to_aid(*substance_sids):
    """Retrieve AID URLs for given substance SIDs."""
    return substance_sid_conversion(*substance_sids, record_type='aids/txt')
def substance_sid_to_assaysummary(*substance_sids):
    """Retrieve assaysummary URLs for given substance SIDs."""
    return substance_sid_conversion(*substance_sids, record_type='assaysummary/xml')

def substance_sid_to_classification(*substance_sids):
    """Retrieve classification URLs for given substance SIDs."""
    return substance_sid_conversion(*substance_sids, record_type='classification/xml')

def substance_sid_to_description(*substance_sids):
    """Retrieve description URLs for given substance SIDs."""
    return substance_sid_conversion(*substance_sids, record_type='description/xml')

def substance_sid_to_sid(*substance_sids):
    """Retrieve SID URLs for given substance SIDs."""
    return substance_sid_conversion(*substance_sids, record_type='sids/txt')

def substance_sid_to_png(*substance_sids):
    """Retrieve PNG URLs for given substance SIDs."""
    return substance_sid_conversion(*substance_sids, record_type='png')

def substance_sid_to_2d_png(*substance_sids):
    """Retrieve 2D PNG URLs for given substance SIDs."""
    return substance_sid_conversion(*substance_sids, record_type='png?record_type=2d')

def substance_sid_to_3d_png(*substance_sids):
    """Retrieve 3D PNG URLs for given substance SIDs."""
    return substance_sid_conversion(*substance_sids, record_type='png?record_type=3d')

def substance_sid_to_active_aid(*substance_sids):
    """Retrieve active AID URLs for given substance SIDs."""
    return substance_sid_conversion(*substance_sids, record_type='aids/txt?aids_type=active')

def substance_sid_to_inactive_aid(*substance_sids):
    """Retrieve inactive AID URLs for given substance SIDs."""
    return substance_sid_conversion(*substance_sids, record_type='aids/txt?aids_type=inactive')

def substance_sid_to_all_aid(*substance_sids):
    """Retrieve all AID URLs for given substance SIDs."""
    return substance_sid_conversion(*substance_sids, record_type='aids')

def substance_sid_to_cid_component(*substance_sids):
    """Retrieve all AID URLs for given substance SIDs."""
    return substance_sid_conversion(*substance_sids, record_type='cids/txt?cids_type=component')

def substance_sid_to_cid_standardized(*substance_sids):
    """Retrieve all AID URLs for given substance SIDs."""
    return substance_sid_conversion(*substance_sids, record_type='cids/txt?cids_type=standardized')

def substance_sid_to_sid_original(*substance_sids):
    """Retrieve all AID URLs for given substance SIDs."""
    return substance_sid_conversion(*substance_sids, record_type='sids?sids_type=original')

"""**sourceid**"""

def substance_sourceid_conversion(*substance_sourceids, record_type='record'):
    """
    Convert substance source IDs to PubChem URLs with a specified record type.

    :param substance_sourceids: Variable number of substance source IDs or lists of substance source IDs.
    :param record_type: Type of record to retrieve (default is 'record').
    :return: List of PubChem URLs.
    """
    substance_sourceid_list = []
    for substance_sourceid_arg in substance_sourceids:
        if isinstance(substance_sourceid_arg, str):
            substance_sourceid_list.append(str(substance_sourceid_arg))
        elif isinstance(substance_sourceid_arg, list):
            for substance_sourceid_item in substance_sourceid_arg:
                substance_sourceid_list.append(str(substance_sourceid_item))
        else:
            for substance_sourceid_item in substance_sourceid_arg:
                substance_sourceid_list.append(substance_sourceid_item)

    urls = []
    for substance_sourceid in substance_sourceid_list:
        substance_sourceid_str = str(substance_sourceid)
        plugin = f"substance/sourceid/{substance_sourceid_str}"
        url = f"https://pubchem.ncbi.nlm.nih.gov/rest/pug/{plugin}/{record_type}"
        urls.append(url)

    return urls

def substance_sourceid_to_synonym(*substance_sourceids):
    """Retrieve synonym URLs for given substance source IDs."""
    return substance_sourceid_conversion(*substance_sourceids, record_type='synonyms/txt')

def substance_sourceid_to_record(*substance_sourceids):
    """Retrieve record URLs for given substance source IDs."""
    return substance_sourceid_conversion(*substance_sourceids, record_type='record/xml')


def substance_sourceid_assaysummary(*substance_sids):
    """Retrieve assaysummary URLs for given substance SIDs."""
    return substance_sourceid_conversion(*substance_sids, record_type='assaysummary/xml')

def substance_sourceid_to_classification(*substance_sids):
    """Retrieve classification URLs for given substance SIDs."""
    return substance_sourceid_conversion(*substance_sids, record_type='classification/xml')

def substance_sourceid_to_description(*substance_sids):
    """Retrieve description URLs for given substance SIDs."""
    return substance_sourceid_conversion(*substance_sids, record_type='description/xml')

def substance_sourceid_to_sid(*substance_sids):
    """Retrieve SID URLs for given substance SIDs."""
    return substance_sourceid_conversion(*substance_sids, record_type='sids/txt')


def substance_sourceid_to_aid(*substance_sourceids):
    """Retrieve AID URLs for given substance source IDs."""
    return substance_sourceid_conversion(*substance_sourceids, record_type='aids/txt')

def substance_sourceid_to_cid(*substance_sourceids):
    """Retrieve AID URLs for given substance source IDs."""
    return substance_sourceid_conversion(*substance_sourceids, record_type='cids/txt')

def substance_sourceid_to_same_isotopes_sourceids(*substance_sourceids):
    """Retrieve same isotopes source ID URLs for given substance source IDs."""
    return substance_sourceid_conversion(*substance_sourceids, record_type='sourceids?sourceids_type=same_isotopes')

def substance_sourceid_to_cid_component(*substance_sids):
    """Retrieve all AID URLs for given substance sourceid."""
    return substance_sourceid_conversion(*substance_sids, record_type='cids/txt?cids_type=component')

def substance_sourceid_to_cid_standardized(*substance_sids):
    """Retrieve all AID URLs for given substance sourceid."""
    return substance_sourceid_conversion(*substance_sids, record_type='cids/txt?cids_type=standardized')

def substance_sourceid_to_sid_original(*substance_sids):
    """Retrieve all AID URLs for given substance sourceid."""
    return substance_sourceid_conversion(*substance_sids, record_type='sids/txt?sids_type=original')

def substance_xrefs(namespace, identifier):
    """
    Retrieve cross-references for a given substance.

    :param namespace: Substance namespace (e.g., 'sid', 'name', 'listkey', 'sourceall').
    :param identifier: Identifier corresponding to the namespace.
    :return: PubChem URL for cross-references.
    """
    plugin = f"substance/{namespace}/{identifier}/xrefs/RegistryID,RN,PubMedID,MMDBID,DBURL,SBURL,ProteinGI,NucleotideGI,TaxonomyID,MIMID,GeneID,ProbeID,PatentID,SourceName,SourceCategory/XML"
    url = f"https://pubchem.ncbi.nlm.nih.gov/rest/pug/{plugin}"
    return url

def substance_sid_xrefs(sid):
    """Retrieve cross-references for a given substance SID."""
    return substance_xrefs('sid', sid)

def substance_name_xrefs(name):
    """Retrieve cross-references for a given substance name."""
    return substance_xrefs('name', name)

def substance_listkey_xrefs(listkey):
    """Retrieve cross-references for a given substance listkey."""
    return substance_xrefs('listkey', listkey)

def substance_sourceall_xrefs(source_name):
    """Retrieve cross-references for a given substance sourceall."""
    return substance_xrefs('sourceall', source_name)

"""**sourceall**"""

# ... (previously defined functions)

def substance_sourceall_conversion(*substance_sourcealls, record_type='record'):
    """
    Convert substance source IDs to PubChem URLs with a specified record type.

    :param substance_sourcealls: Variable number of substance source IDs or lists of substance source IDs.
    :param record_type: Type of record to retrieve (default is 'record').
    :return: List of PubChem URLs.
    """
    substance_sourceall_list = []
    for substance_sourceall_arg in substance_sourcealls:
        if isinstance(substance_sourceall_arg, str):
            substance_sourceall_list.append(str(substance_sourceall_arg))
        elif isinstance(substance_sourceall_arg, list):
            for substance_sourceall_item in substance_sourceall_arg:
                substance_sourceall_list.append(str(substance_sourceall_item))
        else:
            for substance_sourceall_item in substance_sourceall_arg:
                substance_sourceall_list.append(substance_sourceall_item)

    urls = []
    for substance_sourceall in substance_sourceall_list:
        substance_sourceall_str = str(substance_sourceall)
        plugin = f"substance/sourceall/{substance_sourceall_str}"
        url = f"https://pubchem.ncbi.nlm.nih.gov/rest/pug/{plugin}/{record_type}"
        urls.append(url)

    return urls

def substance_sourceall_to_synonym(*substance_sourcealls):
    """Retrieve synonym URLs for given substance source IDs."""
    return substance_sourceall_conversion(*substance_sourcealls, record_type='synonyms/txt')

def substance_sourceall_to_record(*substance_sourcealls):
    """Retrieve record URLs for given substance source IDs."""
    return substance_sourceall_conversion(*substance_sourcealls, record_type='record/xml')

def substance_sourceall_to_property(*substance_sourcealls):
    """Retrieve property URLs for given substance source IDs."""
    return substance_sourceall_conversion(*substance_sourcealls, record_type="property/Title,MolecularFormula,MolecularWeight,CanonicalSMILES,IsomericSMILES,InChI,InChIKey,IUPACName,XLogP,ExactMass,MonoisotopicMass,TPSA,Complexity,Charge,HBondDonorCount,HBondAcceptorCount,RotatableBondCount,HeavyAtomCount,IsotopeAtomCount,AtomStereoCount,DefinedAtomStereoCount,UndefinedAtomStereoCount,BondStereoCount,DefinedBondStereoCount,UndefinedBondStereoCount,CovalentUnitCount,Volume3D,XStericQuadrupole3D,YStericQuadrupole3D,ZStericQuadrupole3D,FeatureCount3D,FeatureAcceptorCount3D,FeatureDonorCount3D,FeatureAnionCount3D,FeatureCationCount3D,FeatureRingCount3D,FeatureHydrophobeCount3D,ConformerModelRMSD3D,EffectiveRotorCount3D,ConformerCount3D,Fingerprint2D/CSV")

def substance_sourceall_to_aid(*substance_sourcealls):
    """Retrieve AID URLs for given substance source IDs."""
    return substance_sourceall_conversion(*substance_sourcealls, record_type='aids/txt')

"""**substance name**"""

# ... (previously defined functions)

def substance_name_conversion(*substance_names, record_type='record'):
    """
    Convert substance names to PubChem URLs with a specified record type.

    :param substance_names: Variable number of substance names or lists of substance names.
    :param record_type: Type of record to retrieve (default is 'record').
    :return: List of PubChem URLs.
    """
    substance_name_list = []
    for substance_name_arg in substance_names:
        if isinstance(substance_name_arg, str):
            substance_name_list.append(str(substance_name_arg))
        elif isinstance(substance_name_arg, list):
            for substance_name_item in substance_name_arg:
                substance_name_list.append(str(substance_name_item))
        else:
            for substance_name_item in substance_name_arg:
                substance_name_list.append(substance_name_item)

    urls = []
    for substance_name in substance_name_list:
        substance_name_str = str(substance_name)
        plugin = f"substance/name/{substance_name_str}"
        url = f"https://pubchem.ncbi.nlm.nih.gov/rest/pug/{plugin}/{record_type}"
        urls.append(url)

    return urls

def substance_name_to_synonym(*substance_names):
    """Retrieve synonym URLs for given substance names."""
    return substance_name_conversion(*substance_names, record_type='synonyms/txt')

def substance_name_to_record(*substance_names):
    """Retrieve record URLs for given substance names."""
    return substance_name_conversion(*substance_names, record_type='record/xml')

def substance_name_to_property(*substance_names):
    """Retrieve property URLs for given substance names."""
    return substance_name_conversion(*substance_names, record_type="property/Title,MolecularFormula,MolecularWeight,CanonicalSMILES,IsomericSMILES,InChI,InChIKey,IUPACName,XLogP,ExactMass,MonoisotopicMass,TPSA,Complexity,Charge,HBondDonorCount,HBondAcceptorCount,RotatableBondCount,HeavyAtomCount,IsotopeAtomCount,AtomStereoCount,DefinedAtomStereoCount,UndefinedAtomStereoCount,BondStereoCount,DefinedBondStereoCount,UndefinedBondStereoCount,CovalentUnitCount,Volume3D,XStericQuadrupole3D,YStericQuadrupole3D,ZStericQuadrupole3D,FeatureCount3D,FeatureAcceptorCount3D,FeatureDonorCount3D,FeatureAnionCount3D,FeatureCationCount3D,FeatureRingCount3D,FeatureHydrophobeCount3D,ConformerModelRMSD3D,EffectiveRotorCount3D,ConformerCount3D,Fingerprint2D/CSV")

def substance_name_to_aid(*substance_names):
    """Retrieve AID URLs for given substance names."""
    return substance_name_conversion(*substance_names, record_type='aids/txt')

"""# Assay

**aid**
"""

# ... (previously defined functions)

def assay_aid_conversion(*assay_aids, record_type='record'):
    """
    Convert assay AIDs to PubChem URLs with a specified record type.

    :param assay_aids: Variable number of assay AIDs or lists of assay AIDs.
    :param record_type: Type of record to retrieve (default is 'record').
    :return: List of PubChem URLs.
    """
    assay_aid_list = []
    for assay_aid_arg in assay_aids:
        if isinstance(assay_aid_arg, str):
            assay_aid_list.append(str(assay_aid_arg))
        elif isinstance(assay_aid_arg, list):
            for assay_aid_item in assay_aid_arg:
                assay_aid_list.append(str(assay_aid_item))
        else:
            for assay_aid_item in assay_aid_arg:
                assay_aid_list.append(assay_aid_item)

    urls = []
    for assay_aid in assay_aid_list:
        assay_aid_str = str(assay_aid)
        plugin = f"assay/aid/{assay_aid_str}"
        url = f"https://pubchem.ncbi.nlm.nih.gov/rest/pug/{plugin}/{record_type}"
        urls.append(url)

    return urls

def assay_aid_to_description(*assay_aids):
    """Retrieve description URLs for given assay AIDs."""
    return assay_aid_conversion(*assay_aids, record_type='description/xml')

def assay_aid_to_record(*assay_aids):
    """Retrieve record URLs for given assay AIDs."""
    return assay_aid_conversion(*assay_aids, record_type='record/xml')

def assay_aid_to_classification(*assay_aids):
    """Retrieve classification URLs for given assay AIDs."""
    return assay_aid_conversion(*assay_aids, record_type='classification/xml')

def assay_aid_to_concise (*assay_aids):
    """Retrieve concise URLs for given assay AIDs."""
    return assay_aid_conversion(*assay_aids, record_type='concise/xml')

def assay_aid_to_doseresponse (*assay_aids):
    """Retrieve concise URLs for given assay AIDs."""
    return assay_aid_conversion(*assay_aids, record_type='doseresponse/xml')

def assay_aid_to_doseresponse_csv (*assay_aids):
    """Retrieve concise URLs for given assay AIDs."""
    return assay_aid_conversion(*assay_aids, record_type='doseresponse/CSV')

def assay_aid_to_summary (*assay_aids):
    """Retrieve summary  URLs for given assay AIDs."""
    return assay_aid_conversion(*assay_aids, record_type='summary/xml')

def assay_aid_to_targets (*assay_aids):
    """Retrieve targets  URLs for given assay AIDs."""
    return assay_aid_conversion(*assay_aids, record_type='targets/ProteinGI,ProteinName,GeneID,GeneSymbol/xml')

def assay_aid_to_sid(*assay_aids):
    """Retrieve SID URLs for given assay AIDs."""
    return assay_aid_conversion(*assay_aids, record_type='sids/txt')

def assay_aid_to_active_sid(*assay_aids):
    """Retrieve active SID URLs for given assay AIDs."""
    return assay_aid_conversion(*assay_aids, record_type='sids/txt?sids_type=active')

def assay_aid_to_inactive_sid(*assay_aids):
    """Retrieve inactive SID URLs for given assay AIDs."""
    return assay_aid_conversion(*assay_aids, record_type='sids/txt?sids_type=inactive')

def assay_aid_to_all_sid(*assay_aids):
    """Retrieve all SID URLs for given assay AIDs."""
    return assay_aid_conversion(*assay_aids, record_type='sids')

def assay_aid_to_cid(*assay_aids):
    """Retrieve SID URLs for given assay AIDs."""
    return assay_aid_conversion(*assay_aids, record_type='cids/txt')

def assay_aid_to_active_cid(*assay_aids):
    """Retrieve active SID URLs for given assay AIDs."""
    return assay_aid_conversion(*assay_aids, record_type='cids/txt?cids_type=active')

def assay_aid_to_inactive_cid(*assay_aids):
    """Retrieve inactive SID URLs for given assay AIDs."""
    return assay_aid_conversion(*assay_aids, record_type='cids/txt?cids_type=inactive')

def assay_aid_to_all_cid(*assay_aids):
    """Retrieve SID URLs for given assay AIDs."""
    return assay_aid_conversion(*assay_aids, record_type='cids/txt')

"""**assay_listkey_conversion**"""

# ... (previously defined functions)

def assay_listkey_conversion(*assay_listkeys, record_type='record'):
    """
    Convert assay listkeys to PubChem URLs with a specified record type.

    :param assay_listkeys: Variable number of assay listkeys or lists of assay listkeys.
    :param record_type: Type of record to retrieve (default is 'record').
    :return: List of PubChem URLs.
    """
    assay_listkey_list = []
    for assay_listkey_arg in assay_listkeys:
        if isinstance(assay_listkey_arg, str):
            assay_listkey_list.append(str(assay_listkey_arg))
        elif isinstance(assay_listkey_arg, list):
            for assay_listkey_item in assay_listkey_arg:
                assay_listkey_list.append(str(assay_listkey_item))
        else:
            for assay_listkey_item in assay_listkey_arg:
                assay_listkey_list.append(assay_listkey_item)

    urls = []
    for assay_listkey in assay_listkey_list:
        assay_listkey_str = str(assay_listkey)
        plugin = f"assay/listkey/{assay_listkey_str}"
        url = f"https://pubchem.ncbi.nlm.nih.gov/rest/pug/{plugin}/{record_type}"
        urls.append(url)

    return urls

def assay_listkey_to_description(*assay_listkeys):
    """Retrieve description URLs for given assay listkeys."""
    return assay_listkey_conversion(*assay_listkeys, record_type='description/xml')

def assay_listkey_to_record(*assay_listkeys):
    """Retrieve record URLs for given assay listkeys."""
    return assay_listkey_conversion(*assay_listkeys, record_type='record/xml')

def assay_listkey_to_classification(*assay_listkeys):
    """Retrieve classification URLs for given assay listkeys."""
    return assay_listkey_conversion(*assay_listkeys, record_type='classification/xml')

def assay_listkey_to_concise(*assay_listkeys):
    """Retrieve concise URLs for given assay listkeys."""
    return assay_listkey_conversion(*assay_listkeys, record_type='concise/xml')

def assay_listkey_to_summary(*assay_listkeys):
    """Retrieve summary URLs for given assay listkeys."""
    return assay_listkey_conversion(*assay_listkeys, record_type='summary/xml')

def assay_listkey_to_targets(*assay_listkeys):
    """Retrieve targets URLs for given assay listkeys."""
    return assay_listkey_conversion(*assay_listkeys, record_type='targets/ProteinGI,ProteinName,GeneID,GeneSymbol/xml')

def assay_listkey_to_sid(*assay_listkeys):
    """Retrieve SID URLs for given assay listkeys."""
    return assay_listkey_conversion(*assay_listkeys, record_type='sids/txt')

def assay_listkey_to_active_sid(*assay_listkeys):
    """Retrieve active SID URLs for given assay listkeys."""
    return assay_listkey_conversion(*assay_listkeys, record_type='sids/txt?sids_type=active')

def assay_listkey_to_inactive_sid(*assay_listkeys):
    """Retrieve inactive SID URLs for given assay listkeys."""
    return assay_listkey_conversion(*assay_listkeys, record_type='sids/txt?sids_type=inactive')

def assay_listkey_to_all_sid(*assay_listkeys):
    """Retrieve all SID URLs for given assay listkeys."""
    return assay_listkey_conversion(*assay_listkeys, record_type='sids')

"""**assay_type**"""

def assay_type_conversion(assay_type):
    """
    Convert assay type to PubChem URLs.

    :param assay_type: Type of assay (e.g., 'doseresponse', 'onhold', 'summary', etc.).
    :return: List of PubChem URLs.
    """
    plugin = f"assay/type/{assay_type}/aids/JSON"
    url = f"https://pubchem.ncbi.nlm.nih.gov/rest/pug/{plugin}"
    return url


def assay_type_all_aid():
    return assay_type_conversion('all')

def assay_type_confirmatory_aid():
    return assay_type_conversion('confirmatory')

def assay_type_doseresponse_aid():
    return assay_type_conversion('doseresponse')

def assay_type_onhold_aid():
    return assay_type_conversion('onhold')

def assay_type_panel_aid():
    return assay_type_conversion('panel')

def assay_type_rnai_aid():
    return assay_type_conversion('rnai')

def assay_type_screening_aid():
    return assay_type_conversion('screening')

def assay_type_summary_aid():
    return assay_type_conversion('summary')

def assay_type_cellbased_aid():
    return assay_type_conversion('cellbased')

def assay_type_biochemical_aid():
    return assay_type_conversion('biochemical')

def assay_type_invivo_aid():
    return assay_type_conversion('invivo')

def assay_type_invitro_aid():
    return assay_type_conversion('invitro')

def assay_type_activeconcentrationspecified_aid():
    return assay_type_conversion('activeconcentrationspecified')

"""**assay_target**"""

def assay_target_conversion(target_type, *assay_ids):
    """
    Convert assay IDs to PubChem URLs with a specified assay target type.

    :param target_type: Type of assay target (e.g., 'gi', 'proteinname', 'geneid', 'genesymbol', 'accession').
    :param assay_ids: Variable number of assay IDs or lists of assay IDs.
    :return: List of PubChem URLs.
    """
    assay_id_list = []
    for assay_id_arg in assay_ids:
        if isinstance(assay_id_arg, str):
            assay_id_list.append(str(assay_id_arg))
        elif isinstance(assay_id_arg, list):
            for assay_id_item in assay_id_arg:
                assay_id_list.append(str(assay_id_item))
        else:
            for assay_id_item in assay_id_arg:
                assay_id_list.append(assay_id_item)

    urls = []
    for assay_id in assay_id_list:
        assay_id_str = str(assay_id)
        plugin = f"assay/target/{target_type}/{assay_id_str}/aids/JSON"
        url = f"https://pubchem.ncbi.nlm.nih.gov/rest/pug/{plugin}"
        urls.append(url)

    return urls

def assay_target_gi_aid(*assay_ids):
    return assay_target_conversion('gi', *assay_ids)

def assay_target_proteinname_aid(*assay_ids):
    return assay_target_conversion('proteinname', *assay_ids)

def assay_target_geneid_aid(*assay_ids):
    return assay_target_conversion('geneid', *assay_ids)

def assay_target_genesymbol_aid(*assay_ids):
    return assay_target_conversion('genesymbol', *assay_ids)

def assay_target_accession_aid(*assay_ids):
    return assay_target_conversion('accession', *assay_ids)

"""**activity**"""

def assay_activity_type_to_aid(*activity_types):
    """
    Convert assay AIDs to PubChem URLs with specified activity types.

    :param activity_types: Types of activity (e.g., 'EC50', 'IC50').
    :return: List of PubChem URLs.
    """
    urls = []
    for activity_type in activity_types:
        plugin = f"assay/activity/{activity_type}/aids/TXT"
        url = f"https://pubchem.ncbi.nlm.nih.gov/rest/pug/{plugin}"
        urls.append(url)

    return urls

"""**sourceall**"""

def assay_sourceall_to_aid(*sourceall):
    """
    Convert assay AIDs to PubChem URLs with specified activity types.

    :param activity_types: Types of activity (e.g., 'EC50', 'IC50').
    :return: List of PubChem URLs.
    """
    urls = []
    for sourceall in sourceall:
        plugin = f"assay/sourceall/{sourceall}/aids/TXT"
        url = f"https://pubchem.ncbi.nlm.nih.gov/rest/pug/{plugin}"
        urls.append(url)

    return urls

"""# **Gene"""

def gene_domain_operation(namespace, operation_specification, *gene_ids):
    """
    Perform a specified operation on gene domains.

    :param namespace: Gene domain namespace (e.g., 'geneid', 'genesymbol', 'synonym').
    :param operation_specification: Operation specification (e.g., 'summary', 'aids', 'concise', 'pwaccs').
    :param gene_ids: Variable number of gene IDs or lists of gene IDs.
    :return: List of PubChem URLs.
    """
    gene_id_list = []
    for gene_id_arg in gene_ids:
        if isinstance(gene_id_arg, str):
            gene_id_list.append(str(gene_id_arg))
        elif isinstance(gene_id_arg, list):
            for gene_id_item in gene_id_arg:
                gene_id_list.append(str(gene_id_item))
        else:
            for gene_id_item in gene_id_arg:
                gene_id_list.append(gene_id_item)

    urls = []
    for gene_id in gene_id_list:
        gene_id_str = str(gene_id)
        plugin = f"gene/{namespace}/{gene_id_str}/{operation_specification}/JSON"
        url = f"https://pubchem.ncbi.nlm.nih.gov/rest/pug/{plugin}"
        urls.append(url)

    return urls
def gene_geneid_to_summary(*gene_ids):
    # Namespace: geneid, Operation: summary
    return gene_domain_operation('geneid', 'summary', *gene_ids)

def gene_geneid_to_aids(*gene_ids):
    # Namespace: geneid, Operation: aids
    return gene_domain_operation('geneid', 'aids', *gene_ids)

def gene_geneid_to_concise(*gene_ids):
    # Namespace: geneid, Operation: concise
    return gene_domain_operation('geneid', 'concise', *gene_ids)

def gene_geneid_to_pwaccs(*gene_ids):
    # Namespace: geneid, Operation: pwaccs
    return gene_domain_operation('geneid', 'pwaccs', *gene_ids)

# Similarly, create functions for other gene domains:

def gene_genesymbol_to_summary(*gene_ids):
    # Namespace: genesymbol, Operation: summary
    return gene_domain_operation('genesymbol', 'summary', *gene_ids)

def gene_genesymbol_to_aids(*gene_ids):
    # Namespace: genesymbol, Operation: aids
    return gene_domain_operation('genesymbol', 'aids', *gene_ids)

def gene_genesymbol_to_concise(*gene_ids):
    # Namespace: genesymbol, Operation: concise
    return gene_domain_operation('genesymbol', 'concise', *gene_ids)

def gene_genesymbol_to_pwaccs(*gene_ids):
    # Namespace: genesymbol, Operation: pwaccs
    return gene_domain_operation('genesymbol', 'pwaccs', *gene_ids)

def gene_synonym_to_summary(*gene_ids):
    # Namespace: synonym, Operation: summary
    return gene_domain_operation('synonym', 'summary', *gene_ids)

def gene_synonym_to_aids(*gene_ids):
    # Namespace: synonym, Operation: aids
    return gene_domain_operation('synonym', 'aids', *gene_ids)

def gene_synonym_to_concise(*gene_ids):
    # Namespace: synonym, Operation: concise
    return gene_domain_operation('synonym', 'concise', *gene_ids)

def gene_synonym_to_pwaccs(*gene_ids):
    # Namespace: synonym, Operation: pwaccs
    return gene_domain_operation('synonym', 'pwaccs', *gene_ids)
def gene_accession_to_summary(*gene_accessions):
    # Namespace: accession, Operation: summary
    return gene_domain_operation('accession', 'summary', *gene_accessions)

def gene_accession_to_aids(*gene_accessions):
    # Namespace: accession, Operation: aids
    return gene_domain_operation('accession', 'aids', *gene_accessions)

def gene_accession_to_concise(*gene_accessions):
    # Namespace: accession, Operation: concise
    return gene_domain_operation('accession', 'concise', *gene_accessions)

def gene_accession_to_pwaccs(*gene_accessions):
    # Namespace: accession, Operation: pwaccs
    return gene_domain_operation('accession', 'pwaccs', *gene_accessions)

"""# **pathway**"""

def pathway_operation(operation_specification, *protein_ids):
    """
    Perform a specified operation on protein pathways.

    :param operation_specification: Operation specification (e.g., 'summary', 'cids', 'geneids', 'accessions').
    :param protein_ids: Variable number of protein IDs or lists of protein IDs.
    :return: List of PubChem URLs.
    """
    protein_id_list = []
    for protein_id_arg in protein_ids:
        if isinstance(protein_id_arg, str):
            protein_id_list.append(str(protein_id_arg))
        elif isinstance(protein_id_arg, list):
            for protein_id_item in protein_id_arg:
                protein_id_list.append(str(protein_id_item))
        else:
            for protein_id_item in protein_id_arg:
                protein_id_list.append(protein_id_item)

    urls = []
    for protein_id in protein_id_list:
        protein_id_str = str(protein_id)
        plugin = f"pathway/pwacc/{protein_id_str}/{operation_specification}/JSON"
        url = f"https://pubchem.ncbi.nlm.nih.gov/rest/pug/{plugin}"
        urls.append(url)

    return urls

def pathway_to_summary(*protein_ids):
    return pathway_operation('summary', *protein_ids)

def pathway_to_cids(*protein_ids):
    return pathway_operation('cids', *protein_ids)

def pathway_to_geneids(*protein_ids):
    return pathway_operation('geneids', *protein_ids)

def pathway_to_accessions(*protein_ids):
    return pathway_operation('accessions', *protein_ids)

"""# **Protein**"""

def protein_domain_operation(namespace, operation_specification, *protein_ids):
    """
    Perform a specified operation on protein domains.

    :param namespace: Protein domain namespace (e.g., 'accession', 'gi', 'synonym').
    :param operation_specification: Operation specification (e.g., 'summary', 'aids', 'concise', 'pwaccs').
    :param protein_ids: Variable number of protein IDs or lists of protein IDs.
    :return: List of PubChem URLs.
    """
    protein_id_list = []
    for protein_id_arg in protein_ids:
        if isinstance(protein_id_arg, str):
            protein_id_list.append(str(protein_id_arg))
        elif isinstance(protein_id_arg, list):
            for protein_id_item in protein_id_arg:
                protein_id_list.append(str(protein_id_item))
        else:
            for protein_id_item in protein_id_arg:
                protein_id_list.append(protein_id_item)

    urls = []
    for protein_id in protein_id_list:
        protein_id_str = str(protein_id)
        plugin = f"protein/{namespace}/{protein_id_str}/{operation_specification}/JSON"
        url = f"https://pubchem.ncbi.nlm.nih.gov/rest/pug/{plugin}"
        urls.append(url)

    return urls

def protein_accession_to_summary(*protein_accessions):
    # Namespace: accession, Operation: summary
    return protein_domain_operation('accession', 'summary', *protein_accessions)

def protein_accession_to_aids(*protein_accessions):
    # Namespace: accession, Operation: aids
    return protein_domain_operation('accession', 'aids', *protein_accessions)

def protein_accession_to_concise(*protein_accessions):
    # Namespace: accession, Operation: concise
    return protein_domain_operation('accession', 'concise', *protein_accessions)

def protein_accession_to_pwaccs(*protein_accessions):
    # Namespace: accession, Operation: pwaccs
    return protein_domain_operation('accession', 'pwaccs', *protein_accessions)

def protein_gi_to_summary(*protein_gis):
    # Namespace: gi, Operation: summary
    return protein_domain_operation('gi', 'summary', *protein_gis)

def protein_gi_to_aids(*protein_gis):
    # Namespace: gi, Operation: aids
    return protein_domain_operation('gi', 'aids', *protein_gis)

def protein_gi_to_concise(*protein_gis):
    # Namespace: gi, Operation: concise
    return protein_domain_operation('gi', 'concise', *protein_gis)

def protein_gi_to_pwaccs(*protein_gis):
    # Namespace: gi, Operation: pwaccs
    return protein_domain_operation('gi', 'pwaccs', *protein_gis)

def protein_synonym_to_summary(*protein_synonyms):
    # Namespace: synonym, Operation: summary
    return protein_domain_operation('synonym', 'summary', *protein_synonyms)

def protein_synonym_to_aids(*protein_synonyms):
    # Namespace: synonym, Operation: aids
    return protein_domain_operation('synonym', 'aids', *protein_synonyms)

def protein_synonym_to_concise(*protein_synonyms):
    # Namespace: synonym, Operation: concise
    return protein_domain_operation('synonym', 'concise', *protein_synonyms)

def protein_synonym_to_pwaccs(*protein_synonyms):
    # Namespace: synonym, Operation: pwaccs
    return protein_domain_operation('synonym', 'pwaccs', *protein_synonyms)

"""# **taxonomy**"""

def taxonomy_operation(namespace, operation_specification, *tax_ids):
    """
    Perform a specified operation on taxonomy.

    :param namespace: Taxonomy namespace (e.g., 'taxid', 'synonym').
    :param operation_specification: Operation specification (e.g., 'summary', 'aids').
    :param tax_ids: Variable number of taxonomy IDs.
    :return: List of PubChem URLs.
    """
    tax_id_list = []
    for tax_id_arg in tax_ids:
        if isinstance(tax_id_arg, str):
            tax_id_list.append(str(tax_id_arg))
        elif isinstance(tax_id_arg, list):
            for tax_id_item in tax_id_arg:
                tax_id_list.append(str(tax_id_item))
        else:
            for tax_id_item in tax_id_arg:
                tax_id_list.append(tax_id_item)

    urls = []
    for tax_id in tax_id_list:
        tax_id_str = str(tax_id)
        plugin = f"taxonomy/{namespace}/{tax_id_str}/{operation_specification}/JSON"
        url = f"https://pubchem.ncbi.nlm.nih.gov/rest/pug/{plugin}"
        urls.append(url)

    return urls

def taxonomy_taxid_to_summary(*tax_ids):
    return taxonomy_operation('taxid', 'summary', *tax_ids)

def taxonomy_taxid_to_aids(*tax_ids):
    return taxonomy_operation('taxid', 'aids', *tax_ids)

def taxonomy_synonym_to_summary(*synonyms):
    return taxonomy_operation('synonym', 'summary', *synonyms)

def taxonomy_synonym_to_aids(*synonyms):
    return taxonomy_operation('synonym', 'aids', *synonyms)

"""# **cell**"""

def cell_operation(namespace, operation_specification, *cell_ids):
    """
    Perform a specified operation on cell.

    :param namespace: Cell namespace (e.g., 'cellacc', 'synonym').
    :param operation_specification: Operation specification (e.g., 'summary', 'cellacc').
    :param cell_ids: Variable number of cell IDs or synonyms.
    :return: List of PubChem URLs.
    """
    cell_id_list = []
    for cell_id_arg in cell_ids:
        if isinstance(cell_id_arg, str):
            cell_id_list.append(str(cell_id_arg))
        elif isinstance(cell_id_arg, list):
            for cell_id_item in cell_id_arg:
                cell_id_list.append(str(cell_id_item))
        else:
            for cell_id_item in cell_id_arg:
                cell_id_list.append(cell_id_item)

    urls = []
    for cell_id in cell_id_list:
        cell_id_str = str(cell_id)
        plugin = f"cell/{namespace}/{cell_id_str}/{operation_specification}/JSON"
        url = f"https://pubchem.ncbi.nlm.nih.gov/rest/pug/{plugin}"
        urls.append(url)

    return urls

def cell_cellacc_to_summary(*cell_ids):
    return cell_operation('cellacc', 'summary', *cell_ids)

def cell_cellacc_to_cellacc(*cell_ids):
    return cell_operation('cellacc', 'cellacc', *cell_ids)

def cell_synonym_to_summary(*synonyms):
    return cell_operation('synonym', 'summary', *synonyms)

def cell_synonym_to_cellacc(*synonyms):
    return cell_operation('synonym', 'cellacc', *synonyms)

"""# **Other functions**"""

import requests

def get_text_from_url(url):
    response = requests.get(url)
    return response.text

def output_to_list(text):
    """
    Converts the output text to a list of numerical values.

    Args:
    - text (str): Input text containing numerical values.

    Returns:
    - List of numerical values extracted from the text.
    """
    return [num for num in text.split() if num.isdigit()]